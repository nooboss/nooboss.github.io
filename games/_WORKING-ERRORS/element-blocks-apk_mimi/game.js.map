{"version":3,"sources":["src/enum/LayoutType.ts","src/scale/CustomScaleManager.ts","src/utils/RenderUtils.ts","src/Settings.ts","src/App.ts","src/achievements/AchievementsManager.ts","src/api/APIUtils.ts","src/api/Analytics.ts","src/background/BackgroundManager.ts","src/enum/AchievementType.ts","src/enum/BlockColor.ts","src/enum/CellModelState.ts","src/enum/FigureState.ts","src/enum/InscriptionLevel.ts","src/enum/PowerupType.ts","src/enum/WindowHeadingBackplateType.ts","src/fx/BestScoreReachedEffectEmitter.ts","src/fx/ExplodingEffectEmitter.ts","src/fx/FlyingParticlesEmitter.ts","src/fx/InscriptionEffect.ts","src/fx/StarPickingUpEffect.ts","src/fx/block/BlockStarredView.ts","src/fx/explosion/ExplosionEffect.ts","src/fx/lightning/LightningEffect.ts","src/fx/scores/ScoresEffect.ts","src/gameplay/effects/BlockDestroyingEffect.ts","src/gameplay/entities/Block.ts","src/gameplay/entities/Board.ts","src/gameplay/entities/Cell.ts","src/gameplay/entities/Figure.ts","src/gameplay/managers/AbstractManager.ts","src/gameplay/managers/BoardManager.ts","src/gameplay/managers/DataManager.ts","src/gameplay/managers/EventManager.ts","src/gameplay/managers/FigureManager.ts","src/gameplay/managers/GameStateManager.ts","src/gameplay/managers/ServiceManager.ts","src/gameplay/managers/TutorialManager.ts","src/gameplay/managers/UIManager.ts","src/gameplay/model/BoardModel.ts","src/gameplay/model/CellModel.ts","src/gameplay/model/FigureModel.ts","src/gameplay/services/AbstractService.ts","src/gameplay/services/FigureService.ts","game.js","src/gameplay/services/InscriptionsService.ts","src/gameplay/services/LayoutService.ts","src/gameplay/services/StarsService.ts","src/gameplay/view/FigureView.ts","src/scores/PowerupManager.ts","src/scores/ScoreManager.ts","src/scores/StarsManager.ts","src/sound/SoundController.ts","src/states/AutoResizeableState.ts","src/states/Boot.ts","src/states/Level.ts","src/states/Preloader.ts","src/text/BitmapTextField.ts","src/transition/TransitionScreen.ts","src/ui/achievements/AchievementInformer.ts","src/ui/achievements/AchievementPanel.ts","src/ui/achievements/ButtonClaimReward.ts","src/ui/buttons/ButtonAchievements.ts","src/ui/buttons/ButtonCloseWindow.ts","src/ui/buttons/ButtonGetStars.ts","src/ui/counter/AbstractResultsCounter.ts","src/ui/counter/AbstractUICounter.ts","src/ui/counter/DoubleStarsButton.ts","src/ui/counter/ScoreCounter.ts","src/ui/counter/ShopStarsCounter.ts","src/ui/counter/StarsCounter.ts","src/ui/multiplier/MultiplierBar.ts","src/ui/multiplier/ResultsMultiplierBar.ts","src/ui/powerup/AbstractPowerup.ts","src/ui/powerup/BombPowerup.ts","src/ui/powerup/LightningPowerup.ts","src/ui/powerup/PowerupContainer.ts","src/ui/publisher/PublisherLogo.ts","src/ui/results/NewRecordEffect.ts","src/ui/results/ResultsScoresPanel.ts","src/ui/results/ResultsStarsPanel.ts","src/ui/revive/ReviveCountdown.ts","src/ui/scrollbars/AbstractUIScrollbar.ts","src/ui/scrollbars/MusicControlScrollbar.ts","src/ui/scrollbars/SFXControlScrollbar.ts","src/ui/shop/ShopItem.ts","src/ui/window/WindowHeading.ts","src/utils/ArrayUtils.ts","src/utils/BitmapTextFactory.ts","src/utils/ButtonUtils.ts","src/utils/ColorUtils.ts","src/utils/LocalStorageController.ts","src/utils/LocalizationManager.ts","src/utils/TextUtils.ts","src/windows/abstract/AbstractWindow.ts","src/windows/abstract/DefaultWindow.ts","src/windows/abstract/CloseableWindow.ts","src/windows/WindowAchievements.ts","src/windows/WindowManager.ts","src/windows/WindowResults.ts","src/windows/WindowRevive.ts","src/windows/WindowSettings.ts","src/windows/WindowShop.ts"],"names":["BlockPuzzle","LayoutType","CustomScaleManager","width","height","WIDTH","HEIGHT","screenRatio","getScreenRatio","PORTRAIT_RATIO","LAYOUT","PORTRAIT","SCALE_X","SCALE_Y","ORIGINAL_WIDTH","UPSCALE_FACTOR","LANDSCAPE_RATIO","LANDSCAPE","App","instance","device","desktop","Math","pow","ORIGINAL_RATIO","ORIGINAL_HEIGHT","SQUARED","scale","scaleMode","Phaser","ScaleManager","RESIZE","state","getCurrentState","resize","BackgroundManager","WindowManager","TransitionScreen","getLayout","Settings","USE_HIGH_RESOLUTION_SCALING","USER_SCALE","min","pixelRatio","PIXEL_RATIO_MAX_THRESHOLD","RenderUtils","isIE","window","navigator","userAgent","indexOf","isFirefox","toLowerCase","isIPhone","CANVAS","AUTO","DEFAULT_FONT_FAMILY","WINDOW_BACKGROUND_ALPHA","REVIVE_WINDOW_TIMER","RESULTS_WINDOW_TIMER","RESULTS_WINDOW_TIMER_WITHOUT_REVIVE","PRELOADER_ATLAS","GAME_ATLAS","ANIMATION_ATLAS","BOARD_ROWS","BOARD_COLS","CELL_WIDTH","CELL_HEIGHT","FIGURE_VIEW_DRAGGING_DELTA","FIGURE_VIEW_SPACING","DEFAULT_FIGURE_SCALE","DRAGGING_FIGURE_SCALE","FINAL_FIGURE_SCALE","FIGURE_APPEARING_DURATION","FIGURE_APPEARING_DELAY","FIGURE_RETURNING_SPEED","FIGURE_PICK_UP_TWEEN_DURATION","FIGURE_DISPOSING_TWEEN_DURATION","NOT_APPLICABLE_FIGURE_APLHA","BLOCK_DESTROY_ANIMATION_DELAY","BLOCK_DISAPPEARING_DURATION","PICK_RANDOM_EXPLOSION_STARTING_POINT","SET_THE_SAME_EXPLOSION_COLOR_FOR_ALL_THE_EXPLODING_CELLS","STAR_SHINING_TWEEN_DURATION","STARRED_BLOCK_APPEARING_TWEEN_DURATION","BLOCK_DEACTIVATION_TWEEN_DURATION","BLOCK_ACTIVATION_TWEEN_DURATION","DIFFICULTY_FACTOR","difficulty_level","POWERUP_USAGE_COUNTDOWN_WHEN_NO_MOVES_LEFT","BOMB_PRICE","bomb_powerup_basic_price","BOMB_PRICE_STEP","bomb_powerup_price_step","LIGHTNING_PRICE","lightning_powerup_basic_price","LIGHTNING_PRICE_STEP","lightning_powerup_price_step","POWERUP_HIGHLIGHTING_ALPHA","POWERUP_DRAGGING_DELTA","LIGHTING_DELAY_BETWEEN_STRIKES","LIGHTING_MIN_TARGETS","LIGHTING_MAX_TARGETS","REVIVE_TIMER_DURATION","BASIC_LINE_DESTROYING_REWARD","MULTIPLIER_MILESTONES","GENERATE_MAX_FIGURES_PER_ITERATION","GENERATE_MAX_POSITIONS_FOR_EACH_FIGURE","RESULTING_FIGURE_RANDOM_COMPRESSION_FACTOR","MISTAKE_PROBABILITY_BASIC_STEP","MISTAKE_PROBABILITY_STEP_SPEED","MISTAKE_MAX_PROBABILITY","MISTAKE_IMMUNITY_MIN_MOVES","MISTAKE_IMMUNITY_MAX_MOVES","SKIP_STARS_GENERATION_FOR_FIRST_X_MOVES","BASIC_STAR_GENERATION_PROBABILITY","BASIC_STAR_GENERATION_PROBABILITY_STEP","ADDITIONAL_SECOND_STAR_GENERATION_PROBABILITY","ADDITIONAL_STAR_GENERATION_PROBABILITY_FOR_DESTROYING_MULTIPLE_LINES","MAX_STAR_GENERATING_PROBABILITY","STAR_GENERATION_DELAY","MAX_STARS_ON_BOARD_SIMULTANEOUSLY","RESULTS_DOUBLE_STARS_REWARD","results_watch_video_reward","GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP","GET_STARS_BUTTON_COOLDOWN","get_stars_button_cooldown","GET_STARS_BUTTON_ENABLED","GET_STARS_BUTTON_REWARD_STARS_AMOUNT","get_stars_button_basic_reward","GET_STARS_BUTTON_REWARD_STARS_AMOUNT_STEP","get_stars_button_reward_step","ACHIEVEMENT_INFORMER_VISIBILITY_DURATION","TUTORIAL_COMPLETED","GAME_VERSION","ENABLE_API","RELEASE_BUILD","MUSIC_ENABLED_BY_DEFAULT","LOCAL_STORAGE_KEY","gameConfig","add","Boot","Preloader","Level","start","famobi","moreGamesLink","SoundController","pauseAudio","paused","console","log","force","isPageVisible","adIsShowing","resumeAudio","Game","renderer","detectRenderMode","transparent","enableDebug","game","pauseGame","unpauseGame","hidden","visibilityChange","document","handleVisibilityChange","addEventListener","AchievementsManager","onAchievementCompleted","Signal","achievementModels","key","AchievementType","TOTAL_SCORES","name","currentValue","requiredValues","rewards","achieved","rewardClaimed","TOTAL_STARS","TOTAL_LEVEL_UPS","TOTAL_GREATS","BOMB_EXPLOSIONS","LINES_DESTROYED","BLOCKS_PLACED","FIRE_BLOCKS_DESTROYED","BEST_SCORE_REACHED","states","forEach","model","getAchievementModel","slice","map","LocalStorageController","save","find","medal","value","prevLevel","getAchievementLevel","currentLevel","dispatch","playAchievementClaimedSound","saveMedalsState","rewardAvailable","_instance","APIUtils","enable_rewarded_videos","isRewardedVideoFeatureEnabled","hasRewardedAd","callback","rewardedAd","timeout","showAd","setTimeout","Analytics","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","data","JSON","parse","response","uid","splitTests","initialized","USER_ID","open","setRequestHeader","send","stringify","languages","length","language","score","stars","revives","powerups","params","undefined","containerWidth","containerHeight","leafs","isInitialized","leafAnchors","Point","stage","addChildAt","container","make","group","topLeftContainer","topRightContainer","bottomLeftContainer","bottomRightContainer","createLeaf","parentContainer","leafID","x","y","angle","scaleX","scaleY","leaf","sprite","anchor","set","angleDispersion","rnd","realInRange","sign","duration","integerInRange","tweens","create","to","Easing","Sinusoidal","InOut","push","pendingDelete","buildChildren","position","windowBounds","WindowBounds","copyFrom","getPosition","alpha","Group","BlockColor","CellModelState","FigureState","InscriptionLevel","PowerupType","WindowHeadingBackplateType","BestScoreReachedEffectEmitter","maxParticles","minParticleScale","maxParticleScale","makeParticles","gravity","setYSpeed","autoAlpha","setAlpha","Quadratic","In","flow","Particles","Arcade","Emitter","ExplodingEffectEmitter","targetPosition","particlefrequency","setTo","setXSpeed","minRotation","maxRotation","Quintic","autoScale","setScale","time","events","destroy","FlyingParticlesEmitter","level","points","startPosition","particleSpeed","distance","tween","Linear","None","onComplete","addPoints","on","InscriptionEffect","inscriptionLevel","camera","shake","max","Out","amplifiedBackOut","playInscriptionSound","GREAT","addValue","k","s","StarPickingUpEffect","block","particleFrequency","parentGroup","uiManager","starsCounter","startingPosition","toLocal","star","PIXI","clamp","addAt","Back","finalizeTween","starSprite","StarsManager","pickupStars","BlockStarredView","color","shining","shadow","removeFrom","frameName","initialParent","targetBlock","initialParentPosition","parent","playStarAppearSound","startShining","delay","ExplosionEffect","explosionA","random","animations","play","explosionB","playExplosionSound","LightningEffect","initialCell","targetCell","initialCellPosition","clone","targetCellPosition","update","blinkAnimation","Animation","generateFrameNames","LIGHTING_FRAMES","endAnimation","DISAPPEARING_FRAMES","visible","startAnimations","playLightningSound","FPS","ScoreManager","addScores","destroyBlock","rotation","angleBetween","PI","Sprite","TOTAL_FRAMES","ScoresEffect","scores","targetScale","multiplierBar","boardManager","getBoard","cellsContainer","buildContent","animateContentA","scoresText","BitmapTextField","appearingTween","disappearingTween","Cubic","onStart","chain","BlockDestroyingEffect","anim","Block","cellModel","starred","active","posX","posY","glow","blockGrayscale","setColor","blockStarred","startAppearingTween","effectsContainer","hasStar","temporalColor","setChildIndex","children","deltaY","targetY","targetX","floor","fallingDistanceY","fallingDuration","toString","Exponential","RED","pickupStar","Board","rows","cols","numRows","numCols","buildCells","alignCells","animateAppearing","cells","fieldCoverSprite","image","blocksContainer","explosionsContainer","i","row","column","Cell","cell","multiply","j","getCellAt","eventManager","onBoardCreated","point","closestCell","getCells","abs","filter","isEmpty","isActive","playReviveSound","ArrayUtils","shuffle","getNotEmptyCells","index","getBlock","activate","playLoseSound","deactivate","deactivateBeforeDisposing","disposeBlock","figure","resetView","targetCells","getTargetCellsFor","showHighlighting","getModel","setCellStateAt","CELL_NEW","cellsToClear","findCellsToClear","cellPos","resetAlphaHighlighting","applyAlphaHighlighting","placeBlock","getView","getBlocks","clearFilledRowsAndColumns","baseBlock","getFirstBlock","figureLocalPosition","targetLocalPosition","baseCell","findClosestCell","localCells","every","modelCell","localPoint","reduce","sum","numLines","isRowFilled","uniteArrays","getRow","isColumnFilled","getColumn","dataManager","dispatchLinesDestroyed","numCells","explosionStartingPosition","findExplosionStartingPosition","scoresEffectPosition","serviceManager","inscriptionsService","displayScoresEffect","playNextLineDestroyingSound","toGlobal","world","rowIndex","columnIndex","colIndex","explodingCells","pickRandom","targetCellsToExplode","getRandomItem","minX","Number","MAX_SAFE_INTEGER","maxX","minY","maxY","BoardModel","parseFromBoard","board","forceHighlighting","cellSprite","highlightSprite","anotherCell","hasBlock","dispose","blockLocalPosition","Circular","animateDestroying","forced","setTemporalColor","Figure","figureManager","figureModel","barIndex","figureWidth","figureHeight","applicable","figureState","INACTIVE","getWidth","getHeight","figureView","FigureView","inputHandler","inputEnabled","onInputDown","handleInputDown","onInputUp","handleInputUp","playAppearingTween","DRAGGING","layoutService","getFigureDraggingDelta","tweenScale","getScale","enableGlow","playFigurePickupSound","PLACED","disableGlow","playFigurePlaceSound","playFigureFailSound","getFigureDisposingTweenParams","isReady","handleFigureInputDown","handleFigureInputUp","remove","AbstractManager","resizePortrait","resizeSquared","resizeLandscape","BoardManager","fillAvailableSpace","includePadding","boardWidth","boardHeight","Rectangle","targetCoordinateSpace","originalBounds","getOriginalBounds","topLeft","bottomRight","boardBoundsRect","availableBounds","getAvailableBoardBounds","DataManager","numMoves","initData","onMoveFinished","destroyedLines","cellPositions","onLinesDestroyed","getMaxMistakeProbability","EventManager","buildSignals","onRoundFinished","onReviveApplied","onReviveFailed","onPowerupUsageTimerExceeded","onPowerupApplied","FigureManager","figures","activeFigure","activeFigurePointerDelta","currentMistakeStep","currentMistakeProbability","mistakeImmunityCounter","initialFigureScale","initialFigurePositions","figureService","figuresContainer","createFigures","input","activePointer","enableMistakes","generatedFigureModels","getNextFiguresSet","getMistakeProbabilityStepSpeed","getMaxMistakeProbabilityStep","roundTo","getRandomFigureModel","addFigure","getRandomColor","alignFigures","getPointerLocalPosition","subtract","dispatchFigureIsBeingDragged","getAvailableFiguresPanelBounds","targetCellWidth","figureScale","bounds","getBounds","graphics","beginFill","drawRect","endFill","getFigureInitialPosition","getFiguresLeft","sort","a","b","applicableFiguresAmount","isApplicable","hasAvailableSpaceForFigure","setApplicable","gameStateManager","isGameActive","tutorialManager","getActiveFigure","pickUp","placeFigure","putDown","removeFigure","moveFinished","returnDuration","release","GameStateManager","started","finished","reviveAvailable","reviveUsed","reviveTimer","resultsTimer","dispatchBoardCreated","dispatchMoveFinished","dispatchPowerupUsageTimerExceeded","dispatchPowerupApplied","reviveApplied","reviveFailed","showRevive","finishLevel","getCurrentScores","getLastRoundStars","powerupContainer","usedPowerups","showResults","isNextMovePossible","PowerupManager","hasBoughtPowerups","startCountdown","finishGame","hasRewardedVideo","levelFinished","disposeBlocks","updateLevelData","regenerateFigures","ServiceManager","initServices","LayoutService","FigureService","starsService","StarsService","InscriptionsService","TutorialManager","isManualTutorialActive","handleBoardCreated","handleFigurePlaced","handleRoundFinished","startHandAnimation","tutorialHand","currentFigure","getFigures","f","figurePosition","getRandomPositionForFigure","finishTutorial","targetCellLocalPosition","preparingTween","movingTween","getCenterX","getCenterY","finishingTween","returningTween","trackEvent","UIManager","buttonAchievements","ButtonAchievements","buttonSettings","ButtonUtils","createSimpleButton","settingsClicked","topContainer","scoreCounter","ScoreCounter","StarsCounter","MultiplierBar","PowerupContainer","getAvailableUIContainerBounds","left","top","right","getLocalBounds","down","hidePowerups","trackScreen","SCREEN_SETTINGS","showSettings","cleanedCells","CELL_EMPTY","CELL_BUSY","another","col","preset","couldBePlaced","getCellStateAt","cellStatus","colIdx","item","rowIdx","getRowModel","getColumnModel","cellState","CellModel","FigureModel","centerX","centerY","normalizeCells","prev","AbstractService","arguments","prevColor","figurePresets","tutorialPlacements","iterations","getCopy","Object","keys","boardModel","findFigurePositions","positions","placement","setPosition","results","findFigurePositionsRecursive","elem","result","placedFigures","resultsArray","possiblePlaces","findAppropriateFigurePresetsForBoard","place","figurePositions","concat","figurePreset","boardCopy","shuffleResults","possibleCases","presets","limitPositionsCount","px","py","accumulator","current","displayInscription","inscriptionPower","AWESOME","GOOD","EXCELLENT","insription","getMultiplier","figureBarIndex","isPortrait","isSquared","isLandscape","getBoardBounds","availableHeight","bottom","currentStarGenerationProbability","getNumStarsOnTheBoard","generateRandomStar","availableCells","addStar","viewDeltaX","viewDeltaY","createBlocks","blocks","keepOriginalPosition","scaleMultiplier","noScale","onPowerupBought","powerupStates","Map","BOMB","LIGHTNING","powerupPrices","powerupPriceSteps","powerupType","get","setStarsAmount","getStarsAmount","getPrice","hasAvailablePowerups","currentMultiplier","maxScores","prevMaxScores","currentScore","lastRoundScores","roundNumber","onScoreChanges","onMultiplierChanges","calculateMultiplier","getMultiplierProgress","setValue","currentScores","removeAll","numStars","lastRoundStars","onStarAdded","onStarsAmountChanged","amount","silent","currentMusicVolume","currentSFXVolume","currentBlockDestroyingSoundIndex","hadBeenMutedBeforePauseTriggered","debouncedSoundsTimestamps","melodyNames","soundNames","sound","usingWebAudio","mainTheme","mute","querySelector","context","resume","then","isPlaying","volume","playSound","loop","countingSound","stopCountingSound","stop","interval","currentTime","Date","getTime","lastTimestamp","fadeTo","AutoResizeableState","existing","child","pointer","State","rx","ry","dx","dy","getScaleMode","fullScreenScaleMode","pageAlignHorizontally","pageAlignVertically","android","mouse","enabled","mspointer","setResizeCallback","resizeCallback","onSizeChange","sizeChanged","disableVisibilityChange","initUser","addSuspendedContextRestoreHandler","load","atlasJSONArray","json","maxPointers","canvas","oncontextmenu","e","preventDefault","LocalizationManager","init","cache","getJSON","scaleManager","parentBounds","innerWidth","getPixelRatio","innerHeight","setGameSize","setUserScale","w","h","windowDimensions","reset","startRound","resetPrices","startLevel","SCREEN_LEVEL","SCREEN_TUTORIAL","createChildren","addChild","removeListeners","preloadContent","onStateChange","handleStateChanged","preloadContainer","backScreen","logo","preloadPad","preloadBar","setPreloadSprite","versionText","TextUtils","getText","preloadText","onFileComplete","onLoadComplete","onLoadingComplete","getSoundNames","soundName","audio","getMoreGamesButtonImage","spritesheet","progress","cacheKey","success","totalLoaded","totalFiles","changeText","loadSave","isDecodingSupported","setDecodedCallback","getSFXNames","onSoundsDecoded","startMusic","changeState","textValue","atlasKey","styleKey","textScale","pivotX","pivotY","letterSpacing","letterFrame","tintValue","valueHolder","targetValue","internalScale","BitmapTextFactory","getLetter","charAt","warn","currentWidth","currentHeight","tint","initialValue","onUpdateCallback","preffix","playCountingSound","countingSoundStates","textTween","startCountingSound","background","newState","targetStateName","show","close","hideAll","proceedClosing","getChildIndex","onTransitionFinished","hide","removeChild","AchievementInformer","visibilityTimer","informerPad","achievementSprite","badgesSprite","achievementModel","elapsedMS","AchievementPanel","windowAcheivements","achievementKey","currentReward","windowAchievements","displayedValue","displayTargetValue","currentProgress","buttonClaimReward","progressBarContainer","badges","icon","progressBarMask","progressBar","maxText","progressText","setText","updateView","progressPad","mask","ButtonClaimReward","claimRewardClicked","panel","reward","initialScale","actionHandler","actionHandlerContext","achievementPanel","backplate","onInputOver","mouseOverHandler","onInputOut","mouseOutHandler","mouseDownHandler","playRewardClaimedSound","rewardText","button","achievementsClicked","exclamationMark","hasAvailableRewards","achievementInformer","handleAchievementCompleted","showAchievements","ButtonCloseWindow","parentWindow","windowManager","ButtonGetStars","starsAmount","getStarsClicked","numStarsText","showRewardedVideo","giveReward","AbstractResultsCounter","iconFrameName","buildIcon","padLeft","padRight","textFieldLeft","textFieldRight","leftValueInitial","leftValueTarget","rightValueInitial","rightValueTarget","leftValuePrefix","rightValuePrefix","textTweenDelay","tweenTextDuration","resetTweens","tweenTexts","tweenTextAdvanced","AbstractUICounter","DoubleStarsButton","pad","textField","buttonContainer","buttonDoubleStars","doubleStarsClicked","collapse","addBonusStars","lastScoreValue","lastHighscoreValue","getMaxScores","highscoreGroup","highscoreIcon","highscoreText","dispatchScoreChanged","tweenText","tweenIcon","currentHighscores","textFieldWidth","ShopStarsCounter","windowShop","contentContainer","errorSmile","updateStarsAmount","Elastic","buttonGetStars","dispatchStarAdded","playStarReceivedSound","playStarIncreasingTween","padHeight","storedMultiplierValue","storedProgressValue","handleMultiplierChange","padGrayscale","textFieldGrayscale","padGold","padWhite","textFieldGold","progressMask","multiplier","playlevelUpSound","totalDuration","fillingDuration","updateMultiplierTexts","ResultsMultiplierBar","AbstractPowerup","dragging","available","countdownActive","startAngle","endAngle","currentStep","iconDelta","isBought","addListeners","countdownBar","countdownMask","clear","arc","degToRad","mark","isAvailable","handlePowerupBought","handlePowerupApplied","pixelPerfectClick","pixelPerfectAlpha","displayShop","getPowerupDraggingDelta","pauseCountdowns","currentCell","getCurrentCell","canBeApplied","applyPowerup","dispatchPowerupIsBeingDragged","resumeCountdowns","hasOpenedWindows","hasDraggingPowerups","countdownFinished","getTargetCells","resetCountdown","showTutorialHand","hideTutorialHand","showShop","boardLocalPosition","getCellUnderPoint","updatePowerups","BombPowerup","mainCell","some","usePowerup","updateFiguresApplicability","LightningPowerup","delayedStart","currentPortion","nextPortion","getNextPortionOfCells","nextCell","splice","cellsCount","lightningPowerup","bombPowerup","pauseCountdown","resumeCountdown","powerupContainerBounds","getAvailablePowerupsContainerBounds","PublisherLogo","publisherLogoClicked","navigateToSponsor","NewRecordEffect","resultsWindow","stamp","playStampTween","playStampSound","ResultsScoresPanel","bestScoresReached","getPrevMaxScores","ResultsStarsPanel","ReviveCountdown","windowRevive","circle","circleMask","heart","timeLeftText","secondsLeft","ceil","convertMSToMSS","chokeMusicVolume","stopCountdown","startHeartbeatAnimation","heartbeatTween","repeatAll","onLoop","playHeartBeatSound","restoreMusicVolume","AbstractUIScrollbar","prevValue","sliderDx","initValue","buildScrollerContainer","buildPad","buildBar","buildSlider","buildShadow","addIconListeners","scrollerContainer","bar","barMask","slider","hitArea","allowVerticalDrag","enableDrag","onDragUpdate","handleSliderDrag","onDragStop","handleIconClicked","skipAnalytics","updateBarMask","dispatchValueChanged","MusicControlScrollbar","setInitialValue","getMusicVolume","setMusicVolume","famobi_analytics","EVENT_VOLUMECHANGE","bgmVolume","sfxVolume","getSFXVolume","SFXControlScrollbar","setSFXVolume","ShopItem","buyClicked","priceStar","priceText","buttonBuy","boughtMark","playBuyingSound","buy","powerupBought","displayError","ColorUtils","bounceTint","c","playErrorSound","WindowHeading","backplateType","plate","playPanelMovementSound","playPanelUpMovementSound","sourceArray","targetArray","targetElem","array","compressionFactor","randomIndex","textKey","letterKey","spriteName","atlasName","callbackContext","Button","useHandCursor","startScale","playClickSound","caller","spriteToTween","startColor","endColor","colorBlend","step","Color","interpolateColor","Bounce","isLocalStorageSupported","currentLocalStorage","localStorage","getAchievementsStates","setItem","STORAGE_NAME","checkLocalStorageSupported","getItem","finalizeLoading","isTutorialCompleted","setMaxScores","getNumStars","loadAchievementsState","setInitialState","isBombBought","isLightningBought","jsonFile","texts","text","fontSize","fontFamily","fontWidth","Text","font","fill","align","family","BitmapText","shadowColor","shadowX","shadowY","anchorX","anchorY","setShadow","strokeColor","strokeThinkness","stroke","strokeThickness","milliseconds","seconds","minutes","restSeconds","hours","AbstractWindow","backgroundAlpha","buildBackground","inputEnableChildren","resizeContent","args","DefaultWindow","headingBackplateType","headingIconFrameName","buildWindowBase","buildAdditionalElements","windowHeading","CloseableWindow","buttonClose","closeClicked","onClosedCallback","animateDisappearing","onCloseClicked","WindowAchievements","SILVER","handleStarAdded","itemsContainer","achievementPanels","isNaN","SCREEN_OTHER","updateAchievementPanels","from","totalStarsAchievement","settings","WindowSettings","WindowResults","revive","WindowRevive","shop","WindowShop","achievements","setPowerupType","GOLD","controlsContainer","scoresPanel","starsPanel","doubleStarsButton","recordEffect","buttonRestart","restartClicked","scoresTweenDuration","starsTweenDuration","bestScoreReached","updateMaxScores","SCREEN_GAMERESULT","Promise","all","levelName","reason","totalScore","showButtons","showPanel","reviveCountdown","buttonWatchVideo","watchVideoClicked","SCREEN_BONUS","reviveSucceed","disappear","sfxControl","musicControl","publisherLogo","restartTutorial","itemsMap","buttonContinue","continueClicked","currentItem","SCREEN_SHOP","updateData"],"mappings":"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","file":"game.js","sourcesContent":["namespace BlockPuzzle {\r\n    export enum LayoutType {\r\n        PORTRAIT = 0,\r\n        SQUARED = 1,\r\n        LANDSCAPE = 2\r\n    }\r\n}","///<reference path=\"../enum/LayoutType.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class CustomScaleManager {\r\n        private static PORTRAIT_RATIO: number = 720 / 960;\r\n        private static LANDSCAPE_RATIO: number = 1366 / 960;\r\n\r\n        public static ORIGINAL_WIDTH: number = 640;\r\n        public static ORIGINAL_HEIGHT: number = 960;\r\n        public static WIDTH: number = 640;\r\n        public static HEIGHT: number = 960;\r\n        public static LAYOUT: LayoutType = LayoutType.PORTRAIT;\r\n        public static SCALE_X: number = 1;\r\n        public static SCALE_Y: number = 1;\r\n        public static UPSCALE_FACTOR: number = 1;\r\n\r\n        public static ORIGINAL_RATIO: number = CustomScaleManager.ORIGINAL_WIDTH / CustomScaleManager.ORIGINAL_HEIGHT;\r\n\r\n        public static update(width: number, height: number) {\r\n            this.WIDTH = width;\r\n            this.HEIGHT = height;\r\n            const screenRatio: number = this.getScreenRatio();\r\n\r\n            if(screenRatio <= this.PORTRAIT_RATIO) {\r\n                /* fully portrait */\r\n                this.LAYOUT = LayoutType.PORTRAIT;\r\n                this.SCALE_X = this.SCALE_Y = width / this.ORIGINAL_WIDTH;\r\n                this.UPSCALE_FACTOR = 1;\r\n            } else if(screenRatio >= this.LANDSCAPE_RATIO) {\r\n                /* fully landscape */\r\n                this.LAYOUT = LayoutType.LANDSCAPE;\r\n                this.UPSCALE_FACTOR = App.instance.device.desktop ? 1 : Math.pow(screenRatio / this.ORIGINAL_RATIO, 0.35);\r\n                this.SCALE_X = this.SCALE_Y = height / this.ORIGINAL_HEIGHT * this.UPSCALE_FACTOR;\r\n            } else {\r\n                /* quite squared */\r\n                this.LAYOUT = LayoutType.SQUARED;\r\n                this.UPSCALE_FACTOR = App.instance.device.desktop ? 1 : Math.pow(screenRatio / this.ORIGINAL_RATIO, 0.55);\r\n                this.SCALE_X = this.SCALE_Y = height / this.ORIGINAL_HEIGHT * this.UPSCALE_FACTOR;\r\n            }\r\n\r\n            if (App.instance.scale.scaleMode != Phaser.ScaleManager.RESIZE) {\r\n                App.instance.state.getCurrentState().resize(App.instance.width, App.instance.height);\r\n            }\r\n\r\n            BackgroundManager.instance.resize();\r\n            WindowManager.instance.resize();\r\n            TransitionScreen.instance.resize();\r\n        }\r\n\r\n        public static getLayout(): LayoutType {\r\n            return this.LAYOUT;\r\n        }\r\n\r\n        public static isLandscape(): boolean {\r\n            return this.getLayout() === LayoutType.LANDSCAPE;\r\n        }\r\n\r\n        public static isPortrait(): boolean {\r\n            return this.getLayout() === LayoutType.PORTRAIT;\r\n        }\r\n\r\n        public static isSquared(): boolean {\r\n            return this.getLayout() === LayoutType.SQUARED;\r\n        }\r\n\r\n        public static getScaleMode(): number {\r\n            return Settings.USE_HIGH_RESOLUTION_SCALING ? Phaser.ScaleManager.USER_SCALE : Phaser.ScaleManager.RESIZE;\r\n        }\r\n\r\n        public static getPixelRatio(): number {\r\n            return App.instance.device.desktop || !Settings.USE_HIGH_RESOLUTION_SCALING ? 1 : Math.min(App.instance.device.pixelRatio, Settings.PIXEL_RATIO_MAX_THRESHOLD);\r\n        }\r\n\r\n        public static getScreenRatio(): number {\r\n            return this.WIDTH / this.HEIGHT;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class RenderUtils {\r\n        public static detectRenderMode():number {\r\n            const isIE:boolean = window.navigator.userAgent.indexOf('MSIE ') > 0 || window.navigator.userAgent.indexOf('Trident/') > 0;\r\n            const isFirefox:boolean = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n            const isIPhone: boolean = window.navigator.userAgent.indexOf('iPhone ') > -1;\r\n            return isIE || isFirefox || isIPhone ? Phaser.CANVAS : Phaser.AUTO;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class Settings {\r\n\r\n        //SCALING\r\n        public static USE_HIGH_RESOLUTION_SCALING: boolean = true;\r\n        public static PIXEL_RATIO_MAX_THRESHOLD: number = 3;\r\n\r\n        //FONTS\r\n        public static DEFAULT_FONT_FAMILY: string = 'Kanit';\r\n\r\n        //WINDOWS\r\n        public static WINDOW_BACKGROUND_ALPHA: number = 0.975;\r\n        public static REVIVE_WINDOW_TIMER: number = 60;\r\n        public static RESULTS_WINDOW_TIMER: number = 85;\r\n        public static RESULTS_WINDOW_TIMER_WITHOUT_REVIVE: number = 110;\r\n\r\n        //ATLASES\r\n        public static PRELOADER_ATLAS: string = 'preloader';\r\n        public static GAME_ATLAS: string = 'assets';\r\n        public static ANIMATION_ATLAS: string = 'animations';\r\n\r\n        //BOARD\r\n        public static BOARD_ROWS: number = 8;\r\n        public static BOARD_COLS: number = 8;\r\n        public static CELL_WIDTH: number = 75;\r\n        public static CELL_HEIGHT: number = Settings.CELL_WIDTH;\r\n        public static FIGURE_VIEW_DRAGGING_DELTA: number = -160;\r\n        public static FIGURE_VIEW_SPACING: number = 5;\r\n\r\n        //FIGURES\r\n        public static DEFAULT_FIGURE_SCALE: number = 0.4;\r\n        public static DRAGGING_FIGURE_SCALE: number = 0.88;\r\n        public static FINAL_FIGURE_SCALE: number = 1.0;\r\n\r\n        public static FIGURE_APPEARING_DURATION: number = 350;\r\n        public static FIGURE_APPEARING_DELAY: number = 120;\r\n        public static FIGURE_RETURNING_SPEED: number = 2000;\r\n        public static FIGURE_PICK_UP_TWEEN_DURATION: number = 70;\r\n        public static FIGURE_DISPOSING_TWEEN_DURATION: number = 250;\r\n        public static NOT_APPLICABLE_FIGURE_APLHA: number = 0.475;\r\n\r\n        //BLOCKS\r\n        public static BLOCK_DESTROY_ANIMATION_DELAY: number = 65;\r\n        public static BLOCK_DISAPPEARING_DURATION: number = 180;\r\n        public static PICK_RANDOM_EXPLOSION_STARTING_POINT: boolean = true;\r\n        public static SET_THE_SAME_EXPLOSION_COLOR_FOR_ALL_THE_EXPLODING_CELLS: boolean = true;\r\n        public static STAR_SHINING_TWEEN_DURATION: number = 1400; //ms\r\n        public static STARRED_BLOCK_APPEARING_TWEEN_DURATION: number = 750; //ms\r\n        public static BLOCK_DEACTIVATION_TWEEN_DURATION: number = 400;\r\n        public static BLOCK_ACTIVATION_TWEEN_DURATION: number = 250;\r\n\r\n        //DIFFICULTY\r\n        public static DIFFICULTY_FACTOR: number = difficulty_level;\r\n\r\n        //POWERUPS\r\n        public static POWERUP_USAGE_COUNTDOWN_WHEN_NO_MOVES_LEFT: number = 6 * 1000; // milliseconds\r\n        public static BOMB_PRICE: number = bomb_powerup_basic_price;\r\n        public static BOMB_PRICE_STEP: number = bomb_powerup_price_step;\r\n        public static LIGHTNING_PRICE: number = lightning_powerup_basic_price;\r\n        public static LIGHTNING_PRICE_STEP: number = lightning_powerup_price_step;\r\n        public static POWERUP_HIGHLIGHTING_ALPHA: number = 0.3;\r\n        public static POWERUP_DRAGGING_DELTA: number = -100;\r\n\r\n        public static LIGHTING_DELAY_BETWEEN_STRIKES: number = 8;\r\n        public static LIGHTING_MIN_TARGETS: number = 3;\r\n        public static LIGHTING_MAX_TARGETS: number = 5;\r\n\r\n        //REVIVE\r\n        public static REVIVE_TIMER_DURATION: number = 10500;\r\n\r\n        //SCORES\r\n        public static BASIC_LINE_DESTROYING_REWARD: number = 10;\r\n\r\n        //SCORES MULTIPLIER\r\n        public static MULTIPLIER_MILESTONES: number[] = [100, 500, 3000, 14400, 72000, 340000, 1500000, 6000000, 20000000, 100000000];\r\n\r\n        //FIGURE GENERATOR\r\n        public static GENERATE_MAX_FIGURES_PER_ITERATION: number = 25;\r\n        public static GENERATE_MAX_POSITIONS_FOR_EACH_FIGURE: number = 1;\r\n        public static RESULTING_FIGURE_RANDOM_COMPRESSION_FACTOR: number = 1.85;\r\n        public static MISTAKE_PROBABILITY_BASIC_STEP: number = 0.025;\r\n        public static MISTAKE_PROBABILITY_STEP_SPEED: number = 0.005;\r\n        public static MISTAKE_MAX_PROBABILITY: number = 0.1;\r\n        public static MISTAKE_IMMUNITY_MIN_MOVES: number = 5;\r\n        public static MISTAKE_IMMUNITY_MAX_MOVES: number = 10;\r\n\r\n        //STARS GENERATOR\r\n        public static SKIP_STARS_GENERATION_FOR_FIRST_X_MOVES: number = 5;\r\n        public static BASIC_STAR_GENERATION_PROBABILITY: number = 0.02;\r\n        public static BASIC_STAR_GENERATION_PROBABILITY_STEP: number = 0.0065;\r\n        public static ADDITIONAL_SECOND_STAR_GENERATION_PROBABILITY: number = 0.01;\r\n        public static ADDITIONAL_STAR_GENERATION_PROBABILITY_FOR_DESTROYING_MULTIPLE_LINES: number = 0.02;\r\n        public static MAX_STAR_GENERATING_PROBABILITY: number = 0.3;\r\n        public static STAR_GENERATION_DELAY: number = 1000;\r\n        public static MAX_STARS_ON_BOARD_SIMULTANEOUSLY: number = 3;\r\n\r\n        //RESULTS REWARD\r\n        public static RESULTS_DOUBLE_STARS_REWARD: number = results_watch_video_reward;\r\n\r\n        //GET STARS BUTTON\r\n        public static GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP: number = 0;\r\n        public static GET_STARS_BUTTON_COOLDOWN: number = get_stars_button_cooldown; // seconds\r\n        public static GET_STARS_BUTTON_ENABLED: boolean = get_stars_button_cooldown > 0;\r\n        public static GET_STARS_BUTTON_REWARD_STARS_AMOUNT: number = get_stars_button_basic_reward; //stars\r\n        public static GET_STARS_BUTTON_REWARD_STARS_AMOUNT_STEP: number = get_stars_button_reward_step; //stars\r\n\r\n        //ACHIEVEMENT_INFORMER\r\n        public static ACHIEVEMENT_INFORMER_VISIBILITY_DURATION: number = 5 * 1000; //milliseconds\r\n\r\n        //TUTORIAL\r\n        public static TUTORIAL_COMPLETED: boolean = false;\r\n\r\n        //SETTINGS\r\n        public static GAME_VERSION: string = \"2\";\r\n        public static ENABLE_API: boolean = true;\r\n        public static RELEASE_BUILD: boolean = true;\r\n        public static MUSIC_ENABLED_BY_DEFAULT: boolean = true;\r\n        public static LOCAL_STORAGE_KEY: string = 'Element_Blocks' + Settings.GAME_VERSION;\r\n    }\r\n}","///<reference path=\"scale/CustomScaleManager.ts\"/>\r\n///<reference path=\"utils/RenderUtils.ts\"/>\r\n///<reference path=\"Settings.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class App extends Phaser.Game {\r\n        public static instance: App;\r\n\r\n        public static gameConfig = {\r\n            width: CustomScaleManager.ORIGINAL_WIDTH,\r\n            height: CustomScaleManager.ORIGINAL_HEIGHT,\r\n            renderer: RenderUtils.detectRenderMode(),\r\n            transparent: true,\r\n            enableDebug: false\r\n        };\r\n\r\n        constructor() {\r\n            super(App.gameConfig);\r\n\r\n            App.instance = this;\r\n\r\n            this.state.add('Boot', Boot, false);\r\n            this.state.add('Preloader', Preloader, false);\r\n            this.state.add('Level', Level, false);\r\n\r\n            this.state.start('Boot');\r\n        }\r\n\r\n        public navigateToSponsor() {\r\n            if(Settings.ENABLE_API) {\r\n                (<any>window).famobi.moreGamesLink();\r\n            }\r\n        }\r\n\r\n        public pauseGame() {\r\n            SoundController.instance.pauseAudio();\r\n            this.paused = true;\r\n            console.log('pausing game...');\r\n        }\r\n\r\n        public unpauseGame(force: boolean = false) {\r\n            if (isPageVisible && (!adIsShowing || force)) {\r\n                this.paused = false;\r\n                SoundController.instance.resumeAudio();\r\n                console.log('resuming game...');\r\n            } else {\r\n                console.log('resuming game is not allowed now because ads are displaying or page isn\\'t visible...');\r\n            }\r\n        }\r\n    }\r\n}\r\nvar game;\r\nvar isPageVisible: boolean = true;\r\nvar adIsShowing: boolean = false;\r\n\r\n//famobi pause/resume requests\r\nwindow['famobi_onPauseRequested'] = function () {\r\n    adIsShowing = true;\r\n    if (game) {\r\n        game.pauseGame();\r\n    }\r\n};\r\n\r\nwindow['famobi_onResumeRequested'] = function () {\r\n    adIsShowing = false;\r\n    if (game) {\r\n        game.unpauseGame();\r\n    }\r\n};\r\n\r\n//visiblity\r\nvar hidden, visibilityChange;\r\nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support\r\n    hidden = \"hidden\";\r\n    visibilityChange = \"visibilitychange\";\r\n} else if (typeof document[\"msHidden\"] !== \"undefined\") {\r\n    hidden = \"msHidden\";\r\n    visibilityChange = \"msvisibilitychange\";\r\n} else if (typeof document[\"webkitHidden\"] !== \"undefined\") {\r\n    hidden = \"webkitHidden\";\r\n    visibilityChange = \"webkitvisibilitychange\";\r\n}\r\n\r\nfunction handleVisibilityChange() {\r\n    if (document[hidden]) {\r\n        isPageVisible = false;\r\n        if (game && !adIsShowing) game.pauseGame();\r\n    } else {\r\n        isPageVisible = true;\r\n        if (game && !adIsShowing) game.unpauseGame();\r\n    }\r\n}\r\n\r\n// Warn if the browser doesn't support addEventListener or the Page Visibility API\r\nif (typeof document.addEventListener === \"undefined\" || typeof document[hidden] === \"undefined\") {\r\n    console.log(\"Browser doesn't support the Page Visibility API.\");\r\n} else {\r\n    // Handle page visibility change\r\n    document.addEventListener(visibilityChange, handleVisibilityChange, false);\r\n}\r\n\r\n","namespace BlockPuzzle {\r\n    export class AchievementsManager {\r\n        private static _instance: AchievementsManager = null;\r\n        public static get instance(): AchievementsManager {\r\n            return AchievementsManager._instance ? AchievementsManager._instance :\r\n                AchievementsManager._instance = new AchievementsManager();\r\n        }\r\n\r\n        private achievementModels: AchievementModel[];\r\n        public onAchievementCompleted: Phaser.Signal;\r\n\r\n        constructor() {\r\n            this.onAchievementCompleted = new Phaser.Signal();\r\n\r\n            this.achievementModels = [\r\n                {\r\n                    key: AchievementType.TOTAL_SCORES,\r\n                    name: 'Total scores reached',\r\n                    currentValue: 0,\r\n                    requiredValues: [35000, 105000, 225000],\r\n                    rewards: [20, 31, 52],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.TOTAL_STARS,\r\n                    name: 'Total stars picked up',\r\n                    currentValue: 0,\r\n                    requiredValues: [50, 180, 365],\r\n                    rewards: [23, 34, 55],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.TOTAL_LEVEL_UPS,\r\n                    name: 'Level-ups collected',\r\n                    currentValue: 0,\r\n                    requiredValues: [25, 75, 150],\r\n                    rewards: [26, 37, 58],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.TOTAL_GREATS,\r\n                    name: 'Great inscriptions appeared',\r\n                    currentValue: 0,\r\n                    requiredValues: [5, 30, 60],\r\n                    rewards: [8, 19, 40],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.BOMB_EXPLOSIONS,\r\n                    name: 'Bomb explosions',\r\n                    currentValue: 0,\r\n                    requiredValues: [5, 20, 75],\r\n                    rewards: [17, 28, 49],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.LINES_DESTROYED,\r\n                    name: 'Destroyed lines',\r\n                    currentValue: 0,\r\n                    requiredValues: [240, 720, 1600],\r\n                    rewards: [14, 25, 46],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.BLOCKS_PLACED,\r\n                    name: 'Blocks placed at the board',\r\n                    currentValue: 0,\r\n                    requiredValues: [1600, 6400, 15000],\r\n                    rewards: [11, 22, 43],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.FIRE_BLOCKS_DESTROYED,\r\n                    name: 'Red blocks destroyed',\r\n                    currentValue: 0,\r\n                    requiredValues: [350, 1050, 2250],\r\n                    rewards: [17, 28, 49],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: AchievementType.BEST_SCORE_REACHED,\r\n                    name: 'Best score reached',\r\n                    currentValue: 0,\r\n                    requiredValues: [6000, 10000, 16000],\r\n                    rewards: [5, 16, 37],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                }\r\n            ];\r\n        }\r\n\r\n        public loadAchievementsState(states: AchievementState[]) {\r\n            states.forEach(state => {\r\n                const model: AchievementModel = this.getAchievementModel(state.key);\r\n                if(model) {\r\n                    model.currentValue = state.currentValue;\r\n                    model.achieved = state.achieved.slice();\r\n                    model.rewardClaimed = state.rewardClaimed.slice();\r\n                }\r\n            });\r\n        }\r\n\r\n        public getAchievementsStates(): AchievementState[] {\r\n            return this.achievementModels.map(model => {\r\n                return {key: model.key, currentValue: model.currentValue, achieved: model.achieved.slice(), rewardClaimed: model.rewardClaimed.slice()}\r\n            });\r\n        }\r\n\r\n        public saveMedalsState() {\r\n            LocalStorageController.instance.save();\r\n        }\r\n\r\n        public getAchievementModel(key: AchievementType): AchievementModel {\r\n            return this.achievementModels.find(medal => medal.key == key);\r\n        }\r\n\r\n        public addValue(key: AchievementType, value: number, save: boolean = true) {\r\n            const model: AchievementModel = this.getAchievementModel(key);\r\n            if (model) {\r\n                const prevLevel: number = AchievementsManager.getAchievementLevel(model);\r\n                model.currentValue += value;\r\n                const currentLevel: number = AchievementsManager.getAchievementLevel(model);\r\n                if (currentLevel > prevLevel) {\r\n                    this.onAchievementCompleted.dispatch(model);\r\n                    SoundController.instance.playAchievementClaimedSound();\r\n                }\r\n                if (save) {\r\n                    this.saveMedalsState();\r\n                }\r\n            }\r\n        }\r\n\r\n        public setValue(key: AchievementType, value: number, save: boolean = true) {\r\n            const model: AchievementModel = this.getAchievementModel(key);\r\n            if (model && value > model.currentValue) {\r\n                const prevLevel: number = AchievementsManager.getAchievementLevel(model);\r\n                model.currentValue = value;\r\n                const currentLevel: number = AchievementsManager.getAchievementLevel(model);\r\n                if (currentLevel > prevLevel) {\r\n                    this.onAchievementCompleted.dispatch(model);\r\n                    SoundController.instance.playAchievementClaimedSound();\r\n                }\r\n                if (save) {\r\n                    this.saveMedalsState();\r\n                }\r\n            }\r\n        }\r\n\r\n        public hasAvailableRewards(): boolean {\r\n            let rewardAvailable: boolean = false;\r\n            this.achievementModels.forEach(model => {\r\n                if(model.currentValue >= model.requiredValues[0] && !model.rewardClaimed[0]) {\r\n                    rewardAvailable = true;\r\n                } else if(model.currentValue >= model.requiredValues[1] && !model.rewardClaimed[1]) {\r\n                    rewardAvailable = true;\r\n                } else if(model.currentValue >= model.requiredValues[2] && !model.rewardClaimed[2]) {\r\n                    rewardAvailable = true;\r\n                }\r\n            });\r\n            return rewardAvailable;\r\n        }\r\n\r\n\r\n        /**\r\n         * STATIC\r\n         */\r\n\r\n        public static getAchievementLevel(model: AchievementModel): number {\r\n            return model.currentValue >= model.requiredValues[2] ? 3 : model.currentValue >= model.requiredValues[1] ? 2 : model.currentValue >= model.requiredValues[0] ? 1 : 0;\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class APIUtils {\r\n        private static _instance: APIUtils = null;\r\n        public static get instance(): APIUtils {\r\n            return APIUtils._instance ? APIUtils._instance :\r\n                APIUtils._instance = new APIUtils();\r\n        }\r\n\r\n        public isRewardedVideoFeatureEnabled(): boolean {\r\n            return !!enable_rewarded_videos;\r\n        }\r\n\r\n        public hasRewardedVideo(): boolean {\r\n            if(Settings.ENABLE_API && this.isRewardedVideoFeatureEnabled() && window[\"famobi\"].hasRewardedAd)\r\n                return window[\"famobi\"].hasRewardedAd();\r\n            else return false;\r\n        }\r\n\r\n        public showRewardedVideo(callback: Function) {\r\n            if(Settings.ENABLE_API && this.isRewardedVideoFeatureEnabled()) {\r\n                (<any>window).famobi.rewardedAd(callback);\r\n            } else {\r\n                callback();\r\n            }\r\n        }\r\n\r\n        public showAds(callback: Function, timeout: number = 0) {\r\n            if(Settings.ENABLE_API) {\r\n                if (timeout == 0) {\r\n                    (<any>window).famobi.showAd(callback);\r\n                } else {\r\n                    setTimeout(function () {\r\n                        (<any>window).famobi.showAd(callback);\r\n                    }, timeout);\r\n                }\r\n            } else {\r\n                callback();\r\n            }\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class Analytics {\r\n        private static _instance: Analytics = null;\r\n        public static get instance(): Analytics {\r\n            return Analytics._instance ? Analytics._instance :\r\n                Analytics._instance = new Analytics();\r\n        }\r\n\r\n        public static USER_ID = undefined;\r\n        private static initialized: boolean = false;\r\n\r\n        public initUser() {\r\n            let xhttp = new XMLHttpRequest();\r\n            xhttp.onreadystatechange = function() {\r\n                if (this.readyState == 4 && this.status == 200) {\r\n                    let data = JSON.parse( this.response).data;\r\n                    let uid = data.uid;\r\n                    let splitTests = data.splitTests;\r\n\r\n                    Analytics.initialized = true;\r\n                    Analytics.USER_ID = uid;\r\n                    console.log('UID #', uid);\r\n                }\r\n            };\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/user\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", Settings.GAME_VERSION);\r\n            xhttp.send( JSON.stringify( {'locale':(navigator.languages && navigator.languages.length) ? navigator.languages[0] : navigator[\"userLanguage\"] || navigator.language || navigator[\"browserLanguage\"] || 'en' } ) );\r\n        }\r\n\r\n        public startLevel( ) {\r\n            if(!Analytics.initialized) {\r\n                return;\r\n            }\r\n            let data = {\r\n                'level': 1\r\n            };\r\n            var xhttp = new XMLHttpRequest();\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/level/start\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", Settings.GAME_VERSION);\r\n            xhttp.setRequestHeader(\"X-User\", Analytics.USER_ID );\r\n            xhttp.send( JSON.stringify( data ) );\r\n        }\r\n\r\n        public finishLevel(score: number, stars: number, revives: number, powerups: any[]) {\r\n            if(!Analytics.initialized) {\r\n                return;\r\n            }\r\n            var data = {\r\n                'success': false,\r\n                'score': score,\r\n                'stars': stars,\r\n                'revives': revives,\r\n                'powerups': powerups\r\n            };\r\n            var xhttp = new XMLHttpRequest();\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/level/end\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", Settings.GAME_VERSION);\r\n            xhttp.setRequestHeader(\"X-User\", Analytics.USER_ID );\r\n            xhttp.send( JSON.stringify( data ) );\r\n        }\r\n\r\n        public updateLevelData(params: object) {\r\n            if(!Analytics.initialized) {\r\n                return;\r\n            }\r\n            var xhttp = new XMLHttpRequest();\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/level/update\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", Settings.GAME_VERSION);\r\n            xhttp.setRequestHeader(\"X-User\", Analytics.USER_ID );\r\n            xhttp.send( JSON.stringify( params ) );\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BackgroundManager extends Phaser.Group {\r\n        private static _instance: BackgroundManager = null;\r\n        public static get instance(): BackgroundManager {\r\n            return BackgroundManager._instance ? BackgroundManager._instance : BackgroundManager._instance = new BackgroundManager();\r\n        }\r\n\r\n        protected container: Phaser.Group;\r\n        protected windowBounds: WindowBounds;\r\n        private containerWidth: number = CustomScaleManager.ORIGINAL_WIDTH;\r\n        private containerHeight: number = CustomScaleManager.ORIGINAL_HEIGHT;\r\n\r\n        protected leafs: Phaser.Sprite[] = [];\r\n        protected topLeftContainer: Phaser.Group;\r\n        protected topRightContainer: Phaser.Group;\r\n        protected bottomLeftContainer: Phaser.Group;\r\n        protected bottomRightContainer: Phaser.Group;\r\n\r\n        private isInitialized: boolean = false;\r\n\r\n        private readonly leafAnchors: Phaser.Point[] = [\r\n            new Phaser.Point(1, 0.85),\r\n            new Phaser.Point(0.9, 1),\r\n            new Phaser.Point(0.93, 1),\r\n            new Phaser.Point(0.05, 1),\r\n            new Phaser.Point(0, 1),\r\n            new Phaser.Point(0.0875, 0.98)\r\n        ];\r\n\r\n        constructor() {\r\n            super(App.instance, null);\r\n            App.instance.stage.addChildAt(this, 0);\r\n\r\n            this.container = this.add(App.instance.make.group());\r\n            this.topLeftContainer = this.container.add(App.instance.make.group());\r\n            this.topRightContainer = this.container.add(App.instance.make.group());\r\n            this.bottomLeftContainer = this.container.add(App.instance.make.group());\r\n            this.bottomRightContainer = this.container.add(App.instance.make.group());\r\n\r\n            this.resize();\r\n        }\r\n\r\n        protected buildChildren() {\r\n            this.createLeaf(this.topLeftContainer, 1, -49.7, 3.1, -125.3009796142578, 1, -1);\r\n            this.createLeaf(this.topLeftContainer, 4, -245.05, 42.25, 65.98316955566406);\r\n            this.createLeaf(this.topLeftContainer, 5, -131.4, 19.85, 58.43214416503906);\r\n\r\n            this.createLeaf(this.topRightContainer, 5, 138.2, -17.4, 107.98501586914063, 1, -1);\r\n            this.createLeaf(this.topRightContainer, 2, 132, -39.6, -122.82777404785156);\r\n            this.createLeaf(this.topRightContainer, 1, 76.55, -16.95, -49);\r\n            this.createLeaf(this.topRightContainer, 4, 190.55, -50.05, -119.5193603515625);\r\n\r\n            this.createLeaf(this.bottomLeftContainer, 5, -30.25, 100.15, -11.46099853515625);\r\n            this.createLeaf(this.bottomLeftContainer, 4, -15.6, 159.1, -8.1023071289063);\r\n            this.createLeaf(this.bottomLeftContainer, 6, -32.05, 113.05, 16.472152709960938);\r\n            this.createLeaf(this.bottomLeftContainer, 1, -34.15, 66.85, 170.1315155029297, 1, -1);\r\n\r\n            this.createLeaf(this.bottomRightContainer, 4, 100, 132.85, -32.889694213867188);\r\n            this.createLeaf(this.bottomRightContainer, 3, 118.8, 137.6, -17.000503540039063);\r\n            this.createLeaf(this.bottomRightContainer, 2, 123.6, 84.4, -46.802825927734375);\r\n            this.createLeaf(this.bottomRightContainer, 1, 60.6, 61.8, 38.27931213378906);\r\n        }\r\n\r\n\r\n        private createLeaf(parentContainer: Phaser.Group, leafID: number, x: number, y: number, angle: number, scaleX: number = 1, scaleY: number = 1) {\r\n            let leaf = parentContainer.add(App.instance.make.sprite(x, y, Settings.PRELOADER_ATLAS, 'leaf' + leafID +'0000'));\r\n            leaf.anchor.set(this.leafAnchors[leafID - 1].x, this.leafAnchors[leafID - 1].y);\r\n            leaf.scale.set(scaleX, scaleY);\r\n\r\n            const angleDispersion: number = App.instance.rnd.realInRange(1, 3) * App.instance.rnd.sign();\r\n            const duration: number = App.instance.rnd.integerInRange(2800, 5000);\r\n            leaf.angle = angle + angleDispersion;\r\n            leaf[\"shakeTween\"] = App.instance.tweens.create(leaf).to({angle: angle - angleDispersion}, duration, Phaser.Easing.Sinusoidal.InOut, true, 0 , -1, true)\r\n            App.instance.tweens.add(leaf[\"shakeTween\"]);\r\n\r\n            this.leafs.push(leaf);\r\n        }\r\n\r\n        public handleStateChanged() {\r\n            if(this.isInitialized) {\r\n                this.leafs.forEach(leaf => {\r\n                    leaf[\"shakeTween\"].pendingDelete = false;\r\n                })\r\n            }\r\n        }\r\n\r\n        public init() {\r\n\r\n            this.buildChildren();\r\n            this.isInitialized = true;\r\n            this.resize();\r\n        }\r\n\r\n\r\n        resize() {\r\n            if(this.isInitialized) {\r\n                this.container.scale.set(CustomScaleManager.SCALE_X, CustomScaleManager.SCALE_Y);\r\n                this.container.position.set(CustomScaleManager.WIDTH / 2 - this.containerWidth * CustomScaleManager.SCALE_X / 2, CustomScaleManager.HEIGHT / 2 - this.containerHeight *  CustomScaleManager.SCALE_Y / 2);\r\n                this.windowBounds = this.windowBounds || new WindowBounds();\r\n                this.windowBounds.set(-(CustomScaleManager.WIDTH / CustomScaleManager.SCALE_X - this.containerWidth) / 2, (CustomScaleManager.WIDTH / CustomScaleManager.SCALE_X - this.containerWidth) / 2 + this.containerWidth, -(CustomScaleManager.HEIGHT / CustomScaleManager.SCALE_Y - this.containerHeight) / 2, (CustomScaleManager.HEIGHT / CustomScaleManager.SCALE_Y - this.containerHeight) / 2 + this.containerHeight);\r\n\r\n                this.topLeftContainer.position.copyFrom(this.windowBounds.getPosition(-0.06,-0.01));\r\n                this.topLeftContainer.alpha = 0.8;\r\n\r\n                this.topRightContainer.position.copyFrom(this.windowBounds.getPosition(1.03,-0.025));\r\n                this.topRightContainer.alpha = 0.8;\r\n\r\n                this.bottomLeftContainer.position.copyFrom(this.windowBounds.getPosition(-0.05,1));\r\n                this.bottomLeftContainer.alpha = 0.9;\r\n\r\n                this.bottomRightContainer.position.copyFrom(this.windowBounds.getPosition(1.04,1));\r\n                this.bottomRightContainer.alpha = 0.9;\r\n            }\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export enum AchievementType {\r\n        TOTAL_SCORES = 1,\r\n        TOTAL_STARS = 2,\r\n        TOTAL_LEVEL_UPS = 3,\r\n        TOTAL_GREATS = 4,\r\n        BOMB_EXPLOSIONS = 5,\r\n        LINES_DESTROYED = 6,\r\n        BLOCKS_PLACED = 7,\r\n        FIRE_BLOCKS_DESTROYED = 8,\r\n        BEST_SCORE_REACHED = 9\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export enum BlockColor {\r\n        RED = 0,\r\n        GREEN = 1,\r\n        YELLOW = 2,\r\n        BLUE = 3,\r\n        ORANGE = 4,\r\n        WHITE = 5,\r\n        PURPLE = 6\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export enum CellModelState {\r\n        CELL_EMPTY = 0,\r\n        CELL_BUSY = 1,\r\n        CELL_NEW = 2\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export enum FigureState {\r\n        INACTIVE = 0,\r\n        DRAGGING = 1,\r\n        PLACED = 2\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export enum InscriptionLevel {\r\n        GOOD = 'Good',\r\n        GREAT = 'Great',\r\n        EXCELLENT = 'Excellent',\r\n        AWESOME = 'Awesome'\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export enum PowerupType {\r\n        BOMB = 'Bomb',\r\n        LIGHTNING = 'Lightning'\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export enum WindowHeadingBackplateType {\r\n        SILVER = 0,\r\n        GOLD = 1\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BestScoreReachedEffectEmitter extends Phaser.Particles.Arcade.Emitter {\r\n\r\n        constructor(x: number, y: number, maxParticles: number) {\r\n            super(App.instance, x, y, maxParticles);\r\n\r\n            this.width = CustomScaleManager.ORIGINAL_WIDTH;\r\n            this.height = 30;\r\n\r\n            this.minParticleScale = 1;\r\n            this.maxParticleScale = 1.4;\r\n            this.makeParticles(Settings.ANIMATION_ATLAS, ['particleStar10000','particleStar20000', 'particleStar30000'], maxParticles);\r\n            this.gravity.set(0, 1200);\r\n            this.setYSpeed(-100, 700);\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0.0, 1800, Phaser.Easing.Quadratic.In);\r\n\r\n\r\n            this.flow(3500, 5, 6, maxParticles, false);\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ExplodingEffectEmitter extends Phaser.Particles.Arcade.Emitter {\r\n\r\n        private readonly particlefrequency: number = 12;\r\n\r\n        constructor(targetPosition: PIXI.Point) {\r\n            super(App.instance, targetPosition.x, targetPosition.y, 100);\r\n\r\n            this.makeParticles(Settings.ANIMATION_ATLAS, ['particleStar10000','particleStar20000', 'particleStar30000']);\r\n\r\n            this.width = 40;\r\n            this.height = 40;\r\n\r\n            this.minParticleScale = 1.0;\r\n            this.maxParticleScale = 2.5;\r\n            this.gravity.setTo(0, 0);\r\n            this.setYSpeed(-130, 130);\r\n            this.setXSpeed(-130, 130);\r\n            this.minRotation = 0;\r\n            this.maxRotation = 0;\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0, 420, Phaser.Easing.Quintic.In);\r\n            this.autoScale = true;\r\n            this.setScale(2, 0.6, 2, 0.6, 500, Phaser.Easing.Sinusoidal.InOut);\r\n\r\n            this.start(false, 600, this.particlefrequency, 100 / this.particlefrequency);\r\n\r\n            this.game.time.events.add(1600, () => this.destroy());\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class FlyingParticlesEmitter extends Phaser.Particles.Arcade.Emitter {\r\n\r\n        private readonly particleSpeed: number = 1200;\r\n        private readonly particlefrequency: number = 17;\r\n        protected level: Level;\r\n        protected points: number;\r\n\r\n        public distance: number;\r\n        public duration: number;\r\n\r\n        constructor(level: Level, points: number, startPosition: PIXI.Point, targetPosition: Phaser.Point) {\r\n            super(level.game, startPosition.x, startPosition.y, 250);\r\n            this.level = level;\r\n            this.points = points;\r\n\r\n            this.distance = Phaser.Math.distance(targetPosition.x, targetPosition.y, startPosition.x, startPosition.y);\r\n            this.duration = this.distance / this.particleSpeed * 1000;\r\n\r\n            this.makeParticles(Settings.ANIMATION_ATLAS, ['particleMultiplier10000','particleMultiplier20000', 'particleMultiplier30000']);\r\n\r\n            this.width = 25;\r\n            this.height = 25;\r\n\r\n            this.minParticleScale = 0.8;\r\n            this.maxParticleScale = 1.3;\r\n            this.gravity.setTo(0, 200);\r\n            this.setYSpeed(-25, 25);\r\n            this.setXSpeed(-25, 25);\r\n            this.minRotation = 0;\r\n            this.maxRotation = 0;\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0, 370, Phaser.Easing.Quintic.In);\r\n            // this.autoScale = true;\r\n            // this.setScale(1.3, 0.8, 1.3, 0.8, 600, Phaser.Easing.Sinusoidal.InOut);\r\n\r\n            this.flow(600, this.particlefrequency, 2, this.duration / this.particlefrequency  * 3);\r\n\r\n            this.game.add.tween(this)\r\n                .to({x: targetPosition.x, y: targetPosition.y}, this.duration, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(this.addPoints, this);\r\n\r\n            this.game.time.events.add(this.duration + 1600, () => this.destroy());\r\n\r\n        }\r\n\r\n        public addPoints() {\r\n            this.on = false;\r\n            this.width = 45;\r\n            this.height = 45;\r\n            this.setYSpeed(-120, 120);\r\n            this.setXSpeed(-120, 120);\r\n            this.setAlpha(1, 0, 300, Phaser.Easing.Quintic.In);\r\n            this.setScale(1, 0.3, 1, 0.3, 280, Phaser.Easing.Sinusoidal.InOut);\r\n            this.start(false, 300, 10, 12);\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class InscriptionEffect extends Phaser.Group {\r\n\r\n        private inscriptionLevel: InscriptionLevel;\r\n\r\n        public sprite: Phaser.Sprite;\r\n\r\n        constructor(inscriptionLevel: InscriptionLevel, x: number, y: number) {\r\n            super(App.instance, null);\r\n            this.inscriptionLevel = inscriptionLevel;\r\n\r\n            this.game.camera.shake(0.0058, 200);\r\n\r\n            this.position.set(x, Math.max(y, -120) + 40);\r\n\r\n            this.sprite = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'inscription' + this.inscriptionLevel + '0000'));\r\n            this.sprite.anchor.set(0.5, 1);\r\n\r\n            this.sprite.alpha = 0;\r\n            this.sprite.scale.set(0);\r\n\r\n            this.game.add.tween(this.sprite)\r\n                .to({alpha: 1}, 420, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({alpha: 0}, 650, Phaser.Easing.Sinusoidal.In, false)\r\n                .start()\r\n                .onComplete.add(() => this.destroy());\r\n\r\n            this.game.add.tween(this.sprite)\r\n                .to({y: -120}, 350, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({y: -140}, 800, Phaser.Easing.Linear.None, false)\r\n                .start();\r\n\r\n            this.game.add.tween(this.sprite.scale)\r\n                .to({x: 1, y: 1}, 420, this.amplifiedBackOut, false)\r\n                .to({x: 1.25, y: 1.25}, 850, Phaser.Easing.Sinusoidal.In, false, 50)\r\n                .start();\r\n\r\n            SoundController.instance.playInscriptionSound(inscriptionLevel);\r\n\r\n            if(this.inscriptionLevel == InscriptionLevel.GREAT) {\r\n                AchievementsManager.instance.addValue(AchievementType.TOTAL_GREATS, 1);\r\n            }\r\n        }\r\n\r\n        private amplifiedBackOut(k) {\r\n            let s = 0.70158;\r\n            return --k * k * ( ( s + 1 ) * k + s ) + 1;\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class StarPickingUpEffect extends Phaser.Particles.Arcade.Emitter {\r\n\r\n        protected starSprite: Phaser.Sprite;\r\n        private readonly particleSpeed: number = 750;\r\n        private readonly particleFrequency: number = 8;\r\n\r\n        constructor(block: BlockStarredView) {\r\n            super(App.instance, 0, 0, 250);\r\n\r\n            const parentGroup: Phaser.Group = (App.instance.state.getCurrentState() as Level).uiManager.starsCounter;\r\n            const startingPosition: PIXI.Point = parentGroup.toLocal(block.star.position, block);\r\n            const targetPosition: PIXI.Point = new PIXI.Point(0, 0);\r\n            const distance: number = Phaser.Math.clamp(Math.pow(Phaser.Math.distance(targetPosition.x, targetPosition.y, startingPosition.x, startingPosition.y), 0.5) * 20, 330, 700);\r\n            const duration: number = distance / this.particleSpeed * 1000;\r\n\r\n            /* emitter */\r\n            parentGroup.addAt(this, 0);\r\n            this.x = startingPosition.x;\r\n            this.y = startingPosition.y;\r\n            this.makeParticles(Settings.ANIMATION_ATLAS, ['particleStar10000', 'particleStar20000', 'particleStar30000']);\r\n            this.width = 30;\r\n            this.height = 30;\r\n            this.minParticleScale = 0.7;\r\n            this.maxParticleScale = 1.5;\r\n            this.gravity.setTo(0, -100);\r\n            this.setYSpeed(-100, 100);\r\n            this.setXSpeed(-100, 100);\r\n            this.minRotation = 0;\r\n            this.maxRotation = 0;\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0, 420, Phaser.Easing.Quintic.In);\r\n            this.autoScale = true;\r\n            this.setScale(1, 0.3, 1, 0.3, 500, Phaser.Easing.Sinusoidal.InOut);\r\n\r\n\r\n            this.game.add.tween(this)\r\n                .to({x: targetPosition.x}, duration, Phaser.Easing.Back.In, true);\r\n            this.game.add.tween(this)\r\n                .to({y: targetPosition.y}, duration, Phaser.Easing.Sinusoidal.In, true)\r\n                .onComplete.add(this.finalizeTween, this);\r\n\r\n            this.start(false, 600, this.particleFrequency, duration / this.particleFrequency);\r\n\r\n            this.game.time.events.add(duration + 1600, () => this.destroy());\r\n\r\n\r\n            /* star sprite */\r\n            this.starSprite = parentGroup.addAt(block.star, 1);\r\n            this.starSprite.position.set(startingPosition.x, startingPosition.y);\r\n            this.game.add.tween(this.starSprite)\r\n                .to({x: targetPosition.x}, duration, Phaser.Easing.Back.In, true);\r\n            this.game.add.tween(this.starSprite)\r\n                .to({\r\n                    y: targetPosition.y,\r\n                    angle: startingPosition.x < targetPosition.x ? '-373' : '+347'\r\n                }, duration, Phaser.Easing.Sinusoidal.In, true);\r\n        }\r\n\r\n        protected finalizeTween() {\r\n            this.starSprite.destroy();\r\n\r\n            this.on = false;\r\n            this.width = 45;\r\n            this.height = 45;\r\n            this.setYSpeed(-140, 140);\r\n            this.setXSpeed(-140, 140);\r\n            this.setAlpha(1, 0, 480, Phaser.Easing.Quintic.In);\r\n            this.setScale(1.2, 0.3, 1.2, 0.3, 540, Phaser.Easing.Sinusoidal.InOut);\r\n            this.start(false, 580, 10, 12);\r\n\r\n            StarsManager.instance.pickupStars(1);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BlockStarredView extends Phaser.Group {\r\n\r\n        public block: Phaser.Sprite;\r\n        public star: Phaser.Sprite;\r\n        public shining: Phaser.Sprite;\r\n        public shadow: Phaser.Sprite;\r\n\r\n        constructor(color: BlockColor) {\r\n            super(App.instance, null);\r\n\r\n            this.buildChildren(color);\r\n        }\r\n\r\n        private buildChildren(color: BlockColor) {\r\n            this.block = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'blockStarred000' + color));\r\n            this.block.anchor.set(0.5);\r\n\r\n            this.star = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'star0000'));\r\n            this.star.anchor.set(0.5);\r\n\r\n            this.shining = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'starShining0000'));\r\n            this.shining.anchor.set(0.5);\r\n            this.shining.alpha = 0;\r\n\r\n            this.shadow = this.add(this.game.make.sprite(-2, -2, Settings.GAME_ATLAS, 'starShadow0000'));\r\n            this.shadow.anchor.set(0.5);\r\n        }\r\n\r\n        protected startShining() {\r\n            this.game.tweens.removeFrom(this.shining);\r\n            this.shining.alpha = 0.0;\r\n            this.game.add.tween(this.shining)\r\n                .to({alpha: 1}, Settings.STAR_SHINING_TWEEN_DURATION, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n\r\n            this.game.tweens.removeFrom(this.star.scale);\r\n            this.star.scale.set(0.9);\r\n            this.game.add.tween(this.star.scale)\r\n                .to({x: 1, y: 1}, Settings.STAR_SHINING_TWEEN_DURATION, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n        }\r\n\r\n        public setColor(color: BlockColor) {\r\n            this.block.frameName = 'blockStarred000' + color;\r\n        }\r\n\r\n        public startAppearingTween(initialParent: Phaser.Group, targetBlock: Block) {\r\n            const initialParentPosition: PIXI.Point = initialParent.toLocal(this.position, this.parent);\r\n            this.position.set(initialParentPosition.x, initialParentPosition.y);\r\n            initialParent.add(this);\r\n\r\n            this.game.time.events.add(70, () =>  SoundController.instance.playStarAppearSound());\r\n\r\n            this.game.tweens.removeFrom(this.block);\r\n            this.block.alpha = 0;\r\n            this.game.add.tween(this.block)\r\n                .to({alpha: 1}, Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.35, Phaser.Easing.Linear.None, true);\r\n\r\n            this.shining.alpha = 0;\r\n            this.shadow.alpha = 0;\r\n            this.game.add.tween(this.shadow)\r\n                .to({alpha: 1}, Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.2, Phaser.Easing.Sinusoidal.In, true, Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.8);\r\n\r\n            this.game.tweens.removeFrom(this.star);\r\n            this.star.alpha = 0.5;\r\n            this.game.add.tween(this.star)\r\n                .to({alpha: 1}, Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.7, Phaser.Easing.Quadratic.Out, true);\r\n            this.star.angle = -45;\r\n            this.game.add.tween(this.star)\r\n                .to({angle: 0}, Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.62, Phaser.Easing.Sinusoidal.Out, false)\r\n                .start();\r\n\r\n            this.game.tweens.removeFrom(this.star.scale);\r\n            this.star.scale.set(5);\r\n            this.game.add.tween(this.star.scale)\r\n                .to({x: 0.8, y: 0.8}, Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.62, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({x: 0.9, y: 0.9}, Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.1, Phaser.Easing.Sinusoidal.In, false)\r\n                .start()\r\n                .onComplete.add(() => {\r\n                    this.position.set(0, 0);\r\n                    targetBlock.add(this);\r\n                    this.startShining();\r\n            });\r\n        }\r\n\r\n        public destroy() {\r\n            super.destroy();\r\n        }\r\n\r\n        public pickupStar(delay: number) {\r\n            this.game.time.events.add(delay, () => {\r\n                  new StarPickingUpEffect( this );\r\n            });\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ExplosionEffect extends Phaser.Group {\r\n\r\n        private explosionA: Phaser.Sprite;\r\n        private explosionB: Phaser.Sprite;\r\n\r\n        constructor(x: number, y: number) {\r\n            super(App.instance, null);\r\n\r\n            this.position.set(x, y);\r\n\r\n            this.explosionA = this.add(this.game.make.sprite(0, 0, 'explosionA'));\r\n            this.explosionA.anchor.set(0.5);\r\n            this.explosionA.scale.set(1.2);\r\n            this.explosionA.angle = Math.random() * 360;\r\n            this.explosionA.animations.add('boom');\r\n            this.explosionA.animations.play('boom', 120, false, true);\r\n\r\n            this.explosionB = this.add(this.game.make.sprite(0, 0, 'explosionB'));\r\n            this.explosionB.anchor.set(0.5);\r\n            this.explosionB.scale.set(1.3);\r\n            this.explosionB.angle = Math.random() * 360;\r\n            this.explosionB.animations.add('boom');\r\n            this.explosionB.animations.play('boom', 60, false, true);\r\n\r\n            this.game.camera.shake(0.0035, 350);\r\n\r\n            SoundController.instance.playExplosionSound();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class LightningEffect extends Phaser.Sprite {\r\n\r\n        public static LIGHTING_FRAMES: number = 15;\r\n        public static DISAPPEARING_FRAMES: number = 13;\r\n        public static TOTAL_FRAMES: number = LightningEffect.LIGHTING_FRAMES + LightningEffect.DISAPPEARING_FRAMES;\r\n        public static FPS: number = 180;\r\n\r\n        private blinkAnimation: Phaser.Animation;\r\n        private endAnimation: Phaser.Animation;\r\n\r\n        private initialCellPosition: Phaser.Point;\r\n        private targetCellPosition: Phaser.Point;\r\n        private targetCell: Cell;\r\n\r\n        constructor(initialCell: Cell, targetCell: Cell) {\r\n            super(App.instance, targetCell.x, targetCell.y, Settings.GAME_ATLAS, 'lighting0000');\r\n            this.anchor.set(0.5, 0);\r\n            this.initialCellPosition = initialCell.position.clone();\r\n            this.targetCellPosition = targetCell.position.clone();\r\n            this.targetCell = targetCell;\r\n\r\n            this.update();\r\n\r\n            this.blinkAnimation = this.animations.add('blinkAnimation', Phaser.Animation.generateFrameNames('lighting', 0, LightningEffect.LIGHTING_FRAMES - 1, '', 4));\r\n            this.endAnimation = this.animations.add('endAnimation', Phaser.Animation.generateFrameNames('lightingEnd', 0, LightningEffect.DISAPPEARING_FRAMES - 1, '', 4));\r\n        }\r\n\r\n        public delayedStart(delay: number): LightningEffect {\r\n            this.visible = false;\r\n            this.game.time.events.add(delay, () => {\r\n                if (this.targetCell) {\r\n                    this.startAnimations();\r\n                } else {\r\n                    this.destroy();\r\n                }\r\n            });\r\n            return this;\r\n        }\r\n\r\n        private startAnimations() {\r\n            SoundController.instance.playLightningSound();\r\n            this.visible = true;\r\n            this.blinkAnimation.play(LightningEffect.FPS, false, false);\r\n            this.blinkAnimation.onComplete.add(() => {\r\n                this.endAnimation.play(LightningEffect.FPS, false, false);\r\n                this.endAnimation.onComplete.add(() => {\r\n                    this.destroy();\r\n                });\r\n                this.scale.set(1, 1);\r\n            });\r\n            if (this.targetCell) {\r\n                ScoreManager.instance.addScores(5);\r\n                this.targetCell.destroyBlock(35);\r\n            }\r\n        }\r\n\r\n        update() {\r\n            super.update();\r\n            const length: number = Phaser.Math.distance(this.targetCellPosition.x, this.targetCellPosition.y, this.initialCellPosition.x, this.initialCellPosition.y);\r\n            if (this.targetCell) {\r\n                this.targetCellPosition.copyFrom(this.targetCell.position);\r\n                this.scale.set(1, Math.max(0.5, length / 130));\r\n                if (length == 0) {\r\n                    this.anchor.set(0.5); /* hit the same block */\r\n                }\r\n            } else if (length < 120) {\r\n                this.scale.set(1, length / 130);\r\n            }\r\n\r\n            this.position.copyFrom(this.targetCellPosition);\r\n            this.rotation = Phaser.Math.angleBetween(this.targetCellPosition.x, this.targetCellPosition.y, this.initialCellPosition.x, this.initialCellPosition.y) - Math.PI / 2;\r\n        }\r\n\r\n        destroy() {\r\n            super.destroy();\r\n            this.blinkAnimation = null;\r\n            this.endAnimation = null;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ScoresEffect extends Phaser.Group {\r\n\r\n        public level: Level;\r\n        public scores: number;\r\n\r\n        private readonly targetScale: number = 1.0;\r\n\r\n        private scoresText: BitmapTextField;\r\n        private appearingTween: Phaser.Tween;\r\n        private disappearingTween: Phaser.Tween;\r\n\r\n        constructor(level: Level, scores: number, x: number, y: number, delay: number) {\r\n            super(level.game);\r\n            this.level = level;\r\n            this.scores = scores;\r\n\r\n            const parentGroup: Phaser.Group = (App.instance.state.getCurrentState() as Level).uiManager.multiplierBar;\r\n            const startingPosition: PIXI.Point = parentGroup.toLocal(new Phaser.Point(x, y), this.level.boardManager.getBoard().cellsContainer);\r\n            const targetPosition: PIXI.Point = new PIXI.Point(0, 0);\r\n\r\n            this.position.set(startingPosition.x, startingPosition.y);\r\n            parentGroup.addAt(this, 0);\r\n\r\n            this.buildContent();\r\n            this.animateContentA(delay, targetPosition);\r\n        }\r\n\r\n        private buildContent() {\r\n            this.scoresText = this.add(new BitmapTextField('+' + this.scores, Settings.GAME_ATLAS, 'Gold', 1, 0.5, 0.5, 1));\r\n        }\r\n\r\n        private animateContentA(delay: number, targetPosition: PIXI.Point) {\r\n            //appearing tween\r\n            this.scale.set(0);\r\n            this.game.add.tween(this.scale)\r\n                .to({\r\n                    x: this.targetScale,\r\n                    y: this.targetScale\r\n                }, 300, Phaser.Easing.Back.Out, true, delay);\r\n\r\n            //tween appearing position\r\n            this.appearingTween = this.game.add.tween(this.scoresText)\r\n                .to({y: this.scoresText.y - 80}, 350, Phaser.Easing.Back.Out, true, delay);\r\n\r\n            this.disappearingTween = this.game.add.tween(this)\r\n                .to({alpha: 0.0, y: this.y - 70}, 750, Phaser.Easing.Cubic.In, false);\r\n            this.disappearingTween.onStart.add(() => {\r\n\r\n            });\r\n            this.disappearingTween.onComplete.add(() => this.destroy());\r\n\r\n            this.game.time.events.add(delay, () =>\r\n            this.parent.addChildAt(new FlyingParticlesEmitter(this.level, this.scores, new PIXI.Point(this.x, this.y - 80), new Phaser.Point(targetPosition.x, targetPosition.y)), 0)\r\n        );\r\n\r\n            //chain tweens\r\n            this.appearingTween.chain(this.disappearingTween);\r\n        }\r\n\r\n        destroy() {\r\n            super.destroy();\r\n            this.level = null;\r\n            this.scoresText = null;\r\n            this.appearingTween = null;\r\n            this.disappearingTween = null;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","namespace BlockPuzzle {\r\n    export class BlockDestroyingEffect extends Phaser.Sprite {\r\n\r\n        protected anim: Phaser.Animation;\r\n\r\n        constructor(color: BlockColor, x: number, y: number, delay: number) {\r\n            super(App.instance, x, y, Settings.ANIMATION_ATLAS);\r\n            this.anchor.set(0.5, 0.24);\r\n\r\n            this.anim = this.animations.add('destroying', Phaser.Animation.generateFrameNames('blockDestroyingAnim' + color, 0, 35, '', 4));\r\n\r\n            this.visible = false;\r\n            this.game.time.events.add(delay, () => {\r\n                this.visible = true;\r\n                this.anim.play(62, false, true);\r\n            })\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class Block extends Phaser.Group {\r\n\r\n        public posX: number;\r\n        public posY: number;\r\n        public color: BlockColor;\r\n        public temporalColor: BlockColor;\r\n        protected starred: boolean = false;\r\n        protected active: boolean = true;\r\n\r\n        protected block: Phaser.Sprite;\r\n        protected blockStarred: BlockStarredView;\r\n        protected blockGrayscale: Phaser.Sprite;\r\n        protected glow: Phaser.Sprite;\r\n\r\n        constructor(cellModel: CellModel, color: BlockColor) {\r\n            super(App.instance, null);\r\n\r\n            this.posX = cellModel.posX;\r\n            this.posY = cellModel.posY;\r\n\r\n            this.glow = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'blockGlow000' + color));\r\n            this.glow.anchor.set(0.5);\r\n            this.glow.alpha = 0;\r\n            this.glow.visible = false;\r\n\r\n            this.block = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'block000' + color));\r\n            this.block.anchor.set(0.5);\r\n\r\n            this.blockGrayscale = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'blockGrey000' + color));\r\n            this.blockGrayscale.anchor.set(0.5);\r\n            this.blockGrayscale.visible = false;\r\n            this.blockGrayscale.alpha = 0;\r\n\r\n            this.setColor(color);\r\n        }\r\n\r\n        public addStar(level: Level) {\r\n            if (!this.starred) {\r\n                this.starred = true;\r\n                this.block.visible = false;\r\n                this.blockStarred = this.blockStarred || this.add(new BlockStarredView(this.color));\r\n                this.blockStarred.startAppearingTween(level.boardManager.getBoard().effectsContainer, this);\r\n            }\r\n        }\r\n\r\n        public hasStar(): boolean {\r\n            return this.starred;\r\n        }\r\n\r\n        public setColor(color: BlockColor) {\r\n            this.color = color;\r\n            this.block.frameName = 'block000' + this.color;\r\n            this.glow.frameName = 'blockGlow000' + this.color;\r\n            if (this.blockStarred) {\r\n                this.blockStarred.setColor(this.color);\r\n            }\r\n            this.blockGrayscale.frameName = this.hasStar() ? 'blockStarredGrey000' + this.color : 'blockGrey000' + this.color;\r\n        }\r\n\r\n        public setTemporalColor(color: BlockColor) {\r\n            this.temporalColor = color;\r\n            this.block.frameName = 'block000' + this.temporalColor;\r\n            this.glow.frameName = 'blockGlow000' + this.temporalColor;\r\n            if (this.blockStarred) {\r\n                this.blockStarred.setColor(this.temporalColor);\r\n            }\r\n            this.blockGrayscale.frameName = this.hasStar() ? 'blockStarredGrey000' + this.color : 'blockGrey000' + this.color;\r\n        }\r\n\r\n        public applyTemporalColor() {\r\n            if (this.temporalColor) {\r\n                this.setColor(this.temporalColor);\r\n            }\r\n        }\r\n\r\n        public activate(delay: number) {\r\n            this.active = true;\r\n            this.block.visible = true;\r\n            if (this.hasStar()) {\r\n                this.blockStarred.visible = true;\r\n                this.blockStarred.alpha = 1;\r\n                this.blockGrayscale.parent.setChildIndex(this.blockGrayscale, this.blockGrayscale.parent.children.length - 1);\r\n            }\r\n            this.game.add.tween(this.blockGrayscale)\r\n                .to({alpha: 0}, Settings.BLOCK_ACTIVATION_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay);\r\n        }\r\n\r\n        public deactivate(delay: number) {\r\n            this.active = false;\r\n            this.blockGrayscale.parent.setChildIndex(this.blockGrayscale, this.blockGrayscale.parent.children.length - 1);\r\n            this.blockGrayscale.visible = true;\r\n            this.blockGrayscale.alpha = 0;\r\n            this.game.add.tween(this.blockGrayscale)\r\n                .to({alpha: 1}, Settings.BLOCK_DEACTIVATION_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay)\r\n                .onComplete.add(() => {\r\n                this.block.visible = false;\r\n                if (this.hasStar()) {\r\n                    this.blockStarred.visible = false;\r\n                    this.blockStarred.alpha = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        public dispose(delay: number) {\r\n            const deltaY: number = (8 - this.posY) + 1;\r\n            const targetY: number = deltaY * Settings.CELL_HEIGHT;\r\n            const targetX: number = Math.floor(this.game.rnd.integerInRange(20, 60));\r\n            const fallingDistanceY: number = targetY;\r\n            const fallingDuration: number = 250 + deltaY * 45;\r\n\r\n            this.game.add.tween(this)\r\n                .to({x: targetX.toString()}, fallingDuration, Phaser.Easing.Sinusoidal.In, true, delay);\r\n            this.game.add.tween(this)\r\n                .to({alpha: 0}, fallingDuration, Phaser.Easing.Exponential.In, true, delay);\r\n            this.game.add.tween(this)\r\n                .to({y: '+' + fallingDistanceY}, fallingDuration, Phaser.Easing.Back.In, true, delay);\r\n        }\r\n\r\n        public enableGlow(duration: number) {\r\n            this.game.tweens.removeFrom(this.glow);\r\n            this.glow.visible = true;\r\n            this.glow.alpha = 0;\r\n            this.game.add.tween(this.glow)\r\n                .to({alpha: 0.6}, duration, Phaser.Easing.Sinusoidal.InOut, true);\r\n        }\r\n\r\n        public disableGlow(duration: number) {\r\n            this.game.tweens.removeFrom(this.glow);\r\n            this.game.add.tween(this.glow)\r\n                .to({alpha: 0}, duration, Phaser.Easing.Sinusoidal.Out, true)\r\n                .onComplete.add(() => this.glow.visible = false);\r\n        }\r\n\r\n        public animateDestroying(effectsContainer: Phaser.Group, delay: number) {\r\n            effectsContainer.add(new BlockDestroyingEffect(this.color, this.x, this.y, delay));\r\n\r\n            this.game.add.tween(this.scale)\r\n                .to({x: 0.5, y: 0.5}, Settings.BLOCK_DISAPPEARING_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay);\r\n            this.game.add.tween(this)\r\n                .to({alpha: 0}, Settings.BLOCK_DISAPPEARING_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay)\r\n                .onComplete.add(() => {\r\n                    if(this.color == BlockColor.RED) {\r\n                        AchievementsManager.instance.addValue(AchievementType.FIRE_BLOCKS_DESTROYED, 1);\r\n                    }\r\n                    this.destroy();\r\n            });\r\n\r\n            if (this.hasStar() && this.blockStarred) {\r\n                this.blockStarred.pickupStar(delay);\r\n            }\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class Board extends Phaser.Group {\r\n\r\n        public readonly boardManager: BoardManager;\r\n        public readonly level: Level;\r\n\r\n        public cellsContainer: Phaser.Group;\r\n        public fieldCoverSprite: Phaser.Image;\r\n        public blocksContainer: Phaser.Group;\r\n        public explosionsContainer: Phaser.Group;\r\n        public effectsContainer: Phaser.Group;\r\n        public readonly numRows: number;\r\n        public readonly numCols: number;\r\n        protected cells: Cell[];\r\n        private active: boolean = true;\r\n\r\n        protected targetCells: Cell[];\r\n\r\n        constructor(boardManager: BoardManager, rows: number, cols: number) {\r\n            super(boardManager.game);\r\n            this.boardManager = boardManager;\r\n            this.level = boardManager.level;\r\n            this.numRows = rows;\r\n            this.numCols = cols;\r\n\r\n            this.buildCells();\r\n            this.alignCells();\r\n            this.animateAppearing();\r\n        }\r\n\r\n        protected buildCells() {\r\n            this.cells = [];\r\n            this.cellsContainer = this.add(this.game.make.group());\r\n            this.fieldCoverSprite = this.add(this.game.make.image(0, 0, 'field-cover'));\r\n            this.fieldCoverSprite.anchor.set(0.5);\r\n            this.blocksContainer = this.add(this.game.make.group());\r\n            this.explosionsContainer = this.add(this.game.make.group());\r\n            this.effectsContainer = this.add(this.game.make.group());\r\n\r\n            for (let i: number = 0; i < this.numRows * this.numCols; i++) {\r\n                let row: number = Math.floor(i / this.numCols);\r\n                let column: number = i % this.numCols;\r\n                this.cells.push(this.cellsContainer.add(new Cell(this, column, row)));\r\n            }\r\n        }\r\n\r\n        protected alignCells() {\r\n            this.cells.forEach(cell => cell.position.set(\r\n                cell.posX - this.numCols / 2 + 0.5,\r\n                cell.posY - this.numRows / 2 + 0.5\r\n            ).multiply(Settings.CELL_WIDTH, Settings.CELL_HEIGHT));\r\n        }\r\n\r\n        protected animateAppearing() {\r\n            let cell: Cell = null;\r\n            for (let i: number = 0; i < this.numCols; i++) {\r\n                for (let j: number = 0; j < this.numRows; j++) {\r\n                    cell = this.getCellAt(i, j);\r\n                    cell.scale.set(0);\r\n                    this.game.add.tween(cell.scale)\r\n                        .to({x: 1, y: 1}, 120, Phaser.Easing.Quadratic.Out, true, (i + j) * 20 + 100);\r\n                }\r\n            }\r\n            this.game.time.events.add((this.numCols + this.numRows) * 20 + 100, () => this.level.eventManager.onBoardCreated.dispatch());\r\n        }\r\n\r\n        protected findClosestCell(point: Phaser.Point): Cell {\r\n            let closestCell: Cell = null;\r\n            this.getCells().forEach(cell => {\r\n                if (Math.abs(cell.x - point.x) <= Settings.CELL_WIDTH / 2 && Math.abs(cell.y - point.y) <= Settings.CELL_HEIGHT / 2) {\r\n                    closestCell = cell;\r\n                }\r\n            });\r\n            return closestCell;\r\n        }\r\n\r\n\r\n        /**\r\n         * PUBLIC\r\n         */\r\n\r\n\r\n        public isActive(): boolean {\r\n            return this.active;\r\n        }\r\n\r\n        public getScale(): number {\r\n            return this.scale.x;\r\n        }\r\n\r\n        public getCells(): Cell[] {\r\n            return this.cells;\r\n        }\r\n\r\n        public getNotEmptyCells() {\r\n            return this.getCells().filter(cell => !this.isEmpty(cell));\r\n        }\r\n\r\n        public getEmptyCells() {\r\n            return this.getCells().filter(cell => this.isEmpty(cell));\r\n        }\r\n\r\n        public getCellAt(posX: number, posY: number): Cell {\r\n            return (posX < 0 || posX >= this.numCols || posY < 0 || posY >= this.numRows) ? null : this.cells[posY * this.numRows + posX] || null;\r\n        }\r\n\r\n        public isEmpty(cell: Cell): boolean {\r\n            return cell && cell.isEmpty();\r\n        }\r\n\r\n        public activate() {\r\n            if (!this.isActive()) {\r\n                this.active = true;\r\n                SoundController.instance.playReviveSound();\r\n                Phaser.ArrayUtils.shuffle(this.getNotEmptyCells()).forEach((cell, index) => cell.getBlock().activate(index * 7));\r\n            }\r\n        }\r\n\r\n        public deactivate(delay: number) {\r\n            if (this.isActive()) {\r\n                this.active = false;\r\n                SoundController.instance.playLoseSound();\r\n                Phaser.ArrayUtils.shuffle(this.getNotEmptyCells()).forEach((cell, index) => cell.getBlock().deactivate(delay + index * 10));\r\n            }\r\n        }\r\n\r\n        public disposeBlocks(delay: number, deactivateBeforeDisposing: boolean) {\r\n            if (deactivateBeforeDisposing) {\r\n                this.active = false;\r\n                SoundController.instance.playLoseSound();\r\n            }\r\n            Phaser.ArrayUtils.shuffle(this.getNotEmptyCells()).forEach((cell, index) => cell.disposeBlock(delay + index * 8, deactivateBeforeDisposing));\r\n        }\r\n\r\n        public dispatchFigureIsBeingDragged(figure: Figure) {\r\n            this.getCells().forEach(cell => cell.resetView(false));\r\n\r\n            /* find target cells where figure will be placed */\r\n            this.targetCells = this.getTargetCellsFor(figure);\r\n\r\n            if (this.targetCells && figure) {\r\n                /* and highlight them */\r\n                this.targetCells.forEach(cell => cell.showHighlighting(figure.color, false));\r\n\r\n                /* highlight potentially filled lines and rows */\r\n                const model: BoardModel = this.getModel();\r\n                this.targetCells.forEach(cell => model.setCellStateAt(CellModelState.CELL_NEW, cell.posX, cell.posY));\r\n                const cellsToClear: CellPosition[] = model.findCellsToClear();\r\n                cellsToClear.forEach(cellPos => this.getCellAt(cellPos.x, cellPos.y).showHighlighting(figure.color, false));\r\n            }\r\n        }\r\n\r\n        public dispatchPowerupIsBeingDragged(targetCells: Cell[]) {\r\n            this.getCells().forEach(cell => cell.resetAlphaHighlighting());\r\n\r\n            if (targetCells && targetCells.length > 0) {\r\n                /* set alpha to all the cells*/\r\n                this.getCells().forEach(cell => cell.applyAlphaHighlighting(true));\r\n\r\n                /* remove alpha filter from target cells */\r\n                targetCells.forEach(cell => cell.applyAlphaHighlighting(false));\r\n            }\r\n        }\r\n\r\n        public placeFigure(figure: Figure): boolean {\r\n            if (figure) {\r\n                this.targetCells = this.getTargetCellsFor(figure);\r\n                if (this.targetCells) {\r\n                    this.targetCells.forEach((cell, index) => cell.placeBlock(figure.getView().getBlocks()[index]));\r\n                    this.clearFilledRowsAndColumns(this.targetCells, figure);\r\n                    this.targetCells = null;\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getTargetCellsFor(figure: Figure): Cell[] {\r\n            if (figure) {\r\n                const baseBlock: Block = figure.getView().getFirstBlock();\r\n                const figureLocalPosition: PIXI.Point = this.cellsContainer.toLocal(figure.getView().position, figure);\r\n                const targetLocalPosition: Phaser.Point = new Phaser.Point(figureLocalPosition.x + baseBlock.x, figureLocalPosition.y + baseBlock.y);\r\n                const baseCell: Cell = this.findClosestCell(targetLocalPosition);\r\n                if (baseCell) {\r\n                    let localCells: Cell[] = figure.getView().getBlocks().map(block => this.getCellAt(baseCell.posX + block.posX - baseBlock.posX, baseCell.posY + block.posY - baseBlock.posY));\r\n                    if (localCells.every(cell => this.isEmpty(cell))) {\r\n                        if(!Settings.TUTORIAL_COMPLETED) {\r\n                            if(localCells.every(cell => !!figure.getModel().getCells().find(modelCell => cell.posX == (modelCell.posX + figure.getModel().posX) && cell.posY == (modelCell.posY + figure.getModel().posY)))) {\r\n                                return localCells;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        } else {\r\n                            return localCells;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public getCellUnderPoint(localPoint: PIXI.Point) {\r\n            return this.level.boardManager.getBoard().getCells().find(cell => Math.abs(cell.x - localPoint.x) < Settings.CELL_WIDTH / 2 && Math.abs(cell.y - localPoint.y) < Settings.CELL_HEIGHT / 2) || null;\r\n        }\r\n\r\n        public getNumStarsOnTheBoard(): number {\r\n            return this.getNotEmptyCells().reduce((sum, cell) => sum + (cell.getBlock().hasStar() ? 1 : 0), 0);\r\n        }\r\n\r\n        public clearFilledRowsAndColumns(targetCells: Cell[], figure: Figure): number {\r\n            let cellsToClear: Cell[] = [];\r\n            let numLines: number = 0;\r\n\r\n            //check rows\r\n            for (let i: number = 0; i < this.numRows; i++) {\r\n                if (this.isRowFilled(i)) {\r\n                    numLines++;\r\n                    cellsToClear = ArrayUtils.uniteArrays(cellsToClear, this.getRow(i));\r\n                }\r\n            }\r\n            //check columns\r\n            for (let i: number = 0; i < this.numCols; i++) {\r\n                if (this.isColumnFilled(i)) {\r\n                    numLines++;\r\n                    cellsToClear = ArrayUtils.uniteArrays(cellsToClear, this.getColumn(i));\r\n                }\r\n            }\r\n\r\n            if (cellsToClear.length > 0) {\r\n                this.level.dataManager.dispatchLinesDestroyed(numLines, cellsToClear.map(cell => {\r\n                    return {x: cell.posX, y: cell.posY}\r\n                }));\r\n\r\n                if (Settings.SET_THE_SAME_EXPLOSION_COLOR_FOR_ALL_THE_EXPLODING_CELLS) {\r\n                    cellsToClear.forEach(cell => cell.getBlock().setColor(figure.color));\r\n                }\r\n                const scores: number = numLines * (numLines + 1) / 2 * Settings.BASIC_LINE_DESTROYING_REWARD + figure.getModel().numCells();\r\n                const explosionStartingPosition: CellPosition = this.findExplosionStartingPosition(cellsToClear, targetCells, Settings.PICK_RANDOM_EXPLOSION_STARTING_POINT);\r\n                const scoresEffectPosition: Phaser.Point = this.level.boardManager.getBoard().getCellAt(explosionStartingPosition.x, explosionStartingPosition.y).position;\r\n                this.level.serviceManager.inscriptionsService.displayScoresEffect(scores, scoresEffectPosition.x, scoresEffectPosition.y);\r\n\r\n                cellsToClear.forEach(cell => cell.destroyBlock(Settings.BLOCK_DESTROY_ANIMATION_DELAY * Math.max(Math.abs(cell.posX - explosionStartingPosition.x), Math.abs(cell.posY - explosionStartingPosition.y))));\r\n                SoundController.instance.playNextLineDestroyingSound(numLines);\r\n                AchievementsManager.instance.addValue(AchievementType.LINES_DESTROYED, numLines);\r\n            } else {\r\n                const scoresEffectPosition: PIXI.Point = this.level.boardManager.getBoard().cellsContainer.toLocal(figure.getView().parent.toGlobal(figure.getView().position), this.game.world);\r\n                this.level.serviceManager.inscriptionsService.displayScoresEffect(figure.getModel().numCells(), scoresEffectPosition.x, scoresEffectPosition.y - 60);\r\n            }\r\n            return numLines;\r\n        }\r\n\r\n        private isRowFilled(rowIndex): boolean {\r\n            return this.getRow(rowIndex).every(cell => cell.isEmpty() == false);\r\n        }\r\n\r\n        private isColumnFilled(columnIndex): boolean {\r\n            return this.getColumn(columnIndex).every(cell => cell.isEmpty() == false);\r\n        }\r\n\r\n        private getRow(rowIndex: number): Cell[] {\r\n            return this.getCells().filter(cell => cell.posX == rowIndex);\r\n        }\r\n\r\n        private getColumn(colIndex: number): Cell[] {\r\n            return this.getCells().filter(cell => cell.posY == colIndex);\r\n        }\r\n\r\n        private findExplosionStartingPosition(explodingCells: Cell[], targetCells: Cell[], pickRandom: boolean): CellPosition {\r\n            let targetCellsToExplode: Cell[] = explodingCells.filter(cell => targetCells.indexOf(cell) != -1);\r\n            if (targetCellsToExplode.length == 0) {\r\n                /* if there are no target cells among exploding ones, which is basically impossible, but who knows :\\ */\r\n                targetCellsToExplode = explodingCells.slice();\r\n            }\r\n            /* find the epicenter of an explosion */\r\n            if (pickRandom) {\r\n                let {posX, posY} = Phaser.ArrayUtils.getRandomItem(targetCellsToExplode);\r\n                return {x: posX, y: posY};\r\n            } else {\r\n                const minX: number = targetCellsToExplode.reduce((min, cell) => Math.min(min, cell.posX), Number.MAX_SAFE_INTEGER);\r\n                const maxX: number = targetCellsToExplode.reduce((max, cell) => Math.max(max, cell.posX), 0);\r\n                const minY: number = targetCellsToExplode.reduce((min, cell) => Math.min(min, cell.posY), Number.MAX_SAFE_INTEGER);\r\n                const maxY: number = targetCellsToExplode.reduce((max, cell) => Math.max(max, cell.posY), 0);\r\n\r\n                return {x: (minX + maxX) / 2, y: (minY + maxY) / 2};\r\n            }\r\n        }\r\n\r\n        public getModel(): BoardModel {\r\n            return new BoardModel(this.numCols, this.numRows).parseFromBoard(this);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class Cell extends Phaser.Group {\r\n\r\n        public readonly board: Board;\r\n        public readonly boardManager: BoardManager;\r\n        public readonly level: Level;\r\n\r\n        protected cellSprite: Phaser.Sprite;\r\n        protected highlightSprite: Phaser.Sprite;\r\n        protected block: Block;\r\n\r\n        private forceHighlighting: boolean = false;\r\n\r\n        public readonly posX: number;\r\n        public readonly posY: number;\r\n\r\n        constructor(board: Board, posX: number, posY: number) {\r\n            super(board.game);\r\n            this.board = board;\r\n            this.boardManager = board.boardManager;\r\n            this.level = this.boardManager.level;\r\n            this.posX = posX;\r\n            this.posY = posY;\r\n\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.cellSprite = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'cell000' + Math.floor(Math.random() * 3)));\r\n            this.cellSprite.anchor.set(0.5);\r\n\r\n            this.highlightSprite = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'block0000'));\r\n            this.highlightSprite.anchor.set(0.5);\r\n            this.highlightSprite.alpha = 0.5;\r\n            this.highlightSprite.visible = false;\r\n\r\n            this.block = null;\r\n        }\r\n\r\n        public equalsTo(anotherCell: Cell): boolean {\r\n            return this.posX === anotherCell.posX && this.posY === anotherCell.posY;\r\n        }\r\n\r\n        public isEmpty(): boolean {\r\n            return this.block == null;\r\n        }\r\n\r\n        public hasBlock(): boolean {\r\n            return !this.isEmpty();\r\n        }\r\n\r\n        public getBlock(): Block {\r\n            return this.block;\r\n        }\r\n\r\n        public disposeBlock(delay: number, deactivateBeforeDisposing: boolean) {\r\n            if(this.hasBlock()) {\r\n                if(deactivateBeforeDisposing) {\r\n                    this.getBlock().deactivate(delay);\r\n                    this.getBlock().dispose(delay + Settings.BLOCK_DEACTIVATION_TWEEN_DURATION);\r\n                } else {\r\n                    this.getBlock().dispose(delay);\r\n                }\r\n                this.block = null;\r\n            }\r\n        }\r\n\r\n        public placeBlock(block: Block) {\r\n            const blockLocalPosition: PIXI.Point = this.board.blocksContainer.toLocal(block.position, block.parent);\r\n            this.block = this.board.blocksContainer.add(block);\r\n            this.block.posX = this.posX;\r\n            this.block.posY = this.posY;\r\n            this.block.position.set(blockLocalPosition.x, blockLocalPosition.y);\r\n\r\n            this.game.tweens.removeFrom(this.block, false);\r\n            this.game.tweens.removeFrom(this.block.scale);\r\n\r\n            this.game.add.tween(this.block)\r\n                .to({x: this.x, y: this.y}, 130, Phaser.Easing.Circular.Out, true, 0);\r\n\r\n            this.game.add.tween(this.block.scale)\r\n                .to({x: 1, y: 1}, 120, Phaser.Easing.Cubic.In, true, 0);\r\n        }\r\n\r\n        public destroyBlock(delay: number) {\r\n            if(this.block) {\r\n                this.block.animateDestroying(this.board.explosionsContainer, delay);\r\n                this.block = null;\r\n            }\r\n        }\r\n\r\n        public applyAlphaHighlighting(value: boolean) {\r\n            if(this.hasBlock()) {\r\n                this.getBlock().alpha = value ? Settings.POWERUP_HIGHLIGHTING_ALPHA : 1;\r\n            } else {\r\n                this.alpha = value ? Settings.POWERUP_HIGHLIGHTING_ALPHA : 1;\r\n            }\r\n        }\r\n\r\n        public resetAlphaHighlighting() {\r\n            if(this.hasBlock()) {\r\n                this.getBlock().alpha = 1;\r\n            }\r\n            this.alpha = 1;\r\n        }\r\n\r\n        public showHighlighting(color: BlockColor, forced: boolean) {\r\n            if(forced) {\r\n                this.forceHighlighting = true;\r\n            }\r\n            if(this.isEmpty()) {\r\n                this.highlightSprite.frameName = 'block000' + color;\r\n                this.highlightSprite.visible = true;\r\n            } else {\r\n                this.block.setTemporalColor(color);\r\n            }\r\n        }\r\n\r\n        public resetView(force: boolean) {\r\n            if(force) {\r\n                this.forceHighlighting = false;\r\n            }\r\n            if(!this.forceHighlighting) {\r\n                this.highlightSprite.visible = false;\r\n            }\r\n            if(!this.isEmpty()) {\r\n                this.block.setColor(this.block.color);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class Figure extends Phaser.Group {\r\n\r\n        public readonly figureManager: FigureManager;\r\n        public readonly board: Board;\r\n        public readonly level: Level;\r\n\r\n        protected inputHandler: Phaser.Sprite;\r\n        protected figureView: FigureView;\r\n        protected figureModel: FigureModel;\r\n\r\n        public figureState: FigureState;\r\n        public barIndex: number;\r\n        public color: BlockColor;\r\n        public posX: number;\r\n        public posY: number;\r\n        public figureWidth: number = 0;\r\n        public figureHeight: number = 0;\r\n        public applicable: boolean = true;\r\n\r\n        constructor(figureManager: FigureManager, figureModel: FigureModel, color: BlockColor, barIndex: number) {\r\n            super(figureManager.game);\r\n            this.figureManager = figureManager;\r\n            this.level = this.figureManager.level;\r\n            this.board = this.level.boardManager.getBoard();\r\n\r\n            this.figureModel = figureModel;\r\n            this.figureState = FigureState.INACTIVE;\r\n            this.color = color;\r\n            this.barIndex = barIndex;\r\n            this.figureWidth = figureModel.getWidth();\r\n            this.figureHeight = figureModel.getHeight();\r\n\r\n            this.figureView = this.add(new FigureView(this, figureModel));\r\n\r\n            /* input handler */\r\n            this.inputHandler = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'blackSquare0000'));\r\n            this.inputHandler.anchor.set(0.5);\r\n            this.inputHandler.inputEnabled = true;\r\n            this.inputHandler.width = 5 * Settings.CELL_WIDTH * Settings.DEFAULT_FIGURE_SCALE;\r\n            this.inputHandler.height = 5 * Settings.CELL_HEIGHT * Settings.DEFAULT_FIGURE_SCALE;\r\n            this.inputHandler.alpha = 0;\r\n            this.inputHandler.events.onInputDown.add(this.handleInputDown, this);\r\n            this.inputHandler.events.onInputUp.add(this.handleInputUp, this);\r\n        }\r\n\r\n        /**\r\n         * PUBLIC\r\n         */\r\n\r\n        public setPosition(posX: number, posY: number) {\r\n            this.posX = posX;\r\n            this.posY = posY;\r\n        }\r\n\r\n        public getView(): FigureView {\r\n            return this.figureView;\r\n        }\r\n\r\n        public getModel(): FigureModel {\r\n            return this.figureModel;\r\n        }\r\n\r\n        public playAppearingTween(delay: number) {\r\n            this.figureView.playAppearingTween(delay);\r\n        }\r\n\r\n        public pickUp() {\r\n            this.figureState = FigureState.DRAGGING;\r\n            if (this.parent) {\r\n                this.parent.setChildIndex(this, this.parent.children.length - 1);\r\n            }\r\n            this.game.add.tween(this.figureView)\r\n                .to(this.level.serviceManager.layoutService.getFigureDraggingDelta(this.barIndex), Settings.FIGURE_PICK_UP_TWEEN_DURATION, Phaser.Easing.Circular.Out, true);\r\n            this.figureView.tweenScale(Settings.DRAGGING_FIGURE_SCALE, true, Settings.FIGURE_PICK_UP_TWEEN_DURATION * 1.25, 1 / this.scale.x * this.board.getScale());\r\n            this.figureView.getBlocks().forEach(block => block.enableGlow(Settings.FIGURE_PICK_UP_TWEEN_DURATION * 1.5));\r\n            SoundController.instance.playFigurePickupSound();\r\n        }\r\n\r\n        public putDown() {\r\n            this.figureState = FigureState.PLACED;\r\n            this.figureView.getBlocks().forEach(block => block.disableGlow(Settings.FIGURE_PICK_UP_TWEEN_DURATION / 2));\r\n            SoundController.instance.playFigurePlaceSound();\r\n        }\r\n\r\n        public release() {\r\n            this.figureState = FigureState.INACTIVE;\r\n            this.game.add.tween(this.figureView)\r\n                .to({x: 0, y: 0}, Settings.FIGURE_PICK_UP_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true);\r\n            this.figureView.tweenScale(Settings.DEFAULT_FIGURE_SCALE, false, Settings.FIGURE_PICK_UP_TWEEN_DURATION);\r\n            this.figureView.getBlocks().forEach(block => block.disableGlow(Settings.FIGURE_PICK_UP_TWEEN_DURATION));\r\n            SoundController.instance.playFigureFailSound();\r\n        }\r\n\r\n        public dispose() {\r\n            this.game.add.tween(this.figureView)\r\n                .to(this.level.serviceManager.layoutService.getFigureDisposingTweenParams(), Settings.FIGURE_DISPOSING_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true)\r\n                .onComplete.add(() => this.destroy());\r\n        }\r\n\r\n        public setApplicable(value: boolean) {\r\n            if(value != this.applicable) {\r\n                this.applicable = value;\r\n                this.game.tweens.removeFrom(this, false);\r\n                this.game.add.tween(this)\r\n                    .to({alpha: value ? 1 : Settings.NOT_APPLICABLE_FIGURE_APLHA}, 350, Phaser.Easing.Linear.None, true, 450);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * INPUT HANDLERS\r\n         */\r\n\r\n        protected handleInputDown() {\r\n            if (this.figureView.isReady) {\r\n                this.figureManager.handleFigureInputDown(this);\r\n            }\r\n        }\r\n\r\n        protected handleInputUp() {\r\n            if (this.figureView.isReady) {\r\n                this.figureManager.handleFigureInputUp(this);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * DESTROY\r\n         */\r\n\r\n        destroy() {\r\n            this.inputHandler.events.onInputDown.remove(this.handleInputDown, this);\r\n            this.inputHandler.events.onInputUp.remove(this.handleInputUp, this);\r\n            super.destroy();\r\n\r\n            this.figureView = null;\r\n            this.inputHandler = null;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AbstractManager extends Phaser.Group {\r\n\r\n        public readonly level: Level;\r\n\r\n        constructor(level: Level) {\r\n            super(level.game);\r\n            this.level = level;\r\n        }\r\n\r\n        public resize(){\r\n            switch (CustomScaleManager.getLayout()) {\r\n                case LayoutType.PORTRAIT:\r\n                    this.resizePortrait();\r\n                    break;\r\n                case LayoutType.SQUARED:\r\n                    this.resizeSquared();\r\n                    break;\r\n                case LayoutType.LANDSCAPE:\r\n                    this.resizeLandscape();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        abstract resizePortrait();\r\n        abstract resizeSquared();\r\n        abstract resizeLandscape();\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BoardManager extends AbstractManager {\r\n\r\n        protected board: Board;\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n\r\n            this.board = this.add(new Board(this, Settings.BOARD_ROWS, Settings.BOARD_COLS));\r\n        }\r\n\r\n        public getBoard(): Board {\r\n            return this.board;\r\n        }\r\n\r\n        resizeLandscape() {\r\n            this.fillAvailableSpace();\r\n        }\r\n\r\n        resizeSquared() {\r\n            this.fillAvailableSpace();\r\n        }\r\n\r\n        resizePortrait() {\r\n            this.fillAvailableSpace();\r\n        }\r\n\r\n        private getOriginalBounds(includePadding: boolean): Phaser.Rectangle {\r\n            const boardWidth: number = (this.getBoard().numCols + (includePadding ? 0.5 : 0)) * Settings.CELL_WIDTH;\r\n            const boardHeight: number = (this.getBoard().numRows + (includePadding ? 0.5 : 0)) * Settings.CELL_HEIGHT;\r\n            return new Phaser.Rectangle(-boardWidth / 2, -boardHeight / 2, boardWidth, boardHeight);\r\n        }\r\n\r\n        public getBoardBounds(targetCoordinateSpace: Phaser.Group, includePadding: boolean = true): Phaser.Rectangle {\r\n            const originalBounds: Phaser.Rectangle = this.getOriginalBounds(includePadding);\r\n            const topLeft: PIXI.Point = targetCoordinateSpace.toLocal(new Phaser.Point(originalBounds.x, originalBounds.y), this.level.boardManager.getBoard().cellsContainer);\r\n            const bottomRight:  PIXI.Point = targetCoordinateSpace.toLocal(new Phaser.Point(originalBounds.x + originalBounds.width, originalBounds.y + originalBounds.height), this.level.boardManager.getBoard().cellsContainer);\r\n            return new Phaser.Rectangle(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);\r\n        }\r\n\r\n        protected fillAvailableSpace() {\r\n            const boardBoundsRect: Phaser.Rectangle = this.getOriginalBounds(true);\r\n            const availableBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailableBoardBounds();\r\n            /* update position and scale */\r\n            this.board.position.set(availableBounds.x, availableBounds.y);\r\n            this.board.scale.set(Math.min(availableBounds.width / boardBoundsRect.width, availableBounds.height / boardBoundsRect.height));\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class DataManager extends AbstractManager {\r\n\r\n        public numMoves: number = 0;\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n\r\n            this.initData();\r\n        }\r\n\r\n        protected initData() {\r\n            this.numMoves = 0;\r\n        }\r\n\r\n\r\n        /**\r\n         * PUBLIC\r\n         */\r\n\r\n        public moveFinished() {\r\n            this.numMoves++;\r\n            this.level.eventManager.onMoveFinished.dispatch(this.numMoves);\r\n        }\r\n\r\n        public dispatchLinesDestroyed(destroyedLines: number, cellPositions: CellPosition[]) {\r\n            this.level.eventManager.onLinesDestroyed.dispatch(destroyedLines, cellPositions);\r\n        }\r\n\r\n        public getMaxMistakeProbability(): number {\r\n            return Phaser.Math.clamp(Settings.MISTAKE_MAX_PROBABILITY + Settings.MISTAKE_MAX_PROBABILITY * (Settings.DIFFICULTY_FACTOR - 1) * 0.2 + this.numMoves * 0.001, 0, 0.4);\r\n        }\r\n\r\n        public getMaxMistakeProbabilityStep(): number {\r\n            return this.getMaxMistakeProbability() / 5;\r\n        }\r\n\r\n        public getMistakeProbabilityStepSpeed(): number {\r\n            return Settings.MISTAKE_PROBABILITY_STEP_SPEED + Settings.MISTAKE_PROBABILITY_STEP_SPEED * (Settings.DIFFICULTY_FACTOR - 1) * 0.15;\r\n        }\r\n\r\n\r\n        /**\r\n         * PRIVATE\r\n         */\r\n\r\n\r\n        /**\r\n         * INHERITED\r\n         */\r\n\r\n        public resizeLandscape() {\r\n\r\n        }\r\n\r\n        public resizeSquared() {\r\n\r\n        }\r\n\r\n        public resizePortrait() {\r\n\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class EventManager extends AbstractManager {\r\n\r\n        public onBoardCreated: Phaser.Signal;\r\n        public onRoundFinished: Phaser.Signal;\r\n        public onMoveFinished: Phaser.Signal;\r\n        public onReviveApplied: Phaser.Signal;\r\n        public onReviveFailed: Phaser.Signal;\r\n        public onLinesDestroyed: Phaser.Signal;\r\n        public onPowerupUsageTimerExceeded: Phaser.Signal;\r\n        public onPowerupApplied: Phaser.Signal;\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n\r\n            this.buildSignals();\r\n        }\r\n\r\n        protected buildSignals() {\r\n            this.onBoardCreated = new Phaser.Signal();\r\n            this.onRoundFinished = new Phaser.Signal();\r\n            this.onMoveFinished = new Phaser.Signal();\r\n            this.onReviveApplied = new Phaser.Signal();\r\n            this.onReviveFailed = new Phaser.Signal();\r\n            this.onLinesDestroyed = new Phaser.Signal();\r\n            this.onPowerupUsageTimerExceeded = new Phaser.Signal();\r\n            this.onPowerupApplied = new Phaser.Signal();\r\n        }\r\n\r\n\r\n        /**\r\n         * INHERITED\r\n         */\r\n\r\n        public resizeLandscape() {\r\n\r\n        }\r\n\r\n        public resizeSquared() {\r\n\r\n        }\r\n\r\n        public resizePortrait() {\r\n\r\n        }\r\n\r\n        destroy() {\r\n            this.onBoardCreated.dispose();\r\n            this.onRoundFinished.dispose();\r\n            this.onMoveFinished.dispose();\r\n            this.onReviveApplied.dispose();\r\n            this.onReviveFailed.dispose();\r\n            this.onLinesDestroyed.dispose();\r\n            this.onPowerupUsageTimerExceeded.dispose();\r\n            this.onPowerupApplied.dispose();\r\n\r\n            super.destroy();\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class FigureManager extends AbstractManager {\r\n\r\n        protected readonly figureService: FigureService;\r\n        protected figuresContainer: Phaser.Group;\r\n        protected figures: Figure[] = [];\r\n        protected activeFigure: Figure = null;\r\n        protected activeFigurePointerDelta: Phaser.Point = null;\r\n\r\n        private currentMistakeStep: number = 0;\r\n        private currentMistakeProbability: number = 0;\r\n        private mistakeImmunityCounter: number = 0;\r\n\r\n        private initialFigureScale: number = 1;\r\n        private readonly initialFigurePositions: Phaser.Point[] = [\r\n            new Phaser.Point(0, 0),\r\n            new Phaser.Point(0, 0),\r\n            new Phaser.Point(0, 0)\r\n        ];\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n            this.figureService = this.level.serviceManager.figureService;\r\n            this.currentMistakeStep = Settings.MISTAKE_PROBABILITY_BASIC_STEP;\r\n            this.mistakeImmunityCounter = this.game.rnd.integerInRange(Settings.MISTAKE_IMMUNITY_MIN_MOVES, Settings.MISTAKE_IMMUNITY_MAX_MOVES);\r\n\r\n            this.buildContent();\r\n            this.resize();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.figuresContainer = this.add(this.game.make.group());\r\n            this.createFigures(false);\r\n        }\r\n\r\n        private getPointerLocalPosition(): Phaser.Point {\r\n            const {x, y} = this.figuresContainer.toLocal(this.game.input.activePointer.position, this.game.world);\r\n            return new Phaser.Point(x, y);\r\n        }\r\n\r\n        private getFigureInitialPosition(figure: Figure): Phaser.Point {\r\n            return this.initialFigurePositions[figure.barIndex];\r\n        }\r\n\r\n        private getFiguresLeft(): number {\r\n            return this.figures.filter(figure => figure != null).length;\r\n        }\r\n\r\n        private createFigures(enableMistakes: boolean) {\r\n            const generatedFigureModels: FigureModel[] = this.figureService.getNextFiguresSet(this.level.boardManager.getBoard().getModel());\r\n            if(enableMistakes && Settings.TUTORIAL_COMPLETED) {\r\n                if(this.level.dataManager.numMoves > this.mistakeImmunityCounter) {\r\n                    // console.log(\"Mistake probability: \" + Phaser.Math.roundTo(this.currentMistakeProbability * 100, -1) + \"%,  step \", Phaser.Math.roundTo(this.currentMistakeStep * 100, -3) + ' speed ' +  Phaser.Math.roundTo(this.level.dataManager.getMistakeProbabilityStepSpeed() * 100, -3));\r\n                    this.currentMistakeStep = Phaser.Math.clamp(this.currentMistakeStep + this.level.dataManager.getMistakeProbabilityStepSpeed(), 0, this.level.dataManager.getMaxMistakeProbabilityStep());\r\n                    this.currentMistakeProbability += this.currentMistakeStep;\r\n                    if(Math.random() < this.currentMistakeProbability) {\r\n                        console.log(\"Random figure generated with probability of \" + Phaser.Math.roundTo(this.currentMistakeProbability * 100, -1) + '%');\r\n                        generatedFigureModels[Math.floor(Math.random() * generatedFigureModels.length)] = this.figureService.getRandomFigureModel();\r\n                        this.currentMistakeProbability = 0;\r\n                        this.currentMistakeStep *= (Settings.DIFFICULTY_FACTOR - 1) * 0.05;\r\n                    }\r\n\r\n                }\r\n            }\r\n            generatedFigureModels.forEach((model, index) =>\r\n                this.addFigure(new Figure(this, model, this.figureService.getRandomColor(), index), (index + 1) * Settings.FIGURE_APPEARING_DELAY + 100));\r\n            this.alignFigures();\r\n        }\r\n\r\n        /**\r\n         * INHERITED\r\n         */\r\n\r\n        update() {\r\n            super.update();\r\n\r\n            if (this.activeFigure) {\r\n                this.activeFigure.position.copyFrom(this.getPointerLocalPosition().subtract(this.activeFigurePointerDelta.x, this.activeFigurePointerDelta.y));\r\n                this.level.boardManager.getBoard().dispatchFigureIsBeingDragged(this.activeFigure);\r\n            } else {\r\n                this.level.boardManager.getBoard().dispatchFigureIsBeingDragged(null);\r\n            }\r\n        }\r\n\r\n        resizeLandscape() {\r\n            const availableBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailableFiguresPanelBounds();\r\n            const targetCellWidth: number = Math.min(availableBounds.width / (6), availableBounds.height / (3 * 6));\r\n            const figureScale: number = targetCellWidth / Settings.CELL_WIDTH;\r\n\r\n            /* remember initial positions and scale */\r\n            this.initialFigurePositions.forEach((position, index) => position.set(0, (index - 1) * targetCellWidth * 6));\r\n            this.initialFigureScale = figureScale;\r\n\r\n            this.figuresContainer.position.set(availableBounds.x, availableBounds.y);\r\n            this.alignFigures();\r\n        }\r\n\r\n\r\n        resizeSquared() {\r\n            const availableBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailableFiguresPanelBounds();\r\n            const targetCellWidth: number = Math.min(availableBounds.width / (6), availableBounds.height / (3 * 6));\r\n            const figureScale: number = targetCellWidth / Settings.CELL_WIDTH;\r\n\r\n            /* remember initial positions and scale */\r\n            this.initialFigurePositions.forEach((position, index) => position.set(0, (index - 1) * targetCellWidth * 6));\r\n            this.initialFigureScale = figureScale;\r\n\r\n            this.figuresContainer.position.set(availableBounds.x, availableBounds.y);\r\n            this.alignFigures();\r\n        }\r\n\r\n        resizePortrait() {\r\n            const availableBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailableFiguresPanelBounds();\r\n            const targetCellWidth: number = Math.min(availableBounds.width / (3 * 6), availableBounds.height / (6));\r\n            const figureScale: number = targetCellWidth / Settings.CELL_WIDTH;\r\n\r\n            /* remember initial positions and scale */\r\n            this.initialFigurePositions.forEach((position, index) => position.set((index - 1) * targetCellWidth * 6, 0));\r\n            this.initialFigureScale = figureScale;\r\n\r\n            this.figuresContainer.position.set(availableBounds.x, availableBounds.y - availableBounds.height * 0.05);\r\n            this.alignFigures();\r\n        }\r\n\r\n        private getOriginalBounds(): Phaser.Rectangle {\r\n            const bounds: PIXI.Rectangle = this.figuresContainer.getBounds(this.figuresContainer.parent);\r\n            this.add(this.game.make.graphics(bounds.x, bounds.y).beginFill(0xFFFFFF, 0.5).drawRect(0, 0, bounds.width, bounds.height).endFill());\r\n            return new Phaser.Rectangle(bounds.x, bounds.y, bounds.width, bounds.height);\r\n        }\r\n\r\n        private alignFigures() {\r\n            this.figures.forEach(figure => {\r\n                if (figure) {\r\n                    this.game.tweens.removeFrom(figure, false);\r\n                    figure.scale.set(this.initialFigureScale / Settings.DEFAULT_FIGURE_SCALE);\r\n                    figure.position.copyFrom(this.getFigureInitialPosition(figure));\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * PUBLIC\r\n         */\r\n\r\n        public getFigures(): Figure[] {\r\n            return this.figures;\r\n        }\r\n\r\n        public addFigure(figure: Figure, delay: number) {\r\n            this.figures[figure.barIndex] = this.figuresContainer.add(figure);\r\n            figure.position.copyFrom(this.getFigureInitialPosition(figure));\r\n            figure.playAppearingTween(delay);\r\n        }\r\n\r\n        public removeFigure(figure: Figure) {\r\n            if (this.figures.indexOf(figure) != -1) {\r\n                this.figures[this.figures.indexOf(figure)] = null;\r\n                figure.destroy();\r\n            }\r\n\r\n            if (this.getFiguresLeft() == 0) {\r\n                this.level.eventManager.onRoundFinished.dispatch();\r\n                this.createFigures(true);\r\n            }\r\n        }\r\n\r\n        public regenerateFigures() {\r\n            for(let i: number = 0; i < this.figures.length; i++) {\r\n                if(this.figures[i]) {\r\n                    this.figures[i].dispose();\r\n                }\r\n                this.figures[i] = null;\r\n            }\r\n            this.createFigures(false);\r\n        }\r\n\r\n        public isNextMovePossible(): boolean {\r\n            const figures: Figure[] = this.figures.filter(figure => !!figure).sort((a,b) => a.getModel().numCells() - b.getModel().numCells());\r\n            let applicableFiguresAmount: number = 0;\r\n\r\n            this.figures.forEach(figure =>  {\r\n                 if(figure) {\r\n                     const isApplicable: boolean = this.figureService.hasAvailableSpaceForFigure(figure, this.level.boardManager.getBoard().getModel());\r\n                     figure.setApplicable(isApplicable);\r\n                     if(isApplicable) {\r\n                         applicableFiguresAmount += 1;\r\n                     }\r\n                }\r\n            });\r\n            return applicableFiguresAmount > 0;\r\n        }\r\n\r\n        public updateFiguresApplicability() {\r\n            this.figures.forEach(figure => figure && figure.setApplicable(this.figureService.hasAvailableSpaceForFigure(figure, this.level.boardManager.getBoard().getModel())));\r\n        }\r\n\r\n        public handleFigureInputDown(figure: Figure) {\r\n            if (this.level.gameStateManager.isGameActive() && !this.activeFigure && figure.figureState == FigureState.INACTIVE) {\r\n                if(!Settings.TUTORIAL_COMPLETED && this.level.tutorialManager.getActiveFigure() != figure) {\r\n                    return;\r\n                }\r\n                this.activeFigure = figure;\r\n                this.activeFigure.pickUp();\r\n                this.activeFigurePointerDelta = this.getPointerLocalPosition().subtract(this.activeFigure.x, this.activeFigure.y);\r\n            }\r\n        }\r\n\r\n        public handleFigureInputUp(figure: Figure) {\r\n            if (this.level.gameStateManager.isGameActive() && this.activeFigure && this.activeFigure == figure) {\r\n                if (this.level.boardManager.getBoard().placeFigure(figure)) {\r\n                    /* figure placed succesfully */\r\n                    //\r\n                    // const scoresEffectPosition: PIXI.Point = this.level.boardManager.getBoard().cellsContainer.toLocal(figure.getView().parent.toGlobal(figure.getView().position), this.game.world);\r\n                    // this.level.serviceManager.inscriptionsService.displayScoresEffect(figure.getModel().numCells(), scoresEffectPosition.x, scoresEffectPosition.y - 60);\r\n\r\n                    AchievementsManager.instance.addValue(AchievementType.BLOCKS_PLACED, figure.getModel().numCells());\r\n                    this.activeFigure.putDown();\r\n                    this.removeFigure(this.activeFigure);\r\n                    this.level.dataManager.moveFinished();\r\n                } else {\r\n                    const returnDuration: number = Settings.FIGURE_PICK_UP_TWEEN_DURATION;\r\n                    this.game.add.tween(this.activeFigure)\r\n                        .to({\r\n                            x: this.getFigureInitialPosition(figure).x,\r\n                            y: this.getFigureInitialPosition(figure).y\r\n                        }, returnDuration, Phaser.Easing.Linear.None, true);\r\n                    this.activeFigure.release();\r\n                }\r\n            }\r\n            this.activeFigure = null;\r\n            this.activeFigurePointerDelta = null;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class GameStateManager extends AbstractManager {\r\n\r\n        private started: boolean = false;\r\n        private finished: boolean = false;\r\n        private paused: boolean = false;\r\n        private reviveAvailable: boolean = true;\r\n        private reviveUsed: boolean = false;\r\n\r\n        private reviveTimer: number = 0;\r\n        private resultsTimer: number = 0;\r\n\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n\r\n            this.reviveAvailable = true;\r\n\r\n            this.level.eventManager.onBoardCreated.add(this.dispatchBoardCreated, this);\r\n            this.level.eventManager.onMoveFinished.add(this.dispatchMoveFinished, this);\r\n            this.level.eventManager.onPowerupUsageTimerExceeded.add(this.dispatchPowerupUsageTimerExceeded, this);\r\n            this.level.eventManager.onPowerupApplied.add(this.dispatchPowerupApplied, this);\r\n            this.level.eventManager.onReviveApplied.add(this.reviveApplied, this);\r\n            this.level.eventManager.onReviveFailed.add(this.reviveFailed, this);\r\n        }\r\n\r\n\r\n        update() {\r\n            super.update();\r\n\r\n            if (this.reviveTimer > 0) {\r\n                this.reviveTimer--;\r\n                if (this.reviveTimer <= 0) {\r\n                    this.reviveTimer = 0;\r\n                    WindowManager.instance.showRevive();\r\n                }\r\n            }\r\n\r\n            if (this.resultsTimer > 0) {\r\n                this.resultsTimer--;\r\n                if (this.resultsTimer <= 0) {\r\n                    this.resultsTimer = 0;\r\n\r\n                    Analytics.instance.finishLevel(ScoreManager.instance.getCurrentScores(), StarsManager.instance.getLastRoundStars(), this.reviveUsed ? 1 : 0, this.level.uiManager.powerupContainer.usedPowerups);\r\n                    WindowManager.instance.showResults();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * PUBLIC\r\n         */\r\n\r\n        public isGameActive(): boolean {\r\n            return this.started && !this.paused && !this.finished;\r\n        }\r\n\r\n        public isStarted(): boolean {\r\n            return this.started;\r\n        }\r\n\r\n        public isPaused(): boolean {\r\n            return this.paused;\r\n        }\r\n\r\n        public isFinished(): boolean {\r\n            return this.finished;\r\n        }\r\n\r\n        /**\r\n         * PRIVATE\r\n         */\r\n\r\n        private dispatchBoardCreated() {\r\n            this.started = true;\r\n        }\r\n\r\n        private dispatchMoveFinished() {\r\n            if (!this.finished && !this.level.figureManager.isNextMovePossible()) {\r\n                if (PowerupManager.instance.hasBoughtPowerups()) {\r\n                    this.level.uiManager.powerupContainer.startCountdown();\r\n                } else {\r\n                    this.finishGame();\r\n                }\r\n            }\r\n        }\r\n\r\n        private dispatchPowerupUsageTimerExceeded() {\r\n            if (!this.finished && !this.level.figureManager.isNextMovePossible()) {\r\n                this.finishGame();\r\n            }\r\n        }\r\n\r\n        private dispatchPowerupApplied() {\r\n            if (!this.finished) {\r\n                if(!this.level.figureManager.isNextMovePossible()) {\r\n                    if (PowerupManager.instance.hasBoughtPowerups()) {\r\n                        this.level.uiManager.powerupContainer.startCountdown();\r\n                    } else {\r\n                        this.finishGame();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private finishGame() {\r\n            this.finished = true;\r\n            this.reviveAvailable = this.reviveAvailable && APIUtils.instance.hasRewardedVideo();\r\n            if (this.reviveAvailable) {\r\n                this.reviveAvailable = false;\r\n                this.reviveTimer = Settings.REVIVE_WINDOW_TIMER;\r\n                this.resultsTimer = 0;\r\n                this.level.boardManager.getBoard().deactivate(200);\r\n            } else {\r\n                this.level.uiManager.levelFinished();\r\n                this.reviveTimer = 0;\r\n                this.resultsTimer = Settings.RESULTS_WINDOW_TIMER_WITHOUT_REVIVE;\r\n                this.level.boardManager.getBoard().disposeBlocks(250, true);\r\n            }\r\n        }\r\n\r\n        private reviveApplied() {\r\n            Analytics.instance.updateLevelData({revives: 1});\r\n            this.reviveUsed = true;\r\n            this.finished = false;\r\n            this.reviveTimer = 0;\r\n            this.resultsTimer = 0;\r\n            this.level.figureManager.regenerateFigures();\r\n            this.level.boardManager.getBoard().activate();\r\n        }\r\n\r\n        private reviveFailed() {\r\n            this.finished = true;\r\n            this.reviveTimer = 0;\r\n            this.resultsTimer = Settings.RESULTS_WINDOW_TIMER;\r\n            this.level.boardManager.getBoard().disposeBlocks(250, false);\r\n            this.level.uiManager.levelFinished();\r\n        }\r\n\r\n\r\n        /**\r\n         * INHERITED\r\n         */\r\n\r\n        public resizeLandscape() {\r\n        }\r\n\r\n        public resizeSquared() {\r\n        }\r\n\r\n        public resizePortrait() {\r\n        }\r\n\r\n        destroy() {\r\n            super.destroy();\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ServiceManager extends AbstractManager {\r\n\r\n        public layoutService: LayoutService;\r\n        public figureService: FigureService;\r\n        public starsService: StarsService;\r\n        public inscriptionsService: InscriptionsService;\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n\r\n            this.initServices();\r\n        }\r\n\r\n        protected initServices() {\r\n            this.layoutService = new LayoutService(this);\r\n            this.figureService = new FigureService(this);\r\n            this.starsService = new StarsService(this);\r\n            this.inscriptionsService = new InscriptionsService(this);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * INHERITED\r\n         */\r\n\r\n        public resizeLandscape() {\r\n\r\n        }\r\n\r\n        public resizeSquared() {\r\n\r\n        }\r\n\r\n        public resizePortrait() {\r\n\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class TutorialManager extends AbstractManager {\r\n\r\n        private tutorialHand: Phaser.Sprite;\r\n        private isManualTutorialActive: boolean = Settings.TUTORIAL_COMPLETED;\r\n        private isInitialized: boolean = false;\r\n\r\n        private activeFigure: Figure = null;\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n\r\n            this.buildContent();\r\n\r\n            this.level.eventManager.onBoardCreated.add(this.handleBoardCreated, this);\r\n            this.level.eventManager.onMoveFinished.add(this.handleFigurePlaced, this);\r\n            this.level.eventManager.onRoundFinished.add(this.handleRoundFinished, this);\r\n            this.visible = false;\r\n        }\r\n\r\n        public start() {\r\n            this.isInitialized = true;\r\n        }\r\n\r\n        resizeLandscape() {\r\n            this.startHandAnimation();\r\n        }\r\n\r\n        resizeSquared() {\r\n            this.startHandAnimation();\r\n        }\r\n\r\n        resizePortrait() {\r\n            this.startHandAnimation();\r\n        }\r\n\r\n        update() {\r\n            super.update();\r\n        }\r\n\r\n\r\n        public getActiveFigure(): Figure {\r\n            return this.activeFigure;\r\n        }\r\n\r\n        public restartTutorial() {\r\n            this.isManualTutorialActive = true;\r\n            Settings.TUTORIAL_COMPLETED = false;\r\n            this.startHandAnimation();\r\n        }\r\n\r\n        /**\r\n         * PRIVATE\r\n         */\r\n\r\n        private buildContent() {\r\n            this.tutorialHand = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'tutorialHand0000'));\r\n            this.tutorialHand.anchor.set(0.4, 0);\r\n            this.visible = false;\r\n        }\r\n\r\n        private startHandAnimation() {\r\n            if (this.isInitialized && !Settings.TUTORIAL_COMPLETED) {\r\n\r\n                const board: Board = this.level.boardManager.getBoard();\r\n                this.level.boardManager.getBoard().getCells().forEach(cell => cell.resetView(true));\r\n\r\n                this.visible = true;\r\n                const currentFigure: Figure = this.level.figureManager.getFigures().slice().filter(f => !!f).sort((a, b) => a.getModel().numCells() - b.getModel().numCells())[0];\r\n                if (currentFigure) {\r\n                    this.activeFigure = currentFigure;\r\n                    const figureLocalPosition: PIXI.Point = this.toLocal(currentFigure.getView().position, currentFigure.getView().parent);\r\n\r\n                    let targetCell: Cell = this.level.boardManager.getBoard().getCellAt(currentFigure.getModel().posX, currentFigure.getModel().posY);\r\n                    if(!targetCell) {\r\n                        const figurePosition: FigurePosition = this.level.serviceManager.figureService.getRandomPositionForFigure(currentFigure, board.getModel());\r\n                        if(figurePosition) {\r\n                            currentFigure.getModel().posX = figurePosition.x;\r\n                            currentFigure.getModel().posY = figurePosition.y;\r\n                            targetCell =  this.level.boardManager.getBoard().getCellAt(figurePosition.x, figurePosition.y);\r\n                        } else {\r\n                            this.finishTutorial();\r\n                            return;\r\n                        }\r\n                    }\r\n                    const targetCellLocalPosition: PIXI.Point = this.toLocal(targetCell.position, targetCell.parent);\r\n\r\n                    this.game.tweens.removeFrom(this.tutorialHand);\r\n                    this.tutorialHand.position.set(figureLocalPosition.x, figureLocalPosition.y);\r\n                    this.tutorialHand.alpha = 0;\r\n\r\n                    /* tweens */\r\n                    const preparingTween: Phaser.Tween = this.game.add.tween(this.tutorialHand)\r\n                        .to({alpha: 1, x: figureLocalPosition.x, y: figureLocalPosition.y}, 500, Phaser.Easing.Sinusoidal.Out, false);\r\n\r\n                    const movingTween: Phaser.Tween = this.game.add.tween(this.tutorialHand)\r\n                        .to({\r\n                            x: targetCellLocalPosition.x + (currentFigure.getModel().getCenterX() - 0.5) * Settings.CELL_WIDTH * board.getScale(),\r\n                            y: targetCellLocalPosition.y  + (currentFigure.getModel().getCenterY() - 0.5) * Settings.CELL_HEIGHT * board.getScale()\r\n                        }, 1200, Phaser.Easing.Sinusoidal.InOut, false, 0, 0, false);\r\n\r\n                    const finishingTween: Phaser.Tween = this.game.add.tween(this.tutorialHand)\r\n                        .to({alpha: 0}, 750, Phaser.Easing.Exponential.In, false);\r\n\r\n                    const returningTween: Phaser.Tween = this.game.add.tween(this.tutorialHand)\r\n                        .to({x: figureLocalPosition.x, y: figureLocalPosition.y}, 10, Phaser.Easing.Linear.None, false);\r\n\r\n                    preparingTween.onComplete.add(() => this.tutorialHand.frameName = 'tutorialHand0001');\r\n                    finishingTween.onStart.add(() => this.tutorialHand.frameName = 'tutorialHand0000');\r\n\r\n                    preparingTween.chain(movingTween);\r\n                    movingTween.chain(finishingTween);\r\n                    finishingTween.chain(returningTween);\r\n                    returningTween.chain(preparingTween);\r\n\r\n                    preparingTween.start();\r\n\r\n                    currentFigure.getModel().getCells().forEach(cell => board.getCellAt(targetCell.posX + cell.x, targetCell.posY + cell.y).showHighlighting(currentFigure.color, true));\r\n                } else {\r\n                    this.activeFigure = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        private handleFigurePlaced() {\r\n            if (this.isInitialized && Settings.TUTORIAL_COMPLETED) {\r\n                return;\r\n            }\r\n            /* remove all tutorial highlightings */\r\n            this.level.boardManager.getBoard().getCells().forEach(cell => cell.resetView(true));\r\n\r\n            if (this.isManualTutorialActive) {\r\n                return this.finishTutorial();\r\n            }\r\n\r\n            /* show next figure */\r\n            this.startHandAnimation();\r\n        }\r\n\r\n        private handleRoundFinished() {\r\n            this.finishTutorial();\r\n        }\r\n\r\n\r\n        private finishTutorial() {\r\n            if(!Settings.TUTORIAL_COMPLETED) {\r\n                this.visible = false;\r\n                this.activeFigure = null;\r\n                Settings.TUTORIAL_COMPLETED = true;\r\n                LocalStorageController.instance.save();\r\n                if(Settings.ENABLE_API) {\r\n                    window[\"famobi_analytics\"].trackEvent(\r\n                        \"EVENT_TUTORIALCOMPLETED\"\r\n                    )\r\n                }\r\n                this.level.boardManager.getBoard().getCells().forEach(cell => cell.resetView(true));\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * EVENT LISTENERS\r\n         */\r\n\r\n        private handleBoardCreated() {\r\n            this.isInitialized = true;\r\n            this.startHandAnimation();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class UIManager extends AbstractManager {\r\n\r\n        protected topContainer: Phaser.Group;\r\n        protected buttonAchievements: ButtonAchievements;\r\n        protected buttonSettings: Phaser.Button;\r\n        public scoreCounter: ScoreCounter;\r\n        public starsCounter: StarsCounter;\r\n        public multiplierBar: MultiplierBar;\r\n        public powerupContainer: PowerupContainer;\r\n\r\n        constructor(level: Level) {\r\n            super(level);\r\n\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.buttonAchievements = this.add(new ButtonAchievements(this.level));\r\n            this.buttonSettings = this.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonSettings', 0, 0, 1, this.settingsClicked, this,));\r\n            this.topContainer = this.add(this.game.make.group());\r\n            this.scoreCounter = this.topContainer.add(new ScoreCounter(this));\r\n            this.starsCounter = this.topContainer.add(new StarsCounter(this));\r\n            this.multiplierBar = this.topContainer.add(new MultiplierBar(this));\r\n            this.powerupContainer = this.add(new PowerupContainer(this));\r\n        }\r\n\r\n        resizeLandscape() {\r\n            const availableBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailableUIContainerBounds();\r\n\r\n            this.buttonAchievements.position.set(this.level.windowBounds.left + availableBounds.width / 2, this.level.windowBounds.top + 70);\r\n            this.buttonSettings.position.set(this.level.windowBounds.right -  availableBounds.width / 2, this.level.windowBounds.top + 65);\r\n            this.scoreCounter.position.set(-65, -50);\r\n            this.multiplierBar.position.set(-65, -50);\r\n            this.starsCounter.position.set(-65, 50);\r\n\r\n            this.buttonAchievements[\"setScale\"](1.18);\r\n            this.buttonSettings[\"setScale\"](1.18);\r\n\r\n            this.topContainer.position.set(availableBounds.x, availableBounds.y);\r\n            this.topContainer.scale.set(Math.min(1.25, availableBounds.width / this.topContainer.getLocalBounds().width));\r\n\r\n            this.buttonAchievements.resizeLandscape();\r\n            this.powerupContainer.resize();\r\n        }\r\n\r\n        resizeSquared() {\r\n            this.buttonAchievements.position.set(this.level.windowBounds.left + 95, this.level.windowBounds.top + 60);\r\n            this.buttonSettings.position.set(this.level.windowBounds.right - 88, this.level.windowBounds.top + 60);\r\n            this.topContainer.position.copyFrom(this.level.windowBounds.getPosition(0.5, 0, 0, 55));\r\n            this.topContainer.scale.set(0.95);\r\n            this.scoreCounter.position.set(-this.level.windowBounds.width * 0.22, 0);\r\n            this.multiplierBar.position.set(-this.level.windowBounds.width * 0.22, 0);\r\n            this.starsCounter.position.set(this.level.windowBounds.width * 0.06, 0);\r\n\r\n            this.buttonAchievements[\"setScale\"](1.1);\r\n            this.buttonSettings[\"setScale\"](1.1);\r\n\r\n            this.buttonAchievements.resizeSquared();\r\n            this.powerupContainer.resize();\r\n        }\r\n\r\n        resizePortrait() {\r\n            const availableBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailableUIContainerBounds();\r\n\r\n            this.buttonAchievements.position.set(this.level.windowBounds.left + 65, this.level.windowBounds.down - 65);\r\n            this.buttonSettings.position.set(this.level.windowBounds.right - 65, this.level.windowBounds.down - 65);\r\n            this.topContainer.position.copyFrom(this.level.windowBounds.getPosition(0.5, 0, 0, 0))\r\n            this.topContainer.y = availableBounds.y;\r\n            this.topContainer.scale.set(1);\r\n            this.scoreCounter.position.set(-this.level.windowBounds.width * 0.3, 0);\r\n            this.multiplierBar.position.set(-this.level.windowBounds.width * 0.3, 0);\r\n            this.starsCounter.position.set(this.level.windowBounds.width * 0.13, 0);\r\n\r\n            this.buttonAchievements[\"setScale\"](1.1);\r\n            this.buttonSettings[\"setScale\"](1.1);\r\n\r\n            this.buttonAchievements.resizePortrait();\r\n            this.powerupContainer.resize();\r\n        }\r\n\r\n        public levelFinished() {\r\n            this.powerupContainer.hidePowerups();\r\n        }\r\n\r\n\r\n        /**\r\n         * EVENT LISTENERS\r\n         */\r\n\r\n        protected settingsClicked() {\r\n            if(Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_SETTINGS);\r\n            }\r\n            WindowManager.instance.showSettings();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BoardModel {\r\n\r\n        public readonly numRows: number;\r\n        public readonly numCols: number;\r\n\r\n        public cleanedCells: number = 0;\r\n\r\n        public cells: CellModelState[][];\r\n\r\n        constructor(numCols: number, numRows: number) {\r\n            this.numCols = numCols;\r\n            this.numRows = numRows;\r\n        }\r\n\r\n        public parseFromBoard(board: Board): BoardModel {\r\n            this.cells = [];\r\n            for (let i: number = 0; i < this.numCols; i++) {\r\n                this.cells[i] = [];\r\n                for (let j: number = 0; j < this.numRows; j++) {\r\n                    this.cells[i][j] = CellModelState.CELL_EMPTY;\r\n                }\r\n            }\r\n            for (let cell of board.getCells()) {\r\n                this.cells[cell.posX][cell.posY] = cell.isEmpty() ? CellModelState.CELL_EMPTY : CellModelState.CELL_BUSY;\r\n            }\r\n            return this;\r\n        }\r\n\r\n        public getCopy(): BoardModel {\r\n            return new BoardModel(this.numCols, this.numRows).copyFrom(this);\r\n        }\r\n\r\n        public copyFrom(another: BoardModel): BoardModel {\r\n            this.cleanedCells = another.cleanedCells;\r\n            this.cells = another.cells.map(col => col.slice());\r\n            return this;\r\n        }\r\n\r\n        public getCellStateAt(x: number, y: number): CellModelState {\r\n            return (x >= 0 && x < this.numCols && y >= 0 && y < this.numRows) ? this.cells[x][y] : null;\r\n        }\r\n\r\n        public setCellStateAt(state: CellModelState, x: number, y: number) {\r\n            if (x >= 0 && x < this.numCols && y >= 0 && y < this.numRows) {\r\n                this.cells[x][y] = state\r\n            }\r\n        }\r\n\r\n        public placeFigure(preset: FigurePreset, position: FigurePosition) {\r\n            if (this.couldBePlaced(preset, position)) {\r\n                preset.forEach(cellModel => this.setCellStateAt(CellModelState.CELL_BUSY, position.x + cellModel.x, position.y + cellModel.y));\r\n                this.clearFilledRowsAndColumns();\r\n            }\r\n        }\r\n\r\n        public couldBePlaced(figure: FigurePreset, position: FigurePosition): boolean {\r\n            return figure.map(cellModel => this.getCellStateAt(position.x + cellModel.x, position.y + cellModel.y)).every(cellStatus => cellStatus == CellModelState.CELL_EMPTY);\r\n        }\r\n\r\n        public print() {\r\n            console.log(this.cells.map((col, colIdx) =>\r\n                col.map((item, rowIdx) => this.cells[rowIdx][colIdx])\r\n            ));\r\n        }\r\n\r\n        public equals(another: BoardModel): boolean {\r\n            if (this.numRows != another.numRows || this.numCols != another.numCols) {\r\n                return false;\r\n            }\r\n            for (let i: number = 0; i < this.numCols; i++) {\r\n                for (let j: number = 0; j < this.numRows; j++) {\r\n                    if (this.cells[i][j] != another.getCellStateAt(i, j)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public findCellsToClear(): CellPosition[] {\r\n            let cellsToClear: CellPosition[] = [];\r\n\r\n            //check rows\r\n            for (let i: number = 0; i < this.numRows; i++) {\r\n                if (this.isRowFilled(i)) {\r\n                    cellsToClear = ArrayUtils.uniteArrays(cellsToClear, this.getRowModel(i));\r\n                }\r\n            }\r\n            //check columns\r\n            for (let i: number = 0; i < this.numCols; i++) {\r\n                if (this.isColumnFilled(i)) {\r\n                    cellsToClear = ArrayUtils.uniteArrays(cellsToClear, this.getColumnModel(i));\r\n                }\r\n            }\r\n\r\n            return cellsToClear;\r\n        }\r\n\r\n        /**\r\n         * PRIVATE\r\n         */\r\n\r\n        private clearFilledRowsAndColumns() {\r\n            this.findCellsToClear().forEach(cell => {\r\n                if (this.getCellStateAt(cell.x, cell.y) != CellModelState.CELL_EMPTY) {\r\n                    this.cleanedCells += 1;\r\n                    this.setCellStateAt(CellModelState.CELL_EMPTY, cell.x, cell.y)\r\n                }\r\n            });\r\n        }\r\n\r\n        private isRowFilled(rowIndex): boolean {\r\n            return this.getRow(rowIndex).every(cellState => cellState != CellModelState.CELL_EMPTY);\r\n        }\r\n\r\n        private isColumnFilled(columnIndex): boolean {\r\n            return this.getColumn(columnIndex).every(cellState => cellState != CellModelState.CELL_EMPTY);\r\n        }\r\n\r\n        private getRow(rowIndex: number): CellModelState[] {\r\n            return this.cells.map(column => column[rowIndex]);\r\n        }\r\n\r\n        private getColumn(colIndex: number): CellModelState[] {\r\n            return this.cells[colIndex].slice();\r\n        }\r\n\r\n        private getRowModel(rowIndex: number): CellPosition[] {\r\n            return this.cells.map((column, colIdx) => {\r\n                return {x: colIdx, y: rowIndex};\r\n            });\r\n        }\r\n\r\n        private getColumnModel(colIndex: number): CellPosition[] {\r\n            return this.cells[colIndex].map((value, rowIdx) => {\r\n                return {x: colIndex, y: rowIdx}\r\n            });\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class CellModel extends Phaser.Point {\r\n\r\n        constructor(posX: number, posY: number) {\r\n            super(posX, posY);\r\n        }\r\n\r\n\r\n        public getCopy(): CellModel {\r\n            return new CellModel(this.posX, this.posY);\r\n        }\r\n\r\n        /* getters & setters */\r\n        get posX(): number {\r\n            return this.x;\r\n        }\r\n\r\n        set posX(value: number) {\r\n            this.x = value;\r\n        }\r\n\r\n        get posY(): number {\r\n            return this.y;\r\n        }\r\n\r\n        set posY(value: number) {\r\n            this.y = value;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class FigureModel {\r\n\r\n        protected cells: CellModel[];\r\n\r\n        private figureWidth: number = 0;\r\n        private figureHeight: number = 0;\r\n        private centerX: number = 0;\r\n        private centerY: number = 0;\r\n\r\n        public posX: number;\r\n        public posY: number;\r\n\r\n        constructor(cells: FigurePreset) {\r\n            this.cells = cells.slice();\r\n\r\n            this.normalizeCells();\r\n        }\r\n\r\n        protected normalizeCells() {\r\n            if (!this.cells || this.cells.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const minX: number = this.cells.reduce((prev, cell) => prev.posX <= cell.posX ? prev : cell).posX;\r\n            const minY: number = this.cells.reduce((prev, cell) => prev.posY <= cell.posY ? prev : cell).posY;\r\n\r\n            this.cells.forEach(cellModel => cellModel.subtract(minX, minY));\r\n\r\n            /* calculate figure width & height (measured in cells) */\r\n            this.figureWidth = this.cells.reduce((prev, cell) => prev.posX >= cell.posX ? prev : cell).posX - this.cells.reduce((prev, cell) => prev.posX <= cell.posX ? prev : cell).posX + 1;\r\n            this.figureHeight = this.cells.reduce((prev, cell) => prev.posY >= cell.posY ? prev : cell).posY - this.cells.reduce((prev, cell) => prev.posY <= cell.posY ? prev : cell).posY + 1;\r\n\r\n            this.centerX = this.figureWidth / 2;\r\n            this.centerY = this.figureHeight / 2;\r\n        }\r\n\r\n        /**\r\n         * PUBLIC\r\n         */\r\n\r\n        public setPosition(posX: number, posY: number): FigureModel {\r\n            this.posX = posX;\r\n            this.posY = posY;\r\n            return this;\r\n        }\r\n\r\n        public getCells(): CellModel[] {\r\n            return this.cells;\r\n        }\r\n\r\n        public numCells(): number {\r\n            return this.getCells().length;\r\n        }\r\n\r\n        public getWidth(): number {\r\n            return this.figureWidth;\r\n        }\r\n\r\n        public getHeight(): number {\r\n            return this.figureHeight;\r\n        }\r\n\r\n        public getCenterX(): number {\r\n            return this.centerX;\r\n        }\r\n\r\n        public getCenterY(): number {\r\n            return this.centerY;\r\n        }\r\n\r\n        public clone(): FigureModel {\r\n            return new FigureModel(this.getCells().map(cell => new CellModel(cell.posX, cell.posY)));\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AbstractService {\r\n\r\n        public readonly serviceManager: ServiceManager;\r\n        public readonly level: Level;\r\n\r\n        constructor(serviceManager: ServiceManager) {\r\n            this.serviceManager = serviceManager;\r\n            this.level = serviceManager.level;\r\n        }\r\n\r\n    }\r\n}","///<reference path=\"../../Types.ts\"/>\r\nnamespace BlockPuzzle {\r\n\r\n    export class FigureService extends AbstractService {\r\n\r\n        private prevColor: BlockColor = null;\r\n\r\n        protected readonly figurePresets: FigurePreset[] = [\r\n            this.normalizeCells([\r\n                new CellModel(1, 1)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(1, 0)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(0, 1)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(1, 0),\r\n                new CellModel(2, 0)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(0, 1),\r\n                new CellModel(0, 2)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(1, 0),\r\n                new CellModel(0, 1)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(0, 1),\r\n                new CellModel(1, 1),\r\n                new CellModel(2, 1)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(0, 1),\r\n                new CellModel(0, 2),\r\n                new CellModel(0, 3)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(0, 1),\r\n                new CellModel(1, 0),\r\n                new CellModel(1, 1)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(1, 0),\r\n                new CellModel(0, 1),\r\n                new CellModel(1, 1),\r\n                new CellModel(2, 1)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(1, 0),\r\n                new CellModel(2, 0),\r\n                new CellModel(0, 1),\r\n                new CellModel(1, 1)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(1, 0),\r\n                new CellModel(2, 0),\r\n                new CellModel(3, 0),\r\n                new CellModel(4, 0)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(1, 0),\r\n                new CellModel(2, 0),\r\n                new CellModel(2, 1),\r\n                new CellModel(2, 2)\r\n            ]),\r\n            this.normalizeCells([\r\n                new CellModel(0, 0),\r\n                new CellModel(0, 1),\r\n                new CellModel(0, 2),\r\n                new CellModel(1, 0),\r\n                new CellModel(1, 1),\r\n                new CellModel(1, 2),\r\n                new CellModel(2, 0),\r\n                new CellModel(2, 1),\r\n                new CellModel(2, 2)\r\n            ])\r\n        ];\r\n\r\n        private readonly tutorialPlacements: FigurePlacement[] = [\r\n            {\r\n                preset: this.normalizeCells([\r\n                    new CellModel(0, 0),\r\n                    new CellModel(0, 1),\r\n                    new CellModel(1, 1),\r\n                    new CellModel(2, 1)\r\n                ]), position: {x: 2, y: 3}\r\n            },\r\n            {\r\n                preset: this.normalizeCells([\r\n                    new CellModel(0, 0),\r\n                    new CellModel(0, 1),\r\n                    new CellModel(1, 0),\r\n                    new CellModel(1, 1)\r\n                ]), position: {x: 0, y: 3}\r\n            },\r\n            {\r\n                preset: this.normalizeCells([\r\n                    new CellModel(0, 0),\r\n                    new CellModel(0, 1),\r\n                    new CellModel(0, 2),\r\n                    new CellModel(1, 0),\r\n                    new CellModel(1, 1),\r\n                    new CellModel(1, 2),\r\n                    new CellModel(2, 0),\r\n                    new CellModel(2, 1),\r\n                    new CellModel(2, 2)\r\n                ]), position: {x: 5, y: 2}\r\n            }\r\n        ];\r\n\r\n\r\n        private iterations: number = 0;\r\n\r\n        private normalizeCells(preset: FigurePreset): FigurePreset {\r\n            const minX: number = preset.reduce((prev, cell) => prev.posX <= cell.posX ? prev : cell).posX;\r\n            const minY: number = preset.reduce((prev, cell) => prev.posY <= cell.posY ? prev : cell).posY;\r\n            preset.forEach(cellModel => cellModel.subtract(minX, minY));\r\n            return preset;\r\n        }\r\n\r\n        public getRandomFigureModel(): FigureModel {\r\n            return new FigureModel(this.getCopy(Phaser.ArrayUtils.getRandomItem(this.figurePresets)));\r\n        }\r\n\r\n        public getRandomColor(): BlockColor {\r\n            this.prevColor = Phaser.ArrayUtils.getRandomItem(Object.keys(BlockColor).map(key => BlockColor[key]).filter(value => typeof value === \"number\" && value != this.prevColor));\r\n            return this.prevColor;\r\n        }\r\n\r\n        public getRandomPositionForFigure(figure: Figure, boardModel: BoardModel): FigurePosition {\r\n            return Phaser.ArrayUtils.getRandomItem(this.findFigurePositions(figure.getModel().getCells(), boardModel, 1)) || null;\r\n        }\r\n\r\n        public hasAvailableSpaceForFigure(figure: Figure, boardModel: BoardModel): boolean {\r\n            let positions: FigurePosition[] = this.findFigurePositions(figure.getModel().getCells(), boardModel, 1);\r\n            return positions.length > 0;\r\n        }\r\n\r\n\r\n        /*\r\n         * VARIANT 1\r\n         */\r\n\r\n        public getNextFiguresSet(boardModel: BoardModel): FigureModel[] {\r\n            if (!Settings.TUTORIAL_COMPLETED) {\r\n                return this.tutorialPlacements.map(placement => new FigureModel(this.getCopy(placement.preset)).setPosition(placement.position.x, placement.position.y));\r\n            }\r\n\r\n            this.iterations = 0;\r\n            let results: Array<Array<{ preset: FigurePreset, position: FigurePosition, cleanedCells: number }>> = [];\r\n            this.findFigurePositionsRecursive(boardModel, [], results);\r\n            results.sort((a, b) => b.reduce((sum, elem) => sum + elem.preset.length, 0) - a.reduce((sum, elem) => sum + elem.preset.length, 0));\r\n\r\n            if (results.length > 0) {\r\n                return Phaser.ArrayUtils.shuffle(ArrayUtils.getRandomItem(results, Settings.RESULTING_FIGURE_RANDOM_COMPRESSION_FACTOR).map(result => new FigureModel(result.preset)));\r\n            } else {\r\n                return Phaser.ArrayUtils.shuffle([this.getRandomFigureModel(), this.getRandomFigureModel(), this.getRandomFigureModel()]);\r\n            }\r\n        }\r\n\r\n        private findFigurePositionsRecursive(boardModel: BoardModel, placedFigures: Array<{ preset: FigurePreset, position: FigurePosition, cleanedCells: number }>, resultsArray: Array<Array<{ preset: FigurePreset, position: FigurePosition }>>) {\r\n            let possiblePlaces: Array<{ figurePreset: FigurePreset, figurePositions: FigurePosition[] }> = this.findAppropriateFigurePresetsForBoard(boardModel, true);\r\n            if (possiblePlaces.length > 0) {\r\n                if (resultsArray.length > 0) {\r\n                    //return;\r\n                    /* optimization */\r\n                    possiblePlaces = [Phaser.ArrayUtils.getRandomItem(possiblePlaces)];\r\n                }\r\n\r\n                for (let place of possiblePlaces) {\r\n                    for (let figurePosition of place.figurePositions) {\r\n                        this.iterations++;\r\n                        if (placedFigures.length == 2) {\r\n                            resultsArray.push(placedFigures.slice().concat({\r\n                                preset: place.figurePreset,\r\n                                position: figurePosition,\r\n                                cleanedCells: boardModel.cleanedCells\r\n                            }));\r\n                        } else {\r\n                            let boardCopy: BoardModel = boardModel.getCopy();\r\n                            boardCopy.placeFigure(place.figurePreset, figurePosition);\r\n                            this.findFigurePositionsRecursive(boardCopy, placedFigures.slice().concat({\r\n                                preset: place.figurePreset,\r\n                                position: figurePosition,\r\n                                cleanedCells: boardCopy.cleanedCells\r\n                            }), resultsArray);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public findAppropriateFigurePresetsForBoard(boardModel: BoardModel, shuffleResults: boolean): Array<{ figurePreset: FigurePreset, figurePositions: FigurePosition[] }> {\r\n            const possibleCases: Array<{ figurePreset: FigurePreset, figurePositions: FigurePosition[] }> = [];\r\n            for (let preset of Phaser.ArrayUtils.shuffle(this.figurePresets.slice())) {\r\n                possibleCases.push({\r\n                    figurePreset: preset,\r\n                    figurePositions: this.findFigurePositions(preset, boardModel, Settings.GENERATE_MAX_POSITIONS_FOR_EACH_FIGURE)\r\n                });\r\n            }\r\n            return shuffleResults ? Phaser.ArrayUtils.shuffle(possibleCases) : possibleCases;\r\n        }\r\n\r\n        /**\r\n         * PRIVATE\r\n         */\r\n\r\n        private findFiguresAtPosition(position: FigurePosition, boardModel: BoardModel): FigurePreset[] {\r\n            let presets: FigurePreset[] = [];\r\n            for (let preset of this.figurePresets) {\r\n                if (boardModel.couldBePlaced(preset, position)) {\r\n                    presets.push(preset);\r\n                }\r\n            }\r\n            return presets;\r\n        }\r\n\r\n        private findFigurePositions(preset: FigurePreset, boardModel: BoardModel, limitPositionsCount: number): FigurePosition[] {\r\n            let positions: FigurePosition[] = [];\r\n            for (let px of Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5, 6, 7])) {\r\n                for (let py of Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5, 6, 7])) {\r\n                    if (boardModel.couldBePlaced(preset, {x: px, y: py})) {\r\n                        positions.push({x: px, y: py});\r\n                        if (positions.length >= limitPositionsCount) {\r\n                            return positions;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return positions;\r\n        }\r\n\r\n        private getCopy(figurePreset: FigurePreset): FigurePreset {\r\n            return figurePreset.map(cellModel => cellModel.getCopy());\r\n        }\r\n\r\n    }\r\n}","var BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let LayoutType;\r\n    (function (LayoutType) {\r\n        LayoutType[LayoutType[\"PORTRAIT\"] = 0] = \"PORTRAIT\";\r\n        LayoutType[LayoutType[\"SQUARED\"] = 1] = \"SQUARED\";\r\n        LayoutType[LayoutType[\"LANDSCAPE\"] = 2] = \"LANDSCAPE\";\r\n    })(LayoutType = BlockPuzzle.LayoutType || (BlockPuzzle.LayoutType = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"../enum/LayoutType.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class CustomScaleManager {\r\n        static update(width, height) {\r\n            this.WIDTH = width;\r\n            this.HEIGHT = height;\r\n            const screenRatio = this.getScreenRatio();\r\n            if (screenRatio <= this.PORTRAIT_RATIO) {\r\n                /* fully portrait */\r\n                this.LAYOUT = BlockPuzzle.LayoutType.PORTRAIT;\r\n                this.SCALE_X = this.SCALE_Y = width / this.ORIGINAL_WIDTH;\r\n                this.UPSCALE_FACTOR = 1;\r\n            }\r\n            else if (screenRatio >= this.LANDSCAPE_RATIO) {\r\n                /* fully landscape */\r\n                this.LAYOUT = BlockPuzzle.LayoutType.LANDSCAPE;\r\n                this.UPSCALE_FACTOR = BlockPuzzle.App.instance.device.desktop ? 1 : Math.pow(screenRatio / this.ORIGINAL_RATIO, 0.35);\r\n                this.SCALE_X = this.SCALE_Y = height / this.ORIGINAL_HEIGHT * this.UPSCALE_FACTOR;\r\n            }\r\n            else {\r\n                /* quite squared */\r\n                this.LAYOUT = BlockPuzzle.LayoutType.SQUARED;\r\n                this.UPSCALE_FACTOR = BlockPuzzle.App.instance.device.desktop ? 1 : Math.pow(screenRatio / this.ORIGINAL_RATIO, 0.55);\r\n                this.SCALE_X = this.SCALE_Y = height / this.ORIGINAL_HEIGHT * this.UPSCALE_FACTOR;\r\n            }\r\n            if (BlockPuzzle.App.instance.scale.scaleMode != Phaser.ScaleManager.RESIZE) {\r\n                BlockPuzzle.App.instance.state.getCurrentState().resize(BlockPuzzle.App.instance.width, BlockPuzzle.App.instance.height);\r\n            }\r\n            BlockPuzzle.BackgroundManager.instance.resize();\r\n            BlockPuzzle.WindowManager.instance.resize();\r\n            BlockPuzzle.TransitionScreen.instance.resize();\r\n        }\r\n        static getLayout() {\r\n            return this.LAYOUT;\r\n        }\r\n        static isLandscape() {\r\n            return this.getLayout() === BlockPuzzle.LayoutType.LANDSCAPE;\r\n        }\r\n        static isPortrait() {\r\n            return this.getLayout() === BlockPuzzle.LayoutType.PORTRAIT;\r\n        }\r\n        static isSquared() {\r\n            return this.getLayout() === BlockPuzzle.LayoutType.SQUARED;\r\n        }\r\n        static getScaleMode() {\r\n            return BlockPuzzle.Settings.USE_HIGH_RESOLUTION_SCALING ? Phaser.ScaleManager.USER_SCALE : Phaser.ScaleManager.RESIZE;\r\n        }\r\n        static getPixelRatio() {\r\n            return BlockPuzzle.App.instance.device.desktop || !BlockPuzzle.Settings.USE_HIGH_RESOLUTION_SCALING ? 1 : Math.min(BlockPuzzle.App.instance.device.pixelRatio, BlockPuzzle.Settings.PIXEL_RATIO_MAX_THRESHOLD);\r\n        }\r\n        static getScreenRatio() {\r\n            return this.WIDTH / this.HEIGHT;\r\n        }\r\n    }\r\n    CustomScaleManager.PORTRAIT_RATIO = 720 / 960;\r\n    CustomScaleManager.LANDSCAPE_RATIO = 1366 / 960;\r\n    CustomScaleManager.ORIGINAL_WIDTH = 640;\r\n    CustomScaleManager.ORIGINAL_HEIGHT = 960;\r\n    CustomScaleManager.WIDTH = 640;\r\n    CustomScaleManager.HEIGHT = 960;\r\n    CustomScaleManager.LAYOUT = BlockPuzzle.LayoutType.PORTRAIT;\r\n    CustomScaleManager.SCALE_X = 1;\r\n    CustomScaleManager.SCALE_Y = 1;\r\n    CustomScaleManager.UPSCALE_FACTOR = 1;\r\n    CustomScaleManager.ORIGINAL_RATIO = CustomScaleManager.ORIGINAL_WIDTH / CustomScaleManager.ORIGINAL_HEIGHT;\r\n    BlockPuzzle.CustomScaleManager = CustomScaleManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class RenderUtils {\r\n        static detectRenderMode() {\r\n            const isIE = window.navigator.userAgent.indexOf('MSIE ') > 0 || window.navigator.userAgent.indexOf('Trident/') > 0;\r\n            const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n            const isIPhone = window.navigator.userAgent.indexOf('iPhone ') > -1;\r\n            return isIE || isFirefox || isIPhone ? Phaser.CANVAS : Phaser.AUTO;\r\n        }\r\n    }\r\n    BlockPuzzle.RenderUtils = RenderUtils;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Settings {\r\n    }\r\n    //SCALING\r\n    Settings.USE_HIGH_RESOLUTION_SCALING = true;\r\n    Settings.PIXEL_RATIO_MAX_THRESHOLD = 3;\r\n    //FONTS\r\n    Settings.DEFAULT_FONT_FAMILY = 'Kanit';\r\n    //WINDOWS\r\n    Settings.WINDOW_BACKGROUND_ALPHA = 0.975;\r\n    Settings.REVIVE_WINDOW_TIMER = 60;\r\n    Settings.RESULTS_WINDOW_TIMER = 85;\r\n    Settings.RESULTS_WINDOW_TIMER_WITHOUT_REVIVE = 110;\r\n    //ATLASES\r\n    Settings.PRELOADER_ATLAS = 'preloader';\r\n    Settings.GAME_ATLAS = 'assets';\r\n    Settings.ANIMATION_ATLAS = 'animations';\r\n    //BOARD\r\n    Settings.BOARD_ROWS = 8;\r\n    Settings.BOARD_COLS = 8;\r\n    Settings.CELL_WIDTH = 75;\r\n    Settings.CELL_HEIGHT = Settings.CELL_WIDTH;\r\n    Settings.FIGURE_VIEW_DRAGGING_DELTA = -160;\r\n    Settings.FIGURE_VIEW_SPACING = 5;\r\n    //FIGURES\r\n    Settings.DEFAULT_FIGURE_SCALE = 0.4;\r\n    Settings.DRAGGING_FIGURE_SCALE = 0.88;\r\n    Settings.FINAL_FIGURE_SCALE = 1.0;\r\n    Settings.FIGURE_APPEARING_DURATION = 350;\r\n    Settings.FIGURE_APPEARING_DELAY = 120;\r\n    Settings.FIGURE_RETURNING_SPEED = 2000;\r\n    Settings.FIGURE_PICK_UP_TWEEN_DURATION = 70;\r\n    Settings.FIGURE_DISPOSING_TWEEN_DURATION = 250;\r\n    Settings.NOT_APPLICABLE_FIGURE_APLHA = 0.475;\r\n    //BLOCKS\r\n    Settings.BLOCK_DESTROY_ANIMATION_DELAY = 65;\r\n    Settings.BLOCK_DISAPPEARING_DURATION = 180;\r\n    Settings.PICK_RANDOM_EXPLOSION_STARTING_POINT = true;\r\n    Settings.SET_THE_SAME_EXPLOSION_COLOR_FOR_ALL_THE_EXPLODING_CELLS = true;\r\n    Settings.STAR_SHINING_TWEEN_DURATION = 1400; //ms\r\n    Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION = 750; //ms\r\n    Settings.BLOCK_DEACTIVATION_TWEEN_DURATION = 400;\r\n    Settings.BLOCK_ACTIVATION_TWEEN_DURATION = 250;\r\n    //DIFFICULTY\r\n    Settings.DIFFICULTY_FACTOR = difficulty_level;\r\n    //POWERUPS\r\n    Settings.POWERUP_USAGE_COUNTDOWN_WHEN_NO_MOVES_LEFT = 6 * 1000; // milliseconds\r\n    Settings.BOMB_PRICE = bomb_powerup_basic_price;\r\n    Settings.BOMB_PRICE_STEP = bomb_powerup_price_step;\r\n    Settings.LIGHTNING_PRICE = lightning_powerup_basic_price;\r\n    Settings.LIGHTNING_PRICE_STEP = lightning_powerup_price_step;\r\n    Settings.POWERUP_HIGHLIGHTING_ALPHA = 0.3;\r\n    Settings.POWERUP_DRAGGING_DELTA = -100;\r\n    Settings.LIGHTING_DELAY_BETWEEN_STRIKES = 8;\r\n    Settings.LIGHTING_MIN_TARGETS = 3;\r\n    Settings.LIGHTING_MAX_TARGETS = 5;\r\n    //REVIVE\r\n    Settings.REVIVE_TIMER_DURATION = 10500;\r\n    //SCORES\r\n    Settings.BASIC_LINE_DESTROYING_REWARD = 10;\r\n    //SCORES MULTIPLIER\r\n    Settings.MULTIPLIER_MILESTONES = [100, 500, 3000, 14400, 72000, 340000, 1500000, 6000000, 20000000, 100000000];\r\n    //FIGURE GENERATOR\r\n    Settings.GENERATE_MAX_FIGURES_PER_ITERATION = 25;\r\n    Settings.GENERATE_MAX_POSITIONS_FOR_EACH_FIGURE = 1;\r\n    Settings.RESULTING_FIGURE_RANDOM_COMPRESSION_FACTOR = 1.85;\r\n    Settings.MISTAKE_PROBABILITY_BASIC_STEP = 0.025;\r\n    Settings.MISTAKE_PROBABILITY_STEP_SPEED = 0.005;\r\n    Settings.MISTAKE_MAX_PROBABILITY = 0.1;\r\n    Settings.MISTAKE_IMMUNITY_MIN_MOVES = 5;\r\n    Settings.MISTAKE_IMMUNITY_MAX_MOVES = 10;\r\n    //STARS GENERATOR\r\n    Settings.SKIP_STARS_GENERATION_FOR_FIRST_X_MOVES = 5;\r\n    Settings.BASIC_STAR_GENERATION_PROBABILITY = 0.02;\r\n    Settings.BASIC_STAR_GENERATION_PROBABILITY_STEP = 0.0065;\r\n    Settings.ADDITIONAL_SECOND_STAR_GENERATION_PROBABILITY = 0.01;\r\n    Settings.ADDITIONAL_STAR_GENERATION_PROBABILITY_FOR_DESTROYING_MULTIPLE_LINES = 0.02;\r\n    Settings.MAX_STAR_GENERATING_PROBABILITY = 0.3;\r\n    Settings.STAR_GENERATION_DELAY = 1000;\r\n    Settings.MAX_STARS_ON_BOARD_SIMULTANEOUSLY = 3;\r\n    //RESULTS REWARD\r\n    Settings.RESULTS_DOUBLE_STARS_REWARD = results_watch_video_reward;\r\n    //GET STARS BUTTON\r\n    Settings.GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP = 0;\r\n    Settings.GET_STARS_BUTTON_COOLDOWN = get_stars_button_cooldown; // seconds\r\n    Settings.GET_STARS_BUTTON_ENABLED = get_stars_button_cooldown > 0;\r\n    Settings.GET_STARS_BUTTON_REWARD_STARS_AMOUNT = get_stars_button_basic_reward; //stars\r\n    Settings.GET_STARS_BUTTON_REWARD_STARS_AMOUNT_STEP = get_stars_button_reward_step; //stars\r\n    //ACHIEVEMENT_INFORMER\r\n    Settings.ACHIEVEMENT_INFORMER_VISIBILITY_DURATION = 5 * 1000; //milliseconds\r\n    //TUTORIAL\r\n    Settings.TUTORIAL_COMPLETED = false;\r\n    //SETTINGS\r\n    Settings.GAME_VERSION = \"2\";\r\n    Settings.ENABLE_API = true;\r\n    Settings.RELEASE_BUILD = true;\r\n    Settings.MUSIC_ENABLED_BY_DEFAULT = true;\r\n    Settings.LOCAL_STORAGE_KEY = 'Element_Blocks' + Settings.GAME_VERSION;\r\n    BlockPuzzle.Settings = Settings;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"scale/CustomScaleManager.ts\"/>\r\n///<reference path=\"utils/RenderUtils.ts\"/>\r\n///<reference path=\"Settings.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class App extends Phaser.Game {\r\n        constructor() {\r\n            super(App.gameConfig);\r\n            App.instance = this;\r\n            this.state.add('Boot', BlockPuzzle.Boot, false);\r\n            this.state.add('Preloader', BlockPuzzle.Preloader, false);\r\n            this.state.add('Level', BlockPuzzle.Level, false);\r\n            this.state.start('Boot');\r\n        }\r\n        navigateToSponsor() {\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window.famobi.moreGamesLink();\r\n            }\r\n        }\r\n        pauseGame() {\r\n            BlockPuzzle.SoundController.instance.pauseAudio();\r\n            this.paused = true;\r\n            console.log('pausing game...');\r\n        }\r\n        unpauseGame(force = false) {\r\n            if (isPageVisible && (!adIsShowing || force)) {\r\n                this.paused = false;\r\n                BlockPuzzle.SoundController.instance.resumeAudio();\r\n                console.log('resuming game...');\r\n            }\r\n            else {\r\n                console.log('resuming game is not allowed now because ads are displaying or page isn\\'t visible...');\r\n            }\r\n        }\r\n    }\r\n    App.gameConfig = {\r\n        width: BlockPuzzle.CustomScaleManager.ORIGINAL_WIDTH,\r\n        height: BlockPuzzle.CustomScaleManager.ORIGINAL_HEIGHT,\r\n        renderer: BlockPuzzle.RenderUtils.detectRenderMode(),\r\n        transparent: true,\r\n        enableDebug: false\r\n    };\r\n    BlockPuzzle.App = App;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar game;\r\nvar isPageVisible = true;\r\nvar adIsShowing = false;\r\n//famobi pause/resume requests\r\nwindow['famobi_onPauseRequested'] = function () {\r\n    adIsShowing = true;\r\n    if (game) {\r\n        game.pauseGame();\r\n    }\r\n};\r\nwindow['famobi_onResumeRequested'] = function () {\r\n    adIsShowing = false;\r\n    if (game) {\r\n        game.unpauseGame();\r\n    }\r\n};\r\n//visiblity\r\nvar hidden, visibilityChange;\r\nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support\r\n    hidden = \"hidden\";\r\n    visibilityChange = \"visibilitychange\";\r\n}\r\nelse if (typeof document[\"msHidden\"] !== \"undefined\") {\r\n    hidden = \"msHidden\";\r\n    visibilityChange = \"msvisibilitychange\";\r\n}\r\nelse if (typeof document[\"webkitHidden\"] !== \"undefined\") {\r\n    hidden = \"webkitHidden\";\r\n    visibilityChange = \"webkitvisibilitychange\";\r\n}\r\nfunction handleVisibilityChange() {\r\n    if (document[hidden]) {\r\n        isPageVisible = false;\r\n        if (game && !adIsShowing)\r\n            game.pauseGame();\r\n    }\r\n    else {\r\n        isPageVisible = true;\r\n        if (game && !adIsShowing)\r\n            game.unpauseGame();\r\n    }\r\n}\r\n// Warn if the browser doesn't support addEventListener or the Page Visibility API\r\nif (typeof document.addEventListener === \"undefined\" || typeof document[hidden] === \"undefined\") {\r\n    console.log(\"Browser doesn't support the Page Visibility API.\");\r\n}\r\nelse {\r\n    // Handle page visibility change\r\n    document.addEventListener(visibilityChange, handleVisibilityChange, false);\r\n}\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AchievementsManager {\r\n        constructor() {\r\n            this.onAchievementCompleted = new Phaser.Signal();\r\n            this.achievementModels = [\r\n                {\r\n                    key: BlockPuzzle.AchievementType.TOTAL_SCORES,\r\n                    name: 'Total scores reached',\r\n                    currentValue: 0,\r\n                    requiredValues: [35000, 105000, 225000],\r\n                    rewards: [20, 31, 52],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.TOTAL_STARS,\r\n                    name: 'Total stars picked up',\r\n                    currentValue: 0,\r\n                    requiredValues: [50, 180, 365],\r\n                    rewards: [23, 34, 55],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.TOTAL_LEVEL_UPS,\r\n                    name: 'Level-ups collected',\r\n                    currentValue: 0,\r\n                    requiredValues: [25, 75, 150],\r\n                    rewards: [26, 37, 58],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.TOTAL_GREATS,\r\n                    name: 'Great inscriptions appeared',\r\n                    currentValue: 0,\r\n                    requiredValues: [5, 30, 60],\r\n                    rewards: [8, 19, 40],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.BOMB_EXPLOSIONS,\r\n                    name: 'Bomb explosions',\r\n                    currentValue: 0,\r\n                    requiredValues: [5, 20, 75],\r\n                    rewards: [17, 28, 49],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.LINES_DESTROYED,\r\n                    name: 'Destroyed lines',\r\n                    currentValue: 0,\r\n                    requiredValues: [240, 720, 1600],\r\n                    rewards: [14, 25, 46],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.BLOCKS_PLACED,\r\n                    name: 'Blocks placed at the board',\r\n                    currentValue: 0,\r\n                    requiredValues: [1600, 6400, 15000],\r\n                    rewards: [11, 22, 43],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.FIRE_BLOCKS_DESTROYED,\r\n                    name: 'Red blocks destroyed',\r\n                    currentValue: 0,\r\n                    requiredValues: [350, 1050, 2250],\r\n                    rewards: [17, 28, 49],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                },\r\n                {\r\n                    key: BlockPuzzle.AchievementType.BEST_SCORE_REACHED,\r\n                    name: 'Best score reached',\r\n                    currentValue: 0,\r\n                    requiredValues: [6000, 10000, 16000],\r\n                    rewards: [5, 16, 37],\r\n                    achieved: [false, false, false],\r\n                    rewardClaimed: [false, false, false]\r\n                }\r\n            ];\r\n        }\r\n        static get instance() {\r\n            return AchievementsManager._instance ? AchievementsManager._instance :\r\n                AchievementsManager._instance = new AchievementsManager();\r\n        }\r\n        loadAchievementsState(states) {\r\n            states.forEach(state => {\r\n                const model = this.getAchievementModel(state.key);\r\n                if (model) {\r\n                    model.currentValue = state.currentValue;\r\n                    model.achieved = state.achieved.slice();\r\n                    model.rewardClaimed = state.rewardClaimed.slice();\r\n                }\r\n            });\r\n        }\r\n        getAchievementsStates() {\r\n            return this.achievementModels.map(model => {\r\n                return { key: model.key, currentValue: model.currentValue, achieved: model.achieved.slice(), rewardClaimed: model.rewardClaimed.slice() };\r\n            });\r\n        }\r\n        saveMedalsState() {\r\n            BlockPuzzle.LocalStorageController.instance.save();\r\n        }\r\n        getAchievementModel(key) {\r\n            return this.achievementModels.find(medal => medal.key == key);\r\n        }\r\n        addValue(key, value, save = true) {\r\n            const model = this.getAchievementModel(key);\r\n            if (model) {\r\n                const prevLevel = AchievementsManager.getAchievementLevel(model);\r\n                model.currentValue += value;\r\n                const currentLevel = AchievementsManager.getAchievementLevel(model);\r\n                if (currentLevel > prevLevel) {\r\n                    this.onAchievementCompleted.dispatch(model);\r\n                    BlockPuzzle.SoundController.instance.playAchievementClaimedSound();\r\n                }\r\n                if (save) {\r\n                    this.saveMedalsState();\r\n                }\r\n            }\r\n        }\r\n        setValue(key, value, save = true) {\r\n            const model = this.getAchievementModel(key);\r\n            if (model && value > model.currentValue) {\r\n                const prevLevel = AchievementsManager.getAchievementLevel(model);\r\n                model.currentValue = value;\r\n                const currentLevel = AchievementsManager.getAchievementLevel(model);\r\n                if (currentLevel > prevLevel) {\r\n                    this.onAchievementCompleted.dispatch(model);\r\n                    BlockPuzzle.SoundController.instance.playAchievementClaimedSound();\r\n                }\r\n                if (save) {\r\n                    this.saveMedalsState();\r\n                }\r\n            }\r\n        }\r\n        hasAvailableRewards() {\r\n            let rewardAvailable = false;\r\n            this.achievementModels.forEach(model => {\r\n                if (model.currentValue >= model.requiredValues[0] && !model.rewardClaimed[0]) {\r\n                    rewardAvailable = true;\r\n                }\r\n                else if (model.currentValue >= model.requiredValues[1] && !model.rewardClaimed[1]) {\r\n                    rewardAvailable = true;\r\n                }\r\n                else if (model.currentValue >= model.requiredValues[2] && !model.rewardClaimed[2]) {\r\n                    rewardAvailable = true;\r\n                }\r\n            });\r\n            return rewardAvailable;\r\n        }\r\n        /**\r\n         * STATIC\r\n         */\r\n        static getAchievementLevel(model) {\r\n            return model.currentValue >= model.requiredValues[2] ? 3 : model.currentValue >= model.requiredValues[1] ? 2 : model.currentValue >= model.requiredValues[0] ? 1 : 0;\r\n        }\r\n    }\r\n    AchievementsManager._instance = null;\r\n    BlockPuzzle.AchievementsManager = AchievementsManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class APIUtils {\r\n        static get instance() {\r\n            return APIUtils._instance ? APIUtils._instance :\r\n                APIUtils._instance = new APIUtils();\r\n        }\r\n        isRewardedVideoFeatureEnabled() {\r\n            return !!enable_rewarded_videos;\r\n        }\r\n        hasRewardedVideo() {\r\n            if (BlockPuzzle.Settings.ENABLE_API && this.isRewardedVideoFeatureEnabled() && window[\"famobi\"].hasRewardedAd)\r\n                return window[\"famobi\"].hasRewardedAd();\r\n            else\r\n                return false;\r\n        }\r\n        showRewardedVideo(callback) {\r\n            if (BlockPuzzle.Settings.ENABLE_API && this.isRewardedVideoFeatureEnabled()) {\r\n                window.famobi.rewardedAd(callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        }\r\n        showAds(callback, timeout = 0) {\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                if (timeout == 0) {\r\n                    window.famobi.showAd(callback);\r\n                }\r\n                else {\r\n                    setTimeout(function () {\r\n                        window.famobi.showAd(callback);\r\n                    }, timeout);\r\n                }\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        }\r\n    }\r\n    APIUtils._instance = null;\r\n    BlockPuzzle.APIUtils = APIUtils;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Analytics {\r\n        static get instance() {\r\n            return Analytics._instance ? Analytics._instance :\r\n                Analytics._instance = new Analytics();\r\n        }\r\n        initUser() {\r\n            let xhttp = new XMLHttpRequest();\r\n            xhttp.onreadystatechange = function () {\r\n                if (this.readyState == 4 && this.status == 200) {\r\n                    let data = JSON.parse(this.response).data;\r\n                    let uid = data.uid;\r\n                    let splitTests = data.splitTests;\r\n                    Analytics.initialized = true;\r\n                    Analytics.USER_ID = uid;\r\n                    console.log('UID #', uid);\r\n                }\r\n            };\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/user\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", BlockPuzzle.Settings.GAME_VERSION);\r\n            xhttp.send(JSON.stringify({ 'locale': (navigator.languages && navigator.languages.length) ? navigator.languages[0] : navigator[\"userLanguage\"] || navigator.language || navigator[\"browserLanguage\"] || 'en' }));\r\n        }\r\n        startLevel() {\r\n            if (!Analytics.initialized) {\r\n                return;\r\n            }\r\n            let data = {\r\n                'level': 1\r\n            };\r\n            var xhttp = new XMLHttpRequest();\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/level/start\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", BlockPuzzle.Settings.GAME_VERSION);\r\n            xhttp.setRequestHeader(\"X-User\", Analytics.USER_ID);\r\n            xhttp.send(JSON.stringify(data));\r\n        }\r\n        finishLevel(score, stars, revives, powerups) {\r\n            if (!Analytics.initialized) {\r\n                return;\r\n            }\r\n            var data = {\r\n                'success': false,\r\n                'score': score,\r\n                'stars': stars,\r\n                'revives': revives,\r\n                'powerups': powerups\r\n            };\r\n            var xhttp = new XMLHttpRequest();\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/level/end\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", BlockPuzzle.Settings.GAME_VERSION);\r\n            xhttp.setRequestHeader(\"X-User\", Analytics.USER_ID);\r\n            xhttp.send(JSON.stringify(data));\r\n        }\r\n        updateLevelData(params) {\r\n            if (!Analytics.initialized) {\r\n                return;\r\n            }\r\n            var xhttp = new XMLHttpRequest();\r\n            xhttp.open(\"POST\", \"https://element-blocks.tracking.html5games.com/event/level/update\", true);\r\n            xhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhttp.setRequestHeader(\"X-Version\", BlockPuzzle.Settings.GAME_VERSION);\r\n            xhttp.setRequestHeader(\"X-User\", Analytics.USER_ID);\r\n            xhttp.send(JSON.stringify(params));\r\n        }\r\n    }\r\n    Analytics._instance = null;\r\n    Analytics.USER_ID = undefined;\r\n    Analytics.initialized = false;\r\n    BlockPuzzle.Analytics = Analytics;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BackgroundManager extends Phaser.Group {\r\n        constructor() {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.containerWidth = BlockPuzzle.CustomScaleManager.ORIGINAL_WIDTH;\r\n            this.containerHeight = BlockPuzzle.CustomScaleManager.ORIGINAL_HEIGHT;\r\n            this.leafs = [];\r\n            this.isInitialized = false;\r\n            this.leafAnchors = [\r\n                new Phaser.Point(1, 0.85),\r\n                new Phaser.Point(0.9, 1),\r\n                new Phaser.Point(0.93, 1),\r\n                new Phaser.Point(0.05, 1),\r\n                new Phaser.Point(0, 1),\r\n                new Phaser.Point(0.0875, 0.98)\r\n            ];\r\n            BlockPuzzle.App.instance.stage.addChildAt(this, 0);\r\n            this.container = this.add(BlockPuzzle.App.instance.make.group());\r\n            this.topLeftContainer = this.container.add(BlockPuzzle.App.instance.make.group());\r\n            this.topRightContainer = this.container.add(BlockPuzzle.App.instance.make.group());\r\n            this.bottomLeftContainer = this.container.add(BlockPuzzle.App.instance.make.group());\r\n            this.bottomRightContainer = this.container.add(BlockPuzzle.App.instance.make.group());\r\n            this.resize();\r\n        }\r\n        static get instance() {\r\n            return BackgroundManager._instance ? BackgroundManager._instance : BackgroundManager._instance = new BackgroundManager();\r\n        }\r\n        buildChildren() {\r\n            this.createLeaf(this.topLeftContainer, 1, -49.7, 3.1, -125.3009796142578, 1, -1);\r\n            this.createLeaf(this.topLeftContainer, 4, -245.05, 42.25, 65.98316955566406);\r\n            this.createLeaf(this.topLeftContainer, 5, -131.4, 19.85, 58.43214416503906);\r\n            this.createLeaf(this.topRightContainer, 5, 138.2, -17.4, 107.98501586914063, 1, -1);\r\n            this.createLeaf(this.topRightContainer, 2, 132, -39.6, -122.82777404785156);\r\n            this.createLeaf(this.topRightContainer, 1, 76.55, -16.95, -49);\r\n            this.createLeaf(this.topRightContainer, 4, 190.55, -50.05, -119.5193603515625);\r\n            this.createLeaf(this.bottomLeftContainer, 5, -30.25, 100.15, -11.46099853515625);\r\n            this.createLeaf(this.bottomLeftContainer, 4, -15.6, 159.1, -8.1023071289063);\r\n            this.createLeaf(this.bottomLeftContainer, 6, -32.05, 113.05, 16.472152709960938);\r\n            this.createLeaf(this.bottomLeftContainer, 1, -34.15, 66.85, 170.1315155029297, 1, -1);\r\n            this.createLeaf(this.bottomRightContainer, 4, 100, 132.85, -32.889694213867188);\r\n            this.createLeaf(this.bottomRightContainer, 3, 118.8, 137.6, -17.000503540039063);\r\n            this.createLeaf(this.bottomRightContainer, 2, 123.6, 84.4, -46.802825927734375);\r\n            this.createLeaf(this.bottomRightContainer, 1, 60.6, 61.8, 38.27931213378906);\r\n        }\r\n        createLeaf(parentContainer, leafID, x, y, angle, scaleX = 1, scaleY = 1) {\r\n            let leaf = parentContainer.add(BlockPuzzle.App.instance.make.sprite(x, y, BlockPuzzle.Settings.PRELOADER_ATLAS, 'leaf' + leafID + '0000'));\r\n            leaf.anchor.set(this.leafAnchors[leafID - 1].x, this.leafAnchors[leafID - 1].y);\r\n            leaf.scale.set(scaleX, scaleY);\r\n            const angleDispersion = BlockPuzzle.App.instance.rnd.realInRange(1, 3) * BlockPuzzle.App.instance.rnd.sign();\r\n            const duration = BlockPuzzle.App.instance.rnd.integerInRange(2800, 5000);\r\n            leaf.angle = angle + angleDispersion;\r\n            leaf[\"shakeTween\"] = BlockPuzzle.App.instance.tweens.create(leaf).to({ angle: angle - angleDispersion }, duration, Phaser.Easing.Sinusoidal.InOut, true, 0, -1, true);\r\n            BlockPuzzle.App.instance.tweens.add(leaf[\"shakeTween\"]);\r\n            this.leafs.push(leaf);\r\n        }\r\n        handleStateChanged() {\r\n            if (this.isInitialized) {\r\n                this.leafs.forEach(leaf => {\r\n                    leaf[\"shakeTween\"].pendingDelete = false;\r\n                });\r\n            }\r\n        }\r\n        init() {\r\n            this.buildChildren();\r\n            this.isInitialized = true;\r\n            this.resize();\r\n        }\r\n        resize() {\r\n            if (this.isInitialized) {\r\n                this.container.scale.set(BlockPuzzle.CustomScaleManager.SCALE_X, BlockPuzzle.CustomScaleManager.SCALE_Y);\r\n                this.container.position.set(BlockPuzzle.CustomScaleManager.WIDTH / 2 - this.containerWidth * BlockPuzzle.CustomScaleManager.SCALE_X / 2, BlockPuzzle.CustomScaleManager.HEIGHT / 2 - this.containerHeight * BlockPuzzle.CustomScaleManager.SCALE_Y / 2);\r\n                this.windowBounds = this.windowBounds || new BlockPuzzle.WindowBounds();\r\n                this.windowBounds.set(-(BlockPuzzle.CustomScaleManager.WIDTH / BlockPuzzle.CustomScaleManager.SCALE_X - this.containerWidth) / 2, (BlockPuzzle.CustomScaleManager.WIDTH / BlockPuzzle.CustomScaleManager.SCALE_X - this.containerWidth) / 2 + this.containerWidth, -(BlockPuzzle.CustomScaleManager.HEIGHT / BlockPuzzle.CustomScaleManager.SCALE_Y - this.containerHeight) / 2, (BlockPuzzle.CustomScaleManager.HEIGHT / BlockPuzzle.CustomScaleManager.SCALE_Y - this.containerHeight) / 2 + this.containerHeight);\r\n                this.topLeftContainer.position.copyFrom(this.windowBounds.getPosition(-0.06, -0.01));\r\n                this.topLeftContainer.alpha = 0.8;\r\n                this.topRightContainer.position.copyFrom(this.windowBounds.getPosition(1.03, -0.025));\r\n                this.topRightContainer.alpha = 0.8;\r\n                this.bottomLeftContainer.position.copyFrom(this.windowBounds.getPosition(-0.05, 1));\r\n                this.bottomLeftContainer.alpha = 0.9;\r\n                this.bottomRightContainer.position.copyFrom(this.windowBounds.getPosition(1.04, 1));\r\n                this.bottomRightContainer.alpha = 0.9;\r\n            }\r\n        }\r\n    }\r\n    BackgroundManager._instance = null;\r\n    BlockPuzzle.BackgroundManager = BackgroundManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let AchievementType;\r\n    (function (AchievementType) {\r\n        AchievementType[AchievementType[\"TOTAL_SCORES\"] = 1] = \"TOTAL_SCORES\";\r\n        AchievementType[AchievementType[\"TOTAL_STARS\"] = 2] = \"TOTAL_STARS\";\r\n        AchievementType[AchievementType[\"TOTAL_LEVEL_UPS\"] = 3] = \"TOTAL_LEVEL_UPS\";\r\n        AchievementType[AchievementType[\"TOTAL_GREATS\"] = 4] = \"TOTAL_GREATS\";\r\n        AchievementType[AchievementType[\"BOMB_EXPLOSIONS\"] = 5] = \"BOMB_EXPLOSIONS\";\r\n        AchievementType[AchievementType[\"LINES_DESTROYED\"] = 6] = \"LINES_DESTROYED\";\r\n        AchievementType[AchievementType[\"BLOCKS_PLACED\"] = 7] = \"BLOCKS_PLACED\";\r\n        AchievementType[AchievementType[\"FIRE_BLOCKS_DESTROYED\"] = 8] = \"FIRE_BLOCKS_DESTROYED\";\r\n        AchievementType[AchievementType[\"BEST_SCORE_REACHED\"] = 9] = \"BEST_SCORE_REACHED\";\r\n    })(AchievementType = BlockPuzzle.AchievementType || (BlockPuzzle.AchievementType = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let BlockColor;\r\n    (function (BlockColor) {\r\n        BlockColor[BlockColor[\"RED\"] = 0] = \"RED\";\r\n        BlockColor[BlockColor[\"GREEN\"] = 1] = \"GREEN\";\r\n        BlockColor[BlockColor[\"YELLOW\"] = 2] = \"YELLOW\";\r\n        BlockColor[BlockColor[\"BLUE\"] = 3] = \"BLUE\";\r\n        BlockColor[BlockColor[\"ORANGE\"] = 4] = \"ORANGE\";\r\n        BlockColor[BlockColor[\"WHITE\"] = 5] = \"WHITE\";\r\n        BlockColor[BlockColor[\"PURPLE\"] = 6] = \"PURPLE\";\r\n    })(BlockColor = BlockPuzzle.BlockColor || (BlockPuzzle.BlockColor = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let CellModelState;\r\n    (function (CellModelState) {\r\n        CellModelState[CellModelState[\"CELL_EMPTY\"] = 0] = \"CELL_EMPTY\";\r\n        CellModelState[CellModelState[\"CELL_BUSY\"] = 1] = \"CELL_BUSY\";\r\n        CellModelState[CellModelState[\"CELL_NEW\"] = 2] = \"CELL_NEW\";\r\n    })(CellModelState = BlockPuzzle.CellModelState || (BlockPuzzle.CellModelState = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let FigureState;\r\n    (function (FigureState) {\r\n        FigureState[FigureState[\"INACTIVE\"] = 0] = \"INACTIVE\";\r\n        FigureState[FigureState[\"DRAGGING\"] = 1] = \"DRAGGING\";\r\n        FigureState[FigureState[\"PLACED\"] = 2] = \"PLACED\";\r\n    })(FigureState = BlockPuzzle.FigureState || (BlockPuzzle.FigureState = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let InscriptionLevel;\r\n    (function (InscriptionLevel) {\r\n        InscriptionLevel[\"GOOD\"] = \"Good\";\r\n        InscriptionLevel[\"GREAT\"] = \"Great\";\r\n        InscriptionLevel[\"EXCELLENT\"] = \"Excellent\";\r\n        InscriptionLevel[\"AWESOME\"] = \"Awesome\";\r\n    })(InscriptionLevel = BlockPuzzle.InscriptionLevel || (BlockPuzzle.InscriptionLevel = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let PowerupType;\r\n    (function (PowerupType) {\r\n        PowerupType[\"BOMB\"] = \"Bomb\";\r\n        PowerupType[\"LIGHTNING\"] = \"Lightning\";\r\n    })(PowerupType = BlockPuzzle.PowerupType || (BlockPuzzle.PowerupType = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    let WindowHeadingBackplateType;\r\n    (function (WindowHeadingBackplateType) {\r\n        WindowHeadingBackplateType[WindowHeadingBackplateType[\"SILVER\"] = 0] = \"SILVER\";\r\n        WindowHeadingBackplateType[WindowHeadingBackplateType[\"GOLD\"] = 1] = \"GOLD\";\r\n    })(WindowHeadingBackplateType = BlockPuzzle.WindowHeadingBackplateType || (BlockPuzzle.WindowHeadingBackplateType = {}));\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BestScoreReachedEffectEmitter extends Phaser.Particles.Arcade.Emitter {\r\n        constructor(x, y, maxParticles) {\r\n            super(BlockPuzzle.App.instance, x, y, maxParticles);\r\n            this.width = BlockPuzzle.CustomScaleManager.ORIGINAL_WIDTH;\r\n            this.height = 30;\r\n            this.minParticleScale = 1;\r\n            this.maxParticleScale = 1.4;\r\n            this.makeParticles(BlockPuzzle.Settings.ANIMATION_ATLAS, ['particleStar10000', 'particleStar20000', 'particleStar30000'], maxParticles);\r\n            this.gravity.set(0, 1200);\r\n            this.setYSpeed(-100, 700);\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0.0, 1800, Phaser.Easing.Quadratic.In);\r\n            this.flow(3500, 5, 6, maxParticles, false);\r\n        }\r\n    }\r\n    BlockPuzzle.BestScoreReachedEffectEmitter = BestScoreReachedEffectEmitter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ExplodingEffectEmitter extends Phaser.Particles.Arcade.Emitter {\r\n        constructor(targetPosition) {\r\n            super(BlockPuzzle.App.instance, targetPosition.x, targetPosition.y, 100);\r\n            this.particlefrequency = 12;\r\n            this.makeParticles(BlockPuzzle.Settings.ANIMATION_ATLAS, ['particleStar10000', 'particleStar20000', 'particleStar30000']);\r\n            this.width = 40;\r\n            this.height = 40;\r\n            this.minParticleScale = 1.0;\r\n            this.maxParticleScale = 2.5;\r\n            this.gravity.setTo(0, 0);\r\n            this.setYSpeed(-130, 130);\r\n            this.setXSpeed(-130, 130);\r\n            this.minRotation = 0;\r\n            this.maxRotation = 0;\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0, 420, Phaser.Easing.Quintic.In);\r\n            this.autoScale = true;\r\n            this.setScale(2, 0.6, 2, 0.6, 500, Phaser.Easing.Sinusoidal.InOut);\r\n            this.start(false, 600, this.particlefrequency, 100 / this.particlefrequency);\r\n            this.game.time.events.add(1600, () => this.destroy());\r\n        }\r\n    }\r\n    BlockPuzzle.ExplodingEffectEmitter = ExplodingEffectEmitter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class FlyingParticlesEmitter extends Phaser.Particles.Arcade.Emitter {\r\n        constructor(level, points, startPosition, targetPosition) {\r\n            super(level.game, startPosition.x, startPosition.y, 250);\r\n            this.particleSpeed = 1200;\r\n            this.particlefrequency = 17;\r\n            this.level = level;\r\n            this.points = points;\r\n            this.distance = Phaser.Math.distance(targetPosition.x, targetPosition.y, startPosition.x, startPosition.y);\r\n            this.duration = this.distance / this.particleSpeed * 1000;\r\n            this.makeParticles(BlockPuzzle.Settings.ANIMATION_ATLAS, ['particleMultiplier10000', 'particleMultiplier20000', 'particleMultiplier30000']);\r\n            this.width = 25;\r\n            this.height = 25;\r\n            this.minParticleScale = 0.8;\r\n            this.maxParticleScale = 1.3;\r\n            this.gravity.setTo(0, 200);\r\n            this.setYSpeed(-25, 25);\r\n            this.setXSpeed(-25, 25);\r\n            this.minRotation = 0;\r\n            this.maxRotation = 0;\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0, 370, Phaser.Easing.Quintic.In);\r\n            // this.autoScale = true;\r\n            // this.setScale(1.3, 0.8, 1.3, 0.8, 600, Phaser.Easing.Sinusoidal.InOut);\r\n            this.flow(600, this.particlefrequency, 2, this.duration / this.particlefrequency * 3);\r\n            this.game.add.tween(this)\r\n                .to({ x: targetPosition.x, y: targetPosition.y }, this.duration, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(this.addPoints, this);\r\n            this.game.time.events.add(this.duration + 1600, () => this.destroy());\r\n        }\r\n        addPoints() {\r\n            this.on = false;\r\n            this.width = 45;\r\n            this.height = 45;\r\n            this.setYSpeed(-120, 120);\r\n            this.setXSpeed(-120, 120);\r\n            this.setAlpha(1, 0, 300, Phaser.Easing.Quintic.In);\r\n            this.setScale(1, 0.3, 1, 0.3, 280, Phaser.Easing.Sinusoidal.InOut);\r\n            this.start(false, 300, 10, 12);\r\n        }\r\n    }\r\n    BlockPuzzle.FlyingParticlesEmitter = FlyingParticlesEmitter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class InscriptionEffect extends Phaser.Group {\r\n        constructor(inscriptionLevel, x, y) {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.inscriptionLevel = inscriptionLevel;\r\n            this.game.camera.shake(0.0058, 200);\r\n            this.position.set(x, Math.max(y, -120) + 40);\r\n            this.sprite = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'inscription' + this.inscriptionLevel + '0000'));\r\n            this.sprite.anchor.set(0.5, 1);\r\n            this.sprite.alpha = 0;\r\n            this.sprite.scale.set(0);\r\n            this.game.add.tween(this.sprite)\r\n                .to({ alpha: 1 }, 420, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({ alpha: 0 }, 650, Phaser.Easing.Sinusoidal.In, false)\r\n                .start()\r\n                .onComplete.add(() => this.destroy());\r\n            this.game.add.tween(this.sprite)\r\n                .to({ y: -120 }, 350, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({ y: -140 }, 800, Phaser.Easing.Linear.None, false)\r\n                .start();\r\n            this.game.add.tween(this.sprite.scale)\r\n                .to({ x: 1, y: 1 }, 420, this.amplifiedBackOut, false)\r\n                .to({ x: 1.25, y: 1.25 }, 850, Phaser.Easing.Sinusoidal.In, false, 50)\r\n                .start();\r\n            BlockPuzzle.SoundController.instance.playInscriptionSound(inscriptionLevel);\r\n            if (this.inscriptionLevel == BlockPuzzle.InscriptionLevel.GREAT) {\r\n                BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.TOTAL_GREATS, 1);\r\n            }\r\n        }\r\n        amplifiedBackOut(k) {\r\n            let s = 0.70158;\r\n            return --k * k * ((s + 1) * k + s) + 1;\r\n        }\r\n    }\r\n    BlockPuzzle.InscriptionEffect = InscriptionEffect;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class StarPickingUpEffect extends Phaser.Particles.Arcade.Emitter {\r\n        constructor(block) {\r\n            super(BlockPuzzle.App.instance, 0, 0, 250);\r\n            this.particleSpeed = 750;\r\n            this.particleFrequency = 8;\r\n            const parentGroup = BlockPuzzle.App.instance.state.getCurrentState().uiManager.starsCounter;\r\n            const startingPosition = parentGroup.toLocal(block.star.position, block);\r\n            const targetPosition = new PIXI.Point(0, 0);\r\n            const distance = Phaser.Math.clamp(Math.pow(Phaser.Math.distance(targetPosition.x, targetPosition.y, startingPosition.x, startingPosition.y), 0.5) * 20, 330, 700);\r\n            const duration = distance / this.particleSpeed * 1000;\r\n            /* emitter */\r\n            parentGroup.addAt(this, 0);\r\n            this.x = startingPosition.x;\r\n            this.y = startingPosition.y;\r\n            this.makeParticles(BlockPuzzle.Settings.ANIMATION_ATLAS, ['particleStar10000', 'particleStar20000', 'particleStar30000']);\r\n            this.width = 30;\r\n            this.height = 30;\r\n            this.minParticleScale = 0.7;\r\n            this.maxParticleScale = 1.5;\r\n            this.gravity.setTo(0, -100);\r\n            this.setYSpeed(-100, 100);\r\n            this.setXSpeed(-100, 100);\r\n            this.minRotation = 0;\r\n            this.maxRotation = 0;\r\n            this.autoAlpha = true;\r\n            this.setAlpha(1, 0, 420, Phaser.Easing.Quintic.In);\r\n            this.autoScale = true;\r\n            this.setScale(1, 0.3, 1, 0.3, 500, Phaser.Easing.Sinusoidal.InOut);\r\n            this.game.add.tween(this)\r\n                .to({ x: targetPosition.x }, duration, Phaser.Easing.Back.In, true);\r\n            this.game.add.tween(this)\r\n                .to({ y: targetPosition.y }, duration, Phaser.Easing.Sinusoidal.In, true)\r\n                .onComplete.add(this.finalizeTween, this);\r\n            this.start(false, 600, this.particleFrequency, duration / this.particleFrequency);\r\n            this.game.time.events.add(duration + 1600, () => this.destroy());\r\n            /* star sprite */\r\n            this.starSprite = parentGroup.addAt(block.star, 1);\r\n            this.starSprite.position.set(startingPosition.x, startingPosition.y);\r\n            this.game.add.tween(this.starSprite)\r\n                .to({ x: targetPosition.x }, duration, Phaser.Easing.Back.In, true);\r\n            this.game.add.tween(this.starSprite)\r\n                .to({\r\n                y: targetPosition.y,\r\n                angle: startingPosition.x < targetPosition.x ? '-373' : '+347'\r\n            }, duration, Phaser.Easing.Sinusoidal.In, true);\r\n        }\r\n        finalizeTween() {\r\n            this.starSprite.destroy();\r\n            this.on = false;\r\n            this.width = 45;\r\n            this.height = 45;\r\n            this.setYSpeed(-140, 140);\r\n            this.setXSpeed(-140, 140);\r\n            this.setAlpha(1, 0, 480, Phaser.Easing.Quintic.In);\r\n            this.setScale(1.2, 0.3, 1.2, 0.3, 540, Phaser.Easing.Sinusoidal.InOut);\r\n            this.start(false, 580, 10, 12);\r\n            BlockPuzzle.StarsManager.instance.pickupStars(1);\r\n        }\r\n    }\r\n    BlockPuzzle.StarPickingUpEffect = StarPickingUpEffect;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BlockStarredView extends Phaser.Group {\r\n        constructor(color) {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.buildChildren(color);\r\n        }\r\n        buildChildren(color) {\r\n            this.block = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'blockStarred000' + color));\r\n            this.block.anchor.set(0.5);\r\n            this.star = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'star0000'));\r\n            this.star.anchor.set(0.5);\r\n            this.shining = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'starShining0000'));\r\n            this.shining.anchor.set(0.5);\r\n            this.shining.alpha = 0;\r\n            this.shadow = this.add(this.game.make.sprite(-2, -2, BlockPuzzle.Settings.GAME_ATLAS, 'starShadow0000'));\r\n            this.shadow.anchor.set(0.5);\r\n        }\r\n        startShining() {\r\n            this.game.tweens.removeFrom(this.shining);\r\n            this.shining.alpha = 0.0;\r\n            this.game.add.tween(this.shining)\r\n                .to({ alpha: 1 }, BlockPuzzle.Settings.STAR_SHINING_TWEEN_DURATION, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n            this.game.tweens.removeFrom(this.star.scale);\r\n            this.star.scale.set(0.9);\r\n            this.game.add.tween(this.star.scale)\r\n                .to({ x: 1, y: 1 }, BlockPuzzle.Settings.STAR_SHINING_TWEEN_DURATION, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n        }\r\n        setColor(color) {\r\n            this.block.frameName = 'blockStarred000' + color;\r\n        }\r\n        startAppearingTween(initialParent, targetBlock) {\r\n            const initialParentPosition = initialParent.toLocal(this.position, this.parent);\r\n            this.position.set(initialParentPosition.x, initialParentPosition.y);\r\n            initialParent.add(this);\r\n            this.game.time.events.add(70, () => BlockPuzzle.SoundController.instance.playStarAppearSound());\r\n            this.game.tweens.removeFrom(this.block);\r\n            this.block.alpha = 0;\r\n            this.game.add.tween(this.block)\r\n                .to({ alpha: 1 }, BlockPuzzle.Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.35, Phaser.Easing.Linear.None, true);\r\n            this.shining.alpha = 0;\r\n            this.shadow.alpha = 0;\r\n            this.game.add.tween(this.shadow)\r\n                .to({ alpha: 1 }, BlockPuzzle.Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.2, Phaser.Easing.Sinusoidal.In, true, BlockPuzzle.Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.8);\r\n            this.game.tweens.removeFrom(this.star);\r\n            this.star.alpha = 0.5;\r\n            this.game.add.tween(this.star)\r\n                .to({ alpha: 1 }, BlockPuzzle.Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.7, Phaser.Easing.Quadratic.Out, true);\r\n            this.star.angle = -45;\r\n            this.game.add.tween(this.star)\r\n                .to({ angle: 0 }, BlockPuzzle.Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.62, Phaser.Easing.Sinusoidal.Out, false)\r\n                .start();\r\n            this.game.tweens.removeFrom(this.star.scale);\r\n            this.star.scale.set(5);\r\n            this.game.add.tween(this.star.scale)\r\n                .to({ x: 0.8, y: 0.8 }, BlockPuzzle.Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.62, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({ x: 0.9, y: 0.9 }, BlockPuzzle.Settings.STARRED_BLOCK_APPEARING_TWEEN_DURATION * 0.1, Phaser.Easing.Sinusoidal.In, false)\r\n                .start()\r\n                .onComplete.add(() => {\r\n                this.position.set(0, 0);\r\n                targetBlock.add(this);\r\n                this.startShining();\r\n            });\r\n        }\r\n        destroy() {\r\n            super.destroy();\r\n        }\r\n        pickupStar(delay) {\r\n            this.game.time.events.add(delay, () => {\r\n                new BlockPuzzle.StarPickingUpEffect(this);\r\n            });\r\n        }\r\n    }\r\n    BlockPuzzle.BlockStarredView = BlockStarredView;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ExplosionEffect extends Phaser.Group {\r\n        constructor(x, y) {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.position.set(x, y);\r\n            this.explosionA = this.add(this.game.make.sprite(0, 0, 'explosionA'));\r\n            this.explosionA.anchor.set(0.5);\r\n            this.explosionA.scale.set(1.2);\r\n            this.explosionA.angle = Math.random() * 360;\r\n            this.explosionA.animations.add('boom');\r\n            this.explosionA.animations.play('boom', 120, false, true);\r\n            this.explosionB = this.add(this.game.make.sprite(0, 0, 'explosionB'));\r\n            this.explosionB.anchor.set(0.5);\r\n            this.explosionB.scale.set(1.3);\r\n            this.explosionB.angle = Math.random() * 360;\r\n            this.explosionB.animations.add('boom');\r\n            this.explosionB.animations.play('boom', 60, false, true);\r\n            this.game.camera.shake(0.0035, 350);\r\n            BlockPuzzle.SoundController.instance.playExplosionSound();\r\n        }\r\n    }\r\n    BlockPuzzle.ExplosionEffect = ExplosionEffect;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class LightningEffect extends Phaser.Sprite {\r\n        constructor(initialCell, targetCell) {\r\n            super(BlockPuzzle.App.instance, targetCell.x, targetCell.y, BlockPuzzle.Settings.GAME_ATLAS, 'lighting0000');\r\n            this.anchor.set(0.5, 0);\r\n            this.initialCellPosition = initialCell.position.clone();\r\n            this.targetCellPosition = targetCell.position.clone();\r\n            this.targetCell = targetCell;\r\n            this.update();\r\n            this.blinkAnimation = this.animations.add('blinkAnimation', Phaser.Animation.generateFrameNames('lighting', 0, LightningEffect.LIGHTING_FRAMES - 1, '', 4));\r\n            this.endAnimation = this.animations.add('endAnimation', Phaser.Animation.generateFrameNames('lightingEnd', 0, LightningEffect.DISAPPEARING_FRAMES - 1, '', 4));\r\n        }\r\n        delayedStart(delay) {\r\n            this.visible = false;\r\n            this.game.time.events.add(delay, () => {\r\n                if (this.targetCell) {\r\n                    this.startAnimations();\r\n                }\r\n                else {\r\n                    this.destroy();\r\n                }\r\n            });\r\n            return this;\r\n        }\r\n        startAnimations() {\r\n            BlockPuzzle.SoundController.instance.playLightningSound();\r\n            this.visible = true;\r\n            this.blinkAnimation.play(LightningEffect.FPS, false, false);\r\n            this.blinkAnimation.onComplete.add(() => {\r\n                this.endAnimation.play(LightningEffect.FPS, false, false);\r\n                this.endAnimation.onComplete.add(() => {\r\n                    this.destroy();\r\n                });\r\n                this.scale.set(1, 1);\r\n            });\r\n            if (this.targetCell) {\r\n                BlockPuzzle.ScoreManager.instance.addScores(5);\r\n                this.targetCell.destroyBlock(35);\r\n            }\r\n        }\r\n        update() {\r\n            super.update();\r\n            const length = Phaser.Math.distance(this.targetCellPosition.x, this.targetCellPosition.y, this.initialCellPosition.x, this.initialCellPosition.y);\r\n            if (this.targetCell) {\r\n                this.targetCellPosition.copyFrom(this.targetCell.position);\r\n                this.scale.set(1, Math.max(0.5, length / 130));\r\n                if (length == 0) {\r\n                    this.anchor.set(0.5); /* hit the same block */\r\n                }\r\n            }\r\n            else if (length < 120) {\r\n                this.scale.set(1, length / 130);\r\n            }\r\n            this.position.copyFrom(this.targetCellPosition);\r\n            this.rotation = Phaser.Math.angleBetween(this.targetCellPosition.x, this.targetCellPosition.y, this.initialCellPosition.x, this.initialCellPosition.y) - Math.PI / 2;\r\n        }\r\n        destroy() {\r\n            super.destroy();\r\n            this.blinkAnimation = null;\r\n            this.endAnimation = null;\r\n        }\r\n    }\r\n    LightningEffect.LIGHTING_FRAMES = 15;\r\n    LightningEffect.DISAPPEARING_FRAMES = 13;\r\n    LightningEffect.TOTAL_FRAMES = LightningEffect.LIGHTING_FRAMES + LightningEffect.DISAPPEARING_FRAMES;\r\n    LightningEffect.FPS = 180;\r\n    BlockPuzzle.LightningEffect = LightningEffect;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ScoresEffect extends Phaser.Group {\r\n        constructor(level, scores, x, y, delay) {\r\n            super(level.game);\r\n            this.targetScale = 1.0;\r\n            this.level = level;\r\n            this.scores = scores;\r\n            const parentGroup = BlockPuzzle.App.instance.state.getCurrentState().uiManager.multiplierBar;\r\n            const startingPosition = parentGroup.toLocal(new Phaser.Point(x, y), this.level.boardManager.getBoard().cellsContainer);\r\n            const targetPosition = new PIXI.Point(0, 0);\r\n            this.position.set(startingPosition.x, startingPosition.y);\r\n            parentGroup.addAt(this, 0);\r\n            this.buildContent();\r\n            this.animateContentA(delay, targetPosition);\r\n        }\r\n        buildContent() {\r\n            this.scoresText = this.add(new BlockPuzzle.BitmapTextField('+' + this.scores, BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 1, 0.5, 0.5, 1));\r\n        }\r\n        animateContentA(delay, targetPosition) {\r\n            //appearing tween\r\n            this.scale.set(0);\r\n            this.game.add.tween(this.scale)\r\n                .to({\r\n                x: this.targetScale,\r\n                y: this.targetScale\r\n            }, 300, Phaser.Easing.Back.Out, true, delay);\r\n            //tween appearing position\r\n            this.appearingTween = this.game.add.tween(this.scoresText)\r\n                .to({ y: this.scoresText.y - 80 }, 350, Phaser.Easing.Back.Out, true, delay);\r\n            this.disappearingTween = this.game.add.tween(this)\r\n                .to({ alpha: 0.0, y: this.y - 70 }, 750, Phaser.Easing.Cubic.In, false);\r\n            this.disappearingTween.onStart.add(() => {\r\n            });\r\n            this.disappearingTween.onComplete.add(() => this.destroy());\r\n            this.game.time.events.add(delay, () => this.parent.addChildAt(new BlockPuzzle.FlyingParticlesEmitter(this.level, this.scores, new PIXI.Point(this.x, this.y - 80), new Phaser.Point(targetPosition.x, targetPosition.y)), 0));\r\n            //chain tweens\r\n            this.appearingTween.chain(this.disappearingTween);\r\n        }\r\n        destroy() {\r\n            super.destroy();\r\n            this.level = null;\r\n            this.scoresText = null;\r\n            this.appearingTween = null;\r\n            this.disappearingTween = null;\r\n        }\r\n    }\r\n    BlockPuzzle.ScoresEffect = ScoresEffect;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BlockDestroyingEffect extends Phaser.Sprite {\r\n        constructor(color, x, y, delay) {\r\n            super(BlockPuzzle.App.instance, x, y, BlockPuzzle.Settings.ANIMATION_ATLAS);\r\n            this.anchor.set(0.5, 0.24);\r\n            this.anim = this.animations.add('destroying', Phaser.Animation.generateFrameNames('blockDestroyingAnim' + color, 0, 35, '', 4));\r\n            this.visible = false;\r\n            this.game.time.events.add(delay, () => {\r\n                this.visible = true;\r\n                this.anim.play(62, false, true);\r\n            });\r\n        }\r\n    }\r\n    BlockPuzzle.BlockDestroyingEffect = BlockDestroyingEffect;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Block extends Phaser.Group {\r\n        constructor(cellModel, color) {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.starred = false;\r\n            this.active = true;\r\n            this.posX = cellModel.posX;\r\n            this.posY = cellModel.posY;\r\n            this.glow = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'blockGlow000' + color));\r\n            this.glow.anchor.set(0.5);\r\n            this.glow.alpha = 0;\r\n            this.glow.visible = false;\r\n            this.block = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'block000' + color));\r\n            this.block.anchor.set(0.5);\r\n            this.blockGrayscale = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'blockGrey000' + color));\r\n            this.blockGrayscale.anchor.set(0.5);\r\n            this.blockGrayscale.visible = false;\r\n            this.blockGrayscale.alpha = 0;\r\n            this.setColor(color);\r\n        }\r\n        addStar(level) {\r\n            if (!this.starred) {\r\n                this.starred = true;\r\n                this.block.visible = false;\r\n                this.blockStarred = this.blockStarred || this.add(new BlockPuzzle.BlockStarredView(this.color));\r\n                this.blockStarred.startAppearingTween(level.boardManager.getBoard().effectsContainer, this);\r\n            }\r\n        }\r\n        hasStar() {\r\n            return this.starred;\r\n        }\r\n        setColor(color) {\r\n            this.color = color;\r\n            this.block.frameName = 'block000' + this.color;\r\n            this.glow.frameName = 'blockGlow000' + this.color;\r\n            if (this.blockStarred) {\r\n                this.blockStarred.setColor(this.color);\r\n            }\r\n            this.blockGrayscale.frameName = this.hasStar() ? 'blockStarredGrey000' + this.color : 'blockGrey000' + this.color;\r\n        }\r\n        setTemporalColor(color) {\r\n            this.temporalColor = color;\r\n            this.block.frameName = 'block000' + this.temporalColor;\r\n            this.glow.frameName = 'blockGlow000' + this.temporalColor;\r\n            if (this.blockStarred) {\r\n                this.blockStarred.setColor(this.temporalColor);\r\n            }\r\n            this.blockGrayscale.frameName = this.hasStar() ? 'blockStarredGrey000' + this.color : 'blockGrey000' + this.color;\r\n        }\r\n        applyTemporalColor() {\r\n            if (this.temporalColor) {\r\n                this.setColor(this.temporalColor);\r\n            }\r\n        }\r\n        activate(delay) {\r\n            this.active = true;\r\n            this.block.visible = true;\r\n            if (this.hasStar()) {\r\n                this.blockStarred.visible = true;\r\n                this.blockStarred.alpha = 1;\r\n                this.blockGrayscale.parent.setChildIndex(this.blockGrayscale, this.blockGrayscale.parent.children.length - 1);\r\n            }\r\n            this.game.add.tween(this.blockGrayscale)\r\n                .to({ alpha: 0 }, BlockPuzzle.Settings.BLOCK_ACTIVATION_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay);\r\n        }\r\n        deactivate(delay) {\r\n            this.active = false;\r\n            this.blockGrayscale.parent.setChildIndex(this.blockGrayscale, this.blockGrayscale.parent.children.length - 1);\r\n            this.blockGrayscale.visible = true;\r\n            this.blockGrayscale.alpha = 0;\r\n            this.game.add.tween(this.blockGrayscale)\r\n                .to({ alpha: 1 }, BlockPuzzle.Settings.BLOCK_DEACTIVATION_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay)\r\n                .onComplete.add(() => {\r\n                this.block.visible = false;\r\n                if (this.hasStar()) {\r\n                    this.blockStarred.visible = false;\r\n                    this.blockStarred.alpha = 0;\r\n                }\r\n            });\r\n        }\r\n        dispose(delay) {\r\n            const deltaY = (8 - this.posY) + 1;\r\n            const targetY = deltaY * BlockPuzzle.Settings.CELL_HEIGHT;\r\n            const targetX = Math.floor(this.game.rnd.integerInRange(20, 60));\r\n            const fallingDistanceY = targetY;\r\n            const fallingDuration = 250 + deltaY * 45;\r\n            this.game.add.tween(this)\r\n                .to({ x: targetX.toString() }, fallingDuration, Phaser.Easing.Sinusoidal.In, true, delay);\r\n            this.game.add.tween(this)\r\n                .to({ alpha: 0 }, fallingDuration, Phaser.Easing.Exponential.In, true, delay);\r\n            this.game.add.tween(this)\r\n                .to({ y: '+' + fallingDistanceY }, fallingDuration, Phaser.Easing.Back.In, true, delay);\r\n        }\r\n        enableGlow(duration) {\r\n            this.game.tweens.removeFrom(this.glow);\r\n            this.glow.visible = true;\r\n            this.glow.alpha = 0;\r\n            this.game.add.tween(this.glow)\r\n                .to({ alpha: 0.6 }, duration, Phaser.Easing.Sinusoidal.InOut, true);\r\n        }\r\n        disableGlow(duration) {\r\n            this.game.tweens.removeFrom(this.glow);\r\n            this.game.add.tween(this.glow)\r\n                .to({ alpha: 0 }, duration, Phaser.Easing.Sinusoidal.Out, true)\r\n                .onComplete.add(() => this.glow.visible = false);\r\n        }\r\n        animateDestroying(effectsContainer, delay) {\r\n            effectsContainer.add(new BlockPuzzle.BlockDestroyingEffect(this.color, this.x, this.y, delay));\r\n            this.game.add.tween(this.scale)\r\n                .to({ x: 0.5, y: 0.5 }, BlockPuzzle.Settings.BLOCK_DISAPPEARING_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay);\r\n            this.game.add.tween(this)\r\n                .to({ alpha: 0 }, BlockPuzzle.Settings.BLOCK_DISAPPEARING_DURATION, Phaser.Easing.Sinusoidal.Out, true, delay)\r\n                .onComplete.add(() => {\r\n                if (this.color == BlockPuzzle.BlockColor.RED) {\r\n                    BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.FIRE_BLOCKS_DESTROYED, 1);\r\n                }\r\n                this.destroy();\r\n            });\r\n            if (this.hasStar() && this.blockStarred) {\r\n                this.blockStarred.pickupStar(delay);\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.Block = Block;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Board extends Phaser.Group {\r\n        constructor(boardManager, rows, cols) {\r\n            super(boardManager.game);\r\n            this.active = true;\r\n            this.boardManager = boardManager;\r\n            this.level = boardManager.level;\r\n            this.numRows = rows;\r\n            this.numCols = cols;\r\n            this.buildCells();\r\n            this.alignCells();\r\n            this.animateAppearing();\r\n        }\r\n        buildCells() {\r\n            this.cells = [];\r\n            this.cellsContainer = this.add(this.game.make.group());\r\n            this.fieldCoverSprite = this.add(this.game.make.image(0, 0, 'field-cover'));\r\n            this.fieldCoverSprite.anchor.set(0.5);\r\n            this.blocksContainer = this.add(this.game.make.group());\r\n            this.explosionsContainer = this.add(this.game.make.group());\r\n            this.effectsContainer = this.add(this.game.make.group());\r\n            for (let i = 0; i < this.numRows * this.numCols; i++) {\r\n                let row = Math.floor(i / this.numCols);\r\n                let column = i % this.numCols;\r\n                this.cells.push(this.cellsContainer.add(new BlockPuzzle.Cell(this, column, row)));\r\n            }\r\n        }\r\n        alignCells() {\r\n            this.cells.forEach(cell => cell.position.set(cell.posX - this.numCols / 2 + 0.5, cell.posY - this.numRows / 2 + 0.5).multiply(BlockPuzzle.Settings.CELL_WIDTH, BlockPuzzle.Settings.CELL_HEIGHT));\r\n        }\r\n        animateAppearing() {\r\n            let cell = null;\r\n            for (let i = 0; i < this.numCols; i++) {\r\n                for (let j = 0; j < this.numRows; j++) {\r\n                    cell = this.getCellAt(i, j);\r\n                    cell.scale.set(0);\r\n                    this.game.add.tween(cell.scale)\r\n                        .to({ x: 1, y: 1 }, 120, Phaser.Easing.Quadratic.Out, true, (i + j) * 20 + 100);\r\n                }\r\n            }\r\n            this.game.time.events.add((this.numCols + this.numRows) * 20 + 100, () => this.level.eventManager.onBoardCreated.dispatch());\r\n        }\r\n        findClosestCell(point) {\r\n            let closestCell = null;\r\n            this.getCells().forEach(cell => {\r\n                if (Math.abs(cell.x - point.x) <= BlockPuzzle.Settings.CELL_WIDTH / 2 && Math.abs(cell.y - point.y) <= BlockPuzzle.Settings.CELL_HEIGHT / 2) {\r\n                    closestCell = cell;\r\n                }\r\n            });\r\n            return closestCell;\r\n        }\r\n        /**\r\n         * PUBLIC\r\n         */\r\n        isActive() {\r\n            return this.active;\r\n        }\r\n        getScale() {\r\n            return this.scale.x;\r\n        }\r\n        getCells() {\r\n            return this.cells;\r\n        }\r\n        getNotEmptyCells() {\r\n            return this.getCells().filter(cell => !this.isEmpty(cell));\r\n        }\r\n        getEmptyCells() {\r\n            return this.getCells().filter(cell => this.isEmpty(cell));\r\n        }\r\n        getCellAt(posX, posY) {\r\n            return (posX < 0 || posX >= this.numCols || posY < 0 || posY >= this.numRows) ? null : this.cells[posY * this.numRows + posX] || null;\r\n        }\r\n        isEmpty(cell) {\r\n            return cell && cell.isEmpty();\r\n        }\r\n        activate() {\r\n            if (!this.isActive()) {\r\n                this.active = true;\r\n                BlockPuzzle.SoundController.instance.playReviveSound();\r\n                Phaser.ArrayUtils.shuffle(this.getNotEmptyCells()).forEach((cell, index) => cell.getBlock().activate(index * 7));\r\n            }\r\n        }\r\n        deactivate(delay) {\r\n            if (this.isActive()) {\r\n                this.active = false;\r\n                BlockPuzzle.SoundController.instance.playLoseSound();\r\n                Phaser.ArrayUtils.shuffle(this.getNotEmptyCells()).forEach((cell, index) => cell.getBlock().deactivate(delay + index * 10));\r\n            }\r\n        }\r\n        disposeBlocks(delay, deactivateBeforeDisposing) {\r\n            if (deactivateBeforeDisposing) {\r\n                this.active = false;\r\n                BlockPuzzle.SoundController.instance.playLoseSound();\r\n            }\r\n            Phaser.ArrayUtils.shuffle(this.getNotEmptyCells()).forEach((cell, index) => cell.disposeBlock(delay + index * 8, deactivateBeforeDisposing));\r\n        }\r\n        dispatchFigureIsBeingDragged(figure) {\r\n            this.getCells().forEach(cell => cell.resetView(false));\r\n            /* find target cells where figure will be placed */\r\n            this.targetCells = this.getTargetCellsFor(figure);\r\n            if (this.targetCells && figure) {\r\n                /* and highlight them */\r\n                this.targetCells.forEach(cell => cell.showHighlighting(figure.color, false));\r\n                /* highlight potentially filled lines and rows */\r\n                const model = this.getModel();\r\n                this.targetCells.forEach(cell => model.setCellStateAt(BlockPuzzle.CellModelState.CELL_NEW, cell.posX, cell.posY));\r\n                const cellsToClear = model.findCellsToClear();\r\n                cellsToClear.forEach(cellPos => this.getCellAt(cellPos.x, cellPos.y).showHighlighting(figure.color, false));\r\n            }\r\n        }\r\n        dispatchPowerupIsBeingDragged(targetCells) {\r\n            this.getCells().forEach(cell => cell.resetAlphaHighlighting());\r\n            if (targetCells && targetCells.length > 0) {\r\n                /* set alpha to all the cells*/\r\n                this.getCells().forEach(cell => cell.applyAlphaHighlighting(true));\r\n                /* remove alpha filter from target cells */\r\n                targetCells.forEach(cell => cell.applyAlphaHighlighting(false));\r\n            }\r\n        }\r\n        placeFigure(figure) {\r\n            if (figure) {\r\n                this.targetCells = this.getTargetCellsFor(figure);\r\n                if (this.targetCells) {\r\n                    this.targetCells.forEach((cell, index) => cell.placeBlock(figure.getView().getBlocks()[index]));\r\n                    this.clearFilledRowsAndColumns(this.targetCells, figure);\r\n                    this.targetCells = null;\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        getTargetCellsFor(figure) {\r\n            if (figure) {\r\n                const baseBlock = figure.getView().getFirstBlock();\r\n                const figureLocalPosition = this.cellsContainer.toLocal(figure.getView().position, figure);\r\n                const targetLocalPosition = new Phaser.Point(figureLocalPosition.x + baseBlock.x, figureLocalPosition.y + baseBlock.y);\r\n                const baseCell = this.findClosestCell(targetLocalPosition);\r\n                if (baseCell) {\r\n                    let localCells = figure.getView().getBlocks().map(block => this.getCellAt(baseCell.posX + block.posX - baseBlock.posX, baseCell.posY + block.posY - baseBlock.posY));\r\n                    if (localCells.every(cell => this.isEmpty(cell))) {\r\n                        if (!BlockPuzzle.Settings.TUTORIAL_COMPLETED) {\r\n                            if (localCells.every(cell => !!figure.getModel().getCells().find(modelCell => cell.posX == (modelCell.posX + figure.getModel().posX) && cell.posY == (modelCell.posY + figure.getModel().posY)))) {\r\n                                return localCells;\r\n                            }\r\n                            else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return localCells;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        getCellUnderPoint(localPoint) {\r\n            return this.level.boardManager.getBoard().getCells().find(cell => Math.abs(cell.x - localPoint.x) < BlockPuzzle.Settings.CELL_WIDTH / 2 && Math.abs(cell.y - localPoint.y) < BlockPuzzle.Settings.CELL_HEIGHT / 2) || null;\r\n        }\r\n        getNumStarsOnTheBoard() {\r\n            return this.getNotEmptyCells().reduce((sum, cell) => sum + (cell.getBlock().hasStar() ? 1 : 0), 0);\r\n        }\r\n        clearFilledRowsAndColumns(targetCells, figure) {\r\n            let cellsToClear = [];\r\n            let numLines = 0;\r\n            //check rows\r\n            for (let i = 0; i < this.numRows; i++) {\r\n                if (this.isRowFilled(i)) {\r\n                    numLines++;\r\n                    cellsToClear = BlockPuzzle.ArrayUtils.uniteArrays(cellsToClear, this.getRow(i));\r\n                }\r\n            }\r\n            //check columns\r\n            for (let i = 0; i < this.numCols; i++) {\r\n                if (this.isColumnFilled(i)) {\r\n                    numLines++;\r\n                    cellsToClear = BlockPuzzle.ArrayUtils.uniteArrays(cellsToClear, this.getColumn(i));\r\n                }\r\n            }\r\n            if (cellsToClear.length > 0) {\r\n                this.level.dataManager.dispatchLinesDestroyed(numLines, cellsToClear.map(cell => {\r\n                    return { x: cell.posX, y: cell.posY };\r\n                }));\r\n                if (BlockPuzzle.Settings.SET_THE_SAME_EXPLOSION_COLOR_FOR_ALL_THE_EXPLODING_CELLS) {\r\n                    cellsToClear.forEach(cell => cell.getBlock().setColor(figure.color));\r\n                }\r\n                const scores = numLines * (numLines + 1) / 2 * BlockPuzzle.Settings.BASIC_LINE_DESTROYING_REWARD + figure.getModel().numCells();\r\n                const explosionStartingPosition = this.findExplosionStartingPosition(cellsToClear, targetCells, BlockPuzzle.Settings.PICK_RANDOM_EXPLOSION_STARTING_POINT);\r\n                const scoresEffectPosition = this.level.boardManager.getBoard().getCellAt(explosionStartingPosition.x, explosionStartingPosition.y).position;\r\n                this.level.serviceManager.inscriptionsService.displayScoresEffect(scores, scoresEffectPosition.x, scoresEffectPosition.y);\r\n                cellsToClear.forEach(cell => cell.destroyBlock(BlockPuzzle.Settings.BLOCK_DESTROY_ANIMATION_DELAY * Math.max(Math.abs(cell.posX - explosionStartingPosition.x), Math.abs(cell.posY - explosionStartingPosition.y))));\r\n                BlockPuzzle.SoundController.instance.playNextLineDestroyingSound(numLines);\r\n                BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.LINES_DESTROYED, numLines);\r\n            }\r\n            else {\r\n                const scoresEffectPosition = this.level.boardManager.getBoard().cellsContainer.toLocal(figure.getView().parent.toGlobal(figure.getView().position), this.game.world);\r\n                this.level.serviceManager.inscriptionsService.displayScoresEffect(figure.getModel().numCells(), scoresEffectPosition.x, scoresEffectPosition.y - 60);\r\n            }\r\n            return numLines;\r\n        }\r\n        isRowFilled(rowIndex) {\r\n            return this.getRow(rowIndex).every(cell => cell.isEmpty() == false);\r\n        }\r\n        isColumnFilled(columnIndex) {\r\n            return this.getColumn(columnIndex).every(cell => cell.isEmpty() == false);\r\n        }\r\n        getRow(rowIndex) {\r\n            return this.getCells().filter(cell => cell.posX == rowIndex);\r\n        }\r\n        getColumn(colIndex) {\r\n            return this.getCells().filter(cell => cell.posY == colIndex);\r\n        }\r\n        findExplosionStartingPosition(explodingCells, targetCells, pickRandom) {\r\n            let targetCellsToExplode = explodingCells.filter(cell => targetCells.indexOf(cell) != -1);\r\n            if (targetCellsToExplode.length == 0) {\r\n                /* if there are no target cells among exploding ones, which is basically impossible, but who knows :\\ */\r\n                targetCellsToExplode = explodingCells.slice();\r\n            }\r\n            /* find the epicenter of an explosion */\r\n            if (pickRandom) {\r\n                let { posX, posY } = Phaser.ArrayUtils.getRandomItem(targetCellsToExplode);\r\n                return { x: posX, y: posY };\r\n            }\r\n            else {\r\n                const minX = targetCellsToExplode.reduce((min, cell) => Math.min(min, cell.posX), Number.MAX_SAFE_INTEGER);\r\n                const maxX = targetCellsToExplode.reduce((max, cell) => Math.max(max, cell.posX), 0);\r\n                const minY = targetCellsToExplode.reduce((min, cell) => Math.min(min, cell.posY), Number.MAX_SAFE_INTEGER);\r\n                const maxY = targetCellsToExplode.reduce((max, cell) => Math.max(max, cell.posY), 0);\r\n                return { x: (minX + maxX) / 2, y: (minY + maxY) / 2 };\r\n            }\r\n        }\r\n        getModel() {\r\n            return new BlockPuzzle.BoardModel(this.numCols, this.numRows).parseFromBoard(this);\r\n        }\r\n    }\r\n    BlockPuzzle.Board = Board;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Cell extends Phaser.Group {\r\n        constructor(board, posX, posY) {\r\n            super(board.game);\r\n            this.forceHighlighting = false;\r\n            this.board = board;\r\n            this.boardManager = board.boardManager;\r\n            this.level = this.boardManager.level;\r\n            this.posX = posX;\r\n            this.posY = posY;\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.cellSprite = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'cell000' + Math.floor(Math.random() * 3)));\r\n            this.cellSprite.anchor.set(0.5);\r\n            this.highlightSprite = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'block0000'));\r\n            this.highlightSprite.anchor.set(0.5);\r\n            this.highlightSprite.alpha = 0.5;\r\n            this.highlightSprite.visible = false;\r\n            this.block = null;\r\n        }\r\n        equalsTo(anotherCell) {\r\n            return this.posX === anotherCell.posX && this.posY === anotherCell.posY;\r\n        }\r\n        isEmpty() {\r\n            return this.block == null;\r\n        }\r\n        hasBlock() {\r\n            return !this.isEmpty();\r\n        }\r\n        getBlock() {\r\n            return this.block;\r\n        }\r\n        disposeBlock(delay, deactivateBeforeDisposing) {\r\n            if (this.hasBlock()) {\r\n                if (deactivateBeforeDisposing) {\r\n                    this.getBlock().deactivate(delay);\r\n                    this.getBlock().dispose(delay + BlockPuzzle.Settings.BLOCK_DEACTIVATION_TWEEN_DURATION);\r\n                }\r\n                else {\r\n                    this.getBlock().dispose(delay);\r\n                }\r\n                this.block = null;\r\n            }\r\n        }\r\n        placeBlock(block) {\r\n            const blockLocalPosition = this.board.blocksContainer.toLocal(block.position, block.parent);\r\n            this.block = this.board.blocksContainer.add(block);\r\n            this.block.posX = this.posX;\r\n            this.block.posY = this.posY;\r\n            this.block.position.set(blockLocalPosition.x, blockLocalPosition.y);\r\n            this.game.tweens.removeFrom(this.block, false);\r\n            this.game.tweens.removeFrom(this.block.scale);\r\n            this.game.add.tween(this.block)\r\n                .to({ x: this.x, y: this.y }, 130, Phaser.Easing.Circular.Out, true, 0);\r\n            this.game.add.tween(this.block.scale)\r\n                .to({ x: 1, y: 1 }, 120, Phaser.Easing.Cubic.In, true, 0);\r\n        }\r\n        destroyBlock(delay) {\r\n            if (this.block) {\r\n                this.block.animateDestroying(this.board.explosionsContainer, delay);\r\n                this.block = null;\r\n            }\r\n        }\r\n        applyAlphaHighlighting(value) {\r\n            if (this.hasBlock()) {\r\n                this.getBlock().alpha = value ? BlockPuzzle.Settings.POWERUP_HIGHLIGHTING_ALPHA : 1;\r\n            }\r\n            else {\r\n                this.alpha = value ? BlockPuzzle.Settings.POWERUP_HIGHLIGHTING_ALPHA : 1;\r\n            }\r\n        }\r\n        resetAlphaHighlighting() {\r\n            if (this.hasBlock()) {\r\n                this.getBlock().alpha = 1;\r\n            }\r\n            this.alpha = 1;\r\n        }\r\n        showHighlighting(color, forced) {\r\n            if (forced) {\r\n                this.forceHighlighting = true;\r\n            }\r\n            if (this.isEmpty()) {\r\n                this.highlightSprite.frameName = 'block000' + color;\r\n                this.highlightSprite.visible = true;\r\n            }\r\n            else {\r\n                this.block.setTemporalColor(color);\r\n            }\r\n        }\r\n        resetView(force) {\r\n            if (force) {\r\n                this.forceHighlighting = false;\r\n            }\r\n            if (!this.forceHighlighting) {\r\n                this.highlightSprite.visible = false;\r\n            }\r\n            if (!this.isEmpty()) {\r\n                this.block.setColor(this.block.color);\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.Cell = Cell;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Figure extends Phaser.Group {\r\n        constructor(figureManager, figureModel, color, barIndex) {\r\n            super(figureManager.game);\r\n            this.figureWidth = 0;\r\n            this.figureHeight = 0;\r\n            this.applicable = true;\r\n            this.figureManager = figureManager;\r\n            this.level = this.figureManager.level;\r\n            this.board = this.level.boardManager.getBoard();\r\n            this.figureModel = figureModel;\r\n            this.figureState = BlockPuzzle.FigureState.INACTIVE;\r\n            this.color = color;\r\n            this.barIndex = barIndex;\r\n            this.figureWidth = figureModel.getWidth();\r\n            this.figureHeight = figureModel.getHeight();\r\n            this.figureView = this.add(new BlockPuzzle.FigureView(this, figureModel));\r\n            /* input handler */\r\n            this.inputHandler = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'blackSquare0000'));\r\n            this.inputHandler.anchor.set(0.5);\r\n            this.inputHandler.inputEnabled = true;\r\n            this.inputHandler.width = 5 * BlockPuzzle.Settings.CELL_WIDTH * BlockPuzzle.Settings.DEFAULT_FIGURE_SCALE;\r\n            this.inputHandler.height = 5 * BlockPuzzle.Settings.CELL_HEIGHT * BlockPuzzle.Settings.DEFAULT_FIGURE_SCALE;\r\n            this.inputHandler.alpha = 0;\r\n            this.inputHandler.events.onInputDown.add(this.handleInputDown, this);\r\n            this.inputHandler.events.onInputUp.add(this.handleInputUp, this);\r\n        }\r\n        /**\r\n         * PUBLIC\r\n         */\r\n        setPosition(posX, posY) {\r\n            this.posX = posX;\r\n            this.posY = posY;\r\n        }\r\n        getView() {\r\n            return this.figureView;\r\n        }\r\n        getModel() {\r\n            return this.figureModel;\r\n        }\r\n        playAppearingTween(delay) {\r\n            this.figureView.playAppearingTween(delay);\r\n        }\r\n        pickUp() {\r\n            this.figureState = BlockPuzzle.FigureState.DRAGGING;\r\n            if (this.parent) {\r\n                this.parent.setChildIndex(this, this.parent.children.length - 1);\r\n            }\r\n            this.game.add.tween(this.figureView)\r\n                .to(this.level.serviceManager.layoutService.getFigureDraggingDelta(this.barIndex), BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION, Phaser.Easing.Circular.Out, true);\r\n            this.figureView.tweenScale(BlockPuzzle.Settings.DRAGGING_FIGURE_SCALE, true, BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION * 1.25, 1 / this.scale.x * this.board.getScale());\r\n            this.figureView.getBlocks().forEach(block => block.enableGlow(BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION * 1.5));\r\n            BlockPuzzle.SoundController.instance.playFigurePickupSound();\r\n        }\r\n        putDown() {\r\n            this.figureState = BlockPuzzle.FigureState.PLACED;\r\n            this.figureView.getBlocks().forEach(block => block.disableGlow(BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION / 2));\r\n            BlockPuzzle.SoundController.instance.playFigurePlaceSound();\r\n        }\r\n        release() {\r\n            this.figureState = BlockPuzzle.FigureState.INACTIVE;\r\n            this.game.add.tween(this.figureView)\r\n                .to({ x: 0, y: 0 }, BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true);\r\n            this.figureView.tweenScale(BlockPuzzle.Settings.DEFAULT_FIGURE_SCALE, false, BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION);\r\n            this.figureView.getBlocks().forEach(block => block.disableGlow(BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION));\r\n            BlockPuzzle.SoundController.instance.playFigureFailSound();\r\n        }\r\n        dispose() {\r\n            this.game.add.tween(this.figureView)\r\n                .to(this.level.serviceManager.layoutService.getFigureDisposingTweenParams(), BlockPuzzle.Settings.FIGURE_DISPOSING_TWEEN_DURATION, Phaser.Easing.Sinusoidal.Out, true)\r\n                .onComplete.add(() => this.destroy());\r\n        }\r\n        setApplicable(value) {\r\n            if (value != this.applicable) {\r\n                this.applicable = value;\r\n                this.game.tweens.removeFrom(this, false);\r\n                this.game.add.tween(this)\r\n                    .to({ alpha: value ? 1 : BlockPuzzle.Settings.NOT_APPLICABLE_FIGURE_APLHA }, 350, Phaser.Easing.Linear.None, true, 450);\r\n            }\r\n        }\r\n        /**\r\n         * INPUT HANDLERS\r\n         */\r\n        handleInputDown() {\r\n            if (this.figureView.isReady) {\r\n                this.figureManager.handleFigureInputDown(this);\r\n            }\r\n        }\r\n        handleInputUp() {\r\n            if (this.figureView.isReady) {\r\n                this.figureManager.handleFigureInputUp(this);\r\n            }\r\n        }\r\n        /**\r\n         * DESTROY\r\n         */\r\n        destroy() {\r\n            this.inputHandler.events.onInputDown.remove(this.handleInputDown, this);\r\n            this.inputHandler.events.onInputUp.remove(this.handleInputUp, this);\r\n            super.destroy();\r\n            this.figureView = null;\r\n            this.inputHandler = null;\r\n        }\r\n    }\r\n    BlockPuzzle.Figure = Figure;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AbstractManager extends Phaser.Group {\r\n        constructor(level) {\r\n            super(level.game);\r\n            this.level = level;\r\n        }\r\n        resize() {\r\n            switch (BlockPuzzle.CustomScaleManager.getLayout()) {\r\n                case BlockPuzzle.LayoutType.PORTRAIT:\r\n                    this.resizePortrait();\r\n                    break;\r\n                case BlockPuzzle.LayoutType.SQUARED:\r\n                    this.resizeSquared();\r\n                    break;\r\n                case BlockPuzzle.LayoutType.LANDSCAPE:\r\n                    this.resizeLandscape();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.AbstractManager = AbstractManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BoardManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.board = this.add(new BlockPuzzle.Board(this, BlockPuzzle.Settings.BOARD_ROWS, BlockPuzzle.Settings.BOARD_COLS));\r\n        }\r\n        getBoard() {\r\n            return this.board;\r\n        }\r\n        resizeLandscape() {\r\n            this.fillAvailableSpace();\r\n        }\r\n        resizeSquared() {\r\n            this.fillAvailableSpace();\r\n        }\r\n        resizePortrait() {\r\n            this.fillAvailableSpace();\r\n        }\r\n        getOriginalBounds(includePadding) {\r\n            const boardWidth = (this.getBoard().numCols + (includePadding ? 0.5 : 0)) * BlockPuzzle.Settings.CELL_WIDTH;\r\n            const boardHeight = (this.getBoard().numRows + (includePadding ? 0.5 : 0)) * BlockPuzzle.Settings.CELL_HEIGHT;\r\n            return new Phaser.Rectangle(-boardWidth / 2, -boardHeight / 2, boardWidth, boardHeight);\r\n        }\r\n        getBoardBounds(targetCoordinateSpace, includePadding = true) {\r\n            const originalBounds = this.getOriginalBounds(includePadding);\r\n            const topLeft = targetCoordinateSpace.toLocal(new Phaser.Point(originalBounds.x, originalBounds.y), this.level.boardManager.getBoard().cellsContainer);\r\n            const bottomRight = targetCoordinateSpace.toLocal(new Phaser.Point(originalBounds.x + originalBounds.width, originalBounds.y + originalBounds.height), this.level.boardManager.getBoard().cellsContainer);\r\n            return new Phaser.Rectangle(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);\r\n        }\r\n        fillAvailableSpace() {\r\n            const boardBoundsRect = this.getOriginalBounds(true);\r\n            const availableBounds = this.level.serviceManager.layoutService.getAvailableBoardBounds();\r\n            /* update position and scale */\r\n            this.board.position.set(availableBounds.x, availableBounds.y);\r\n            this.board.scale.set(Math.min(availableBounds.width / boardBoundsRect.width, availableBounds.height / boardBoundsRect.height));\r\n        }\r\n    }\r\n    BlockPuzzle.BoardManager = BoardManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class DataManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.numMoves = 0;\r\n            this.initData();\r\n        }\r\n        initData() {\r\n            this.numMoves = 0;\r\n        }\r\n        /**\r\n         * PUBLIC\r\n         */\r\n        moveFinished() {\r\n            this.numMoves++;\r\n            this.level.eventManager.onMoveFinished.dispatch(this.numMoves);\r\n        }\r\n        dispatchLinesDestroyed(destroyedLines, cellPositions) {\r\n            this.level.eventManager.onLinesDestroyed.dispatch(destroyedLines, cellPositions);\r\n        }\r\n        getMaxMistakeProbability() {\r\n            return Phaser.Math.clamp(BlockPuzzle.Settings.MISTAKE_MAX_PROBABILITY + BlockPuzzle.Settings.MISTAKE_MAX_PROBABILITY * (BlockPuzzle.Settings.DIFFICULTY_FACTOR - 1) * 0.2 + this.numMoves * 0.001, 0, 0.4);\r\n        }\r\n        getMaxMistakeProbabilityStep() {\r\n            return this.getMaxMistakeProbability() / 5;\r\n        }\r\n        getMistakeProbabilityStepSpeed() {\r\n            return BlockPuzzle.Settings.MISTAKE_PROBABILITY_STEP_SPEED + BlockPuzzle.Settings.MISTAKE_PROBABILITY_STEP_SPEED * (BlockPuzzle.Settings.DIFFICULTY_FACTOR - 1) * 0.15;\r\n        }\r\n        /**\r\n         * PRIVATE\r\n         */\r\n        /**\r\n         * INHERITED\r\n         */\r\n        resizeLandscape() {\r\n        }\r\n        resizeSquared() {\r\n        }\r\n        resizePortrait() {\r\n        }\r\n    }\r\n    BlockPuzzle.DataManager = DataManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class EventManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.buildSignals();\r\n        }\r\n        buildSignals() {\r\n            this.onBoardCreated = new Phaser.Signal();\r\n            this.onRoundFinished = new Phaser.Signal();\r\n            this.onMoveFinished = new Phaser.Signal();\r\n            this.onReviveApplied = new Phaser.Signal();\r\n            this.onReviveFailed = new Phaser.Signal();\r\n            this.onLinesDestroyed = new Phaser.Signal();\r\n            this.onPowerupUsageTimerExceeded = new Phaser.Signal();\r\n            this.onPowerupApplied = new Phaser.Signal();\r\n        }\r\n        /**\r\n         * INHERITED\r\n         */\r\n        resizeLandscape() {\r\n        }\r\n        resizeSquared() {\r\n        }\r\n        resizePortrait() {\r\n        }\r\n        destroy() {\r\n            this.onBoardCreated.dispose();\r\n            this.onRoundFinished.dispose();\r\n            this.onMoveFinished.dispose();\r\n            this.onReviveApplied.dispose();\r\n            this.onReviveFailed.dispose();\r\n            this.onLinesDestroyed.dispose();\r\n            this.onPowerupUsageTimerExceeded.dispose();\r\n            this.onPowerupApplied.dispose();\r\n            super.destroy();\r\n        }\r\n    }\r\n    BlockPuzzle.EventManager = EventManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class FigureManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.figures = [];\r\n            this.activeFigure = null;\r\n            this.activeFigurePointerDelta = null;\r\n            this.currentMistakeStep = 0;\r\n            this.currentMistakeProbability = 0;\r\n            this.mistakeImmunityCounter = 0;\r\n            this.initialFigureScale = 1;\r\n            this.initialFigurePositions = [\r\n                new Phaser.Point(0, 0),\r\n                new Phaser.Point(0, 0),\r\n                new Phaser.Point(0, 0)\r\n            ];\r\n            this.figureService = this.level.serviceManager.figureService;\r\n            this.currentMistakeStep = BlockPuzzle.Settings.MISTAKE_PROBABILITY_BASIC_STEP;\r\n            this.mistakeImmunityCounter = this.game.rnd.integerInRange(BlockPuzzle.Settings.MISTAKE_IMMUNITY_MIN_MOVES, BlockPuzzle.Settings.MISTAKE_IMMUNITY_MAX_MOVES);\r\n            this.buildContent();\r\n            this.resize();\r\n        }\r\n        buildContent() {\r\n            this.figuresContainer = this.add(this.game.make.group());\r\n            this.createFigures(false);\r\n        }\r\n        getPointerLocalPosition() {\r\n            const { x, y } = this.figuresContainer.toLocal(this.game.input.activePointer.position, this.game.world);\r\n            return new Phaser.Point(x, y);\r\n        }\r\n        getFigureInitialPosition(figure) {\r\n            return this.initialFigurePositions[figure.barIndex];\r\n        }\r\n        getFiguresLeft() {\r\n            return this.figures.filter(figure => figure != null).length;\r\n        }\r\n        createFigures(enableMistakes) {\r\n            const generatedFigureModels = this.figureService.getNextFiguresSet(this.level.boardManager.getBoard().getModel());\r\n            if (enableMistakes && BlockPuzzle.Settings.TUTORIAL_COMPLETED) {\r\n                if (this.level.dataManager.numMoves > this.mistakeImmunityCounter) {\r\n                    // console.log(\"Mistake probability: \" + Phaser.Math.roundTo(this.currentMistakeProbability * 100, -1) + \"%,  step \", Phaser.Math.roundTo(this.currentMistakeStep * 100, -3) + ' speed ' +  Phaser.Math.roundTo(this.level.dataManager.getMistakeProbabilityStepSpeed() * 100, -3));\r\n                    this.currentMistakeStep = Phaser.Math.clamp(this.currentMistakeStep + this.level.dataManager.getMistakeProbabilityStepSpeed(), 0, this.level.dataManager.getMaxMistakeProbabilityStep());\r\n                    this.currentMistakeProbability += this.currentMistakeStep;\r\n                    if (Math.random() < this.currentMistakeProbability) {\r\n                        console.log(\"Random figure generated with probability of \" + Phaser.Math.roundTo(this.currentMistakeProbability * 100, -1) + '%');\r\n                        generatedFigureModels[Math.floor(Math.random() * generatedFigureModels.length)] = this.figureService.getRandomFigureModel();\r\n                        this.currentMistakeProbability = 0;\r\n                        this.currentMistakeStep *= (BlockPuzzle.Settings.DIFFICULTY_FACTOR - 1) * 0.05;\r\n                    }\r\n                }\r\n            }\r\n            generatedFigureModels.forEach((model, index) => this.addFigure(new BlockPuzzle.Figure(this, model, this.figureService.getRandomColor(), index), (index + 1) * BlockPuzzle.Settings.FIGURE_APPEARING_DELAY + 100));\r\n            this.alignFigures();\r\n        }\r\n        /**\r\n         * INHERITED\r\n         */\r\n        update() {\r\n            super.update();\r\n            if (this.activeFigure) {\r\n                this.activeFigure.position.copyFrom(this.getPointerLocalPosition().subtract(this.activeFigurePointerDelta.x, this.activeFigurePointerDelta.y));\r\n                this.level.boardManager.getBoard().dispatchFigureIsBeingDragged(this.activeFigure);\r\n            }\r\n            else {\r\n                this.level.boardManager.getBoard().dispatchFigureIsBeingDragged(null);\r\n            }\r\n        }\r\n        resizeLandscape() {\r\n            const availableBounds = this.level.serviceManager.layoutService.getAvailableFiguresPanelBounds();\r\n            const targetCellWidth = Math.min(availableBounds.width / (6), availableBounds.height / (3 * 6));\r\n            const figureScale = targetCellWidth / BlockPuzzle.Settings.CELL_WIDTH;\r\n            /* remember initial positions and scale */\r\n            this.initialFigurePositions.forEach((position, index) => position.set(0, (index - 1) * targetCellWidth * 6));\r\n            this.initialFigureScale = figureScale;\r\n            this.figuresContainer.position.set(availableBounds.x, availableBounds.y);\r\n            this.alignFigures();\r\n        }\r\n        resizeSquared() {\r\n            const availableBounds = this.level.serviceManager.layoutService.getAvailableFiguresPanelBounds();\r\n            const targetCellWidth = Math.min(availableBounds.width / (6), availableBounds.height / (3 * 6));\r\n            const figureScale = targetCellWidth / BlockPuzzle.Settings.CELL_WIDTH;\r\n            /* remember initial positions and scale */\r\n            this.initialFigurePositions.forEach((position, index) => position.set(0, (index - 1) * targetCellWidth * 6));\r\n            this.initialFigureScale = figureScale;\r\n            this.figuresContainer.position.set(availableBounds.x, availableBounds.y);\r\n            this.alignFigures();\r\n        }\r\n        resizePortrait() {\r\n            const availableBounds = this.level.serviceManager.layoutService.getAvailableFiguresPanelBounds();\r\n            const targetCellWidth = Math.min(availableBounds.width / (3 * 6), availableBounds.height / (6));\r\n            const figureScale = targetCellWidth / BlockPuzzle.Settings.CELL_WIDTH;\r\n            /* remember initial positions and scale */\r\n            this.initialFigurePositions.forEach((position, index) => position.set((index - 1) * targetCellWidth * 6, 0));\r\n            this.initialFigureScale = figureScale;\r\n            this.figuresContainer.position.set(availableBounds.x, availableBounds.y - availableBounds.height * 0.05);\r\n            this.alignFigures();\r\n        }\r\n        getOriginalBounds() {\r\n            const bounds = this.figuresContainer.getBounds(this.figuresContainer.parent);\r\n            this.add(this.game.make.graphics(bounds.x, bounds.y).beginFill(0xFFFFFF, 0.5).drawRect(0, 0, bounds.width, bounds.height).endFill());\r\n            return new Phaser.Rectangle(bounds.x, bounds.y, bounds.width, bounds.height);\r\n        }\r\n        alignFigures() {\r\n            this.figures.forEach(figure => {\r\n                if (figure) {\r\n                    this.game.tweens.removeFrom(figure, false);\r\n                    figure.scale.set(this.initialFigureScale / BlockPuzzle.Settings.DEFAULT_FIGURE_SCALE);\r\n                    figure.position.copyFrom(this.getFigureInitialPosition(figure));\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * PUBLIC\r\n         */\r\n        getFigures() {\r\n            return this.figures;\r\n        }\r\n        addFigure(figure, delay) {\r\n            this.figures[figure.barIndex] = this.figuresContainer.add(figure);\r\n            figure.position.copyFrom(this.getFigureInitialPosition(figure));\r\n            figure.playAppearingTween(delay);\r\n        }\r\n        removeFigure(figure) {\r\n            if (this.figures.indexOf(figure) != -1) {\r\n                this.figures[this.figures.indexOf(figure)] = null;\r\n                figure.destroy();\r\n            }\r\n            if (this.getFiguresLeft() == 0) {\r\n                this.level.eventManager.onRoundFinished.dispatch();\r\n                this.createFigures(true);\r\n            }\r\n        }\r\n        regenerateFigures() {\r\n            for (let i = 0; i < this.figures.length; i++) {\r\n                if (this.figures[i]) {\r\n                    this.figures[i].dispose();\r\n                }\r\n                this.figures[i] = null;\r\n            }\r\n            this.createFigures(false);\r\n        }\r\n        isNextMovePossible() {\r\n            const figures = this.figures.filter(figure => !!figure).sort((a, b) => a.getModel().numCells() - b.getModel().numCells());\r\n            let applicableFiguresAmount = 0;\r\n            this.figures.forEach(figure => {\r\n                if (figure) {\r\n                    const isApplicable = this.figureService.hasAvailableSpaceForFigure(figure, this.level.boardManager.getBoard().getModel());\r\n                    figure.setApplicable(isApplicable);\r\n                    if (isApplicable) {\r\n                        applicableFiguresAmount += 1;\r\n                    }\r\n                }\r\n            });\r\n            return applicableFiguresAmount > 0;\r\n        }\r\n        updateFiguresApplicability() {\r\n            this.figures.forEach(figure => figure && figure.setApplicable(this.figureService.hasAvailableSpaceForFigure(figure, this.level.boardManager.getBoard().getModel())));\r\n        }\r\n        handleFigureInputDown(figure) {\r\n            if (this.level.gameStateManager.isGameActive() && !this.activeFigure && figure.figureState == BlockPuzzle.FigureState.INACTIVE) {\r\n                if (!BlockPuzzle.Settings.TUTORIAL_COMPLETED && this.level.tutorialManager.getActiveFigure() != figure) {\r\n                    return;\r\n                }\r\n                this.activeFigure = figure;\r\n                this.activeFigure.pickUp();\r\n                this.activeFigurePointerDelta = this.getPointerLocalPosition().subtract(this.activeFigure.x, this.activeFigure.y);\r\n            }\r\n        }\r\n        handleFigureInputUp(figure) {\r\n            if (this.level.gameStateManager.isGameActive() && this.activeFigure && this.activeFigure == figure) {\r\n                if (this.level.boardManager.getBoard().placeFigure(figure)) {\r\n                    /* figure placed succesfully */\r\n                    //\r\n                    // const scoresEffectPosition: PIXI.Point = this.level.boardManager.getBoard().cellsContainer.toLocal(figure.getView().parent.toGlobal(figure.getView().position), this.game.world);\r\n                    // this.level.serviceManager.inscriptionsService.displayScoresEffect(figure.getModel().numCells(), scoresEffectPosition.x, scoresEffectPosition.y - 60);\r\n                    BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.BLOCKS_PLACED, figure.getModel().numCells());\r\n                    this.activeFigure.putDown();\r\n                    this.removeFigure(this.activeFigure);\r\n                    this.level.dataManager.moveFinished();\r\n                }\r\n                else {\r\n                    const returnDuration = BlockPuzzle.Settings.FIGURE_PICK_UP_TWEEN_DURATION;\r\n                    this.game.add.tween(this.activeFigure)\r\n                        .to({\r\n                        x: this.getFigureInitialPosition(figure).x,\r\n                        y: this.getFigureInitialPosition(figure).y\r\n                    }, returnDuration, Phaser.Easing.Linear.None, true);\r\n                    this.activeFigure.release();\r\n                }\r\n            }\r\n            this.activeFigure = null;\r\n            this.activeFigurePointerDelta = null;\r\n        }\r\n    }\r\n    BlockPuzzle.FigureManager = FigureManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class GameStateManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.started = false;\r\n            this.finished = false;\r\n            this.paused = false;\r\n            this.reviveAvailable = true;\r\n            this.reviveUsed = false;\r\n            this.reviveTimer = 0;\r\n            this.resultsTimer = 0;\r\n            this.reviveAvailable = true;\r\n            this.level.eventManager.onBoardCreated.add(this.dispatchBoardCreated, this);\r\n            this.level.eventManager.onMoveFinished.add(this.dispatchMoveFinished, this);\r\n            this.level.eventManager.onPowerupUsageTimerExceeded.add(this.dispatchPowerupUsageTimerExceeded, this);\r\n            this.level.eventManager.onPowerupApplied.add(this.dispatchPowerupApplied, this);\r\n            this.level.eventManager.onReviveApplied.add(this.reviveApplied, this);\r\n            this.level.eventManager.onReviveFailed.add(this.reviveFailed, this);\r\n        }\r\n        update() {\r\n            super.update();\r\n            if (this.reviveTimer > 0) {\r\n                this.reviveTimer--;\r\n                if (this.reviveTimer <= 0) {\r\n                    this.reviveTimer = 0;\r\n                    BlockPuzzle.WindowManager.instance.showRevive();\r\n                }\r\n            }\r\n            if (this.resultsTimer > 0) {\r\n                this.resultsTimer--;\r\n                if (this.resultsTimer <= 0) {\r\n                    this.resultsTimer = 0;\r\n                    BlockPuzzle.Analytics.instance.finishLevel(BlockPuzzle.ScoreManager.instance.getCurrentScores(), BlockPuzzle.StarsManager.instance.getLastRoundStars(), this.reviveUsed ? 1 : 0, this.level.uiManager.powerupContainer.usedPowerups);\r\n                    BlockPuzzle.WindowManager.instance.showResults();\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * PUBLIC\r\n         */\r\n        isGameActive() {\r\n            return this.started && !this.paused && !this.finished;\r\n        }\r\n        isStarted() {\r\n            return this.started;\r\n        }\r\n        isPaused() {\r\n            return this.paused;\r\n        }\r\n        isFinished() {\r\n            return this.finished;\r\n        }\r\n        /**\r\n         * PRIVATE\r\n         */\r\n        dispatchBoardCreated() {\r\n            this.started = true;\r\n        }\r\n        dispatchMoveFinished() {\r\n            if (!this.finished && !this.level.figureManager.isNextMovePossible()) {\r\n                if (BlockPuzzle.PowerupManager.instance.hasBoughtPowerups()) {\r\n                    this.level.uiManager.powerupContainer.startCountdown();\r\n                }\r\n                else {\r\n                    this.finishGame();\r\n                }\r\n            }\r\n        }\r\n        dispatchPowerupUsageTimerExceeded() {\r\n            if (!this.finished && !this.level.figureManager.isNextMovePossible()) {\r\n                this.finishGame();\r\n            }\r\n        }\r\n        dispatchPowerupApplied() {\r\n            if (!this.finished) {\r\n                if (!this.level.figureManager.isNextMovePossible()) {\r\n                    if (BlockPuzzle.PowerupManager.instance.hasBoughtPowerups()) {\r\n                        this.level.uiManager.powerupContainer.startCountdown();\r\n                    }\r\n                    else {\r\n                        this.finishGame();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finishGame() {\r\n            this.finished = true;\r\n            this.reviveAvailable = this.reviveAvailable && BlockPuzzle.APIUtils.instance.hasRewardedVideo();\r\n            if (this.reviveAvailable) {\r\n                this.reviveAvailable = false;\r\n                this.reviveTimer = BlockPuzzle.Settings.REVIVE_WINDOW_TIMER;\r\n                this.resultsTimer = 0;\r\n                this.level.boardManager.getBoard().deactivate(200);\r\n            }\r\n            else {\r\n                this.level.uiManager.levelFinished();\r\n                this.reviveTimer = 0;\r\n                this.resultsTimer = BlockPuzzle.Settings.RESULTS_WINDOW_TIMER_WITHOUT_REVIVE;\r\n                this.level.boardManager.getBoard().disposeBlocks(250, true);\r\n            }\r\n        }\r\n        reviveApplied() {\r\n            BlockPuzzle.Analytics.instance.updateLevelData({ revives: 1 });\r\n            this.reviveUsed = true;\r\n            this.finished = false;\r\n            this.reviveTimer = 0;\r\n            this.resultsTimer = 0;\r\n            this.level.figureManager.regenerateFigures();\r\n            this.level.boardManager.getBoard().activate();\r\n        }\r\n        reviveFailed() {\r\n            this.finished = true;\r\n            this.reviveTimer = 0;\r\n            this.resultsTimer = BlockPuzzle.Settings.RESULTS_WINDOW_TIMER;\r\n            this.level.boardManager.getBoard().disposeBlocks(250, false);\r\n            this.level.uiManager.levelFinished();\r\n        }\r\n        /**\r\n         * INHERITED\r\n         */\r\n        resizeLandscape() {\r\n        }\r\n        resizeSquared() {\r\n        }\r\n        resizePortrait() {\r\n        }\r\n        destroy() {\r\n            super.destroy();\r\n        }\r\n    }\r\n    BlockPuzzle.GameStateManager = GameStateManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ServiceManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.initServices();\r\n        }\r\n        initServices() {\r\n            this.layoutService = new BlockPuzzle.LayoutService(this);\r\n            this.figureService = new BlockPuzzle.FigureService(this);\r\n            this.starsService = new BlockPuzzle.StarsService(this);\r\n            this.inscriptionsService = new BlockPuzzle.InscriptionsService(this);\r\n        }\r\n        /**\r\n         * INHERITED\r\n         */\r\n        resizeLandscape() {\r\n        }\r\n        resizeSquared() {\r\n        }\r\n        resizePortrait() {\r\n        }\r\n    }\r\n    BlockPuzzle.ServiceManager = ServiceManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class TutorialManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.isManualTutorialActive = BlockPuzzle.Settings.TUTORIAL_COMPLETED;\r\n            this.isInitialized = false;\r\n            this.activeFigure = null;\r\n            this.buildContent();\r\n            this.level.eventManager.onBoardCreated.add(this.handleBoardCreated, this);\r\n            this.level.eventManager.onMoveFinished.add(this.handleFigurePlaced, this);\r\n            this.level.eventManager.onRoundFinished.add(this.handleRoundFinished, this);\r\n            this.visible = false;\r\n        }\r\n        start() {\r\n            this.isInitialized = true;\r\n        }\r\n        resizeLandscape() {\r\n            this.startHandAnimation();\r\n        }\r\n        resizeSquared() {\r\n            this.startHandAnimation();\r\n        }\r\n        resizePortrait() {\r\n            this.startHandAnimation();\r\n        }\r\n        update() {\r\n            super.update();\r\n        }\r\n        getActiveFigure() {\r\n            return this.activeFigure;\r\n        }\r\n        restartTutorial() {\r\n            this.isManualTutorialActive = true;\r\n            BlockPuzzle.Settings.TUTORIAL_COMPLETED = false;\r\n            this.startHandAnimation();\r\n        }\r\n        /**\r\n         * PRIVATE\r\n         */\r\n        buildContent() {\r\n            this.tutorialHand = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'tutorialHand0000'));\r\n            this.tutorialHand.anchor.set(0.4, 0);\r\n            this.visible = false;\r\n        }\r\n        startHandAnimation() {\r\n            if (this.isInitialized && !BlockPuzzle.Settings.TUTORIAL_COMPLETED) {\r\n                const board = this.level.boardManager.getBoard();\r\n                this.level.boardManager.getBoard().getCells().forEach(cell => cell.resetView(true));\r\n                this.visible = true;\r\n                const currentFigure = this.level.figureManager.getFigures().slice().filter(f => !!f).sort((a, b) => a.getModel().numCells() - b.getModel().numCells())[0];\r\n                if (currentFigure) {\r\n                    this.activeFigure = currentFigure;\r\n                    const figureLocalPosition = this.toLocal(currentFigure.getView().position, currentFigure.getView().parent);\r\n                    let targetCell = this.level.boardManager.getBoard().getCellAt(currentFigure.getModel().posX, currentFigure.getModel().posY);\r\n                    if (!targetCell) {\r\n                        const figurePosition = this.level.serviceManager.figureService.getRandomPositionForFigure(currentFigure, board.getModel());\r\n                        if (figurePosition) {\r\n                            currentFigure.getModel().posX = figurePosition.x;\r\n                            currentFigure.getModel().posY = figurePosition.y;\r\n                            targetCell = this.level.boardManager.getBoard().getCellAt(figurePosition.x, figurePosition.y);\r\n                        }\r\n                        else {\r\n                            this.finishTutorial();\r\n                            return;\r\n                        }\r\n                    }\r\n                    const targetCellLocalPosition = this.toLocal(targetCell.position, targetCell.parent);\r\n                    this.game.tweens.removeFrom(this.tutorialHand);\r\n                    this.tutorialHand.position.set(figureLocalPosition.x, figureLocalPosition.y);\r\n                    this.tutorialHand.alpha = 0;\r\n                    /* tweens */\r\n                    const preparingTween = this.game.add.tween(this.tutorialHand)\r\n                        .to({ alpha: 1, x: figureLocalPosition.x, y: figureLocalPosition.y }, 500, Phaser.Easing.Sinusoidal.Out, false);\r\n                    const movingTween = this.game.add.tween(this.tutorialHand)\r\n                        .to({\r\n                        x: targetCellLocalPosition.x + (currentFigure.getModel().getCenterX() - 0.5) * BlockPuzzle.Settings.CELL_WIDTH * board.getScale(),\r\n                        y: targetCellLocalPosition.y + (currentFigure.getModel().getCenterY() - 0.5) * BlockPuzzle.Settings.CELL_HEIGHT * board.getScale()\r\n                    }, 1200, Phaser.Easing.Sinusoidal.InOut, false, 0, 0, false);\r\n                    const finishingTween = this.game.add.tween(this.tutorialHand)\r\n                        .to({ alpha: 0 }, 750, Phaser.Easing.Exponential.In, false);\r\n                    const returningTween = this.game.add.tween(this.tutorialHand)\r\n                        .to({ x: figureLocalPosition.x, y: figureLocalPosition.y }, 10, Phaser.Easing.Linear.None, false);\r\n                    preparingTween.onComplete.add(() => this.tutorialHand.frameName = 'tutorialHand0001');\r\n                    finishingTween.onStart.add(() => this.tutorialHand.frameName = 'tutorialHand0000');\r\n                    preparingTween.chain(movingTween);\r\n                    movingTween.chain(finishingTween);\r\n                    finishingTween.chain(returningTween);\r\n                    returningTween.chain(preparingTween);\r\n                    preparingTween.start();\r\n                    currentFigure.getModel().getCells().forEach(cell => board.getCellAt(targetCell.posX + cell.x, targetCell.posY + cell.y).showHighlighting(currentFigure.color, true));\r\n                }\r\n                else {\r\n                    this.activeFigure = null;\r\n                }\r\n            }\r\n        }\r\n        handleFigurePlaced() {\r\n            if (this.isInitialized && BlockPuzzle.Settings.TUTORIAL_COMPLETED) {\r\n                return;\r\n            }\r\n            /* remove all tutorial highlightings */\r\n            this.level.boardManager.getBoard().getCells().forEach(cell => cell.resetView(true));\r\n            if (this.isManualTutorialActive) {\r\n                return this.finishTutorial();\r\n            }\r\n            /* show next figure */\r\n            this.startHandAnimation();\r\n        }\r\n        handleRoundFinished() {\r\n            this.finishTutorial();\r\n        }\r\n        finishTutorial() {\r\n            if (!BlockPuzzle.Settings.TUTORIAL_COMPLETED) {\r\n                this.visible = false;\r\n                this.activeFigure = null;\r\n                BlockPuzzle.Settings.TUTORIAL_COMPLETED = true;\r\n                BlockPuzzle.LocalStorageController.instance.save();\r\n                if (BlockPuzzle.Settings.ENABLE_API) {\r\n                    window[\"famobi_analytics\"].trackEvent(\"EVENT_TUTORIALCOMPLETED\");\r\n                }\r\n                this.level.boardManager.getBoard().getCells().forEach(cell => cell.resetView(true));\r\n            }\r\n        }\r\n        /**\r\n         * EVENT LISTENERS\r\n         */\r\n        handleBoardCreated() {\r\n            this.isInitialized = true;\r\n            this.startHandAnimation();\r\n        }\r\n    }\r\n    BlockPuzzle.TutorialManager = TutorialManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class UIManager extends BlockPuzzle.AbstractManager {\r\n        constructor(level) {\r\n            super(level);\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.buttonAchievements = this.add(new BlockPuzzle.ButtonAchievements(this.level));\r\n            this.buttonSettings = this.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonSettings', 0, 0, 1, this.settingsClicked, this));\r\n            this.topContainer = this.add(this.game.make.group());\r\n            this.scoreCounter = this.topContainer.add(new BlockPuzzle.ScoreCounter(this));\r\n            this.starsCounter = this.topContainer.add(new BlockPuzzle.StarsCounter(this));\r\n            this.multiplierBar = this.topContainer.add(new BlockPuzzle.MultiplierBar(this));\r\n            this.powerupContainer = this.add(new BlockPuzzle.PowerupContainer(this));\r\n        }\r\n        resizeLandscape() {\r\n            const availableBounds = this.level.serviceManager.layoutService.getAvailableUIContainerBounds();\r\n            this.buttonAchievements.position.set(this.level.windowBounds.left + availableBounds.width / 2, this.level.windowBounds.top + 70);\r\n            this.buttonSettings.position.set(this.level.windowBounds.right - availableBounds.width / 2, this.level.windowBounds.top + 65);\r\n            this.scoreCounter.position.set(-65, -50);\r\n            this.multiplierBar.position.set(-65, -50);\r\n            this.starsCounter.position.set(-65, 50);\r\n            this.buttonAchievements[\"setScale\"](1.18);\r\n            this.buttonSettings[\"setScale\"](1.18);\r\n            this.topContainer.position.set(availableBounds.x, availableBounds.y);\r\n            this.topContainer.scale.set(Math.min(1.25, availableBounds.width / this.topContainer.getLocalBounds().width));\r\n            this.buttonAchievements.resizeLandscape();\r\n            this.powerupContainer.resize();\r\n        }\r\n        resizeSquared() {\r\n            this.buttonAchievements.position.set(this.level.windowBounds.left + 95, this.level.windowBounds.top + 60);\r\n            this.buttonSettings.position.set(this.level.windowBounds.right - 88, this.level.windowBounds.top + 60);\r\n            this.topContainer.position.copyFrom(this.level.windowBounds.getPosition(0.5, 0, 0, 55));\r\n            this.topContainer.scale.set(0.95);\r\n            this.scoreCounter.position.set(-this.level.windowBounds.width * 0.22, 0);\r\n            this.multiplierBar.position.set(-this.level.windowBounds.width * 0.22, 0);\r\n            this.starsCounter.position.set(this.level.windowBounds.width * 0.06, 0);\r\n            this.buttonAchievements[\"setScale\"](1.1);\r\n            this.buttonSettings[\"setScale\"](1.1);\r\n            this.buttonAchievements.resizeSquared();\r\n            this.powerupContainer.resize();\r\n        }\r\n        resizePortrait() {\r\n            const availableBounds = this.level.serviceManager.layoutService.getAvailableUIContainerBounds();\r\n            this.buttonAchievements.position.set(this.level.windowBounds.left + 65, this.level.windowBounds.down - 65);\r\n            this.buttonSettings.position.set(this.level.windowBounds.right - 65, this.level.windowBounds.down - 65);\r\n            this.topContainer.position.copyFrom(this.level.windowBounds.getPosition(0.5, 0, 0, 0));\r\n            this.topContainer.y = availableBounds.y;\r\n            this.topContainer.scale.set(1);\r\n            this.scoreCounter.position.set(-this.level.windowBounds.width * 0.3, 0);\r\n            this.multiplierBar.position.set(-this.level.windowBounds.width * 0.3, 0);\r\n            this.starsCounter.position.set(this.level.windowBounds.width * 0.13, 0);\r\n            this.buttonAchievements[\"setScale\"](1.1);\r\n            this.buttonSettings[\"setScale\"](1.1);\r\n            this.buttonAchievements.resizePortrait();\r\n            this.powerupContainer.resize();\r\n        }\r\n        levelFinished() {\r\n            this.powerupContainer.hidePowerups();\r\n        }\r\n        /**\r\n         * EVENT LISTENERS\r\n         */\r\n        settingsClicked() {\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_SETTINGS);\r\n            }\r\n            BlockPuzzle.WindowManager.instance.showSettings();\r\n        }\r\n    }\r\n    BlockPuzzle.UIManager = UIManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BoardModel {\r\n        constructor(numCols, numRows) {\r\n            this.cleanedCells = 0;\r\n            this.numCols = numCols;\r\n            this.numRows = numRows;\r\n        }\r\n        parseFromBoard(board) {\r\n            this.cells = [];\r\n            for (let i = 0; i < this.numCols; i++) {\r\n                this.cells[i] = [];\r\n                for (let j = 0; j < this.numRows; j++) {\r\n                    this.cells[i][j] = BlockPuzzle.CellModelState.CELL_EMPTY;\r\n                }\r\n            }\r\n            for (let cell of board.getCells()) {\r\n                this.cells[cell.posX][cell.posY] = cell.isEmpty() ? BlockPuzzle.CellModelState.CELL_EMPTY : BlockPuzzle.CellModelState.CELL_BUSY;\r\n            }\r\n            return this;\r\n        }\r\n        getCopy() {\r\n            return new BoardModel(this.numCols, this.numRows).copyFrom(this);\r\n        }\r\n        copyFrom(another) {\r\n            this.cleanedCells = another.cleanedCells;\r\n            this.cells = another.cells.map(col => col.slice());\r\n            return this;\r\n        }\r\n        getCellStateAt(x, y) {\r\n            return (x >= 0 && x < this.numCols && y >= 0 && y < this.numRows) ? this.cells[x][y] : null;\r\n        }\r\n        setCellStateAt(state, x, y) {\r\n            if (x >= 0 && x < this.numCols && y >= 0 && y < this.numRows) {\r\n                this.cells[x][y] = state;\r\n            }\r\n        }\r\n        placeFigure(preset, position) {\r\n            if (this.couldBePlaced(preset, position)) {\r\n                preset.forEach(cellModel => this.setCellStateAt(BlockPuzzle.CellModelState.CELL_BUSY, position.x + cellModel.x, position.y + cellModel.y));\r\n                this.clearFilledRowsAndColumns();\r\n            }\r\n        }\r\n        couldBePlaced(figure, position) {\r\n            return figure.map(cellModel => this.getCellStateAt(position.x + cellModel.x, position.y + cellModel.y)).every(cellStatus => cellStatus == BlockPuzzle.CellModelState.CELL_EMPTY);\r\n        }\r\n        print() {\r\n            console.log(this.cells.map((col, colIdx) => col.map((item, rowIdx) => this.cells[rowIdx][colIdx])));\r\n        }\r\n        equals(another) {\r\n            if (this.numRows != another.numRows || this.numCols != another.numCols) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < this.numCols; i++) {\r\n                for (let j = 0; j < this.numRows; j++) {\r\n                    if (this.cells[i][j] != another.getCellStateAt(i, j)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        findCellsToClear() {\r\n            let cellsToClear = [];\r\n            //check rows\r\n            for (let i = 0; i < this.numRows; i++) {\r\n                if (this.isRowFilled(i)) {\r\n                    cellsToClear = BlockPuzzle.ArrayUtils.uniteArrays(cellsToClear, this.getRowModel(i));\r\n                }\r\n            }\r\n            //check columns\r\n            for (let i = 0; i < this.numCols; i++) {\r\n                if (this.isColumnFilled(i)) {\r\n                    cellsToClear = BlockPuzzle.ArrayUtils.uniteArrays(cellsToClear, this.getColumnModel(i));\r\n                }\r\n            }\r\n            return cellsToClear;\r\n        }\r\n        /**\r\n         * PRIVATE\r\n         */\r\n        clearFilledRowsAndColumns() {\r\n            this.findCellsToClear().forEach(cell => {\r\n                if (this.getCellStateAt(cell.x, cell.y) != BlockPuzzle.CellModelState.CELL_EMPTY) {\r\n                    this.cleanedCells += 1;\r\n                    this.setCellStateAt(BlockPuzzle.CellModelState.CELL_EMPTY, cell.x, cell.y);\r\n                }\r\n            });\r\n        }\r\n        isRowFilled(rowIndex) {\r\n            return this.getRow(rowIndex).every(cellState => cellState != BlockPuzzle.CellModelState.CELL_EMPTY);\r\n        }\r\n        isColumnFilled(columnIndex) {\r\n            return this.getColumn(columnIndex).every(cellState => cellState != BlockPuzzle.CellModelState.CELL_EMPTY);\r\n        }\r\n        getRow(rowIndex) {\r\n            return this.cells.map(column => column[rowIndex]);\r\n        }\r\n        getColumn(colIndex) {\r\n            return this.cells[colIndex].slice();\r\n        }\r\n        getRowModel(rowIndex) {\r\n            return this.cells.map((column, colIdx) => {\r\n                return { x: colIdx, y: rowIndex };\r\n            });\r\n        }\r\n        getColumnModel(colIndex) {\r\n            return this.cells[colIndex].map((value, rowIdx) => {\r\n                return { x: colIndex, y: rowIdx };\r\n            });\r\n        }\r\n    }\r\n    BlockPuzzle.BoardModel = BoardModel;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class CellModel extends Phaser.Point {\r\n        constructor(posX, posY) {\r\n            super(posX, posY);\r\n        }\r\n        getCopy() {\r\n            return new CellModel(this.posX, this.posY);\r\n        }\r\n        /* getters & setters */\r\n        get posX() {\r\n            return this.x;\r\n        }\r\n        set posX(value) {\r\n            this.x = value;\r\n        }\r\n        get posY() {\r\n            return this.y;\r\n        }\r\n        set posY(value) {\r\n            this.y = value;\r\n        }\r\n    }\r\n    BlockPuzzle.CellModel = CellModel;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class FigureModel {\r\n        constructor(cells) {\r\n            this.figureWidth = 0;\r\n            this.figureHeight = 0;\r\n            this.centerX = 0;\r\n            this.centerY = 0;\r\n            this.cells = cells.slice();\r\n            this.normalizeCells();\r\n        }\r\n        normalizeCells() {\r\n            if (!this.cells || this.cells.length === 0) {\r\n                return;\r\n            }\r\n            const minX = this.cells.reduce((prev, cell) => prev.posX <= cell.posX ? prev : cell).posX;\r\n            const minY = this.cells.reduce((prev, cell) => prev.posY <= cell.posY ? prev : cell).posY;\r\n            this.cells.forEach(cellModel => cellModel.subtract(minX, minY));\r\n            /* calculate figure width & height (measured in cells) */\r\n            this.figureWidth = this.cells.reduce((prev, cell) => prev.posX >= cell.posX ? prev : cell).posX - this.cells.reduce((prev, cell) => prev.posX <= cell.posX ? prev : cell).posX + 1;\r\n            this.figureHeight = this.cells.reduce((prev, cell) => prev.posY >= cell.posY ? prev : cell).posY - this.cells.reduce((prev, cell) => prev.posY <= cell.posY ? prev : cell).posY + 1;\r\n            this.centerX = this.figureWidth / 2;\r\n            this.centerY = this.figureHeight / 2;\r\n        }\r\n        /**\r\n         * PUBLIC\r\n         */\r\n        setPosition(posX, posY) {\r\n            this.posX = posX;\r\n            this.posY = posY;\r\n            return this;\r\n        }\r\n        getCells() {\r\n            return this.cells;\r\n        }\r\n        numCells() {\r\n            return this.getCells().length;\r\n        }\r\n        getWidth() {\r\n            return this.figureWidth;\r\n        }\r\n        getHeight() {\r\n            return this.figureHeight;\r\n        }\r\n        getCenterX() {\r\n            return this.centerX;\r\n        }\r\n        getCenterY() {\r\n            return this.centerY;\r\n        }\r\n        clone() {\r\n            return new FigureModel(this.getCells().map(cell => new BlockPuzzle.CellModel(cell.posX, cell.posY)));\r\n        }\r\n    }\r\n    BlockPuzzle.FigureModel = FigureModel;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AbstractService {\r\n        constructor(serviceManager) {\r\n            this.serviceManager = serviceManager;\r\n            this.level = serviceManager.level;\r\n        }\r\n    }\r\n    BlockPuzzle.AbstractService = AbstractService;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"../../Types.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class FigureService extends BlockPuzzle.AbstractService {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.prevColor = null;\r\n            this.figurePresets = [\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(1, 1)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(1, 0)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(0, 1)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(2, 0)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(0, 1),\r\n                    new BlockPuzzle.CellModel(0, 2)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(0, 1)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(0, 1),\r\n                    new BlockPuzzle.CellModel(1, 1),\r\n                    new BlockPuzzle.CellModel(2, 1)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(0, 1),\r\n                    new BlockPuzzle.CellModel(0, 2),\r\n                    new BlockPuzzle.CellModel(0, 3)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(0, 1),\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(1, 1)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(0, 1),\r\n                    new BlockPuzzle.CellModel(1, 1),\r\n                    new BlockPuzzle.CellModel(2, 1)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(2, 0),\r\n                    new BlockPuzzle.CellModel(0, 1),\r\n                    new BlockPuzzle.CellModel(1, 1)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(2, 0),\r\n                    new BlockPuzzle.CellModel(3, 0),\r\n                    new BlockPuzzle.CellModel(4, 0)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(2, 0),\r\n                    new BlockPuzzle.CellModel(2, 1),\r\n                    new BlockPuzzle.CellModel(2, 2)\r\n                ]),\r\n                this.normalizeCells([\r\n                    new BlockPuzzle.CellModel(0, 0),\r\n                    new BlockPuzzle.CellModel(0, 1),\r\n                    new BlockPuzzle.CellModel(0, 2),\r\n                    new BlockPuzzle.CellModel(1, 0),\r\n                    new BlockPuzzle.CellModel(1, 1),\r\n                    new BlockPuzzle.CellModel(1, 2),\r\n                    new BlockPuzzle.CellModel(2, 0),\r\n                    new BlockPuzzle.CellModel(2, 1),\r\n                    new BlockPuzzle.CellModel(2, 2)\r\n                ])\r\n            ];\r\n            this.tutorialPlacements = [\r\n                {\r\n                    preset: this.normalizeCells([\r\n                        new BlockPuzzle.CellModel(0, 0),\r\n                        new BlockPuzzle.CellModel(0, 1),\r\n                        new BlockPuzzle.CellModel(1, 1),\r\n                        new BlockPuzzle.CellModel(2, 1)\r\n                    ]), position: { x: 2, y: 3 }\r\n                },\r\n                {\r\n                    preset: this.normalizeCells([\r\n                        new BlockPuzzle.CellModel(0, 0),\r\n                        new BlockPuzzle.CellModel(0, 1),\r\n                        new BlockPuzzle.CellModel(1, 0),\r\n                        new BlockPuzzle.CellModel(1, 1)\r\n                    ]), position: { x: 0, y: 3 }\r\n                },\r\n                {\r\n                    preset: this.normalizeCells([\r\n                        new BlockPuzzle.CellModel(0, 0),\r\n                        new BlockPuzzle.CellModel(0, 1),\r\n                        new BlockPuzzle.CellModel(0, 2),\r\n                        new BlockPuzzle.CellModel(1, 0),\r\n                        new BlockPuzzle.CellModel(1, 1),\r\n                        new BlockPuzzle.CellModel(1, 2),\r\n                        new BlockPuzzle.CellModel(2, 0),\r\n                        new BlockPuzzle.CellModel(2, 1),\r\n                        new BlockPuzzle.CellModel(2, 2)\r\n                    ]), position: { x: 5, y: 2 }\r\n                }\r\n            ];\r\n            this.iterations = 0;\r\n        }\r\n        normalizeCells(preset) {\r\n            const minX = preset.reduce((prev, cell) => prev.posX <= cell.posX ? prev : cell).posX;\r\n            const minY = preset.reduce((prev, cell) => prev.posY <= cell.posY ? prev : cell).posY;\r\n            preset.forEach(cellModel => cellModel.subtract(minX, minY));\r\n            return preset;\r\n        }\r\n        getRandomFigureModel() {\r\n            return new BlockPuzzle.FigureModel(this.getCopy(Phaser.ArrayUtils.getRandomItem(this.figurePresets)));\r\n        }\r\n        getRandomColor() {\r\n            this.prevColor = Phaser.ArrayUtils.getRandomItem(Object.keys(BlockPuzzle.BlockColor).map(key => BlockPuzzle.BlockColor[key]).filter(value => typeof value === \"number\" && value != this.prevColor));\r\n            return this.prevColor;\r\n        }\r\n        getRandomPositionForFigure(figure, boardModel) {\r\n            return Phaser.ArrayUtils.getRandomItem(this.findFigurePositions(figure.getModel().getCells(), boardModel, 1)) || null;\r\n        }\r\n        hasAvailableSpaceForFigure(figure, boardModel) {\r\n            let positions = this.findFigurePositions(figure.getModel().getCells(), boardModel, 1);\r\n            return positions.length > 0;\r\n        }\r\n        /*\r\n         * VARIANT 1\r\n         */\r\n        getNextFiguresSet(boardModel) {\r\n            if (!BlockPuzzle.Settings.TUTORIAL_COMPLETED) {\r\n                return this.tutorialPlacements.map(placement => new BlockPuzzle.FigureModel(this.getCopy(placement.preset)).setPosition(placement.position.x, placement.position.y));\r\n            }\r\n            this.iterations = 0;\r\n            let results = [];\r\n            this.findFigurePositionsRecursive(boardModel, [], results);\r\n            results.sort((a, b) => b.reduce((sum, elem) => sum + elem.preset.length, 0) - a.reduce((sum, elem) => sum + elem.preset.length, 0));\r\n            if (results.length > 0) {\r\n                return Phaser.ArrayUtils.shuffle(BlockPuzzle.ArrayUtils.getRandomItem(results, BlockPuzzle.Settings.RESULTING_FIGURE_RANDOM_COMPRESSION_FACTOR).map(result => new BlockPuzzle.FigureModel(result.preset)));\r\n            }\r\n            else {\r\n                return Phaser.ArrayUtils.shuffle([this.getRandomFigureModel(), this.getRandomFigureModel(), this.getRandomFigureModel()]);\r\n            }\r\n        }\r\n        findFigurePositionsRecursive(boardModel, placedFigures, resultsArray) {\r\n            let possiblePlaces = this.findAppropriateFigurePresetsForBoard(boardModel, true);\r\n            if (possiblePlaces.length > 0) {\r\n                if (resultsArray.length > 0) {\r\n                    //return;\r\n                    /* optimization */\r\n                    possiblePlaces = [Phaser.ArrayUtils.getRandomItem(possiblePlaces)];\r\n                }\r\n                for (let place of possiblePlaces) {\r\n                    for (let figurePosition of place.figurePositions) {\r\n                        this.iterations++;\r\n                        if (placedFigures.length == 2) {\r\n                            resultsArray.push(placedFigures.slice().concat({\r\n                                preset: place.figurePreset,\r\n                                position: figurePosition,\r\n                                cleanedCells: boardModel.cleanedCells\r\n                            }));\r\n                        }\r\n                        else {\r\n                            let boardCopy = boardModel.getCopy();\r\n                            boardCopy.placeFigure(place.figurePreset, figurePosition);\r\n                            this.findFigurePositionsRecursive(boardCopy, placedFigures.slice().concat({\r\n                                preset: place.figurePreset,\r\n                                position: figurePosition,\r\n                                cleanedCells: boardCopy.cleanedCells\r\n                            }), resultsArray);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        findAppropriateFigurePresetsForBoard(boardModel, shuffleResults) {\r\n            const possibleCases = [];\r\n            for (let preset of Phaser.ArrayUtils.shuffle(this.figurePresets.slice())) {\r\n                possibleCases.push({\r\n                    figurePreset: preset,\r\n                    figurePositions: this.findFigurePositions(preset, boardModel, BlockPuzzle.Settings.GENERATE_MAX_POSITIONS_FOR_EACH_FIGURE)\r\n                });\r\n            }\r\n            return shuffleResults ? Phaser.ArrayUtils.shuffle(possibleCases) : possibleCases;\r\n        }\r\n        /**\r\n         * PRIVATE\r\n         */\r\n        findFiguresAtPosition(position, boardModel) {\r\n            let presets = [];\r\n            for (let preset of this.figurePresets) {\r\n                if (boardModel.couldBePlaced(preset, position)) {\r\n                    presets.push(preset);\r\n                }\r\n            }\r\n            return presets;\r\n        }\r\n        findFigurePositions(preset, boardModel, limitPositionsCount) {\r\n            let positions = [];\r\n            for (let px of Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5, 6, 7])) {\r\n                for (let py of Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5, 6, 7])) {\r\n                    if (boardModel.couldBePlaced(preset, { x: px, y: py })) {\r\n                        positions.push({ x: px, y: py });\r\n                        if (positions.length >= limitPositionsCount) {\r\n                            return positions;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return positions;\r\n        }\r\n        getCopy(figurePreset) {\r\n            return figurePreset.map(cellModel => cellModel.getCopy());\r\n        }\r\n    }\r\n    BlockPuzzle.FigureService = FigureService;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class InscriptionsService extends BlockPuzzle.AbstractService {\r\n        constructor(serviceManager) {\r\n            super(serviceManager);\r\n            this.level.eventManager.onLinesDestroyed.add(this.dispatchLinesDestroyed, this);\r\n        }\r\n        dispatchLinesDestroyed(destroyedLines, cellPositions) {\r\n            if (destroyedLines >= 2) {\r\n                let px = cellPositions.reduce((accumulator, current) => accumulator += current.x, 0) / cellPositions.length;\r\n                let py = cellPositions.reduce((accumulator, current) => accumulator += current.y, 0) / cellPositions.length;\r\n                let targetCellPosition = this.level.boardManager.getBoard().getCellAt(Math.floor(px), Math.floor(py)).position;\r\n                this.displayInscription(destroyedLines, targetCellPosition.x, targetCellPosition.y);\r\n            }\r\n        }\r\n        displayInscription(inscriptionPower, x, y) {\r\n            let inscriptionLevel = BlockPuzzle.InscriptionLevel.AWESOME;\r\n            switch (inscriptionPower) {\r\n                case 2:\r\n                    inscriptionLevel = BlockPuzzle.InscriptionLevel.GOOD;\r\n                    break;\r\n                case 3:\r\n                    inscriptionLevel = BlockPuzzle.InscriptionLevel.GREAT;\r\n                    break;\r\n                case 4:\r\n                    inscriptionLevel = BlockPuzzle.InscriptionLevel.EXCELLENT;\r\n                    break;\r\n                case 5:\r\n                    inscriptionLevel = BlockPuzzle.InscriptionLevel.AWESOME;\r\n                    break;\r\n            }\r\n            let insription = this.level.boardManager.getBoard().effectsContainer.add(new BlockPuzzle.InscriptionEffect(inscriptionLevel, x, y));\r\n        }\r\n        displayScoresEffect(scores, x, y) {\r\n            new BlockPuzzle.ScoresEffect(this.level, scores * BlockPuzzle.ScoreManager.instance.getMultiplier(), x, Math.max(y, -150), 50);\r\n            BlockPuzzle.ScoreManager.instance.addScores(scores);\r\n        }\r\n    }\r\n    BlockPuzzle.InscriptionsService = InscriptionsService;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class LayoutService extends BlockPuzzle.AbstractService {\r\n        getFigureDraggingDelta(figureBarIndex) {\r\n            return BlockPuzzle.App.instance.device.desktop ? { x: 0, y: 0 } : BlockPuzzle.CustomScaleManager.isPortrait() ? { x: 0, y: BlockPuzzle.Settings.FIGURE_VIEW_DRAGGING_DELTA } : { x: BlockPuzzle.Settings.FIGURE_VIEW_DRAGGING_DELTA, y: -30 * (figureBarIndex) };\r\n        }\r\n        getPowerupDraggingDelta() {\r\n            return BlockPuzzle.App.instance.device.desktop ? { x: 0, y: 0 } : BlockPuzzle.CustomScaleManager.isPortrait() ? { x: 0, y: BlockPuzzle.Settings.POWERUP_DRAGGING_DELTA } : { x: 0, y: BlockPuzzle.Settings.POWERUP_DRAGGING_DELTA };\r\n        }\r\n        getAvailableBoardBounds() {\r\n            if (BlockPuzzle.CustomScaleManager.isPortrait()) {\r\n                const { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 1, 0.12, 0.75);\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isSquared()) {\r\n                const { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 0.75, 0.15, 1);\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isLandscape()) {\r\n                const { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0.2, 0.8, 0, 1);\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n        getAvailableFiguresPanelBounds() {\r\n            if (BlockPuzzle.CustomScaleManager.isPortrait()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 1, 0.75, 0.94);\r\n                let bounds = this.level.boardManager.getBoardBounds(this.level.container);\r\n                let availableHeight = this.level.boardManager.getBoardBounds(this.level.container).width * 5 / 15;\r\n                minY = this.level.boardManager.getBoardBounds(this.level.container, false).bottom;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, minY + availableHeight / 2, maxX - minX, availableHeight);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isSquared()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0.75, 1, 0.15, 0.87);\r\n                minX = this.level.boardManager.getBoardBounds(this.level.container).right;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isLandscape()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0.8, 1, 0.16, 1);\r\n                minX = this.level.boardManager.getBoardBounds(this.level.container).right;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n        getAvailableUIContainerBounds() {\r\n            if (BlockPuzzle.CustomScaleManager.isPortrait()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 1, 0, 0.15);\r\n                maxY = this.level.boardManager.getBoardBounds(this.level.container).top;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isSquared()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 1, 0, 0.15);\r\n                maxY = this.level.boardManager.getBoardBounds(this.level.container).top;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isLandscape()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 0.2, 0.25, 0.72);\r\n                maxX = this.level.boardManager.getBoardBounds(this.level.container).left;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n        getFigureDisposingTweenParams() {\r\n            return BlockPuzzle.CustomScaleManager.isPortrait() ? { y: '+75', alpha: 0 } : { x: '+75', alpha: 0 };\r\n        }\r\n        getAvailablePowerupsContainerBounds() {\r\n            if (BlockPuzzle.CustomScaleManager.isPortrait()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 1, 0.9, 1);\r\n                minY = this.getAvailableFiguresPanelBounds().y + this.getAvailableFiguresPanelBounds().height / 2;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n                // minY = this.level.boardManager.getBoardBounds(this.level.container).bottom;\r\n                // return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isSquared()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0.8, 1, 0.88, 0.97);\r\n                minX = this.level.boardManager.getBoardBounds(this.level.container, false).right;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isLandscape()) {\r\n                let { minX, maxX, minY, maxY } = this.level.windowBounds.getBounds(0, 0.2, 0.86, 0.94);\r\n                maxX = this.level.boardManager.getBoardBounds(this.level.container, false).left;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.LayoutService = LayoutService;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class StarsService extends BlockPuzzle.AbstractService {\r\n        constructor(serviceManager) {\r\n            super(serviceManager);\r\n            this.currentStarGenerationProbability = 0;\r\n            this.currentStarGenerationProbability = BlockPuzzle.Settings.BASIC_STAR_GENERATION_PROBABILITY;\r\n            this.level.eventManager.onLinesDestroyed.add(this.dispatchLinesDestroyed, this);\r\n            this.level.eventManager.onMoveFinished.add(this.dispatchMoveFinished, this);\r\n        }\r\n        dispatchMoveFinished(numMoves) {\r\n            if (numMoves < BlockPuzzle.Settings.SKIP_STARS_GENERATION_FOR_FIRST_X_MOVES) {\r\n                return;\r\n            }\r\n            if (Math.random() < this.currentStarGenerationProbability) {\r\n                if (this.level.boardManager.getBoard().getNumStarsOnTheBoard() < BlockPuzzle.Settings.MAX_STARS_ON_BOARD_SIMULTANEOUSLY) {\r\n                    this.currentStarGenerationProbability = BlockPuzzle.Settings.BASIC_STAR_GENERATION_PROBABILITY;\r\n                    this.generateRandomStar(BlockPuzzle.Settings.STAR_GENERATION_DELAY);\r\n                    if (Math.random() < BlockPuzzle.Settings.ADDITIONAL_SECOND_STAR_GENERATION_PROBABILITY) {\r\n                        this.generateRandomStar(BlockPuzzle.Settings.STAR_GENERATION_DELAY * 1.5);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.currentStarGenerationProbability = Phaser.Math.clamp(this.currentStarGenerationProbability + BlockPuzzle.Settings.BASIC_STAR_GENERATION_PROBABILITY_STEP, 0, BlockPuzzle.Settings.MAX_STAR_GENERATING_PROBABILITY);\r\n            }\r\n        }\r\n        dispatchLinesDestroyed(destroyedLines) {\r\n            // if(destroyedLines >= 2) {\r\n            //     const additionalMultilineProbability: number = Math.max(0, destroyedLines - 1) * Settings.ADDITIONAL_STAR_GENERATION_PROBABILITY_FOR_DESTROYING_MULTIPLE_LINES;\r\n            //     if(Math.random() < additionalMultilineProbability) {\r\n            //         this.currentStarGenerationProbability = Settings.BASIC_STAR_GENERATION_PROBABILITY;\r\n            //         this.generateRandomStar(Settings.STAR_GENERATION_DELAY);\r\n            //     }\r\n            // }\r\n        }\r\n        generateRandomStar(delay) {\r\n            BlockPuzzle.App.instance.time.events.add(delay, () => {\r\n                if (this.level.gameStateManager.isGameActive()) {\r\n                    const availableCells = this.level.boardManager.getBoard().getCells().filter(cell => cell && !cell.isEmpty() && !cell.getBlock().hasStar());\r\n                    if (availableCells.length > 0) {\r\n                        Phaser.ArrayUtils.getRandomItem(availableCells).getBlock().addStar(this.level);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    BlockPuzzle.StarsService = StarsService;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class FigureView extends Phaser.Group {\r\n        constructor(figure, figureModel) {\r\n            super(figure.game);\r\n            this.isReady = false;\r\n            this.figure = figure;\r\n            this.level = figure.level;\r\n            this.viewDeltaX = -this.figure.figureWidth / 2 + 0.5;\r\n            this.viewDeltaY = -this.figure.figureHeight / 2 + 0.5;\r\n            this.createBlocks(figureModel);\r\n            this.tweenScale(BlockPuzzle.Settings.DEFAULT_FIGURE_SCALE, false, 0);\r\n        }\r\n        createBlocks(figureModel) {\r\n            this.blocks = figureModel.getCells().map(cellModel => this.add(new BlockPuzzle.Block(cellModel, this.figure.color)));\r\n        }\r\n        alignBlocks() {\r\n            this.blocks.forEach(block => block.position.set((block.posX + this.viewDeltaX) * BlockPuzzle.Settings.CELL_WIDTH, (block.posY + this.viewDeltaY) * BlockPuzzle.Settings.CELL_HEIGHT));\r\n        }\r\n        /**\r\n         * PUBLIC\r\n         */\r\n        getBlocks() {\r\n            return this.blocks;\r\n        }\r\n        getFirstBlock() {\r\n            return this.blocks[0];\r\n        }\r\n        playAppearingTween(delay) {\r\n            this.scale.set(0);\r\n            this.game.add.tween(this.scale)\r\n                .to({ x: 1, y: 1 }, BlockPuzzle.Settings.FIGURE_APPEARING_DURATION, Phaser.Easing.Back.Out, true, delay)\r\n                .onComplete.add(() => this.isReady = true);\r\n        }\r\n        tweenScale(scale, keepOriginalPosition, duration, scaleMultiplier = 1) {\r\n            const targetScale = scale * scaleMultiplier;\r\n            const noScale = 1 * scaleMultiplier;\r\n            this.blocks.forEach(block => {\r\n                this.game.tweens.removeFrom(block, false);\r\n                this.game.tweens.removeFrom(block.scale, false);\r\n                if (duration > 0) {\r\n                    this.game.add.tween(block.scale)\r\n                        .to({ x: targetScale, y: targetScale }, duration, Phaser.Easing.Sinusoidal.In, true);\r\n                    this.game.add.tween(block)\r\n                        .to({\r\n                        x: (block.posX + this.viewDeltaX) * BlockPuzzle.Settings.CELL_WIDTH * (keepOriginalPosition ? noScale : targetScale),\r\n                        y: (block.posY + this.viewDeltaY) * BlockPuzzle.Settings.CELL_HEIGHT * (keepOriginalPosition ? noScale : targetScale)\r\n                    }, duration, Phaser.Easing.Sinusoidal.In, true);\r\n                }\r\n                else {\r\n                    block.scale.set(targetScale);\r\n                    block.position.set((block.posX + this.viewDeltaX) * BlockPuzzle.Settings.CELL_WIDTH * (keepOriginalPosition ? noScale : targetScale), (block.posY + this.viewDeltaY) * BlockPuzzle.Settings.CELL_HEIGHT * (keepOriginalPosition ? noScale : targetScale));\r\n                }\r\n            });\r\n        }\r\n    }\r\n    BlockPuzzle.FigureView = FigureView;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class PowerupManager {\r\n        constructor() {\r\n            this.onPowerupBought = new Phaser.Signal();\r\n            this.powerupStates = new Map();\r\n            this.powerupStates.set(BlockPuzzle.PowerupType.BOMB, false);\r\n            this.powerupStates.set(BlockPuzzle.PowerupType.LIGHTNING, false);\r\n            this.powerupPrices = new Map();\r\n            this.powerupPrices.set(BlockPuzzle.PowerupType.BOMB, BlockPuzzle.Settings.BOMB_PRICE);\r\n            this.powerupPrices.set(BlockPuzzle.PowerupType.LIGHTNING, BlockPuzzle.Settings.LIGHTNING_PRICE);\r\n            this.powerupPriceSteps = new Map();\r\n            this.powerupPriceSteps.set(BlockPuzzle.PowerupType.BOMB, BlockPuzzle.Settings.BOMB_PRICE_STEP);\r\n            this.powerupPriceSteps.set(BlockPuzzle.PowerupType.LIGHTNING, BlockPuzzle.Settings.LIGHTNING_PRICE_STEP);\r\n        }\r\n        static get instance() {\r\n            return PowerupManager._instance ? PowerupManager._instance : PowerupManager._instance = new PowerupManager();\r\n        }\r\n        setInitialState(powerupType, value) {\r\n            this.powerupStates.set(powerupType, value);\r\n        }\r\n        isBought(powerupType) {\r\n            return this.powerupStates.get(powerupType) || false;\r\n        }\r\n        resetPrices() {\r\n            this.powerupPrices.set(BlockPuzzle.PowerupType.BOMB, BlockPuzzle.Settings.BOMB_PRICE);\r\n            this.powerupPrices.set(BlockPuzzle.PowerupType.LIGHTNING, BlockPuzzle.Settings.LIGHTNING_PRICE);\r\n        }\r\n        buy(powerupType) {\r\n            this.powerupStates.set(powerupType, true);\r\n            BlockPuzzle.StarsManager.instance.setStarsAmount(BlockPuzzle.StarsManager.instance.getStarsAmount() - this.getPrice(powerupType));\r\n            this.onPowerupBought.dispatch(powerupType);\r\n            BlockPuzzle.LocalStorageController.instance.save();\r\n            this.powerupPrices.set(powerupType, this.powerupPrices.get(powerupType) + this.powerupPriceSteps.get(powerupType));\r\n        }\r\n        usePowerup(powerupType) {\r\n            this.powerupStates.set(powerupType, false);\r\n            BlockPuzzle.LocalStorageController.instance.save();\r\n        }\r\n        getPrice(powerupType) {\r\n            return this.powerupPrices.get(powerupType) || Number.MAX_SAFE_INTEGER;\r\n        }\r\n        hasUnboughtPowerups() {\r\n            let hasAvailablePowerups = false;\r\n            this.powerupStates.forEach((state, key) => {\r\n                if (!state) {\r\n                    hasAvailablePowerups = true;\r\n                }\r\n            });\r\n            return hasAvailablePowerups;\r\n        }\r\n        hasBoughtPowerups() {\r\n            let hasBoughtPowerups = false;\r\n            this.powerupStates.forEach((state, key) => {\r\n                if (state) {\r\n                    hasBoughtPowerups = true;\r\n                }\r\n            });\r\n            return hasBoughtPowerups;\r\n        }\r\n    }\r\n    PowerupManager._instance = null;\r\n    BlockPuzzle.PowerupManager = PowerupManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ScoreManager {\r\n        constructor() {\r\n            this.currentMultiplier = 1;\r\n            this.maxScores = 0;\r\n            this.prevMaxScores = 0;\r\n            this.currentScore = 0;\r\n            this.lastRoundScores = 0;\r\n            this.roundNumber = 0;\r\n            this.onScoreChanges = new Phaser.Signal();\r\n            this.onMultiplierChanges = new Phaser.Signal();\r\n        }\r\n        static get instance() {\r\n            return ScoreManager._instance ? ScoreManager._instance : ScoreManager._instance = new ScoreManager();\r\n        }\r\n        reset() {\r\n            this.currentScore = 0;\r\n            this.currentMultiplier = 1;\r\n        }\r\n        getCurrentScores() {\r\n            return ~~this.currentScore;\r\n        }\r\n        addScores(value) {\r\n            this.lastRoundScores = value * this.getMultiplier();\r\n            this.currentScore += this.lastRoundScores;\r\n            if (value != 0) {\r\n                this.currentMultiplier = this.calculateMultiplier();\r\n                this.onScoreChanges.dispatch(this.getCurrentScores());\r\n                this.onMultiplierChanges.dispatch(this.getMultiplier(), this.getMultiplierProgress());\r\n                BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.TOTAL_SCORES, this.lastRoundScores);\r\n                BlockPuzzle.AchievementsManager.instance.setValue(BlockPuzzle.AchievementType.BEST_SCORE_REACHED, this.getCurrentScores());\r\n                BlockPuzzle.Analytics.instance.updateLevelData({ score: this.getCurrentScores() });\r\n            }\r\n        }\r\n        startRound() {\r\n            this.roundNumber++;\r\n        }\r\n        getRoundNumber() {\r\n            return this.roundNumber;\r\n        }\r\n        isFirstRound() {\r\n            return this.roundNumber <= 1;\r\n        }\r\n        /**\r\n         * MULTIPLIER\r\n         */\r\n        calculateMultiplier() {\r\n            const scores = this.getCurrentScores();\r\n            for (let i = 0; i < BlockPuzzle.Settings.MULTIPLIER_MILESTONES.length; i++) {\r\n                if (BlockPuzzle.Settings.MULTIPLIER_MILESTONES[i] > scores) {\r\n                    return i + 1;\r\n                }\r\n            }\r\n            return BlockPuzzle.Settings.MULTIPLIER_MILESTONES.length;\r\n        }\r\n        getMultiplier() {\r\n            return this.currentMultiplier;\r\n        }\r\n        getMultiplierProgress() {\r\n            if (this.currentMultiplier >= 2) {\r\n                return (this.getCurrentScores() - BlockPuzzle.Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 2]) / (BlockPuzzle.Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 1] - BlockPuzzle.Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 2]);\r\n            }\r\n            else {\r\n                return this.getCurrentScores() / BlockPuzzle.Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 1];\r\n            }\r\n        }\r\n        /**\r\n         * MAX SCORES\r\n         */\r\n        getMaxScores() {\r\n            return this.maxScores;\r\n        }\r\n        getPrevMaxScores() {\r\n            return this.prevMaxScores;\r\n        }\r\n        setMaxScores(value) {\r\n            this.maxScores = Math.max(this.maxScores, value);\r\n            this.prevMaxScores = this.maxScores;\r\n        }\r\n        updateMaxScores(currentScores) {\r\n            if (currentScores > this.maxScores) {\r\n                this.prevMaxScores = this.maxScores;\r\n                this.maxScores = currentScores;\r\n                BlockPuzzle.LocalStorageController.instance.save();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        /**\r\n         * LISTENERS\r\n         */\r\n        removeListeners() {\r\n            this.onScoreChanges.removeAll();\r\n            this.onMultiplierChanges.removeAll();\r\n        }\r\n    }\r\n    ScoreManager._instance = null;\r\n    BlockPuzzle.ScoreManager = ScoreManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class StarsManager {\r\n        constructor() {\r\n            this.numStars = 0;\r\n            this.lastRoundStars = 0;\r\n            this.onStarAdded = new Phaser.Signal();\r\n            this.onStarsAmountChanged = new Phaser.Signal();\r\n        }\r\n        static get instance() {\r\n            return StarsManager._instance ? StarsManager._instance : StarsManager._instance = new StarsManager();\r\n        }\r\n        reset() {\r\n            this.lastRoundStars = 0;\r\n        }\r\n        getLastRoundStars() {\r\n            return this.lastRoundStars;\r\n        }\r\n        getStarsAmount() {\r\n            return this.numStars;\r\n        }\r\n        setStarsAmount(value, save = true) {\r\n            this.numStars = value;\r\n            this.onStarsAmountChanged.dispatch(this.getStarsAmount());\r\n            if (save) {\r\n                BlockPuzzle.LocalStorageController.instance.save();\r\n            }\r\n        }\r\n        addBonusStars(amount) {\r\n            this.setStarsAmount(this.getStarsAmount() + amount);\r\n            this.lastRoundStars += amount;\r\n            BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.TOTAL_STARS, amount);\r\n            BlockPuzzle.Analytics.instance.updateLevelData({ stars: this.getStarsAmount() });\r\n        }\r\n        pickupStars(amount, silent = false) {\r\n            this.setStarsAmount(this.getStarsAmount() + amount);\r\n            if (!silent) {\r\n                this.lastRoundStars += amount;\r\n            }\r\n            BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.TOTAL_STARS, amount);\r\n            BlockPuzzle.Analytics.instance.updateLevelData({ stars: this.getStarsAmount() });\r\n            this.onStarAdded.dispatch(this.getStarsAmount());\r\n            BlockPuzzle.LocalStorageController.instance.save();\r\n        }\r\n        /**\r\n         * LISTENERS\r\n         */\r\n        removeListeners() {\r\n        }\r\n    }\r\n    StarsManager._instance = null;\r\n    BlockPuzzle.StarsManager = StarsManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class SoundController {\r\n        constructor() {\r\n            this.currentMusicVolume = BlockPuzzle.Settings.MUSIC_ENABLED_BY_DEFAULT ? 0.4 : 0;\r\n            this.currentSFXVolume = 0.5;\r\n            this.currentBlockDestroyingSoundIndex = 0;\r\n            this.hadBeenMutedBeforePauseTriggered = false;\r\n            this.debouncedSoundsTimestamps = new Map();\r\n            this.melodyNames = [\"melody\"];\r\n            this.soundNames = [\r\n                \"click\",\r\n                \"error\",\r\n                \"counting\",\r\n                \"panel\",\r\n                \"panelUp\",\r\n                \"figureTap\",\r\n                \"figureRelease\",\r\n                \"figureFail\",\r\n                \"starAppear\",\r\n                \"starReceived\",\r\n                \"good\",\r\n                \"great\",\r\n                \"excellent\",\r\n                \"awesome\",\r\n                \"buying\",\r\n                \"match1\",\r\n                \"match2\",\r\n                \"match3\",\r\n                \"match4\",\r\n                \"match5\",\r\n                \"match6\",\r\n                \"match7\",\r\n                \"block\",\r\n                \"revive\",\r\n                \"lose\",\r\n                \"stamp\",\r\n                \"heartbeat\",\r\n                \"levelUp\",\r\n                \"reward\",\r\n                \"achievement\",\r\n                \"fire\",\r\n                \"bomb\",\r\n                \"lighting\"\r\n            ];\r\n        }\r\n        static get instance() {\r\n            return SoundController._instance ? SoundController._instance :\r\n                SoundController._instance = new SoundController();\r\n        }\r\n        isDecodingSupported() {\r\n            return BlockPuzzle.App.instance.sound.usingWebAudio;\r\n        }\r\n        getSFXNames() {\r\n            return this.soundNames;\r\n        }\r\n        getSoundNames() {\r\n            return this.melodyNames.slice().concat(this.soundNames);\r\n        }\r\n        /**\r\n         * MUSIC\r\n         */\r\n        init() {\r\n        }\r\n        startMusic() {\r\n            this.mainTheme = BlockPuzzle.App.instance.sound.play('melody', this.currentMusicVolume, true);\r\n        }\r\n        /**\r\n         * PAUSE/RESUME SOUND\r\n         */\r\n        pauseAudio() {\r\n            this.hadBeenMutedBeforePauseTriggered = BlockPuzzle.App.instance.sound.mute;\r\n            BlockPuzzle.App.instance.sound.mute = true;\r\n        }\r\n        resumeAudio() {\r\n            BlockPuzzle.App.instance.sound.mute = this.hadBeenMutedBeforePauseTriggered;\r\n        }\r\n        addSuspendedContextRestoreHandler() {\r\n            if ('ontouchstart' in window && BlockPuzzle.App.instance.sound.usingWebAudio) {\r\n                console.log(\"Adding context resume handler...\");\r\n                document.querySelector('canvas').addEventListener('touchstart', function () {\r\n                    if (BlockPuzzle.App.instance.sound.context.state === 'suspended') {\r\n                        console.log('Resuming suspended context...');\r\n                        BlockPuzzle.App.instance.sound.context.resume().then(() => {\r\n                            console.log('Playback resumed successfully');\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        getMusicVolume() {\r\n            return this.currentMusicVolume;\r\n        }\r\n        setMusicVolume(value) {\r\n            this.currentMusicVolume = Phaser.Math.clamp(value, 0, 1);\r\n            if (this.mainTheme && this.mainTheme.isPlaying) {\r\n                this.mainTheme.volume = this.currentMusicVolume;\r\n            }\r\n        }\r\n        getSFXVolume() {\r\n            return this.currentSFXVolume;\r\n        }\r\n        setSFXVolume(value) {\r\n            this.currentSFXVolume = Phaser.Math.clamp(value, 0, 1);\r\n        }\r\n        /**\r\n         * SOUNDS\r\n         */\r\n        playClickSound() {\r\n            this.playSound('click');\r\n        }\r\n        playPanelMovementSound() {\r\n            this.playSound('panel');\r\n        }\r\n        playPanelUpMovementSound() {\r\n            this.playSound('panelUp');\r\n        }\r\n        playFigurePickupSound() {\r\n            this.playSound('figureTap');\r\n        }\r\n        playFigurePlaceSound() {\r\n            this.playSound('figureRelease');\r\n        }\r\n        playFigureFailSound() {\r\n            this.playSound('figureFail');\r\n        }\r\n        playStarAppearSound() {\r\n            this.playSound('starAppear');\r\n        }\r\n        playStarReceivedSound() {\r\n            this.playSound('starReceived');\r\n        }\r\n        playBuyingSound() {\r\n            this.playSound('buying');\r\n        }\r\n        playBlockSound() {\r\n            this.playSound('block', 0.8);\r\n        }\r\n        playReviveSound() {\r\n            this.playSound('revive', 0.6);\r\n        }\r\n        playStampSound() {\r\n            this.playSound('stamp');\r\n        }\r\n        playErrorSound() {\r\n            this.playSound('error');\r\n        }\r\n        playLoseSound() {\r\n            BlockPuzzle.App.instance.time.events.add(70, () => this.playSound('lose', 0.7));\r\n        }\r\n        playHeartBeatSound() {\r\n            this.playSound('heartbeat', 1);\r\n        }\r\n        playlevelUpSound() {\r\n            this.playSound('levelUp', 0.5);\r\n        }\r\n        playAchievementClaimedSound() {\r\n            this.playSound('achievement', 0.8);\r\n        }\r\n        playRewardClaimedSound() {\r\n            this.playSound('reward', 0.8);\r\n        }\r\n        playExplosionSound() {\r\n            this.playSound('bomb', 0.8);\r\n            this.playSound('fire', 0.8);\r\n        }\r\n        playLightningSound() {\r\n            this.playSound('lighting', 0.8);\r\n        }\r\n        playNextLineDestroyingSound(numLines) {\r\n            this.playSound('match' + ((this.currentBlockDestroyingSoundIndex++ % 7) + 1));\r\n            this.playSound('block');\r\n            if (numLines > 1) {\r\n                BlockPuzzle.App.instance.time.events.add(100, () => this.playSound('block'));\r\n            }\r\n        }\r\n        playInscriptionSound(inscriptionLevel) {\r\n            switch (inscriptionLevel) {\r\n                case BlockPuzzle.InscriptionLevel.GOOD:\r\n                    this.playSound('good', 0.6);\r\n                    break;\r\n                case BlockPuzzle.InscriptionLevel.GREAT:\r\n                    this.playSound('great', 0.6);\r\n                    break;\r\n                case BlockPuzzle.InscriptionLevel.AWESOME:\r\n                    this.playSound('awesome', 0.6);\r\n                    break;\r\n                case BlockPuzzle.InscriptionLevel.EXCELLENT:\r\n                    this.playSound('excellent', 0.6);\r\n                    break;\r\n            }\r\n        }\r\n        playSound(key, volume = 0.5, loop = false) {\r\n            if (BlockPuzzle.App.instance.sound.usingWebAudio && BlockPuzzle.App.instance.sound.context.state === 'suspended') {\r\n                //skip this sound\r\n            }\r\n            else {\r\n                BlockPuzzle.App.instance.sound.play(key, volume * this.currentSFXVolume, loop);\r\n            }\r\n        }\r\n        /**\r\n         * COUNTING\r\n         */\r\n        startCountingSound() {\r\n            if (this.countingSound) {\r\n                this.stopCountingSound();\r\n            }\r\n            this.countingSound = BlockPuzzle.App.instance.add.sound('counting', 0.55, true);\r\n            this.countingSound.play();\r\n        }\r\n        stopCountingSound() {\r\n            if (this.countingSound) {\r\n                if (this.countingSound.isPlaying) {\r\n                    this.countingSound.stop();\r\n                }\r\n                this.countingSound.destroy();\r\n            }\r\n            this.countingSound = null;\r\n        }\r\n        /**\r\n         * PRIVATE\r\n         */\r\n        debounceSound(key, volume, interval) {\r\n            const currentTime = new Date().getTime();\r\n            const lastTimestamp = this.debouncedSoundsTimestamps.get(key) || 0;\r\n            if (currentTime - lastTimestamp >= interval) {\r\n                this.playSound(key, volume, false);\r\n                this.debouncedSoundsTimestamps.set(key, currentTime);\r\n            }\r\n        }\r\n        /**\r\n         * MUSIC\r\n         */\r\n        chokeMusicVolume(duration = 500) {\r\n            if (this.mainTheme) {\r\n                this.mainTheme.fadeTo(duration, this.currentMusicVolume > 0 ? Math.min(0.1, this.currentMusicVolume / 3) : 0);\r\n            }\r\n        }\r\n        restoreMusicVolume(duration = 500) {\r\n            if (this.mainTheme) {\r\n                this.mainTheme.fadeTo(duration, this.currentMusicVolume);\r\n            }\r\n        }\r\n    }\r\n    SoundController._instance = null;\r\n    BlockPuzzle.SoundController = SoundController;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AutoResizeableState extends Phaser.State {\r\n        init(containerWidth = BlockPuzzle.CustomScaleManager.ORIGINAL_WIDTH, containerHeight = BlockPuzzle.CustomScaleManager.ORIGINAL_HEIGHT) {\r\n            super.init();\r\n            this.isInitialized = false;\r\n            this.containerWidth = containerWidth;\r\n            this.containerHeight = containerHeight;\r\n            this.container = this.add.existing(this.game.make.group(null));\r\n            this.originalBounds = new WindowBounds();\r\n            this.originalBounds.set(0, BlockPuzzle.CustomScaleManager.ORIGINAL_WIDTH, 0, BlockPuzzle.CustomScaleManager.ORIGINAL_HEIGHT);\r\n            this.resize();\r\n        }\r\n        create() {\r\n            this.isInitialized = true;\r\n        }\r\n        addChild(child) {\r\n            return this.container.add(child);\r\n        }\r\n        getInputPosition() {\r\n            return new Phaser.Point((this.game.input.activePointer.x - this.container.x) / BlockPuzzle.CustomScaleManager.SCALE_X, (this.game.input.activePointer.y - this.container.y) / BlockPuzzle.CustomScaleManager.SCALE_Y);\r\n        }\r\n        translateInputPosition(pointer) {\r\n            return new Phaser.Point((pointer.x - this.container.x) / BlockPuzzle.CustomScaleManager.SCALE_X, (pointer.y - this.container.y) / BlockPuzzle.CustomScaleManager.SCALE_Y);\r\n        }\r\n        resize(width = 0, height = 0) {\r\n            this.container.scale.set(BlockPuzzle.CustomScaleManager.SCALE_X, BlockPuzzle.CustomScaleManager.SCALE_Y);\r\n            this.container.position.set(BlockPuzzle.CustomScaleManager.WIDTH / 2 - this.containerWidth * BlockPuzzle.CustomScaleManager.SCALE_X / 2, BlockPuzzle.CustomScaleManager.HEIGHT / 2 - this.containerHeight * BlockPuzzle.CustomScaleManager.SCALE_Y / 2);\r\n            this.windowBounds = this.windowBounds || new WindowBounds();\r\n            this.windowBounds.set(-(BlockPuzzle.CustomScaleManager.WIDTH / BlockPuzzle.CustomScaleManager.SCALE_X - this.containerWidth) / 2, (BlockPuzzle.CustomScaleManager.WIDTH / BlockPuzzle.CustomScaleManager.SCALE_X - this.containerWidth) / 2 + this.containerWidth, -(BlockPuzzle.CustomScaleManager.HEIGHT / BlockPuzzle.CustomScaleManager.SCALE_Y - this.containerHeight) / 2, (BlockPuzzle.CustomScaleManager.HEIGHT / BlockPuzzle.CustomScaleManager.SCALE_Y - this.containerHeight) / 2 + this.containerHeight);\r\n        }\r\n        shutdown() {\r\n            this.container.destroy();\r\n            this.container = null;\r\n        }\r\n    }\r\n    BlockPuzzle.AutoResizeableState = AutoResizeableState;\r\n    class WindowBounds {\r\n        constructor() {\r\n            this.set(0, 0, 0, 0);\r\n        }\r\n        set(left, right, top, down) {\r\n            this.left = left;\r\n            this.right = right;\r\n            this.top = top;\r\n            this.down = down;\r\n            this.x = left;\r\n            this.y = top;\r\n            this.width = right - left;\r\n            this.height = down - top;\r\n            this.centerX = (right + left) / 2;\r\n            this.centerY = (down + top) / 2;\r\n        }\r\n        getPosition(rx, ry, dx = 0, dy = 0) {\r\n            return new Phaser.Point(this.left + rx * this.width + dx, this.top + ry * this.height + dy);\r\n        }\r\n        getBounds(left, right, top, down) {\r\n            return { minX: this.left + left * this.width, maxX: this.left + right * this.width, minY: this.top + top * this.height, maxY: this.top + down * this.height };\r\n        }\r\n    }\r\n    BlockPuzzle.WindowBounds = WindowBounds;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Boot extends Phaser.State {\r\n        init() {\r\n            this.game.scale.scaleMode = BlockPuzzle.CustomScaleManager.getScaleMode();\r\n            this.game.scale.fullScreenScaleMode = BlockPuzzle.CustomScaleManager.getScaleMode();\r\n            this.game.scale.pageAlignHorizontally = true;\r\n            this.game.scale.pageAlignVertically = true;\r\n            if (this.game.device.android) {\r\n                this.game.input.mouse.enabled = !this.game.device.mspointer;\r\n            }\r\n            this.game.scale.setResizeCallback(this.resizeCallback, this);\r\n            this.game.scale.onSizeChange.add(this.sizeChanged, this);\r\n            this.stage.disableVisibilityChange = true;\r\n            BlockPuzzle.Analytics.instance.initUser();\r\n            BlockPuzzle.SoundController.instance.addSuspendedContextRestoreHandler();\r\n        }\r\n        preload() {\r\n            this.game.load.atlasJSONArray(BlockPuzzle.Settings.PRELOADER_ATLAS, 'img/' + BlockPuzzle.Settings.PRELOADER_ATLAS + '.png', 'img/' + BlockPuzzle.Settings.PRELOADER_ATLAS + '.json');\r\n            this.game.load.json('l10n', 'lang/texts.json');\r\n        }\r\n        create() {\r\n            this.input.maxPointers = 1;\r\n            if (this.game.device.desktop) {\r\n                this.game.canvas.oncontextmenu = function (e) {\r\n                    e.preventDefault();\r\n                };\r\n            }\r\n            BlockPuzzle.LocalizationManager.init(this.game.cache.getJSON('l10n'));\r\n            this.game.state.start('Preloader', true, false);\r\n        }\r\n        resizeCallback(scaleManager, parentBounds) {\r\n            if (BlockPuzzle.CustomScaleManager.getScaleMode() == Phaser.ScaleManager.USER_SCALE) {\r\n                if (this.game.width != window.innerWidth * BlockPuzzle.CustomScaleManager.getPixelRatio() || this.game.height != window.innerHeight * BlockPuzzle.CustomScaleManager.getPixelRatio()) {\r\n                    scaleManager.setGameSize(window.innerWidth * BlockPuzzle.CustomScaleManager.getPixelRatio(), window.innerHeight * BlockPuzzle.CustomScaleManager.getPixelRatio());\r\n                    scaleManager.setUserScale(1 / BlockPuzzle.CustomScaleManager.getPixelRatio(), 1 / BlockPuzzle.CustomScaleManager.getPixelRatio());\r\n                }\r\n            }\r\n        }\r\n        sizeChanged(scaleManager, w, h) {\r\n            const windowDimensions = (this.game.device.android\r\n                && window[\"visualViewport\"]\r\n                && window[\"visualViewport\"].width\r\n                && window[\"visualViewport\"].height)\r\n                ? new Phaser.Rectangle(0, 0, Math.min(w, window[\"visualViewport\"].width), Math.min(h, window[\"visualViewport\"].height))\r\n                : new Phaser.Rectangle(0, 0, window.innerWidth, window.innerHeight);\r\n            BlockPuzzle.CustomScaleManager.update(windowDimensions.width * BlockPuzzle.CustomScaleManager.getPixelRatio(), windowDimensions.height * BlockPuzzle.CustomScaleManager.getPixelRatio());\r\n        }\r\n    }\r\n    BlockPuzzle.Boot = Boot;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"AutoResizeableState.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Level extends BlockPuzzle.AutoResizeableState {\r\n        create() {\r\n            BlockPuzzle.ScoreManager.instance.reset();\r\n            BlockPuzzle.ScoreManager.instance.startRound();\r\n            BlockPuzzle.StarsManager.instance.reset();\r\n            BlockPuzzle.PowerupManager.instance.resetPrices();\r\n            BlockPuzzle.Analytics.instance.startLevel();\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n                if (!BlockPuzzle.Settings.TUTORIAL_COMPLETED) {\r\n                    window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_TUTORIAL);\r\n                }\r\n            }\r\n            BlockPuzzle.Analytics.instance.startLevel();\r\n            this.createChildren();\r\n            this.resize(this.game.width, this.game.height);\r\n        }\r\n        createChildren() {\r\n            super.create();\r\n            this.eventManager = this.addChild(new BlockPuzzle.EventManager(this));\r\n            this.dataManager = this.addChild(new BlockPuzzle.DataManager(this));\r\n            this.serviceManager = this.addChild(new BlockPuzzle.ServiceManager(this));\r\n            this.gameStateManager = this.addChild(new BlockPuzzle.GameStateManager(this));\r\n            this.boardManager = this.addChild(new BlockPuzzle.BoardManager(this));\r\n            this.figureManager = this.addChild(new BlockPuzzle.FigureManager(this));\r\n            this.uiManager = this.addChild(new BlockPuzzle.UIManager(this));\r\n            this.tutorialManager = this.addChild(new BlockPuzzle.TutorialManager(this));\r\n            this.resize(this.game.width, this.game.height);\r\n        }\r\n        resize(w, h) {\r\n            super.resize(w, h);\r\n            if (this.isInitialized) {\r\n                this.eventManager.resize();\r\n                this.dataManager.resize();\r\n                this.gameStateManager.resize();\r\n                this.serviceManager.resize();\r\n                this.boardManager.resize();\r\n                this.figureManager.resize();\r\n                this.uiManager.resize();\r\n                this.tutorialManager.resize();\r\n            }\r\n        }\r\n        shutdown() {\r\n            BlockPuzzle.ScoreManager.instance.removeListeners();\r\n            BlockPuzzle.StarsManager.instance.removeListeners();\r\n            this.eventManager.destroy();\r\n            this.eventManager = null;\r\n            this.dataManager.destroy();\r\n            this.dataManager = null;\r\n            this.gameStateManager.destroy();\r\n            this.gameStateManager = null;\r\n            this.serviceManager.destroy();\r\n            this.serviceManager = null;\r\n            this.figureManager.destroy();\r\n            this.figureManager = null;\r\n            this.boardManager.destroy();\r\n            this.boardManager = null;\r\n            this.uiManager.destroy();\r\n            this.uiManager = null;\r\n            this.tutorialManager.destroy();\r\n            this.tutorialManager = null;\r\n            super.shutdown();\r\n        }\r\n    }\r\n    BlockPuzzle.Level = Level;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class Preloader extends BlockPuzzle.AutoResizeableState {\r\n        preload() {\r\n            super.preload(this.game);\r\n            this.buildChildren();\r\n            this.preloadContent();\r\n            this.resize(this.game.width, this.game.height);\r\n        }\r\n        buildChildren() {\r\n            BlockPuzzle.BackgroundManager.instance.init();\r\n            this.game.state.onStateChange.add(this.handleStateChanged, this);\r\n            this.preloadContainer = this.addChild(this.game.make.group());\r\n            this.backScreen = this.game.world.addAt(this.game.make.sprite(0, 0, BlockPuzzle.Settings.PRELOADER_ATLAS, 'blackSquare0000'), 0);\r\n            this.backScreen.position.set(-50, -50);\r\n            this.backScreen.width = 2400;\r\n            this.backScreen.height = 2400;\r\n            this.backScreen.alpha = 0.7;\r\n            this.logo = this.addChild(this.game.make.sprite(0, 0, BlockPuzzle.Settings.PRELOADER_ATLAS, 'logo0000'));\r\n            this.logo.anchor.setTo(0.5);\r\n            this.preloadPad = this.preloadContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.PRELOADER_ATLAS, 'preloaderBack0000'));\r\n            this.preloadPad.anchor.setTo(0.5);\r\n            this.preloadBar = this.preloadContainer.add(this.game.make.sprite(-314 / 2, -2, BlockPuzzle.Settings.PRELOADER_ATLAS));\r\n            this.preloadBar.animations.add('cycle', Phaser.Animation.generateFrameNames('preloadBar', 0, 9, '', 4)).play(45, true);\r\n            this.preloadBar.anchor.setTo(0, 0.5);\r\n            this.load.setPreloadSprite(this.preloadBar);\r\n            this.versionText = this.addChild(BlockPuzzle.TextUtils.getText('v' + BlockPuzzle.Settings.GAME_VERSION, 0, 0, 12, \"#ffffff\"));\r\n            this.preloadText = this.preloadContainer.add(new BlockPuzzle.BitmapTextField(\"0%\", BlockPuzzle.Settings.PRELOADER_ATLAS, \"Gold\", 1, 0.5, 0.5, 1));\r\n            this.preloadText.position.set(0, 65);\r\n            this.game.load.onFileComplete.add(this.onFileComplete, this);\r\n            this.game.load.onLoadComplete.add(this.onLoadingComplete, this);\r\n            this.isInitialized = true;\r\n        }\r\n        preloadContent() {\r\n            for (let soundName of BlockPuzzle.SoundController.instance.getSoundNames()) {\r\n                this.game.load.audio(soundName, ['sound/mp3/' + soundName + '.mp3', 'sound/m4a/' + soundName + '.m4a', 'sound/ogg/' + soundName + '.ogg']);\r\n            }\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                this.game.load.image('more_games', BlockPuzzle.Settings.RELEASE_BUILD ? window.famobi.getMoreGamesButtonImage() : 'img/more-games.png');\r\n            }\r\n            this.game.load.atlasJSONArray(BlockPuzzle.Settings.GAME_ATLAS, 'img/' + BlockPuzzle.Settings.GAME_ATLAS + '.png', 'img/' + BlockPuzzle.Settings.GAME_ATLAS + '.json');\r\n            this.game.load.atlasJSONArray(BlockPuzzle.Settings.ANIMATION_ATLAS, 'img/' + BlockPuzzle.Settings.ANIMATION_ATLAS + '.png', 'img/' + BlockPuzzle.Settings.ANIMATION_ATLAS + '.json');\r\n            this.game.load.image('field-cover', 'img/field-cover.png');\r\n            this.game.load.spritesheet('explosionA', 'img/18.png', 256, 256, 40);\r\n            this.game.load.spritesheet('explosionB', 'img/22.png', 256, 256, 40);\r\n        }\r\n        create() {\r\n            super.create();\r\n        }\r\n        resize(width, height) {\r\n            super.resize(width, height);\r\n            if (this.isInitialized) {\r\n                this.backScreen.width = this.windowBounds.width * BlockPuzzle.CustomScaleManager.SCALE_X + 100;\r\n                this.backScreen.height = this.windowBounds.height * BlockPuzzle.CustomScaleManager.SCALE_X + 100;\r\n                this.preloadContainer.position.copyFrom(this.windowBounds.getPosition(0.5, 0.58));\r\n                this.versionText.position.set(this.windowBounds.left + 25, this.windowBounds.down - 16);\r\n                this.logo.position.copyFrom(this.windowBounds.getPosition(0.5, 0.24));\r\n            }\r\n        }\r\n        handleStateChanged() {\r\n            BlockPuzzle.BackgroundManager.instance.handleStateChanged();\r\n        }\r\n        onFileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\r\n            this.preloadText.changeText(progress + \"%\");\r\n        }\r\n        onLoadingComplete() {\r\n            BlockPuzzle.WindowManager.instance.init();\r\n            BlockPuzzle.TransitionScreen.instance.init();\r\n            BlockPuzzle.LocalStorageController.instance.loadSave();\r\n            BlockPuzzle.SoundController.instance.init();\r\n            if (BlockPuzzle.SoundController.instance.isDecodingSupported()) {\r\n                this.game.sound.setDecodedCallback(BlockPuzzle.SoundController.instance.getSFXNames(), this.onSoundsDecoded, this);\r\n            }\r\n            else {\r\n                this.onSoundsDecoded();\r\n            }\r\n        }\r\n        onSoundsDecoded() {\r\n            BlockPuzzle.SoundController.instance.startMusic();\r\n            this.preloadText.changeText(\"100%\");\r\n            BlockPuzzle.TransitionScreen.instance.changeState(\"Level\");\r\n        }\r\n    }\r\n    BlockPuzzle.Preloader = Preloader;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BitmapTextField extends Phaser.Group {\r\n        constructor(textValue, atlasKey, styleKey, textScale = 1, pivotX = 0.5, pivotY = 0.5, letterSpacing = 0, letterFrame = 0, tintValue = 0xFFFFFF) {\r\n            super(BlockPuzzle.App.instance);\r\n            this.valueHolder = { value: 0, targetValue: 0 };\r\n            this.pivotX = 0.5;\r\n            this.pivotY = 0.5;\r\n            this.atlasKey = \"\";\r\n            this.styleKey = \"\";\r\n            this.letterSpacing = 0;\r\n            this.letterFrame = 0;\r\n            this.tintValue = 0;\r\n            this.internalScale = 1;\r\n            this.atlasKey = atlasKey;\r\n            this.styleKey = styleKey;\r\n            this.letterSpacing = letterSpacing;\r\n            this.letterFrame = letterFrame;\r\n            this.textScale = textScale;\r\n            this.pivotX = pivotX;\r\n            this.pivotY = pivotY;\r\n            this.tintValue = tintValue;\r\n            this.changeText(textValue);\r\n        }\r\n        changeText(textValue, force = false) {\r\n            if (!force && this.textValue == textValue) {\r\n                return;\r\n            }\r\n            this.textValue = textValue;\r\n            this.removeAll(true);\r\n            this.scale.set(1);\r\n            for (let i = 0; i < textValue.length; i++) {\r\n                let sprite = BlockPuzzle.BitmapTextFactory.getLetter(this.styleKey, this.atlasKey, textValue.charAt(i), this.letterFrame);\r\n                if (sprite) {\r\n                    sprite.x = this.width + (i > 0 ? this.letterSpacing : 0);\r\n                    sprite.anchor.set(0, 0.5);\r\n                    this.add(sprite);\r\n                }\r\n                else {\r\n                    console.warn(`BitmapTextFactory.getSprite - letter '${textValue.charAt(i)}' not found in spritesheet`);\r\n                }\r\n            }\r\n            const currentWidth = this.width;\r\n            const currentHeight = this.height;\r\n            this.children.forEach(child => child.position.set(child.x - this.pivotX * currentWidth, child.y - (this.pivotY - 0.5) * currentHeight));\r\n            this.children.forEach(child => child.tint = this.tintValue);\r\n            this.scale.set(this.textScale * this.internalScale);\r\n        }\r\n        setColor(value) {\r\n            this.tintValue = value;\r\n            this.children.forEach(child => child.tint = this.tintValue);\r\n        }\r\n        tweenText(initialValue, targetValue, duration, delay) {\r\n            this.game.tweens.removeFrom(this.valueHolder);\r\n            this.valueHolder.value = initialValue;\r\n            this.valueHolder.targetValue = targetValue;\r\n            this.game.add.tween(this.valueHolder)\r\n                .to({ value: targetValue }, duration, Phaser.Easing.Linear.None, true, delay)\r\n                .onUpdateCallback(() => this.changeText('' + Math.floor(this.valueHolder.value)))\r\n                .onComplete.add(() => this.changeText('' + Math.floor(this.valueHolder.targetValue)));\r\n        }\r\n        tweenTextAdvanced(preffix, initialValue, targetValue, duration, delay, playCountingSound = false, countingSoundStates = ['Level']) {\r\n            this.changeText('' + Math.floor(initialValue));\r\n            if (initialValue == targetValue) {\r\n                return;\r\n            }\r\n            let valueHolder = { value: initialValue };\r\n            let textTween = this.game.add.tween(valueHolder)\r\n                .to({ value: targetValue }, duration, Phaser.Easing.Linear.None, true, delay);\r\n            textTween.onStart.add(() => {\r\n                if (playCountingSound && countingSoundStates.indexOf(this.game.state.getCurrentState().key) != -1) {\r\n                    BlockPuzzle.SoundController.instance.startCountingSound();\r\n                }\r\n            });\r\n            textTween.onUpdateCallback(() => this.changeText(preffix + Math.floor(valueHolder.value)));\r\n            textTween.onComplete.add(() => {\r\n                this.changeText(preffix + Math.floor(valueHolder.value));\r\n                if (playCountingSound) {\r\n                    BlockPuzzle.SoundController.instance.stopCountingSound();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    BlockPuzzle.BitmapTextField = BitmapTextField;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class TransitionScreen extends Phaser.Group {\r\n        constructor() {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.isInitialized = false;\r\n        }\r\n        static get instance() {\r\n            return TransitionScreen._instance ? TransitionScreen._instance : TransitionScreen._instance = new TransitionScreen();\r\n        }\r\n        buildChildren() {\r\n            this.background = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'transitionSquare0000'));\r\n            this.background.anchor.set(0.5);\r\n            this.background.alpha = 0.01;\r\n            this.background.inputEnabled = true;\r\n            this.background.events.onInputDown.add(() => console.log('Transition Screen: input locked'));\r\n        }\r\n        init() {\r\n            this.isInitialized = true;\r\n            this.buildChildren();\r\n        }\r\n        resize() {\r\n            if (this.isInitialized) {\r\n                this.position.set(this.game.world.centerX, this.game.world.centerY);\r\n                this.background.width = this.game.width + 100;\r\n                this.background.height = this.game.height + 100;\r\n            }\r\n        }\r\n        changeState(newState, callback = null) {\r\n            this.targetStateName = newState;\r\n            this.callback = callback;\r\n            this.show();\r\n        }\r\n        show() {\r\n            this.game.stage.addChild(this);\r\n            this.visible = true;\r\n            this.resize();\r\n            this.game.add.tween(this.background)\r\n                .to({ alpha: 1 }, 140, Phaser.Easing.Quadratic.Out, true)\r\n                .onComplete.add(this.close, this);\r\n        }\r\n        close() {\r\n            if (this.targetStateName) {\r\n                this.game.state.start(this.targetStateName, true, false);\r\n                BlockPuzzle.WindowManager.instance.hideAll();\r\n            }\r\n            if (this.callback) {\r\n                this.callback();\r\n                this.callback = null;\r\n            }\r\n            this.proceedClosing();\r\n        }\r\n        proceedClosing() {\r\n            if (this.parent && this.parent.getChildIndex(this) > -1) {\r\n                this.parent.setChildIndex(this, this.parent.children.length - 1);\r\n            }\r\n            else {\r\n                this.game.stage.addChild(this);\r\n            }\r\n            setTimeout(() => {\r\n                this.game.add.tween(this.background)\r\n                    .to({ alpha: 0 }, 120, Phaser.Easing.Linear.None, true)\r\n                    .onComplete.add(this.onTransitionFinished, this);\r\n            }, 20);\r\n            setTimeout(() => {\r\n                this.onTransitionFinished();\r\n            }, 400);\r\n        }\r\n        onTransitionFinished() {\r\n            this.hide();\r\n        }\r\n        hide() {\r\n            if (this.parent && this.parent.getChildIndex(this) > -1) {\r\n                this.parent.removeChild(this);\r\n            }\r\n            this.visible = false;\r\n        }\r\n    }\r\n    TransitionScreen._instance = null;\r\n    BlockPuzzle.TransitionScreen = TransitionScreen;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AchievementInformer extends Phaser.Group {\r\n        constructor(level) {\r\n            super(level.game);\r\n            this.active = false;\r\n            this.visibilityTimer = 0;\r\n            this.targetY = -100;\r\n            this.level = level;\r\n            this.buildChildren();\r\n        }\r\n        buildChildren() {\r\n            this.container = this.add(this.game.make.group());\r\n            this.container.position.set(0, -100);\r\n            this.informerPad = this.container.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'achievementInformerPad0000'));\r\n            this.informerPad.anchor.set(0.5);\r\n            this.achievementSprite = this.container.add(this.game.make.sprite(0, -5, BlockPuzzle.Settings.GAME_ATLAS, 'achievement10000'));\r\n            this.achievementSprite.anchor.set(0.5);\r\n            this.badgesSprite = this.container.add(this.game.make.sprite(40, 30, BlockPuzzle.Settings.GAME_ATLAS, 'achievementBadges0000'));\r\n            this.badgesSprite.anchor.set(0.5);\r\n            this.visible = false;\r\n        }\r\n        show(achievementModel) {\r\n            this.game.tweens.removeFrom(this.container.scale, false);\r\n            this.game.tweens.removeFrom(this.container, false);\r\n            this.game.tweens.removeFrom(this.achievementSprite);\r\n            this.game.tweens.removeFrom(this.achievementSprite.scale);\r\n            this.game.tweens.removeFrom(this.badgesSprite);\r\n            this.game.tweens.removeFrom(this.badgesSprite.scale);\r\n            this.visible = true;\r\n            this.active = true;\r\n            this.visibilityTimer = BlockPuzzle.Settings.ACHIEVEMENT_INFORMER_VISIBILITY_DURATION;\r\n            this.container.y = 0;\r\n            this.container.alpha = 0;\r\n            this.game.add.tween(this.container)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.container)\r\n                .to({ y: this.targetY }, 280, Phaser.Easing.Back.Out, true);\r\n            this.container.scale.set(0.6);\r\n            this.game.add.tween(this.container.scale)\r\n                .to({ x: 1, y: 1 }, 280, Phaser.Easing.Sinusoidal.Out, true);\r\n            this.achievementSprite.scale.set(0);\r\n            this.game.add.tween(this.achievementSprite.scale)\r\n                .to({ x: 0.7, y: 0.7 }, 270, Phaser.Easing.Back.Out, true, 30);\r\n            this.achievementSprite.y = -3;\r\n            this.game.add.tween(this.achievementSprite)\r\n                .to({ y: -7 }, 350, Phaser.Easing.Sinusoidal.InOut, true, 180, -1, true);\r\n            this.badgesSprite.alpha = 0;\r\n            this.game.add.tween(this.badgesSprite)\r\n                .to({ alpha: 1 }, 160, Phaser.Easing.Sinusoidal.In, true, 100);\r\n            this.badgesSprite.scale.set(0);\r\n            this.game.add.tween(this.badgesSprite.scale)\r\n                .to({ x: 1, y: 1 }, 200, Phaser.Easing.Back.Out, true, 100);\r\n            this.achievementSprite.frameName = 'achievement' + achievementModel.key + '0000';\r\n            this.badgesSprite.frameName = 'achievementBadges000' + Phaser.Math.clamp(BlockPuzzle.AchievementsManager.getAchievementLevel(achievementModel) - 1, 0, 2);\r\n        }\r\n        hide() {\r\n            this.active = false;\r\n            this.game.tweens.removeFrom(this.container.scale, false);\r\n            this.game.tweens.removeFrom(this.container, false);\r\n            this.game.add.tween(this.container)\r\n                .to({ alpha: 0 }, 150, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.container)\r\n                .to({ y: 0 }, 220, Phaser.Easing.Sinusoidal.Out, true);\r\n            this.game.add.tween(this.container.scale)\r\n                .to({ x: 0.5, y: 0.5 }, 150, Phaser.Easing.Back.Out, true)\r\n                .onComplete.add(() => this.visible = false);\r\n        }\r\n        resizeLandscape() {\r\n            this.targetY = 110;\r\n            this.game.add.tween(this.container)\r\n                .to({ y: this.targetY }, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n        }\r\n        resizeSquared() {\r\n            this.targetY = 110;\r\n            this.game.add.tween(this.container)\r\n                .to({ y: this.targetY }, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n        }\r\n        resizePortrait() {\r\n            this.targetY = -110;\r\n            this.game.add.tween(this.container)\r\n                .to({ y: this.targetY }, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n        }\r\n        update() {\r\n            if (this.visible && this.active) {\r\n                if (this.visibilityTimer > 0) {\r\n                    this.visibilityTimer -= this.game.time.elapsedMS;\r\n                    if (this.visibilityTimer <= 0) {\r\n                        this.hide();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.AchievementInformer = AchievementInformer;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AchievementPanel extends Phaser.Group {\r\n        constructor(windowAcheivements, achievementKey, x, y) {\r\n            super(windowAcheivements.game);\r\n            this.currentReward = 0;\r\n            this.windowAchievements = windowAcheivements;\r\n            this.achievementKey = achievementKey;\r\n            this.position.set(x, y);\r\n            this.buildContent();\r\n        }\r\n        updateView() {\r\n            const achievementModel = BlockPuzzle.AchievementsManager.instance.getAchievementModel(this.achievementKey);\r\n            const currentLevel = BlockPuzzle.AchievementsManager.getAchievementLevel(achievementModel);\r\n            const currentValue = currentLevel > 0 ? currentLevel < 3 ? achievementModel.currentValue - achievementModel.requiredValues[currentLevel - 1] : achievementModel.requiredValues[2] : achievementModel.currentValue;\r\n            const displayedValue = currentLevel > 0 ? currentLevel < 3 ? achievementModel.currentValue : achievementModel.requiredValues[2] : achievementModel.currentValue;\r\n            const targetValue = currentLevel > 0 ? currentLevel < 3 ? achievementModel.requiredValues[currentLevel] - achievementModel.requiredValues[currentLevel - 1] : achievementModel.requiredValues[2] : achievementModel.requiredValues[0];\r\n            const displayTargetValue = currentLevel > 0 ? currentLevel < 3 ? achievementModel.requiredValues[currentLevel] : achievementModel.requiredValues[2] : achievementModel.requiredValues[0];\r\n            const currentProgress = currentLevel < 3 ? currentValue / targetValue : 1;\r\n            this.buttonClaimReward.visible = false;\r\n            this.progressBarContainer.visible = true;\r\n            this.badges.visible = achievementModel.rewardClaimed[0] || achievementModel.rewardClaimed[1] || achievementModel.rewardClaimed[2];\r\n            this.badges.frameName = achievementModel.rewardClaimed[2] ? 'achievementBadges0002' : achievementModel.rewardClaimed[1] ? 'achievementBadges0001' : 'achievementBadges0000';\r\n            /* update icon */\r\n            this.icon.frameName = 'achievement' + this.achievementKey + '000' + (currentLevel > 0 ? '0' : '1');\r\n            /* update bar */\r\n            this.progressBarMask.x = this.progressBar.x - (1 - currentProgress) * this.progressBar.width;\r\n            /* update text */\r\n            if (currentLevel < 3) {\r\n                this.progressBarContainer.visible = true;\r\n                this.maxText.visible = false;\r\n                this.progressText.setText(`${displayedValue}/${displayTargetValue}`);\r\n            }\r\n            else {\r\n                this.progressBarContainer.visible = false;\r\n                this.maxText.visible = true;\r\n            }\r\n            /* show/hide claim button */\r\n            if (achievementModel.currentValue >= achievementModel.requiredValues[0] && !achievementModel.rewardClaimed[0]) {\r\n                this.buttonClaimReward.visible = true;\r\n                this.progressBarContainer.visible = false;\r\n                this.currentReward = achievementModel.rewards[0];\r\n                this.buttonClaimReward.updateView('+' + this.currentReward);\r\n            }\r\n            else if (achievementModel.currentValue >= achievementModel.requiredValues[1] && !achievementModel.rewardClaimed[1]) {\r\n                this.buttonClaimReward.visible = true;\r\n                this.progressBarContainer.visible = false;\r\n                this.currentReward = achievementModel.rewards[1];\r\n                this.buttonClaimReward.updateView('+' + this.currentReward);\r\n            }\r\n            else if (achievementModel.currentValue >= achievementModel.requiredValues[2] && !achievementModel.rewardClaimed[2]) {\r\n                this.buttonClaimReward.visible = true;\r\n                this.progressBarContainer.visible = false;\r\n                this.currentReward = achievementModel.rewards[2];\r\n                this.buttonClaimReward.updateView('+' + this.currentReward);\r\n            }\r\n        }\r\n        buildContent() {\r\n            this.icon = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'achievement' + this.achievementKey + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.progressBarContainer = this.add(this.game.make.group());\r\n            this.progressBarContainer.position.set(0, 85);\r\n            this.progressPad = this.progressBarContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'achievementProgressPad0000'));\r\n            this.progressPad.anchor.set(0.5);\r\n            this.progressBar = this.progressBarContainer.add(this.game.make.sprite(-this.progressPad.width / 2 + 5, -2, BlockPuzzle.Settings.GAME_ATLAS, 'achievementProgressBar0000'));\r\n            this.progressBar.anchor.set(0, 0.5);\r\n            this.progressBarMask = this.progressBarContainer.add(this.game.make.graphics(this.progressBar.x, this.progressBar.y - this.progressBar.height / 2));\r\n            this.progressBarMask.beginFill(0xFFFFFF, 0.5).drawRect(0, 0, this.progressBar.width, this.progressBar.height).endFill();\r\n            this.progressBar.mask = this.progressBarMask;\r\n            this.progressText = this.progressBarContainer.add(BlockPuzzle.TextUtils.getText('0/1000', 0, 1, 19, '#DAFFF4'));\r\n            this.maxText = this.add(this.game.make.sprite(0, 80, BlockPuzzle.Settings.GAME_ATLAS, 'achievementMax0000'));\r\n            this.maxText.anchor.set(0.5);\r\n            this.badges = this.add(this.game.make.sprite(68, 46, BlockPuzzle.Settings.GAME_ATLAS, 'achievementBadges0000'));\r\n            this.badges.anchor.set(0.5);\r\n            this.buttonClaimReward = this.add(new BlockPuzzle.ButtonClaimReward(this, '+89', 1, this.claimRewardClicked, this));\r\n            this.buttonClaimReward.position.set(3, 85);\r\n        }\r\n        claimRewardClicked() {\r\n            BlockPuzzle.StarsManager.instance.pickupStars(this.currentReward, true);\r\n            this.currentReward = 0;\r\n            const achievementModel = BlockPuzzle.AchievementsManager.instance.getAchievementModel(this.achievementKey);\r\n            const currentLevel = BlockPuzzle.AchievementsManager.getAchievementLevel(achievementModel);\r\n            if (achievementModel) {\r\n                if (achievementModel.currentValue >= achievementModel.requiredValues[0] && !achievementModel.rewardClaimed[0]) {\r\n                    achievementModel.rewardClaimed[0] = true;\r\n                    this.badges.scale.set(0);\r\n                    this.game.add.tween(this.badges.scale)\r\n                        .to({ x: 1, y: 1 }, 300, Phaser.Easing.Back.Out, true, 0);\r\n                }\r\n                else if (achievementModel.currentValue >= achievementModel.requiredValues[1] && !achievementModel.rewardClaimed[1]) {\r\n                    achievementModel.rewardClaimed[1] = true;\r\n                    this.badges.scale.set(0);\r\n                    this.game.add.tween(this.badges.scale)\r\n                        .to({ x: 1, y: 1 }, 300, Phaser.Easing.Back.Out, true, 0);\r\n                }\r\n                else if (achievementModel.currentValue >= achievementModel.requiredValues[2] && !achievementModel.rewardClaimed[2]) {\r\n                    achievementModel.rewardClaimed[2] = true;\r\n                    this.badges.scale.set(0);\r\n                    this.game.add.tween(this.badges.scale)\r\n                        .to({ x: 1, y: 1 }, 300, Phaser.Easing.Back.Out, true, 0);\r\n                }\r\n                BlockPuzzle.LocalStorageController.instance.save();\r\n            }\r\n            this.updateView();\r\n        }\r\n    }\r\n    BlockPuzzle.AchievementPanel = AchievementPanel;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ButtonClaimReward extends Phaser.Group {\r\n        constructor(panel, reward, initialScale, actionHandler, actionHandlerContext) {\r\n            super(panel.game);\r\n            this.achievementPanel = panel;\r\n            this.container = this.add(this.game.make.group());\r\n            /* backplate */\r\n            this.backplate = this.container.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'buttonClaim0000'));\r\n            this.backplate.anchor.setTo(0.5, 0.5);\r\n            this.backplate.inputEnabled = true;\r\n            this.backplate.events.onInputUp.add(actionHandler, actionHandlerContext);\r\n            this.backplate[\"overTween\"] = BlockPuzzle.App.instance.add.tween(this.container.scale).to({ x: 1.05, y: 1.05 }, 100);\r\n            this.backplate[\"outTween\"] = BlockPuzzle.App.instance.add.tween(this.container.scale).to({ x: 1, y: 1 }, 100);\r\n            this.backplate[\"downTween\"] = BlockPuzzle.App.instance.add.tween(this.container.scale).to({ x: 0.95, y: 0.95 }, 50).to({ x: 1, y: 1 }, 50);\r\n            this.backplate.events.onInputOver.add(BlockPuzzle.ButtonUtils.mouseOverHandler, this, 0);\r\n            this.backplate.events.onInputOut.add(BlockPuzzle.ButtonUtils.mouseOutHandler, this, 0);\r\n            this.backplate.events.onInputDown.add(BlockPuzzle.ButtonUtils.mouseDownHandler, this, 0);\r\n            this.backplate.events.onInputDown.add(() => BlockPuzzle.SoundController.instance.playRewardClaimedSound(), this);\r\n            /* price text */\r\n            this.rewardText = this.add(new BlockPuzzle.BitmapTextField(reward, BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.55, 0.5, 0.5, 1));\r\n            this.rewardText.position.set(-17, -3);\r\n        }\r\n        updateView(rewardText) {\r\n            this.rewardText.changeText(rewardText);\r\n            this.game.tweens.removeFrom(this.scale);\r\n            this.scale.set(1);\r\n            this.game.add.tween(this.scale)\r\n                .to({ x: 1.04, y: 1.04 }, 500, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n        }\r\n    }\r\n    BlockPuzzle.ButtonClaimReward = ButtonClaimReward;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ButtonAchievements extends Phaser.Group {\r\n        constructor(level) {\r\n            super(level.game, null);\r\n            this.level = level;\r\n            this.button = this.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonAchievements', 0, 0, 1, this.achievementsClicked, this));\r\n            this.exclamationMark = this.add(this.game.make.sprite(25, 22, BlockPuzzle.Settings.GAME_ATLAS));\r\n            this.exclamationMark.anchor.set(0.5);\r\n            this.exclamationMark.animations.add('twerking', Phaser.Animation.generateFrameNames('achievementsNotification', 0, 99, '', 4))\r\n                .play(60, true);\r\n            this.exclamationMark.visible = BlockPuzzle.AchievementsManager.instance.hasAvailableRewards();\r\n            this.achievementInformer = this.add(new BlockPuzzle.AchievementInformer(this.level));\r\n            BlockPuzzle.AchievementsManager.instance.onAchievementCompleted.add(this.handleAchievementCompleted, this);\r\n        }\r\n        destroy() {\r\n            BlockPuzzle.AchievementsManager.instance.onAchievementCompleted.remove(this.handleAchievementCompleted, this);\r\n            super.destroy();\r\n        }\r\n        handleAchievementCompleted(achievementModel) {\r\n            this.achievementInformer.show(achievementModel);\r\n            if (this.exclamationMark.visible == false) {\r\n                this.exclamationMark.visible = true;\r\n            }\r\n        }\r\n        achievementsClicked() {\r\n            if (this.achievementInformer.active) {\r\n                this.achievementInformer.hide();\r\n            }\r\n            this.exclamationMark.visible = false;\r\n            BlockPuzzle.WindowManager.instance.showAchievements();\r\n        }\r\n        resizePortrait() {\r\n            this.achievementInformer.resizePortrait();\r\n        }\r\n        resizeSquared() {\r\n            this.achievementInformer.resizeSquared();\r\n        }\r\n        resizeLandscape() {\r\n            this.achievementInformer.resizeLandscape();\r\n        }\r\n        setScale(value) {\r\n            this.button[\"setScale\"](value);\r\n        }\r\n    }\r\n    BlockPuzzle.ButtonAchievements = ButtonAchievements;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ButtonCloseWindow extends Phaser.Group {\r\n        constructor(parentWindow, actionHandler, actionHandlerContext) {\r\n            super(parentWindow.game);\r\n            this.parentWindow = parentWindow;\r\n            this.container = this.add(this.game.make.group());\r\n            this.button = this.container.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonClose', 0, 0, 1, actionHandler, actionHandlerContext));\r\n        }\r\n        resize(dx, dy) {\r\n            this.position.set(this.parentWindow.windowManager.windowBounds.right + dx, this.parentWindow.windowManager.windowBounds.top + dy);\r\n        }\r\n    }\r\n    BlockPuzzle.ButtonCloseWindow = ButtonCloseWindow;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ButtonGetStars extends Phaser.Group {\r\n        constructor() {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.isActive = false;\r\n            this.starsAmount = BlockPuzzle.Settings.GET_STARS_BUTTON_REWARD_STARS_AMOUNT;\r\n            this.button = this.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonGetStars', 0, 0, 1, this.getStarsClicked, this));\r\n            this.numStarsText = this.add(new BlockPuzzle.BitmapTextField('+' + this.starsAmount, BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.42, 0.5, 0.5, 1));\r\n            this.numStarsText.position.set(-20, 3);\r\n            this.visible = false;\r\n            this.isActive = false;\r\n        }\r\n        getStarsClicked() {\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                if (BlockPuzzle.APIUtils.instance.hasRewardedVideo()) {\r\n                    BlockPuzzle.Settings.GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP = +new Date().getTime();\r\n                    BlockPuzzle.APIUtils.instance.showRewardedVideo(() => this.giveReward());\r\n                }\r\n            }\r\n            else {\r\n                BlockPuzzle.Settings.GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP = +new Date().getTime();\r\n                this.giveReward();\r\n            }\r\n        }\r\n        giveReward() {\r\n            BlockPuzzle.StarsManager.instance.pickupStars(this.starsAmount);\r\n            this.starsAmount += BlockPuzzle.Settings.GET_STARS_BUTTON_REWARD_STARS_AMOUNT_STEP;\r\n            this.numStarsText.changeText('+' + this.starsAmount, true);\r\n            this.hide();\r\n        }\r\n        activate() {\r\n            this.isActive = true;\r\n            this.visible = true;\r\n            this.button.inputEnabled = true;\r\n        }\r\n        hide() {\r\n            this.isActive = false;\r\n            this.visible = false;\r\n        }\r\n        update() {\r\n            super.update();\r\n            if (!this.isActive && BlockPuzzle.Settings.GET_STARS_BUTTON_ENABLED && BlockPuzzle.Settings.ENABLE_API && +new Date().getTime() - BlockPuzzle.Settings.GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP > BlockPuzzle.Settings.GET_STARS_BUTTON_COOLDOWN * 1000) {\r\n                if (BlockPuzzle.APIUtils.instance.hasRewardedVideo()) {\r\n                    this.activate();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.ButtonGetStars = ButtonGetStars;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AbstractResultsCounter extends Phaser.Group {\r\n        constructor(results, iconFrameName) {\r\n            super(results.game, null);\r\n            this.results = results;\r\n            this.buildContent();\r\n            this.buildIcon(iconFrameName);\r\n        }\r\n        buildContent() {\r\n            this.padLeft = this.add(this.game.make.sprite(5, 0, BlockPuzzle.Settings.GAME_ATLAS, 'resultsScorePad0000'));\r\n            this.padLeft.anchor.set(0, 0.5);\r\n            this.padLeft.scale.x = -1;\r\n            this.padRight = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'resultsScorePad0000'));\r\n            this.padRight.anchor.set(0, 0.5);\r\n            this.textFieldLeft = this.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.75, 0.5, 0.5, 1));\r\n            this.textFieldLeft.position.set(-90, 0);\r\n            this.textFieldRight = this.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.75, 0.5, 0.5, 1));\r\n            this.textFieldRight.position.set(107, 0);\r\n        }\r\n        buildIcon(frameName) {\r\n            this.icon = this.add(this.game.make.sprite(10, 0, BlockPuzzle.Settings.GAME_ATLAS, frameName + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n        show(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix = '', rightValuePrefix = '', delay, textTweenDelay, tweenTextDuration) {\r\n            this.resetTweens();\r\n            this.tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration);\r\n            this.animateAppearing(delay);\r\n        }\r\n        tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration) {\r\n            this.textFieldLeft.tweenTextAdvanced(leftValuePrefix, leftValueInitial, leftValueTarget, tweenTextDuration, textTweenDelay, true);\r\n            this.textFieldRight.tweenTextAdvanced(rightValuePrefix, rightValueInitial, rightValueTarget, tweenTextDuration, textTweenDelay, true);\r\n        }\r\n        animateAppearing(delay) {\r\n            this.icon.scale.set(0.5);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({ x: 1, y: 1 }, 350, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.icon.alpha = 0;\r\n            this.game.add.tween(this.icon)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n            this.padLeft.scale.x = 0;\r\n            this.game.add.tween(this.padLeft.scale)\r\n                .to({ x: -1 }, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n            this.padRight.scale.x = 0;\r\n            this.game.add.tween(this.padRight.scale)\r\n                .to({ x: 1 }, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n            this.textFieldLeft.visible = false;\r\n            this.textFieldLeft.scale.set(0.5);\r\n            this.game.add.tween(this.textFieldLeft.scale)\r\n                .to({ x: 0.75, y: 0.75 }, 450, Phaser.Easing.Back.Out, true, delay + 250)\r\n                .onStart.add(() => this.textFieldLeft.visible = true);\r\n            this.textFieldRight.visible = false;\r\n            this.textFieldRight.scale.set(0.5);\r\n            this.game.add.tween(this.textFieldRight.scale)\r\n                .to({ x: 0.75, y: 0.75 }, 450, Phaser.Easing.Back.Out, true, delay + 330)\r\n                .onStart.add(() => this.textFieldRight.visible = true);\r\n            this.textFieldLeft.visible = false;\r\n            this.textFieldLeft.alpha = 0;\r\n            this.game.add.tween(this.textFieldLeft)\r\n                .to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true, delay + 250)\r\n                .onStart.add(() => this.textFieldLeft.visible = true);\r\n            this.textFieldRight.visible = false;\r\n            this.textFieldRight.alpha = 0;\r\n            this.game.add.tween(this.textFieldRight)\r\n                .to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true, delay + 330)\r\n                .onStart.add(() => this.textFieldRight.visible = true);\r\n        }\r\n        resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.game.tweens.removeFrom(this.padLeft.scale);\r\n            this.game.tweens.removeFrom(this.padRight.scale);\r\n            this.game.tweens.removeFrom(this.textFieldLeft);\r\n            this.game.tweens.removeFrom(this.textFieldLeft.scale);\r\n            this.game.tweens.removeFrom(this.textFieldRight);\r\n            this.game.tweens.removeFrom(this.textFieldRight.scale);\r\n            this.icon.scale.set(1);\r\n            this.icon.alpha = 1;\r\n            this.padLeft.scale.set(-1);\r\n            this.padRight.scale.set(1);\r\n            this.textFieldLeft.scale.set(0.75);\r\n            this.textFieldRight.scale.set(0.75);\r\n            this.textFieldLeft.visible = true;\r\n            this.textFieldRight.visible = true;\r\n        }\r\n    }\r\n    BlockPuzzle.AbstractResultsCounter = AbstractResultsCounter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AbstractUICounter extends Phaser.Group {\r\n        constructor(uiManager) {\r\n            super(uiManager.game, null);\r\n            this.uiManager = uiManager;\r\n            this.level = uiManager.level;\r\n            this.buildChildren();\r\n        }\r\n        tweenIcon(duration) {\r\n            if (duration < 400) {\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({ x: 1.075, y: 1.075 }, 100, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({ x: 1.0, y: 1.0 }, 240, Phaser.Easing.Sinusoidal.In, false)\r\n                    .start();\r\n            }\r\n            else {\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({ x: 1.13, y: 1.13 }, .25 * duration, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({ x: 1.15, y: 1.15 }, 0.1 * duration, Phaser.Easing.Sinusoidal.In, false)\r\n                    .to({ x: 1.0, y: 1.0 }, 0.65 * duration, Phaser.Easing.Sinusoidal.In, false)\r\n                    .start();\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.AbstractUICounter = AbstractUICounter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class DoubleStarsButton extends Phaser.Group {\r\n        constructor(results) {\r\n            super(results.game, null);\r\n            this.starsAmount = 0;\r\n            this.isActive = true;\r\n            this.results = results;\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.pad = this.add(this.game.make.sprite(10, 0, BlockPuzzle.Settings.GAME_ATLAS, 'resultsScorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(-0.8, 0.9);\r\n            this.textField = this.add(new BlockPuzzle.BitmapTextField('+12', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.7, 0.5, 0.5, 1));\r\n            this.textField.position.set(-82, 0);\r\n            this.buttonContainer = this.add(this.game.make.group());\r\n            this.buttonDoubleStars = this.buttonContainer.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonRewardedVideoSmall', 0, 0, 1, this.doubleStarsClicked, this));\r\n        }\r\n        doubleStarsClicked() {\r\n            if (this.isActive) {\r\n                BlockPuzzle.APIUtils.instance.showRewardedVideo(() => this.collapse());\r\n            }\r\n        }\r\n        show(delay, starsAmount) {\r\n            this.resetTweens();\r\n            this.scale.set(1.2);\r\n            this.isActive = true;\r\n            this.starsAmount = starsAmount;\r\n            this.textField.changeText('+' + starsAmount);\r\n            this.buttonContainer.scale.set(0.5);\r\n            this.game.add.tween(this.buttonContainer.scale)\r\n                .to({ x: 1.2, y: 1.2 }, 300, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.buttonContainer.alpha = 0;\r\n            this.game.add.tween(this.buttonContainer)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n            this.pad.scale.x = 0;\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({ x: -0.8 }, 250, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.textField.visible = false;\r\n            this.textField.scale.set(0.2);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({ x: 0.7, y: 0.7 }, 300, Phaser.Easing.Back.Out, true, delay + 200)\r\n                .onStart.add(() => this.textField.visible = true);\r\n        }\r\n        collapse() {\r\n            this.resetTweens();\r\n            this.isActive = false;\r\n            this.results.addBonusStars(this.starsAmount);\r\n            this.starsAmount = 0;\r\n            this.game.add.tween(this.textField)\r\n                .to({ alpha: 0 }, 120, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({ x: 0, y: 0 }, 120, Phaser.Easing.Back.In, true);\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({ x: 0 }, 200, Phaser.Easing.Sinusoidal.In, true, 0);\r\n            this.game.add.tween(this.buttonContainer.scale)\r\n                .to({ x: 0, y: 0 }, 200, Phaser.Easing.Back.In, true, 100)\r\n                .onComplete.add(() => this.buttonContainer.visible = false);\r\n        }\r\n        resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.textField);\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n            this.game.tweens.removeFrom(this.pad);\r\n            this.game.tweens.removeFrom(this.pad.scale);\r\n            this.game.tweens.removeFrom(this.buttonContainer, false);\r\n            this.game.tweens.removeFrom(this.buttonContainer.scale, false);\r\n            this.textField.alpha = 1;\r\n            this.textField.visible = true;\r\n            this.textField.scale.set(0.7);\r\n            this.pad.scale.set(-0.8, 0.9);\r\n            this.buttonContainer.scale.set(1);\r\n            this.buttonContainer.visible = true;\r\n        }\r\n    }\r\n    BlockPuzzle.DoubleStarsButton = DoubleStarsButton;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ScoreCounter extends BlockPuzzle.AbstractUICounter {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.lastScoreValue = 0;\r\n            this.lastHighscoreValue = BlockPuzzle.ScoreManager.instance.getMaxScores();\r\n        }\r\n        buildChildren() {\r\n            this.pad = this.add(this.game.make.sprite(12, 0, BlockPuzzle.Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n            this.icon = this.add(this.game.make.sprite(5, 0, BlockPuzzle.Settings.GAME_ATLAS, 'uiIconCup0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.icon.visible = false;\r\n            this.textField = this.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(100, 0);\r\n            this.highscoreGroup = this.add(this.game.make.group());\r\n            this.highscoreGroup.position.set(106, 37);\r\n            this.lastHighscoreValue = BlockPuzzle.ScoreManager.instance.getMaxScores();\r\n            this.highscoreIcon = this.highscoreGroup.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'topScoreCrown0000'));\r\n            this.highscoreIcon.anchor.set(1, 0.5);\r\n            this.highscoreText = this.highscoreGroup.add(new BlockPuzzle.BitmapTextField('' + this.lastHighscoreValue, BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.42, 0, 0.5, 1));\r\n            this.highscoreText.position.set(0, 1);\r\n            BlockPuzzle.ScoreManager.instance.onScoreChanges.add(this.dispatchScoreChanged, this);\r\n        }\r\n        dispatchScoreChanged(scores) {\r\n            if (this.lastScoreValue != scores) {\r\n                const duration = Phaser.Math.clamp(50 * Math.pow(Math.abs(scores - this.lastScoreValue), 0.5), 250, 1000);\r\n                this.textField.tweenText(this.lastScoreValue, scores, duration, 0);\r\n                this.lastScoreValue = scores;\r\n                this.tweenIcon(duration);\r\n                const currentHighscores = Math.max(BlockPuzzle.ScoreManager.instance.getMaxScores(), scores);\r\n                if (this.lastHighscoreValue < currentHighscores) {\r\n                    this.highscoreText.tweenText(this.lastHighscoreValue, currentHighscores, duration, 0);\r\n                    this.lastHighscoreValue = currentHighscores;\r\n                }\r\n            }\r\n        }\r\n        update() {\r\n            if (this.highscoreGroup.visible) {\r\n                let textFieldWidth = this.highscoreText.getLocalBounds().width * this.highscoreText.scale.x;\r\n                this.highscoreIcon.x = -textFieldWidth / 2 - 2;\r\n                this.highscoreText.x = -textFieldWidth / 2;\r\n            }\r\n        }\r\n        destroy() {\r\n            BlockPuzzle.ScoreManager.instance.onScoreChanges.remove(this.dispatchScoreChanged, this);\r\n            super.destroy();\r\n        }\r\n    }\r\n    BlockPuzzle.ScoreCounter = ScoreCounter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ShopStarsCounter extends Phaser.Group {\r\n        constructor(windowShop) {\r\n            super(windowShop.game, null);\r\n            this.windowShop = windowShop;\r\n            this.buildChildren();\r\n        }\r\n        buildChildren() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n            this.contentContainer.scale.set(1.25);\r\n            this.icon = this.contentContainer.add(this.game.make.sprite(1, 0, BlockPuzzle.Settings.GAME_ATLAS, 'uiIconStar0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.icon.scale.set(0.9);\r\n            this.textField = this.contentContainer.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.67, 0, 0.5, 1));\r\n            this.textField.position.set(40, 3);\r\n            this.errorSmile = this.add(this.game.make.sprite(135, 5, BlockPuzzle.Settings.GAME_ATLAS, 'errorSmile0000'));\r\n            this.errorSmile.anchor.set(0.5);\r\n            this.errorSmile.alpha = 0;\r\n            this.updateStarsAmount(BlockPuzzle.StarsManager.instance.getStarsAmount());\r\n            BlockPuzzle.StarsManager.instance.onStarsAmountChanged.add(this.updateStarsAmount, this);\r\n        }\r\n        dispatchStarAdded(starsAmount) {\r\n            this.updateStarsAmount(starsAmount);\r\n        }\r\n        setStarsAmount(value) {\r\n            this.textField.changeText('' + value, true);\r\n        }\r\n        updateStarsAmount(starsAmount) {\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n            this.textField.changeText('' + starsAmount);\r\n            this.textField.scale.set(0);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({ x: 0.6, y: 0.6 }, 190, Phaser.Easing.Back.Out, true);\r\n        }\r\n        displayError() {\r\n            this.game.tweens.removeFrom(this.errorSmile);\r\n            this.game.tweens.removeFrom(this.errorSmile.scale);\r\n            this.errorSmile.alpha = 0;\r\n            this.errorSmile.x = this.textField.x + this.textField.getLocalBounds().width * this.textField.scale.x + 80;\r\n            this.errorSmile.y = 20;\r\n            this.errorSmile.scale.set(0);\r\n            this.game.add.tween(this.errorSmile)\r\n                .to({ alpha: 0.9 }, 120, Phaser.Easing.Sinusoidal.In, false)\r\n                .to({ alpha: 0 }, 700, Phaser.Easing.Quintic.In, false)\r\n                .start();\r\n            this.game.add.tween(this.errorSmile)\r\n                .to({ y: 2 }, 180, Phaser.Easing.Sinusoidal.In, false)\r\n                .to({ y: -30 }, 700, Phaser.Easing.Linear.None, false)\r\n                .start();\r\n            this.game.add.tween(this.errorSmile.scale)\r\n                .to({ x: 1.5, y: 1.5 }, 240, Phaser.Easing.Elastic.Out, false)\r\n                .to({ x: 1.65, y: 1.65 }, 550, Phaser.Easing.Quadratic.In, false)\r\n                .start();\r\n        }\r\n    }\r\n    BlockPuzzle.ShopStarsCounter = ShopStarsCounter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class StarsCounter extends BlockPuzzle.AbstractUICounter {\r\n        buildChildren() {\r\n            this.pad = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n            this.icon = this.add(this.game.make.sprite(5, 0, BlockPuzzle.Settings.GAME_ATLAS, 'uiIconStar0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.textField = this.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(95, 0);\r\n            this.buttonGetStars = this.add(new BlockPuzzle.ButtonGetStars());\r\n            this.buttonGetStars.position.set(124, 44);\r\n            this.updateStarsAmount(BlockPuzzle.StarsManager.instance.getStarsAmount());\r\n            BlockPuzzle.StarsManager.instance.onStarAdded.add(this.dispatchStarAdded, this);\r\n            BlockPuzzle.StarsManager.instance.onStarsAmountChanged.add(this.updateStarsAmount, this);\r\n        }\r\n        playStarIncreasingTween() {\r\n            BlockPuzzle.SoundController.instance.playStarReceivedSound();\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({ x: 1.3 / 2, y: 1.3 / 2 }, 140, Phaser.Easing.Sinusoidal.Out, true, 0, 0, true);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({ x: 1.45, y: 1.45 }, 80, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({ x: 0.87, y: 0.87 }, 200, Phaser.Easing.Sinusoidal.In, false)\r\n                .to({ x: 1, y: 1 }, 60, Phaser.Easing.Sinusoidal.Out, false)\r\n                .start();\r\n        }\r\n        dispatchStarAdded(starsAmount) {\r\n            this.updateStarsAmount(starsAmount);\r\n            this.playStarIncreasingTween();\r\n        }\r\n        updateStarsAmount(starsAmount) {\r\n            this.textField.changeText('' + starsAmount);\r\n        }\r\n        destroy() {\r\n            BlockPuzzle.StarsManager.instance.onStarAdded.remove(this.dispatchStarAdded, this);\r\n            BlockPuzzle.StarsManager.instance.onStarsAmountChanged.remove(this.updateStarsAmount, this);\r\n            super.destroy();\r\n        }\r\n    }\r\n    BlockPuzzle.StarsCounter = StarsCounter;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class MultiplierBar extends Phaser.Group {\r\n        constructor(uiManager) {\r\n            super(uiManager.game);\r\n            this.padHeight = 70;\r\n            this.storedMultiplierValue = 1;\r\n            this.storedProgressValue = 0;\r\n            this.uiManager = uiManager;\r\n            this.level = uiManager.level;\r\n            this.buildChildren();\r\n            BlockPuzzle.ScoreManager.instance.onMultiplierChanges.add(this.handleMultiplierChange, this);\r\n        }\r\n        buildChildren() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n            this.padGrayscale = this.contentContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.ANIMATION_ATLAS, 'multiplierPadGrey0000'));\r\n            this.padGrayscale.anchor.set(0.5);\r\n            this.padGrayscale.scale.set(0.75);\r\n            this.textFieldGrayscale = this.contentContainer.add(new BlockPuzzle.BitmapTextField('x' + this.storedMultiplierValue, BlockPuzzle.Settings.GAME_ATLAS, 'MultiplierGrey', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGrayscale.position.set(0, 0);\r\n            this.padGold = this.contentContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.ANIMATION_ATLAS, 'multiplierPad0000'));\r\n            this.padGold.anchor.set(0.5);\r\n            this.padGold.scale.set(0.75);\r\n            this.padWhite = this.contentContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.ANIMATION_ATLAS, 'multiplierPadWhite0000'));\r\n            this.padWhite.anchor.set(0.5);\r\n            this.padWhite.alpha = 0;\r\n            this.padWhite.scale.set(0.75);\r\n            this.textFieldGold = this.contentContainer.add(new BlockPuzzle.BitmapTextField('x' + this.storedMultiplierValue, BlockPuzzle.Settings.GAME_ATLAS, 'Multiplier', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGold.position.set(0, 0);\r\n            this.progressMask = this.contentContainer.add(this.game.make.graphics(0, this.padHeight / 2));\r\n            this.progressMask.beginFill(0, 0.5).drawRect(-this.padGold.width / 2, 0, this.padGold.width, this.padGold.height).endFill();\r\n            this.padGold.mask = this.progressMask;\r\n            this.textFieldGold.mask = this.progressMask;\r\n        }\r\n        handleMultiplierChange(multiplier, progress) {\r\n            if (this.storedMultiplierValue == multiplier) {\r\n                this.game.add.tween(this.progressMask)\r\n                    .to({ y: -1 + (0.5 - progress) * this.padHeight }, 500, Phaser.Easing.Sinusoidal.Out, true);\r\n                this.game.tweens.removeFrom(this.padWhite);\r\n                this.game.add.tween(this.padWhite)\r\n                    .to({ alpha: 0.5 }, 250, Phaser.Easing.Linear.None, false)\r\n                    .to({ alpha: 0.0 }, 250, Phaser.Easing.Linear.None, false)\r\n                    .start();\r\n            }\r\n            else if (multiplier > this.storedMultiplierValue) {\r\n                BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.TOTAL_LEVEL_UPS, multiplier - this.storedMultiplierValue);\r\n                BlockPuzzle.SoundController.instance.playlevelUpSound();\r\n                const totalDuration = 500;\r\n                const fillingDuration = Phaser.Math.clamp(1 - this.storedProgressValue, 0.1, 0.8) * totalDuration;\r\n                this.game.add.tween(this.progressMask)\r\n                    .to({ y: -1 + (0.5 - 1) * this.padHeight }, fillingDuration, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({ y: -1 + (0.5) * this.padHeight }, 1, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({ y: -1 + (0.5 - progress) * this.padHeight }, totalDuration - fillingDuration + 1, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .start();\r\n                this.game.time.events.add(fillingDuration, () => this.updateMultiplierTexts(multiplier));\r\n                this.game.tweens.removeFrom(this.padWhite);\r\n                this.game.add.tween(this.padWhite)\r\n                    .to({ alpha: 0.6 }, fillingDuration, Phaser.Easing.Linear.None, false)\r\n                    .to({ alpha: 0 }, totalDuration - fillingDuration, Phaser.Easing.Linear.None, false)\r\n                    .start();\r\n            }\r\n            this.storedMultiplierValue = multiplier;\r\n            this.storedProgressValue = progress;\r\n        }\r\n        updateMultiplierTexts(multiplier) {\r\n            this.textFieldGrayscale.changeText('x' + multiplier);\r\n            this.textFieldGold.changeText('x' + multiplier);\r\n        }\r\n    }\r\n    BlockPuzzle.MultiplierBar = MultiplierBar;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ResultsMultiplierBar extends Phaser.Group {\r\n        constructor(results) {\r\n            super(results.game);\r\n            this.padHeight = 70;\r\n            this.storedMultiplierValue = 1;\r\n            this.storedProgressValue = 0;\r\n            this.results = results;\r\n            this.buildChildren();\r\n        }\r\n        buildChildren() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n            this.padGrayscale = this.contentContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.ANIMATION_ATLAS, 'multiplierPadGrey0000'));\r\n            this.padGrayscale.anchor.set(0.5);\r\n            this.padGrayscale.scale.set(0.75);\r\n            this.textFieldGrayscale = this.contentContainer.add(new BlockPuzzle.BitmapTextField('x' + this.storedMultiplierValue, BlockPuzzle.Settings.GAME_ATLAS, 'MultiplierGrey', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGrayscale.position.set(0, 0);\r\n            this.padGold = this.contentContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.ANIMATION_ATLAS, 'multiplierPad0000'));\r\n            this.padGold.anchor.set(0.5);\r\n            this.padGold.scale.set(0.75);\r\n            this.textFieldGold = this.contentContainer.add(new BlockPuzzle.BitmapTextField('x' + this.storedMultiplierValue, BlockPuzzle.Settings.GAME_ATLAS, 'Multiplier', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGold.position.set(0, 0);\r\n            this.progressMask = this.contentContainer.add(this.game.make.graphics(0, this.padHeight / 2));\r\n            this.progressMask.beginFill(0, 0.5).drawRect(-this.padGold.width / 2, 0, this.padGold.width, this.padGold.height).endFill();\r\n            this.padGold.mask = this.progressMask;\r\n            this.textFieldGold.mask = this.progressMask;\r\n        }\r\n        setValue(multiplier, progress) {\r\n            this.updateMultiplierTexts(multiplier);\r\n            this.game.add.tween(this.progressMask)\r\n                .to({ y: -1 + (0.5 - progress) * this.padHeight }, 800, Phaser.Easing.Sinusoidal.Out, true, 650);\r\n            this.textFieldGrayscale.tweenTextAdvanced('x', 1, multiplier, 800, 650, false);\r\n            this.textFieldGold.tweenTextAdvanced('x', 1, multiplier, 800, 650, false);\r\n            this.storedMultiplierValue = multiplier;\r\n            this.storedProgressValue = progress;\r\n        }\r\n        updateMultiplierTexts(multiplier) {\r\n            this.textFieldGrayscale.changeText('x' + multiplier);\r\n            this.textFieldGold.changeText('x' + multiplier);\r\n        }\r\n    }\r\n    BlockPuzzle.ResultsMultiplierBar = ResultsMultiplierBar;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AbstractPowerup extends Phaser.Group {\r\n        constructor(powerupContainer, powerupType) {\r\n            super(powerupContainer.game, null);\r\n            this.dragging = false;\r\n            this.available = false;\r\n            this.countdownActive = false;\r\n            this.startAngle = 270;\r\n            this.endAngle = -90 - 0.000001;\r\n            this.currentStep = { value: 0 };\r\n            this.iconDelta = { x: 0, y: 0 };\r\n            this.powerupContainer = powerupContainer;\r\n            this.level = powerupContainer.level;\r\n            this.powerupType = powerupType;\r\n            this.available = BlockPuzzle.PowerupManager.instance.isBought(this.powerupType);\r\n            this.buildContent();\r\n            this.addListeners();\r\n        }\r\n        buildContent() {\r\n            this.countdownBar = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'itemPad0001'));\r\n            this.countdownBar.anchor.set(0.5);\r\n            this.countdownBar.alpha = 0;\r\n            this.countdownMask = this.add(this.game.make.graphics(-1, -3));\r\n            this.countdownMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 60, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill();\r\n            this.countdownBar.mask = this.countdownMask;\r\n            this.pad = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'itemPad0000'));\r\n            this.pad.anchor.set(0.5);\r\n            this.icon = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'icon' + this.powerupType + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.mark = this.add(this.game.make.sprite(28, -26, BlockPuzzle.Settings.GAME_ATLAS, this.isAvailable() ? 'okaySign0000' : 'plusSign0000'));\r\n            this.mark.anchor.set(0.5);\r\n            this.tutorialHand = this.add(this.game.make.sprite(-4, 0, BlockPuzzle.Settings.GAME_ATLAS, 'tutorialHand0000'));\r\n            this.tutorialHand.anchor.set(0, 0);\r\n            this.tutorialHand.scale.set(0.5);\r\n            this.tutorialHand.angle = -24;\r\n            this.tutorialHand.visible = false;\r\n            this.animateAppearing();\r\n            if (BlockPuzzle.PowerupManager.instance.isBought(this.powerupType)) {\r\n                this.activate();\r\n            }\r\n        }\r\n        addListeners() {\r\n            BlockPuzzle.PowerupManager.instance.onPowerupBought.add(this.handlePowerupBought, this);\r\n            this.level.eventManager.onPowerupApplied.add(this.handlePowerupApplied, this, 999);\r\n            this.pad.inputEnabled = true;\r\n            this.pad.input.pixelPerfectClick = true;\r\n            this.pad.input.pixelPerfectAlpha = 1;\r\n            this.pad.events.onInputDown.add(this.handleInputDown, this);\r\n            this.pad.events.onInputUp.add(this.handleInputUp, this);\r\n        }\r\n        animateAppearing() {\r\n            this.visible = true;\r\n            this.icon.scale.set(1);\r\n            this.icon.position.set(0, 0);\r\n            this.icon.visible = true;\r\n            this.scale.set(0);\r\n            this.game.add.tween(this.scale)\r\n                .to({ x: 1, y: 1 }, 240, Phaser.Easing.Circular.Out, true, 0);\r\n            this.game.tweens.removeFrom(this, false);\r\n            this.alpha = 0;\r\n            this.y = 35;\r\n            this.game.add.tween(this)\r\n                .to({ alpha: 1, y: 0 }, 240, Phaser.Easing.Linear.None, true);\r\n        }\r\n        handleInputDown(sprite, pointer) {\r\n            if (!this.isAvailable()) {\r\n                this.displayShop();\r\n                return;\r\n            }\r\n            this.dragging = true;\r\n            if (this.parent) {\r\n                this.parent.setChildIndex(this, this.parent.children.length - 1);\r\n            }\r\n            this.game.tweens.removeFrom(this.iconDelta);\r\n            this.iconDelta.x = 0;\r\n            this.iconDelta.y = 0;\r\n            this.game.add.tween(this.iconDelta)\r\n                .to(this.level.serviceManager.layoutService.getPowerupDraggingDelta(), 80, Phaser.Easing.Linear.None, true);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.icon.scale.set(1);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({ x: 1.5, y: 1.5 }, 80, Phaser.Easing.Linear.None, true);\r\n            this.game.tweens.removeFrom(this.mark.scale);\r\n            this.game.add.tween(this.mark.scale)\r\n                .to({ x: 0, y: 0 }, 60, Phaser.Easing.Linear.None, true);\r\n            this.game.tweens.removeFrom(this.mark);\r\n            this.game.add.tween(this.mark)\r\n                .to({ alpha: 0 }, 60, Phaser.Easing.Linear.None, true);\r\n            this.powerupContainer.pauseCountdowns();\r\n        }\r\n        handleInputUp(sprite, pointer) {\r\n            if (!this.isAvailable()) {\r\n                return;\r\n            }\r\n            const currentCell = this.getCurrentCell();\r\n            if (this.canBeApplied(currentCell)) {\r\n                this.applyPowerup(currentCell);\r\n            }\r\n            else {\r\n                this.game.tweens.removeFrom(this.icon.scale);\r\n                this.icon.scale.set(1);\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({ x: 1, y: 1 }, 100, Phaser.Easing.Linear.None, true);\r\n                this.game.tweens.removeFrom(this.icon);\r\n                this.game.add.tween(this.icon)\r\n                    .to({ x: 0, y: 0 }, 100, Phaser.Easing.Linear.None, true);\r\n            }\r\n            this.dragging = false;\r\n            this.level.boardManager.getBoard().dispatchPowerupIsBeingDragged([]);\r\n            this.game.tweens.removeFrom(this.mark.scale);\r\n            this.game.add.tween(this.mark.scale)\r\n                .to({ x: 1, y: 1 }, 60, Phaser.Easing.Linear.None, true);\r\n            this.game.tweens.removeFrom(this.mark);\r\n            this.game.add.tween(this.mark)\r\n                .to({ alpha: 1 }, 60, Phaser.Easing.Linear.None, true);\r\n            this.powerupContainer.resumeCountdowns();\r\n        }\r\n        update() {\r\n            super.update();\r\n            if (this.countdownActive) {\r\n                if (!BlockPuzzle.WindowManager.instance.hasOpenedWindows() && !this.powerupContainer.hasDraggingPowerups()) {\r\n                    this.currentStep.value += this.game.time.elapsedMS / BlockPuzzle.Settings.POWERUP_USAGE_COUNTDOWN_WHEN_NO_MOVES_LEFT;\r\n                    if (this.currentStep.value > 1) {\r\n                        this.currentStep.value = 0;\r\n                        this.countdownFinished();\r\n                    }\r\n                }\r\n                this.countdownMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 70, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill();\r\n            }\r\n            if (this.level.gameStateManager.isGameActive() && this.dragging) {\r\n                const { x, y } = this.toLocal(this.game.input.activePointer.position, this.game.world);\r\n                this.icon.position.set(x + this.iconDelta.x, y + this.iconDelta.y);\r\n                this.level.boardManager.getBoard().dispatchPowerupIsBeingDragged(this.getTargetCells(this.getCurrentCell()));\r\n            }\r\n            else {\r\n                this.updateView();\r\n            }\r\n        }\r\n        pauseCountdown() {\r\n            if (this.countdownActive) {\r\n                this.game.add.tween(this.tutorialHand)\r\n                    .to({ alpha: 0 }, 70, Phaser.Easing.Linear.None, true);\r\n                this.game.add.tween(this.countdownBar)\r\n                    .to({ alpha: 0 }, 80, Phaser.Easing.Linear.None, true);\r\n            }\r\n        }\r\n        resumeCountdown() {\r\n            if (this.countdownActive) {\r\n                this.game.add.tween(this.tutorialHand)\r\n                    .to({ alpha: 1 }, 70, Phaser.Easing.Linear.None, true);\r\n                this.game.add.tween(this.countdownBar)\r\n                    .to({ alpha: 1 }, 70, Phaser.Easing.Linear.None, true);\r\n            }\r\n        }\r\n        isAvailable() {\r\n            return this.available;\r\n        }\r\n        mayBeBought() {\r\n            return (BlockPuzzle.PowerupManager.instance.getPrice(this.powerupType) <= BlockPuzzle.StarsManager.instance.getStarsAmount());\r\n        }\r\n        updateView() {\r\n            if (!BlockPuzzle.PowerupManager.instance.isBought(this.powerupType)) {\r\n                this.icon.frameName = 'icon' + this.powerupType + '0000';\r\n                this.mark.visible = true;\r\n                this.mark.frameName = 'plusSign0000';\r\n            }\r\n            else {\r\n                this.mark.visible = true;\r\n                this.mark.frameName = 'okaySign0000';\r\n            }\r\n        }\r\n        activate() {\r\n            this.available = true;\r\n            this.icon.scale.set(1);\r\n            this.icon.position.set(0, 0);\r\n            this.icon.visible = true;\r\n            this.mark.frameName = 'okaySign0000';\r\n        }\r\n        deactivate() {\r\n            if (this.isAvailable()) {\r\n                this.available = false;\r\n                this.game.tweens.removeFrom(this.icon.scale);\r\n                this.icon.scale.set(0);\r\n                this.icon.position.set(0, 0);\r\n                this.mark.frameName = 'plusSign0000';\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({ x: 1, y: 1 }, 180, Phaser.Easing.Sinusoidal.Out, true);\r\n            }\r\n        }\r\n        startCountdown() {\r\n            if (this.isAvailable()) {\r\n                this.resetCountdown();\r\n                this.showTutorialHand();\r\n                this.countdownBar.visible = true;\r\n                this.countdownBar.alpha = 1;\r\n                this.countdownActive = true;\r\n            }\r\n        }\r\n        countdownFinished() {\r\n            this.resetCountdown();\r\n            this.level.eventManager.onPowerupUsageTimerExceeded.dispatch();\r\n            this.hideTutorialHand();\r\n        }\r\n        hideTutorialHand() {\r\n            this.game.tweens.removeFrom(this.tutorialHand);\r\n            this.game.add.tween(this.tutorialHand)\r\n                .to({ alpha: 0 }, 250, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(() => this.tutorialHand.visible = false);\r\n        }\r\n        showTutorialHand() {\r\n            this.game.tweens.removeFrom(this.tutorialHand);\r\n            this.tutorialHand.visible = true;\r\n            this.game.add.tween(this.tutorialHand)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.tutorialHand)\r\n                .to({ x: '-6', y: '-6' }, 300, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n        }\r\n        handlePowerupApplied() {\r\n            this.resetCountdown();\r\n            this.hideTutorialHand();\r\n        }\r\n        resetCountdown() {\r\n            this.game.tweens.removeFrom(this.currentStep);\r\n            this.game.tweens.removeFrom(this.countdownBar);\r\n            this.currentStep.value = 0;\r\n            this.countdownActive = false;\r\n            this.countdownBar.visible = false;\r\n            this.countdownBar.alpha = 1;\r\n            this.countdownMask.clear();\r\n        }\r\n        displayShop() {\r\n            BlockPuzzle.WindowManager.instance.showShop(this.powerupType);\r\n        }\r\n        getCurrentCell() {\r\n            const boardLocalPosition = this.level.boardManager.getBoard().cellsContainer.toLocal(this.icon.position, this);\r\n            return this.level.boardManager.getBoard().getCellUnderPoint(boardLocalPosition);\r\n        }\r\n        handlePowerupBought(powerupType) {\r\n            if (powerupType === this.powerupType && !this.isAvailable()) {\r\n                this.activate();\r\n                this.powerupContainer.updatePowerups();\r\n            }\r\n        }\r\n        destroy() {\r\n            BlockPuzzle.PowerupManager.instance.onPowerupBought.remove(this.handlePowerupBought, this);\r\n            super.destroy();\r\n        }\r\n    }\r\n    BlockPuzzle.AbstractPowerup = AbstractPowerup;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BombPowerup extends BlockPuzzle.AbstractPowerup {\r\n        constructor(powerupContainer) {\r\n            super(powerupContainer, BlockPuzzle.PowerupType.BOMB);\r\n        }\r\n        getTargetCells(mainCell) {\r\n            if (mainCell) {\r\n                return this.level.boardManager.getBoard().getCells().filter(cell => Math.abs(cell.posX - mainCell.posX) <= 1 && Math.abs(cell.posY - mainCell.posY) <= 1);\r\n            }\r\n            return [];\r\n        }\r\n        canBeApplied(cell) {\r\n            return cell && this.getTargetCells(cell).some(targetCell => targetCell.hasBlock());\r\n        }\r\n        applyPowerup(currentCell) {\r\n            BlockPuzzle.PowerupManager.instance.usePowerup(this.powerupType);\r\n            BlockPuzzle.AchievementsManager.instance.addValue(BlockPuzzle.AchievementType.BOMB_EXPLOSIONS, 1);\r\n            this.getTargetCells(currentCell).forEach(cell => cell.destroyBlock(0));\r\n            this.level.boardManager.getBoard().effectsContainer.add(new BlockPuzzle.ExplosionEffect(currentCell.x, currentCell.y));\r\n            this.level.figureManager.updateFiguresApplicability();\r\n            this.deactivate();\r\n            this.level.eventManager.onPowerupApplied.dispatch(this.powerupType);\r\n        }\r\n    }\r\n    BlockPuzzle.BombPowerup = BombPowerup;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class LightningPowerup extends BlockPuzzle.AbstractPowerup {\r\n        constructor(powerupContainer) {\r\n            super(powerupContainer, BlockPuzzle.PowerupType.LIGHTNING);\r\n        }\r\n        getTargetCells(mainCell) {\r\n            if (mainCell) {\r\n                return this.level.boardManager.getBoard().getCells().filter(cell => mainCell.hasBlock() && cell.hasBlock() && cell.getBlock().color == mainCell.getBlock().color);\r\n            }\r\n            return [];\r\n        }\r\n        canBeApplied(cell) {\r\n            return cell && cell.hasBlock();\r\n        }\r\n        applyPowerup(currentCell) {\r\n            BlockPuzzle.PowerupManager.instance.usePowerup(this.powerupType);\r\n            const targetCells = Phaser.ArrayUtils.shuffle(this.getTargetCells(currentCell));\r\n            if (targetCells.length == 1) {\r\n                this.level.boardManager.getBoard().effectsContainer.add(new BlockPuzzle.LightningEffect(currentCell, currentCell).delayedStart(0));\r\n                this.game.time.events.add(50, () => this.level.figureManager.updateFiguresApplicability());\r\n            }\r\n            else {\r\n                let delay = 0;\r\n                let currentPortion = [currentCell];\r\n                while (currentPortion) {\r\n                    for (let cell of currentPortion) {\r\n                        let nextPortion = this.getNextPortionOfCells(targetCells);\r\n                        if (nextPortion) {\r\n                            for (let nextCell of nextPortion) {\r\n                                this.level.boardManager.getBoard().effectsContainer.add(new BlockPuzzle.LightningEffect(cell, nextCell).delayedStart(delay));\r\n                            }\r\n                            delay += BlockPuzzle.LightningEffect.TOTAL_FRAMES / BlockPuzzle.LightningEffect.FPS * 1000 + BlockPuzzle.Settings.LIGHTING_DELAY_BETWEEN_STRIKES;\r\n                        }\r\n                        currentPortion = nextPortion;\r\n                    }\r\n                }\r\n                this.game.time.events.add(delay + 50, () => {\r\n                    this.level.figureManager.updateFiguresApplicability();\r\n                    this.level.eventManager.onPowerupApplied.dispatch(this.powerupType);\r\n                });\r\n            }\r\n            this.deactivate();\r\n        }\r\n        getNextPortionOfCells(cells) {\r\n            if (cells.length == 0) {\r\n                return null;\r\n            }\r\n            if (cells.length < BlockPuzzle.Settings.LIGHTING_MIN_TARGETS) {\r\n                return cells.splice(0, cells.length);\r\n            }\r\n            let cellsCount = BlockPuzzle.Settings.LIGHTING_MIN_TARGETS + Math.floor(Math.random() * (BlockPuzzle.Settings.LIGHTING_MAX_TARGETS + 1 - BlockPuzzle.Settings.LIGHTING_MIN_TARGETS));\r\n            return cells.splice(0, cellsCount > cells.length ? cells.length : cellsCount);\r\n        }\r\n    }\r\n    BlockPuzzle.LightningPowerup = LightningPowerup;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class PowerupContainer extends Phaser.Group {\r\n        constructor(uiManager) {\r\n            super(uiManager.game, null);\r\n            this.usedPowerups = [];\r\n            this.uiManager = uiManager;\r\n            this.level = uiManager.level;\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.lightningPowerup = this.add(new BlockPuzzle.LightningPowerup(this));\r\n            this.lightningPowerup.position.set(0, 45);\r\n            this.bombPowerup = this.add(new BlockPuzzle.BombPowerup(this));\r\n            this.bombPowerup.position.set(0, -45);\r\n            this.updatePowerups();\r\n            this.level.eventManager.onPowerupApplied.add(this.handlePowerupApplied, this);\r\n        }\r\n        updatePowerups() {\r\n            this.game.time.events.add(20, () => this.resize());\r\n        }\r\n        hidePowerups() {\r\n            this.game.add.tween(this.bombPowerup)\r\n                .to({ y: '+50', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.Out, true, 0)\r\n                .onComplete.add(() => this.bombPowerup.visible = false);\r\n            this.game.add.tween(this.lightningPowerup)\r\n                .to({ y: '+50', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.Out, true, 50)\r\n                .onComplete.add(() => this.lightningPowerup.visible = false);\r\n        }\r\n        startCountdown() {\r\n            this.bombPowerup.startCountdown();\r\n            this.lightningPowerup.startCountdown();\r\n        }\r\n        pauseCountdowns() {\r\n            this.bombPowerup.pauseCountdown();\r\n            this.lightningPowerup.pauseCountdown();\r\n        }\r\n        resumeCountdowns() {\r\n            this.bombPowerup.resumeCountdown();\r\n            this.lightningPowerup.resumeCountdown();\r\n        }\r\n        hasDraggingPowerups() {\r\n            return this.lightningPowerup.dragging || this.bombPowerup.dragging;\r\n        }\r\n        resize() {\r\n            if (BlockPuzzle.CustomScaleManager.isPortrait()) {\r\n                this.resizePortrait();\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isSquared()) {\r\n                this.resizeSquared();\r\n            }\r\n            else if (BlockPuzzle.CustomScaleManager.isLandscape()) {\r\n                this.resizeLandscape();\r\n            }\r\n        }\r\n        resizeLandscape() {\r\n            const powerupContainerBounds = this.level.serviceManager.layoutService.getAvailablePowerupsContainerBounds();\r\n            this.position.set(powerupContainerBounds.x, powerupContainerBounds.y);\r\n            this.scale.set(Math.max(Math.min(powerupContainerBounds.width * 0.6 / 200, 1.4), 1));\r\n            this.bombPowerup.position.set(-48, 0);\r\n            this.lightningPowerup.position.set(48, 0);\r\n        }\r\n        resizePortrait() {\r\n            const powerupContainerBounds = this.level.serviceManager.layoutService.getAvailablePowerupsContainerBounds();\r\n            this.scale.set(Math.max(1, Math.min(powerupContainerBounds.height / 90, 1.35)));\r\n            this.position.set(powerupContainerBounds.x, Math.min(powerupContainerBounds.y, powerupContainerBounds.y + powerupContainerBounds.height / 2 - 48 * this.scale.y));\r\n            this.bombPowerup.position.set(-47, 0);\r\n            this.lightningPowerup.position.set(47, 0);\r\n        }\r\n        resizeSquared() {\r\n            const powerupContainerBounds = this.level.serviceManager.layoutService.getAvailablePowerupsContainerBounds();\r\n            this.position.set(powerupContainerBounds.x, powerupContainerBounds.y);\r\n            this.scale.set(1 / (Math.pow(BlockPuzzle.CustomScaleManager.UPSCALE_FACTOR, 0.5)));\r\n            this.bombPowerup.position.set(-48, 0);\r\n            this.lightningPowerup.position.set(48, 0);\r\n        }\r\n        handlePowerupApplied(powerupType) {\r\n            BlockPuzzle.Analytics.instance.updateLevelData({ powerups: [powerupType] });\r\n            this.usedPowerups.push(powerupType);\r\n        }\r\n    }\r\n    BlockPuzzle.PowerupContainer = PowerupContainer;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class PublisherLogo extends Phaser.Sprite {\r\n        constructor(x, y) {\r\n            super(BlockPuzzle.App.instance, x, y, 'more_games');\r\n            this.anchor.set(0.5);\r\n            this.inputEnabled = true;\r\n            this.events.onInputDown.add(this.publisherLogoClicked, this);\r\n        }\r\n        publisherLogoClicked() {\r\n            BlockPuzzle.App.instance.navigateToSponsor();\r\n        }\r\n    }\r\n    BlockPuzzle.PublisherLogo = PublisherLogo;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class NewRecordEffect extends Phaser.Group {\r\n        constructor(results) {\r\n            super(results.game, null);\r\n            this.resultsWindow = results;\r\n            this.stamp = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'newBestIcon0000'));\r\n            this.stamp.anchor.set(0.5);\r\n        }\r\n        show(delay) {\r\n            this.game.time.events.add(delay, () => this.playStampTween());\r\n        }\r\n        playStampTween() {\r\n            this.visible = true;\r\n            this.scale.set(2.5);\r\n            this.alpha = 0.45;\r\n            this.game.add.tween(this)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.scale)\r\n                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(() => {\r\n                this.parent.scale.set(0.95, 0.95);\r\n                this.game.add.tween(this.parent.scale)\r\n                    .to({ x: 1, y: 1 }, 320, Phaser.Easing.Back.Out, true);\r\n                this.parent && this.parent.parent && this.parent.parent.addChildAt(new BlockPuzzle.BestScoreReachedEffectEmitter(0, -15, 120), 0);\r\n            });\r\n            this.game.time.events.add(160, () => BlockPuzzle.SoundController.instance.playStampSound());\r\n        }\r\n    }\r\n    BlockPuzzle.NewRecordEffect = NewRecordEffect;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ResultsScoresPanel extends Phaser.Group {\r\n        constructor(results) {\r\n            super(results.game, null);\r\n            this.results = results;\r\n            this.scale.set(1.25);\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.pad = this.add(this.game.make.sprite(12, 0, BlockPuzzle.Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n            this.textField = this.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(102, 0);\r\n            this.highscoreGroup = this.add(this.game.make.group());\r\n            this.highscoreGroup.position.set(106, 37);\r\n            this.highscoreIcon = this.highscoreGroup.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'topScoreCrown0000'));\r\n            this.highscoreIcon.anchor.set(1, 0.5);\r\n            this.highscoreText = this.highscoreGroup.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.42, 0, 0.5, 1));\r\n            this.highscoreText.position.set(0, 1);\r\n            this.icon = this.add(this.game.make.sprite(5, 10, BlockPuzzle.Settings.GAME_ATLAS, 'resultsIconCup0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n        show(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix = '', rightValuePrefix = '', delay, textTweenDelay, tweenTextDuration) {\r\n            this.resetTweens();\r\n            this.tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration);\r\n            this.animateAppearing(delay);\r\n        }\r\n        tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration) {\r\n            this.highscoreText.changeText('' + rightValueInitial);\r\n            this.textField.tweenTextAdvanced(leftValuePrefix, leftValueInitial, leftValueTarget, tweenTextDuration, textTweenDelay, true);\r\n            this.highscoreText.tweenTextAdvanced(rightValuePrefix, rightValueInitial, rightValueTarget, tweenTextDuration, textTweenDelay, true);\r\n        }\r\n        animateAppearing(delay) {\r\n            this.icon.scale.set(0.5);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({ x: 1, y: 1 }, 350, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.icon.alpha = 0;\r\n            this.game.add.tween(this.icon)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n            this.pad.scale.x = 0;\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({ x: 1.3 }, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n            this.textField.visible = false;\r\n            this.textField.scale.set(0.5);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({ x: 0.72, y: 0.72 }, 450, Phaser.Easing.Back.Out, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n            this.highscoreGroup.visible = false;\r\n            this.highscoreGroup.alpha = 0;\r\n            this.game.add.tween(this.highscoreGroup)\r\n                .to({ alpha: 1 }, 300, Phaser.Easing.Sinusoidal.Out, true, delay + 400)\r\n                .onStart.add(() => this.highscoreGroup.visible = true);\r\n            this.textField.visible = false;\r\n            this.textField.alpha = 0;\r\n            this.game.add.tween(this.textField)\r\n                .to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n        }\r\n        resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.game.tweens.removeFrom(this.pad.scale);\r\n            this.game.tweens.removeFrom(this.textField);\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n            this.game.tweens.removeFrom(this.highscoreGroup);\r\n            this.icon.scale.set(1);\r\n            this.icon.alpha = 1;\r\n            this.pad.scale.set(1.3);\r\n            this.textField.scale.set(1);\r\n            this.textField.visible = true;\r\n            this.highscoreGroup.alpha = 1;\r\n            this.highscoreGroup.visible = true;\r\n        }\r\n        showPanel(delay, textTweenDelay, duration, bestScoresReached) {\r\n            this.show(0, BlockPuzzle.ScoreManager.instance.getCurrentScores(), bestScoresReached ? BlockPuzzle.ScoreManager.instance.getPrevMaxScores() : BlockPuzzle.ScoreManager.instance.getMaxScores(), BlockPuzzle.ScoreManager.instance.getMaxScores(), '', '', delay, delay + textTweenDelay, duration);\r\n        }\r\n        update() {\r\n            if (this.highscoreGroup.visible) {\r\n                let textFieldWidth = this.highscoreText.getLocalBounds().width * this.highscoreText.scale.x;\r\n                this.highscoreIcon.x = -textFieldWidth / 2 - 2;\r\n                this.highscoreText.x = -textFieldWidth / 2;\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.ResultsScoresPanel = ResultsScoresPanel;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ResultsStarsPanel extends Phaser.Group {\r\n        constructor(results) {\r\n            super(results.game, null);\r\n            this.results = results;\r\n            this.scale.set(1.25);\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.pad = this.add(this.game.make.sprite(10, 0, BlockPuzzle.Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n            this.textField = this.add(new BlockPuzzle.BitmapTextField('0', BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(100, 0);\r\n            this.icon = this.add(this.game.make.sprite(10, 0, BlockPuzzle.Settings.GAME_ATLAS, 'resultsIconStar0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n        show(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix = '', rightValuePrefix = '', delay, textTweenDelay, tweenTextDuration) {\r\n            this.resetTweens();\r\n            this.tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration);\r\n            this.animateAppearing(delay);\r\n        }\r\n        tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration) {\r\n            this.textField.tweenTextAdvanced(leftValuePrefix, leftValueInitial, leftValueTarget, tweenTextDuration, textTweenDelay, true);\r\n        }\r\n        animateAppearing(delay) {\r\n            this.icon.scale.set(0.5);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({ x: 1, y: 1 }, 350, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.icon.alpha = 0;\r\n            this.game.add.tween(this.icon)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n            this.pad.scale.x = 0;\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({ x: 1.3 }, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n            this.textField.visible = false;\r\n            this.textField.scale.set(0.5);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({ x: 0.72, y: 0.72 }, 450, Phaser.Easing.Back.Out, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n            this.textField.visible = false;\r\n            this.textField.alpha = 0;\r\n            this.game.add.tween(this.textField)\r\n                .to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n        }\r\n        resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.game.tweens.removeFrom(this.pad.scale);\r\n            this.game.tweens.removeFrom(this.textField);\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n            this.icon.scale.set(1);\r\n            this.icon.alpha = 1;\r\n            this.pad.scale.set(1.3);\r\n            this.textField.scale.set(1);\r\n            this.textField.visible = true;\r\n        }\r\n        showPanel(delay, textTweenDelay, duration) {\r\n            this.show(0, Math.max(0, BlockPuzzle.StarsManager.instance.getStarsAmount()), 0, 0, '', '', delay, delay + textTweenDelay, duration);\r\n        }\r\n    }\r\n    BlockPuzzle.ResultsStarsPanel = ResultsStarsPanel;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ReviveCountdown extends Phaser.Group {\r\n        constructor(windowRevive) {\r\n            super(windowRevive.game, null);\r\n            this.countdownActive = false;\r\n            this.startAngle = 270;\r\n            this.endAngle = -90 - 0.000001;\r\n            this.currentStep = { value: 0 };\r\n            this.windowRevive = windowRevive;\r\n            this.circle = this.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'reviveCircle0000'));\r\n            this.circle.anchor.set(0.5);\r\n            this.circleMask = this.add(this.game.make.graphics(-1, -3));\r\n            this.circleMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 160, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill();\r\n            this.circle.mask = this.circleMask;\r\n            this.heart = this.add(this.game.make.sprite(0, -25, BlockPuzzle.Settings.GAME_ATLAS, 'iconRevive0000'));\r\n            this.heart.anchor.set(0.5);\r\n            this.timeLeftText = this.add(BlockPuzzle.TextUtils.getText('9...', 0, 70, 65, '#FF5E40'));\r\n        }\r\n        update() {\r\n            super.update();\r\n            if (this.isActive()) {\r\n                const secondsLeft = Math.ceil((1 - this.currentStep.value) * 10);\r\n                this.timeLeftText.setText('' + BlockPuzzle.TextUtils.convertMSToMSS(secondsLeft * 1000));\r\n                this.circleMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 160, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill();\r\n            }\r\n        }\r\n        startCountdown() {\r\n            BlockPuzzle.SoundController.instance.chokeMusicVolume(400);\r\n            this.resetCountdown();\r\n            this.circle.visible = true;\r\n            this.circle.alpha = 1;\r\n            this.heart.visible = true;\r\n            this.timeLeftText.visible = true;\r\n            this.countdownActive = true;\r\n            this.game.add.tween(this.currentStep)\r\n                .to({ value: 1 }, BlockPuzzle.Settings.REVIVE_TIMER_DURATION, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(this.stopCountdown, this);\r\n            this.heart.scale.set(0);\r\n            this.game.add.tween(this.heart.scale)\r\n                .to({ x: 1, y: 1 }, 600, Phaser.Easing.Back.Out, true)\r\n                .onComplete.add(() => this.startHeartbeatAnimation());\r\n        }\r\n        startHeartbeatAnimation() {\r\n            this.game.tweens.removeFrom(this.heart.scale);\r\n            this.heart.scale.set(1);\r\n            const heartbeatTween = this.game.add.tween(this.heart.scale)\r\n                .to({ x: 1.1, y: 1.1 }, 100, Phaser.Easing.Sinusoidal.In, false, 0)\r\n                .to({ x: 1, y: 1 }, 310, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({ x: 1.1, y: 1.1 }, 100, Phaser.Easing.Sinusoidal.In, false, 25)\r\n                .to({ x: 1, y: 1 }, 140, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({ x: 1, y: 1 }, 650, Phaser.Easing.Sinusoidal.Out, false)\r\n                .start()\r\n                .repeatAll(-1);\r\n            heartbeatTween.onLoop.add(() => BlockPuzzle.SoundController.instance.playHeartBeatSound());\r\n            heartbeatTween.onStart.add(() => BlockPuzzle.SoundController.instance.playHeartBeatSound());\r\n        }\r\n        stopCountdown() {\r\n            this.resetCountdown();\r\n            this.windowRevive.reviveFailed(true);\r\n        }\r\n        animateDisappearing(delay) {\r\n            BlockPuzzle.SoundController.instance.restoreMusicVolume(600);\r\n            this.game.add.tween(this)\r\n                .to({ alpha: 0 }, 200, Phaser.Easing.Linear.None, true, delay + 50)\r\n                .onComplete.add(() => {\r\n                this.heart.visible = false;\r\n                this.timeLeftText.visible = false;\r\n            });\r\n            this.game.add.tween(this.scale)\r\n                .to({ x: 0.6, y: 0.6 }, 200, Phaser.Easing.Back.In, true, delay + 50);\r\n            this.game.add.tween(this.circle)\r\n                .to({ alpha: 0 }, 200, Phaser.Easing.Sinusoidal.In, true, delay)\r\n                .onComplete.add(() => this.circle.visible = false);\r\n        }\r\n        resetCountdown() {\r\n            this.game.tweens.removeFrom(this.currentStep);\r\n            this.game.tweens.removeFrom(this.heart.scale);\r\n            this.game.tweens.removeFrom(this.timeLeftText.scale);\r\n            this.game.tweens.removeFrom(this.circle);\r\n            this.timeLeftText.scale.set(1);\r\n            this.heart.scale.set(1);\r\n            this.currentStep.value = 0;\r\n            this.countdownActive = false;\r\n            this.circle.visible = false;\r\n            this.circle.alpha = 1;\r\n            this.circleMask.clear();\r\n        }\r\n        isActive() {\r\n            return this.countdownActive;\r\n        }\r\n    }\r\n    BlockPuzzle.ReviveCountdown = ReviveCountdown;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AbstractUIScrollbar extends Phaser.Group {\r\n        constructor() {\r\n            super(BlockPuzzle.App.instance);\r\n            this.prevValue = 0.5;\r\n            this.sliderDx = 0;\r\n            this.buildChildren();\r\n            this.initValue();\r\n        }\r\n        buildChildren() {\r\n            this.buildScrollerContainer();\r\n            this.buildPad();\r\n            this.buildBar();\r\n            this.buildSlider();\r\n            this.buildShadow();\r\n            this.buildIcon();\r\n            this.addIconListeners();\r\n        }\r\n        setInitialValue(value) {\r\n            this.setValue(value, true);\r\n            this.prevValue = this.value;\r\n        }\r\n        buildScrollerContainer() {\r\n            this.scrollerContainer = this.add(this.game.make.group());\r\n            this.scrollerContainer.position.set(58, 0);\r\n        }\r\n        buildPad() {\r\n            this.pad = this.scrollerContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'musicControlPad0000'));\r\n            this.pad.anchor.set(0.5);\r\n        }\r\n        buildShadow() {\r\n            this.shadow = this.scrollerContainer.add(this.game.make.sprite(-100, -3, BlockPuzzle.Settings.GAME_ATLAS, 'controlBarShadow0000'));\r\n            this.shadow.anchor.set(0.5);\r\n        }\r\n        buildBar() {\r\n            this.bar = this.scrollerContainer.add(this.game.make.sprite(0, 0, BlockPuzzle.Settings.GAME_ATLAS, 'musicControlBar0000'));\r\n            this.bar.anchor.set(0.5);\r\n            this.barMask = this.scrollerContainer.add(this.game.make.graphics(-this.pad.width / 2, 0));\r\n            this.barMask.clear().beginFill(0, 0.5).drawRect(0, -20, this.pad.width, 40).endFill();\r\n            this.bar.mask = this.barMask;\r\n        }\r\n        buildSlider() {\r\n            this.slider = this.scrollerContainer.add(this.game.make.sprite(this.sliderDx, 0, BlockPuzzle.Settings.GAME_ATLAS, 'musicControlSlider0000'));\r\n            this.slider.anchor.set(0.2, 0.5);\r\n            this.slider.hitArea = new Phaser.Rectangle(-60, -60, 120, 120);\r\n            this.slider.inputEnabled = true;\r\n            this.slider.input.allowVerticalDrag = false;\r\n            this.slider.input.enableDrag(false, false, false, 0, new Phaser.Rectangle(-this.pad.width / 2 + this.sliderDx, -this.slider.height, this.pad.width - this.sliderDx, this.slider.height * 2));\r\n            this.slider.events.onDragUpdate.add(this.handleSliderDrag, this);\r\n            this.slider.events.onDragStop.add(this.handleSliderDrag, this);\r\n        }\r\n        updateBarMask() {\r\n            this.barMask.clear().beginFill(0, 0.5).drawRect(0, -20, this.slider.x + this.pad.width / 2 + 20, 40).endFill();\r\n        }\r\n        handleSliderDrag() {\r\n            const value = this.slider.x / (this.pad.width - this.sliderDx - this.slider.width) + 0.5;\r\n            this.setValue(Phaser.Math.clamp(value, 0, 1));\r\n        }\r\n        addIconListeners() {\r\n            this.icon.inputEnabled = true;\r\n            this.icon.events.onInputDown.add(this.handleIconClicked, this);\r\n        }\r\n        handleIconClicked() {\r\n            if (this.value == 0) {\r\n                this.setValue(this.prevValue);\r\n            }\r\n            else {\r\n                this.prevValue = this.value;\r\n                this.setValue(0);\r\n            }\r\n        }\r\n        setValue(value, skipAnalytics = false) {\r\n            this.value = value;\r\n            this.slider.x = (value - 0.5) * (this.pad.width - this.sliderDx - this.slider.width);\r\n            this.updateBarMask();\r\n            this.dispatchValueChanged(value, skipAnalytics);\r\n        }\r\n    }\r\n    BlockPuzzle.AbstractUIScrollbar = AbstractUIScrollbar;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"AbstractUIScrollbar.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class MusicControlScrollbar extends BlockPuzzle.AbstractUIScrollbar {\r\n        initValue() {\r\n            this.setInitialValue(BlockPuzzle.SoundController.instance.getMusicVolume());\r\n        }\r\n        buildIcon() {\r\n            this.icon = this.add(this.game.make.sprite(-100, -5, BlockPuzzle.Settings.GAME_ATLAS, 'musicControlIcon0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n        dispatchValueChanged(value, skipAnalytics) {\r\n            this.icon.frameName = this.value === 0 ? 'musicControlIcon0001' : 'musicControlIcon0000';\r\n            BlockPuzzle.SoundController.instance.setMusicVolume(value);\r\n            if (BlockPuzzle.Settings.ENABLE_API && !skipAnalytics) {\r\n                window.famobi_analytics.trackEvent(window.famobi_analytics.EVENT_VOLUMECHANGE, {\r\n                    bgmVolume: Phaser.Math.roundTo(BlockPuzzle.SoundController.instance.getMusicVolume(), -2),\r\n                    sfxVolume: Phaser.Math.roundTo(BlockPuzzle.SoundController.instance.getSFXVolume(), -2)\r\n                });\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.MusicControlScrollbar = MusicControlScrollbar;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"AbstractUIScrollbar.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class SFXControlScrollbar extends BlockPuzzle.AbstractUIScrollbar {\r\n        initValue() {\r\n            this.setInitialValue(BlockPuzzle.SoundController.instance.getSFXVolume());\r\n        }\r\n        buildIcon() {\r\n            this.icon = this.add(this.game.make.sprite(-100, -5, BlockPuzzle.Settings.GAME_ATLAS, 'sfxControlIcon0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n        dispatchValueChanged(value, skipAnalytics) {\r\n            this.icon.frameName = this.value === 0 ? 'sfxControlIcon0001' : 'sfxControlIcon0000';\r\n            BlockPuzzle.SoundController.instance.setSFXVolume(value);\r\n            if (BlockPuzzle.Settings.ENABLE_API && !skipAnalytics) {\r\n                window.famobi_analytics.trackEvent(window.famobi_analytics.EVENT_VOLUMECHANGE, {\r\n                    bgmVolume: Phaser.Math.roundTo(BlockPuzzle.SoundController.instance.getMusicVolume(), -2),\r\n                    sfxVolume: Phaser.Math.roundTo(BlockPuzzle.SoundController.instance.getSFXVolume(), -2)\r\n                });\r\n            }\r\n        }\r\n    }\r\n    BlockPuzzle.SFXControlScrollbar = SFXControlScrollbar;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ShopItem extends Phaser.Group {\r\n        constructor(windowShop, powerupType) {\r\n            super(windowShop.game, null);\r\n            this.windowShop = windowShop;\r\n            this.powerupType = powerupType;\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.scale.set(1.2);\r\n            this.pad = this.add(this.game.make.sprite(-10, 0, BlockPuzzle.Settings.GAME_ATLAS, 'shopPricePadBig0000'));\r\n            this.pad.anchor.set(0.5);\r\n            this.pad.inputEnabled = true;\r\n            this.pad.events.onInputDown.add(this.buyClicked, this);\r\n            this.icon = this.add(this.game.make.sprite(-88, -10, BlockPuzzle.Settings.GAME_ATLAS, 'icon' + this.powerupType + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.icon.scale.set(1.2);\r\n            this.priceStar = this.add(this.game.make.sprite(50, -3, BlockPuzzle.Settings.GAME_ATLAS, 'iconStarShopBig0000'));\r\n            this.priceStar.anchor.set(0.5);\r\n            this.priceText = this.add(new BlockPuzzle.BitmapTextField('' + BlockPuzzle.PowerupManager.instance.getPrice(this.powerupType), BlockPuzzle.Settings.GAME_ATLAS, 'Gold', 0.75, 0.5, 0.5, 1));\r\n            this.priceText.position.set(-16, -2);\r\n            this.buttonBuy = this.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonBuyBig', 130, -5, 1, this.buyClicked, this, false));\r\n            this.boughtMark = this.add(this.game.make.sprite(115, -5, BlockPuzzle.Settings.GAME_ATLAS, 'boughtMarkBig0000'));\r\n            this.boughtMark.anchor.set(0.5);\r\n            this.boughtMark.scale.set(0.75);\r\n            this.boughtMark.visible = false;\r\n        }\r\n        show() {\r\n            this.boughtMark.visible = false;\r\n            this.pad.frameName = 'shopPricePadBig0000';\r\n            this.icon.x = -88;\r\n            this.priceText.visible = true;\r\n            this.priceStar.visible = true;\r\n            this.buttonBuy.visible = this.buttonBuy.inputEnabled = true;\r\n            this.priceStar.frameName = 'iconStarShopBig0000';\r\n            this.icon.frameName = 'icon' + this.powerupType + '0000';\r\n            this.priceText.styleKey = \"Gold\";\r\n            this.priceText.changeText('' + BlockPuzzle.PowerupManager.instance.getPrice(this.powerupType), true);\r\n        }\r\n        buyClicked() {\r\n            if (BlockPuzzle.StarsManager.instance.getStarsAmount() >= BlockPuzzle.PowerupManager.instance.getPrice(this.powerupType)) {\r\n                this.buttonBuy.inputEnabled = false;\r\n                this.buttonBuy.visible = false;\r\n                this.boughtMark.visible = true;\r\n                this.game.tweens.removeFrom(this.boughtMark.scale);\r\n                this.boughtMark.scale.set(0.2);\r\n                this.game.add.tween(this.boughtMark.scale)\r\n                    .to({ x: 0.75, y: 0.75 }, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n                BlockPuzzle.SoundController.instance.playBuyingSound();\r\n                BlockPuzzle.PowerupManager.instance.buy(this.powerupType);\r\n                this.windowShop.powerupBought();\r\n            }\r\n            else {\r\n                this.displayError();\r\n            }\r\n        }\r\n        displayError() {\r\n            this.windowShop.starsCounter.displayError();\r\n            BlockPuzzle.ColorUtils.bounceTint(this.priceStar, 0xFF0000, 0xFFFFFF, 350);\r\n            this.priceText.children.forEach(c => BlockPuzzle.ColorUtils.bounceTint(c, 0xFF0000, 0xFFFFFF, 350));\r\n            BlockPuzzle.SoundController.instance.playErrorSound();\r\n        }\r\n    }\r\n    BlockPuzzle.ShopItem = ShopItem;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class WindowHeading extends Phaser.Group {\r\n        constructor(iconFrameName, backplateType) {\r\n            super(BlockPuzzle.App.instance);\r\n            this.iconFrameName = iconFrameName;\r\n            this.backplateType = backplateType;\r\n            this.buildContent();\r\n        }\r\n        buildContent() {\r\n            this.container = this.add(this.game.make.group());\r\n            this.plate = this.container.add(this.game.make.sprite(0, -5, BlockPuzzle.Settings.GAME_ATLAS, 'windowHeadingBackplate000' + this.backplateType));\r\n            this.plate.anchor.set(0.5, 0);\r\n            this.icon = this.container.add(this.game.make.sprite(0, 316, BlockPuzzle.Settings.GAME_ATLAS, this.iconFrameName + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n        animateAppearing(delay) {\r\n            this.game.tweens.removeFrom(this.container);\r\n            this.container.y = -450;\r\n            this.game.add.tween(this.container)\r\n                .to({ y: -100 }, 350, Phaser.Easing.Back.Out, true, delay)\r\n                .onStart.add(() => BlockPuzzle.SoundController.instance.playPanelMovementSound());\r\n            this.icon.alpha = 0;\r\n            this.icon.scale.set(0.6);\r\n            this.game.add.tween(this.icon)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({ x: 1, y: 1 }, 300, Phaser.Easing.Back.Out, true, delay);\r\n        }\r\n        animateDisappearing(delay) {\r\n            this.game.tweens.removeFrom(this.container);\r\n            this.game.add.tween(this.container)\r\n                .to({ y: -450 }, 350, Phaser.Easing.Back.In, true, delay)\r\n                .onStart.add(() => BlockPuzzle.SoundController.instance.playPanelUpMovementSound());\r\n        }\r\n        resetTweens() {\r\n            this.game.tweens.removeFrom(this.container);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n        }\r\n    }\r\n    BlockPuzzle.WindowHeading = WindowHeading;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ArrayUtils {\r\n        static uniteArrays(sourceArray, targetArray) {\r\n            return sourceArray.concat(targetArray.filter(targetElem => sourceArray.indexOf(targetElem) === -1));\r\n        }\r\n        static getRandomItem(array, compressionFactor) {\r\n            const randomIndex = Math.floor(array.length * Math.pow(Math.random(), compressionFactor));\r\n            return array[randomIndex];\r\n        }\r\n    }\r\n    BlockPuzzle.ArrayUtils = ArrayUtils;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class BitmapTextFactory {\r\n        static getLetter(textKey, atlasKey, letterKey, letterFrame) {\r\n            let spriteName = null;\r\n            switch (letterKey) {\r\n                case '0':\r\n                    spriteName = 'text' + textKey + '_' + '0' + '000' + letterFrame;\r\n                    break;\r\n                case '1':\r\n                    spriteName = 'text' + textKey + '_' + '1' + '000' + letterFrame;\r\n                    break;\r\n                case '2':\r\n                    spriteName = 'text' + textKey + '_' + '2' + '000' + letterFrame;\r\n                    break;\r\n                case '3':\r\n                    spriteName = 'text' + textKey + '_' + '3' + '000' + letterFrame;\r\n                    break;\r\n                case '4':\r\n                    spriteName = 'text' + textKey + '_' + '4' + '000' + letterFrame;\r\n                    break;\r\n                case '5':\r\n                    spriteName = 'text' + textKey + '_' + '5' + '000' + letterFrame;\r\n                    break;\r\n                case '6':\r\n                    spriteName = 'text' + textKey + '_' + '6' + '000' + letterFrame;\r\n                    break;\r\n                case '7':\r\n                    spriteName = 'text' + textKey + '_' + '7' + '000' + letterFrame;\r\n                    break;\r\n                case '8':\r\n                    spriteName = 'text' + textKey + '_' + '8' + '000' + letterFrame;\r\n                    break;\r\n                case '9':\r\n                    spriteName = 'text' + textKey + '_' + '9' + '000' + letterFrame;\r\n                    break;\r\n                case '.':\r\n                    spriteName = 'text' + textKey + '_' + 'point' + '000' + letterFrame;\r\n                    break;\r\n                case '+':\r\n                    spriteName = 'text' + textKey + '_' + 'plus' + '000' + letterFrame;\r\n                    break;\r\n                case '*':\r\n                    spriteName = 'text' + textKey + '_' + 'multiply' + '000' + letterFrame;\r\n                    break;\r\n                case '=':\r\n                    spriteName = 'text' + textKey + '_' + 'equals' + '000' + letterFrame;\r\n                    break;\r\n                case '%':\r\n                    spriteName = 'text' + textKey + '_' + 'percent' + '000' + letterFrame;\r\n                    break;\r\n                case 'a':\r\n                    spriteName = 'text' + textKey + '_' + 'a' + '000' + letterFrame;\r\n                    break;\r\n                case 'b':\r\n                    spriteName = 'text' + textKey + '_' + 'b' + '000' + letterFrame;\r\n                    break;\r\n                case 'c':\r\n                    spriteName = 'text' + textKey + '_' + 'c' + '000' + letterFrame;\r\n                    break;\r\n                case 'd':\r\n                    spriteName = 'text' + textKey + '_' + 'd' + '000' + letterFrame;\r\n                    break;\r\n                case 'e':\r\n                    spriteName = 'text' + textKey + '_' + 'e' + '000' + letterFrame;\r\n                    break;\r\n                case 'f':\r\n                    spriteName = 'text' + textKey + '_' + 'f' + '000' + letterFrame;\r\n                    break;\r\n                case 'g':\r\n                    spriteName = 'text' + textKey + '_' + 'g' + '000' + letterFrame;\r\n                    break;\r\n                case 'h':\r\n                    spriteName = 'text' + textKey + '_' + 'h' + '000' + letterFrame;\r\n                    break;\r\n                case 'i':\r\n                    spriteName = 'text' + textKey + '_' + 'i' + '000' + letterFrame;\r\n                    break;\r\n                case 'j':\r\n                    spriteName = 'text' + textKey + '_' + 'j' + '000' + letterFrame;\r\n                    break;\r\n                case 'k':\r\n                    spriteName = 'text' + textKey + '_' + 'k' + '000' + letterFrame;\r\n                    break;\r\n                case 'l':\r\n                    spriteName = 'text' + textKey + '_' + 'l' + '000' + letterFrame;\r\n                    break;\r\n                case 'm':\r\n                    spriteName = 'text' + textKey + '_' + 'm' + '000' + letterFrame;\r\n                    break;\r\n                case 'n':\r\n                    spriteName = 'text' + textKey + '_' + 'n' + '000' + letterFrame;\r\n                    break;\r\n                case 'o':\r\n                    spriteName = 'text' + textKey + '_' + 'o' + '000' + letterFrame;\r\n                    break;\r\n                case 'p':\r\n                    spriteName = 'text' + textKey + '_' + 'p' + '000' + letterFrame;\r\n                    break;\r\n                case 'q':\r\n                    spriteName = 'text' + textKey + '_' + 'q' + '000' + letterFrame;\r\n                    break;\r\n                case 'r':\r\n                    spriteName = 'text' + textKey + '_' + 'r' + '000' + letterFrame;\r\n                    break;\r\n                case 's':\r\n                    spriteName = 'text' + textKey + '_' + 's' + '000' + letterFrame;\r\n                    break;\r\n                case 't':\r\n                    spriteName = 'text' + textKey + '_' + 't' + '000' + letterFrame;\r\n                    break;\r\n                case 'u':\r\n                    spriteName = 'text' + textKey + '_' + 'u' + '000' + letterFrame;\r\n                    break;\r\n                case 'v':\r\n                    spriteName = 'text' + textKey + '_' + 'v' + '000' + letterFrame;\r\n                    break;\r\n                case 'w':\r\n                    spriteName = 'text' + textKey + '_' + 'w' + '000' + letterFrame;\r\n                    break;\r\n                case 'x':\r\n                    spriteName = 'text' + textKey + '_' + 'x' + '000' + letterFrame;\r\n                    break;\r\n                case 'y':\r\n                    spriteName = 'text' + textKey + '_' + 'y' + '000' + letterFrame;\r\n                    break;\r\n                case 'z':\r\n                    spriteName = 'text' + textKey + '_' + 'z' + '000' + letterFrame;\r\n                    break;\r\n                case '/':\r\n                    spriteName = 'text' + textKey + '_' + 'slash' + '000' + letterFrame;\r\n                    break;\r\n                case ' ':\r\n                    spriteName = 'text' + textKey + '_' + 'z' + '000' + letterFrame;\r\n                    break;\r\n                case '_':\r\n                    spriteName = 'text' + textKey + '_' + 'point' + '000' + letterFrame;\r\n                    break;\r\n                case '?':\r\n                    spriteName = 'text' + textKey + '_' + 'question' + '000' + letterFrame;\r\n                    break;\r\n            }\r\n            if (!spriteName) {\r\n                return null;\r\n            }\r\n            let sprite = new Phaser.Sprite(BlockPuzzle.App.instance, 0, 0, atlasKey, spriteName);\r\n            sprite.anchor.setTo(0, 0);\r\n            sprite.alpha = letterKey === ' ' || letterKey == '_' ? 0 : 1;\r\n            sprite.scale.x = letterKey === '_' ? 0.5 : 1;\r\n            return sprite;\r\n        }\r\n    }\r\n    BlockPuzzle.BitmapTextFactory = BitmapTextFactory;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ButtonUtils {\r\n        static createButton(atlasName, spriteName, x, y, callback, callbackContext) {\r\n            let button = new Phaser.Button(BlockPuzzle.App.instance, x, y, atlasName, callback, callbackContext, spriteName + '0001', spriteName + '0000', spriteName + '0002', spriteName + '0000');\r\n            button.anchor.setTo(0.5, 0.5);\r\n            button.input.pixelPerfectClick = true;\r\n            button.input.pixelPerfectAlpha = 1;\r\n            button.input.useHandCursor = true;\r\n            return button;\r\n        }\r\n        static createOneFrameButton(atlasName, spriteName, x, y, callback, callbackContext) {\r\n            let button = new Phaser.Button(BlockPuzzle.App.instance, x, y, atlasName, callback, callbackContext, spriteName + '0000', spriteName + '0000', spriteName + '0000', spriteName + '0000');\r\n            button.anchor.setTo(0.5, 0.5);\r\n            button.input.pixelPerfectClick = true;\r\n            button.input.pixelPerfectAlpha = 1;\r\n            button.input.useHandCursor = true;\r\n            return button;\r\n        }\r\n        static createSimpleButton(atlasName, spriteName, x, y, startScale, callback, callbackContext, playClickSound = true) {\r\n            let button = new Phaser.Button(BlockPuzzle.App.instance, x, y, atlasName, callback, callbackContext, spriteName + '0000', spriteName + '0000', spriteName + '0000', spriteName + '0000');\r\n            button.anchor.setTo(0.5, 0.5);\r\n            button.scale.set(startScale);\r\n            button.input.pixelPerfectClick = true;\r\n            button.input.pixelPerfectAlpha = 1;\r\n            button.input.useHandCursor = false;\r\n            button[\"overTween\"] = BlockPuzzle.App.instance.add.tween(button.scale).to({ x: startScale * 1.05, y: startScale * 1.05 }, 100);\r\n            button[\"outTween\"] = BlockPuzzle.App.instance.add.tween(button.scale).to({ x: startScale, y: startScale }, 100);\r\n            button[\"downTween\"] = BlockPuzzle.App.instance.add.tween(button.scale).to({ x: startScale * 0.95, y: startScale * 0.95 }, 50).to({ x: startScale, y: startScale }, 50);\r\n            button.events.onInputOver.add(ButtonUtils.mouseOverHandler, this, 0);\r\n            button.events.onInputOut.add(ButtonUtils.mouseOutHandler, this, 0);\r\n            button.events.onInputDown.add(ButtonUtils.mouseDownHandler, this, 0);\r\n            if (playClickSound) {\r\n                button.events.onInputDown.add(() => BlockPuzzle.SoundController.instance.playClickSound(), 0);\r\n            }\r\n            button[\"setScale\"] = function (value) {\r\n                button.scale.set(value);\r\n                button[\"overTween\"] = BlockPuzzle.App.instance.add.tween(button.scale).to({ x: value * 1.05, y: value * 1.05 }, 100);\r\n                button[\"outTween\"] = BlockPuzzle.App.instance.add.tween(button.scale).to({ x: value, y: value }, 100);\r\n                button[\"downTween\"] = BlockPuzzle.App.instance.add.tween(button.scale).to({ x: value * 0.95, y: value * 0.95 }, 50).to({ x: value, y: value }, 50);\r\n            };\r\n            return button;\r\n        }\r\n        static mouseOverHandler(caller) {\r\n            caller[\"overTween\"].start();\r\n        }\r\n        static mouseOutHandler(caller) {\r\n            caller[\"outTween\"].start();\r\n        }\r\n        static mouseDownHandler(caller) {\r\n            caller[\"downTween\"].start();\r\n        }\r\n    }\r\n    BlockPuzzle.ButtonUtils = ButtonUtils;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class ColorUtils {\r\n        static tweenTint(spriteToTween, startColor, endColor, duration) {\r\n            let colorBlend = { step: 0 };\r\n            BlockPuzzle.App.instance.add.tween(colorBlend).to({ step: 100 }, duration, Phaser.Easing.Linear.None, true)\r\n                .onUpdateCallback(() => {\r\n                spriteToTween.tint = Phaser.Color.interpolateColor(startColor, endColor, 100, colorBlend.step, 1);\r\n            })\r\n                .onComplete.add(() => spriteToTween.tint = endColor);\r\n        }\r\n        ;\r\n        static bounceTint(spriteToTween, startColor, endColor, duration) {\r\n            let colorBlend = { step: 10 };\r\n            BlockPuzzle.App.instance.add.tween(colorBlend).to({ step: 100 }, duration, Phaser.Easing.Bounce.Out, true)\r\n                .onUpdateCallback(() => {\r\n                spriteToTween.tint = Phaser.Color.interpolateColor(startColor, endColor, 100, colorBlend.step, 1);\r\n            })\r\n                .onComplete.add(() => spriteToTween.tint = endColor);\r\n        }\r\n        ;\r\n    }\r\n    BlockPuzzle.ColorUtils = ColorUtils;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"../Settings.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class LocalStorageController {\r\n        constructor() {\r\n            this.isLocalStorageSupported = false;\r\n            this.data = null;\r\n            this.currentLocalStorage = null;\r\n            this.currentLocalStorage = BlockPuzzle.Settings.ENABLE_API ? window[\"famobi\"].localStorage : window.localStorage;\r\n            this.data = {\r\n                \"maxScore\": 0,\r\n                \"numStars\": 0,\r\n                \"bombBought\": false,\r\n                \"lightningBought\": false,\r\n                \"achievements\": null,\r\n                \"tutorialCompleted\": false,\r\n                \"sfxVolume\": 0.5,\r\n                \"musicVolume\": 0.5\r\n            };\r\n        }\r\n        static get instance() {\r\n            return LocalStorageController._instance ? LocalStorageController._instance\r\n                : LocalStorageController._instance = new LocalStorageController();\r\n        }\r\n        getMaxScores() {\r\n            return this.data[\"maxScore\"];\r\n        }\r\n        getNumStars() {\r\n            return this.data[\"numStars\"];\r\n        }\r\n        getSFXVolume() {\r\n            return this.data[\"sfxVolume\"];\r\n        }\r\n        getMusicVolume() {\r\n            return this.data[\"musicVolume\"];\r\n        }\r\n        isBombBought() {\r\n            return this.data[\"bombBought\"];\r\n        }\r\n        isLightningBought() {\r\n            return this.data[\"lightningBought\"];\r\n        }\r\n        isTutorialCompleted() {\r\n            return this.data[\"tutorialCompleted\"];\r\n        }\r\n        getAchievementsStates() {\r\n            return this.data[\"achievements\"] || [];\r\n        }\r\n        save() {\r\n            this.data[\"maxScore\"] = BlockPuzzle.ScoreManager.instance.getMaxScores();\r\n            this.data[\"numStars\"] = BlockPuzzle.StarsManager.instance.getStarsAmount();\r\n            this.data[\"achievements\"] = BlockPuzzle.AchievementsManager.instance.getAchievementsStates();\r\n            this.data[\"bombBought\"] = BlockPuzzle.PowerupManager.instance.isBought(BlockPuzzle.PowerupType.BOMB);\r\n            this.data[\"lightningBought\"] = BlockPuzzle.PowerupManager.instance.isBought(BlockPuzzle.PowerupType.LIGHTNING);\r\n            this.data[\"tutorialCompleted\"] = BlockPuzzle.Settings.TUTORIAL_COMPLETED;\r\n            this.data[\"sfxVolume\"] = BlockPuzzle.SoundController.instance.getSFXVolume();\r\n            this.data[\"musicVolume\"] = BlockPuzzle.SoundController.instance.getMusicVolume();\r\n            if (this.isLocalStorageSupported) {\r\n                this.currentLocalStorage.setItem(LocalStorageController.STORAGE_NAME, JSON.stringify(this.data));\r\n            }\r\n        }\r\n        checkLocalStorageSupported() {\r\n            try {\r\n                this.isLocalStorageSupported = \"localStorage\" in window && window[\"localStorage\"] !== null;\r\n            }\r\n            catch (e) {\r\n                this.isLocalStorageSupported = false;\r\n            }\r\n        }\r\n        loadSave() {\r\n            this.checkLocalStorageSupported();\r\n            if (this.isLocalStorageSupported) {\r\n                if (this.currentLocalStorage.getItem(LocalStorageController.STORAGE_NAME)) {\r\n                    this.data = JSON.parse(this.currentLocalStorage.getItem(LocalStorageController.STORAGE_NAME));\r\n                }\r\n                else {\r\n                    this.currentLocalStorage.setItem(LocalStorageController.STORAGE_NAME, JSON.stringify(this.data));\r\n                }\r\n            }\r\n            this.finalizeLoading();\r\n        }\r\n        finalizeLoading() {\r\n            BlockPuzzle.SoundController.instance.setSFXVolume(this.getSFXVolume());\r\n            BlockPuzzle.SoundController.instance.setMusicVolume(this.getMusicVolume());\r\n            BlockPuzzle.Settings.TUTORIAL_COMPLETED = LocalStorageController.instance.isTutorialCompleted();\r\n            BlockPuzzle.ScoreManager.instance.setMaxScores(LocalStorageController.instance.getMaxScores());\r\n            BlockPuzzle.StarsManager.instance.setStarsAmount(LocalStorageController.instance.getNumStars(), false);\r\n            BlockPuzzle.AchievementsManager.instance.loadAchievementsState(LocalStorageController.instance.getAchievementsStates());\r\n            BlockPuzzle.PowerupManager.instance.setInitialState(BlockPuzzle.PowerupType.BOMB, LocalStorageController.instance.isBombBought());\r\n            BlockPuzzle.PowerupManager.instance.setInitialState(BlockPuzzle.PowerupType.LIGHTNING, LocalStorageController.instance.isLightningBought());\r\n        }\r\n    }\r\n    LocalStorageController.STORAGE_NAME = BlockPuzzle.Settings.LOCAL_STORAGE_KEY;\r\n    BlockPuzzle.LocalStorageController = LocalStorageController;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class LocalizationManager {\r\n        static init(jsonFile) {\r\n            LocalizationManager.texts = jsonFile;\r\n        }\r\n        static getText(key) {\r\n            return LocalizationManager.texts[key] ? LocalizationManager.texts[key] : \"NO_TEXT\";\r\n        }\r\n    }\r\n    BlockPuzzle.LocalizationManager = LocalizationManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class TextUtils {\r\n        static getText(text, x, y, fontSize, color, fontFamily = BlockPuzzle.Settings.DEFAULT_FONT_FAMILY, fontWidth = null) {\r\n            let textField = new Phaser.Text(BlockPuzzle.App.instance, x, y, text, {\r\n                font: (fontWidth ? fontWidth + ' ' : '') + fontSize + \"px \" + fontFamily,\r\n                fill: color,\r\n                align: \"center\"\r\n            });\r\n            textField.anchor.setTo(0.5, 0.5);\r\n            return textField;\r\n        }\r\n        static getBitmapText(text, x, y, fontSize, color = 0xFFFFFF, family = BlockPuzzle.Settings.DEFAULT_FONT_FAMILY) {\r\n            let textField = new Phaser.BitmapText(BlockPuzzle.App.instance, x, y, family, text, fontSize, \"center\");\r\n            textField.anchor.setTo(0.5, 0.5);\r\n            textField.tint = color;\r\n            return textField;\r\n        }\r\n        static getShadowText(text, x, y, fontSize, color, shadowColor = \"#000000\", shadowX = 0, shadowY = 2, anchorX = 0.5, anchorY = 0.5, fontFamily = BlockPuzzle.Settings.DEFAULT_FONT_FAMILY, fontWidth = null) {\r\n            let textField = new Phaser.Text(BlockPuzzle.App.instance, x, y, text, {\r\n                font: (fontWidth ? fontWidth + ' ' : '') + fontSize + \"px \" + fontFamily,\r\n                fill: color,\r\n                align: \"center\"\r\n            });\r\n            textField.anchor.setTo(anchorX, anchorY);\r\n            textField.setShadow(shadowX, shadowY, shadowColor, 0);\r\n            return textField;\r\n        }\r\n        static getStyledText(text, x, y, fontSize, color, strokeColor, strokeThinkness = 4, fontFamily = BlockPuzzle.Settings.DEFAULT_FONT_FAMILY, fontWidth = null) {\r\n            let textField = new Phaser.Text(BlockPuzzle.App.instance, x, y, text, {\r\n                font: (fontWidth ? fontWidth + ' ' : '') + fontSize + \"px \" + fontFamily,\r\n                fill: color,\r\n                stroke: strokeColor,\r\n                strokeThickness: strokeThinkness,\r\n                align: \"center\"\r\n            });\r\n            textField.setShadow(0, 2, strokeColor, 0);\r\n            textField.anchor.set(0.5, 0.5);\r\n            return textField;\r\n        }\r\n        static convertMSToHumanTime(milliseconds) {\r\n            let seconds = Math.floor(milliseconds / 1000);\r\n            let minutes = Math.floor(seconds / 60);\r\n            let restSeconds = seconds - minutes * 60;\r\n            return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (restSeconds < 10 ? \"0\" : \"\") + restSeconds;\r\n        }\r\n        static convertMSToMSS(milliseconds) {\r\n            let seconds = Math.floor(milliseconds / 1000);\r\n            let minutes = Math.floor(seconds / 60);\r\n            let restSeconds = seconds - minutes * 60;\r\n            return minutes + \":\" + (restSeconds < 10 ? \"0\" : \"\") + restSeconds;\r\n        }\r\n        static normalizeTime(seconds) {\r\n            let restSeconds = seconds;\r\n            let hours = Math.floor(restSeconds / 3600);\r\n            restSeconds %= 3600;\r\n            let minutes = Math.floor(restSeconds / 60);\r\n            restSeconds %= 60;\r\n            return (hours < 10 ? \"0\" : \"\") + hours + \":\" + (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (restSeconds < 10 ? \"0\" : \"\") + restSeconds;\r\n        }\r\n    }\r\n    BlockPuzzle.TextUtils = TextUtils;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class AbstractWindow extends Phaser.Group {\r\n        constructor(windowManager, backgroundAlpha = BlockPuzzle.Settings.WINDOW_BACKGROUND_ALPHA) {\r\n            super(BlockPuzzle.App.instance, null);\r\n            this.backgroundAlpha = BlockPuzzle.Settings.WINDOW_BACKGROUND_ALPHA;\r\n            this.windowManager = windowManager;\r\n            this.backgroundAlpha = backgroundAlpha;\r\n            this.visible = false;\r\n            this.buildBackground();\r\n        }\r\n        buildBackground() {\r\n            this.background = this.add(this.game.make.sprite(-50, -50, BlockPuzzle.Settings.GAME_ATLAS, 'blackSquare0000'));\r\n            this.background.anchor.set(0.5);\r\n            this.background.width = this.game.world.width + 100;\r\n            this.background.height = this.game.world.height + 100;\r\n            this.background.alpha = this.backgroundAlpha;\r\n            this.background.inputEnabled = true;\r\n            this.inputEnableChildren = true;\r\n        }\r\n        resize() {\r\n            this.position.set(0, 0);\r\n            this.background.position.set(this.windowManager.windowBounds.centerX, this.windowManager.windowBounds.centerY);\r\n            this.background.width = this.windowManager.windowBounds.width + 100;\r\n            this.background.height = this.windowManager.windowBounds.height + 100;\r\n            this.resizeContent();\r\n        }\r\n        show() {\r\n            this.visible = true;\r\n            this.resize();\r\n        }\r\n        hide() {\r\n            this.visible = false;\r\n        }\r\n        lockUpButtons(...args) {\r\n            for (let i = 0; i < args.length; i++) {\r\n                args[i][\"inputEnabled\"] = false;\r\n            }\r\n        }\r\n        unlockButtons(...args) {\r\n            for (let i = 0; i < args.length; i++) {\r\n                args[i][\"inputEnabled\"] = true;\r\n            }\r\n        }\r\n        destroy() {\r\n            super.destroy();\r\n            this.background = null;\r\n        }\r\n    }\r\n    BlockPuzzle.AbstractWindow = AbstractWindow;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"AbstractWindow.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class DefaultWindow extends BlockPuzzle.AbstractWindow {\r\n        constructor(windowManager, headingBackplateType, headingIconFrameName, backgroundAlpha) {\r\n            super(windowManager, backgroundAlpha);\r\n            this.headingBackplateType = headingBackplateType;\r\n            this.headingIconFrameName = headingIconFrameName;\r\n            /* create basic elements */\r\n            this.buildWindowBase();\r\n            this.buildAdditionalElements();\r\n            this.buildContent();\r\n        }\r\n        buildWindowBase() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n            this.windowHeading = this.contentContainer.add(new BlockPuzzle.WindowHeading(this.headingIconFrameName, this.headingBackplateType));\r\n        }\r\n        buildAdditionalElements() {\r\n        }\r\n        resizeContent() {\r\n            this.contentContainer.position.set(this.windowManager.windowBounds.centerX, this.windowManager.windowBounds.top);\r\n            this.contentContainer.scale.set(Math.min(1, this.windowManager.windowBounds.height / BlockPuzzle.CustomScaleManager.ORIGINAL_HEIGHT));\r\n            this.windowHeading.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.001);\r\n        }\r\n        show() {\r\n            super.show();\r\n            this.resetTweens();\r\n            this.background.alpha = 0;\r\n            this.game.add.tween(this.background)\r\n                .to({ alpha: this.backgroundAlpha }, 300, Phaser.Easing.Circular.Out, true, 0);\r\n            this.windowHeading.animateAppearing(150);\r\n            this.animateAppearing(200);\r\n        }\r\n        resetTweens() {\r\n            this.windowHeading.resetTweens();\r\n        }\r\n        hide() {\r\n            this.resetTweens();\r\n            super.hide();\r\n        }\r\n    }\r\n    BlockPuzzle.DefaultWindow = DefaultWindow;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"DefaultWindow.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class CloseableWindow extends BlockPuzzle.DefaultWindow {\r\n        constructor(windowManager, headingBackplateType, headingIconFrameName, backgroundAlpha) {\r\n            super(windowManager, headingBackplateType, headingIconFrameName, backgroundAlpha);\r\n        }\r\n        buildAdditionalElements() {\r\n            this.buttonClose = this.add(new BlockPuzzle.ButtonCloseWindow(this, this.closeClicked, this));\r\n        }\r\n        resizeContent() {\r\n            super.resizeContent();\r\n            this.buttonClose.resize(-75, 75);\r\n        }\r\n        show() {\r\n            super.show();\r\n            this.buttonClose.alpha = 1;\r\n            this.buttonClose.scale.set(0);\r\n            this.game.add.tween(this.buttonClose.scale)\r\n                .to({ x: 1, y: 1 }, 350, Phaser.Easing.Back.Out, true, 300);\r\n        }\r\n        animateDisappearing(delay, onClosedCallback = null) {\r\n            this.windowHeading.animateDisappearing(delay);\r\n            this.game.tweens.removeFrom(this.buttonClose);\r\n            this.game.add.tween(this.buttonClose)\r\n                .to({ y: '-100', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n            this.game.tweens.removeFrom(this.background);\r\n            this.game.add.tween(this.background)\r\n                .to({ alpha: 0 }, 300, Phaser.Easing.Circular.In, true, delay + 100)\r\n                .onComplete.add(() => {\r\n                if (onClosedCallback)\r\n                    onClosedCallback();\r\n                this.hide();\r\n            });\r\n        }\r\n        resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.buttonClose, false);\r\n            this.game.tweens.removeFrom(this.buttonClose.scale, false);\r\n        }\r\n        closeClicked() {\r\n            this.onCloseClicked();\r\n            this.animateDisappearing(0);\r\n        }\r\n    }\r\n    BlockPuzzle.CloseableWindow = CloseableWindow;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class WindowAchievements extends BlockPuzzle.CloseableWindow {\r\n        constructor(windowManager) {\r\n            super(windowManager, BlockPuzzle.WindowHeadingBackplateType.SILVER, 'iconHeadingAchievements', BlockPuzzle.Settings.WINDOW_BACKGROUND_ALPHA);\r\n            BlockPuzzle.StarsManager.instance.onStarAdded.add(this.handleStarAdded, this);\r\n        }\r\n        buildContent() {\r\n            this.itemsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.achievementPanels = new Map();\r\n            Object.keys(BlockPuzzle.AchievementType).filter(value => !isNaN(+value)).map(value => +value).forEach(key => {\r\n                this.achievementPanels.set(key, this.itemsContainer.add(new BlockPuzzle.AchievementPanel(this, key, ((key - 1) % 3 - 1) * 185, (Math.floor((key - 1) / 3) - 1) * 200)));\r\n            });\r\n        }\r\n        resizeContent() {\r\n            super.resizeContent();\r\n            this.itemsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.55 + 90);\r\n        }\r\n        updateAchievementPanels() {\r\n            this.achievementPanels.forEach(panel => panel.updateView());\r\n        }\r\n        show() {\r\n            super.show();\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_OTHER, \"ACHIEVEMENTS\");\r\n            }\r\n            this.updateAchievementPanels();\r\n        }\r\n        animateAppearing(delay) {\r\n            this.achievementPanels.forEach((panel, key) => {\r\n                panel.alpha = 1;\r\n                this.game.add.tween(panel)\r\n                    .from({ alpha: 0, y: '-50' }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + key * 25);\r\n                panel.scale.set(0.8);\r\n                this.game.add.tween(panel.scale)\r\n                    .to({ x: 1, y: 1 }, 250, Phaser.Easing.Back.Out, true, delay + key * 25);\r\n            });\r\n        }\r\n        animateDisappearing(delay, onClosedCallback) {\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n            this.achievementPanels.forEach((panel, key) => {\r\n                this.game.add.tween(panel)\r\n                    .to({ alpha: 0 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + key * 25);\r\n                this.game.add.tween(panel.scale)\r\n                    .to({ x: 0.55, y: 0.55 }, 250, Phaser.Easing.Back.In, true, delay + key * 25);\r\n            });\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n        resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.itemsContainer, false);\r\n            this.game.tweens.removeFrom(this.itemsContainer.scale, false);\r\n        }\r\n        /**\r\n         * INPUT HANDLERS\r\n         */\r\n        handleStarAdded() {\r\n            if (this.achievementPanels) {\r\n                const totalStarsAchievement = this.achievementPanels.get(BlockPuzzle.AchievementType.TOTAL_STARS);\r\n                if (totalStarsAchievement) {\r\n                    totalStarsAchievement.updateView();\r\n                }\r\n            }\r\n        }\r\n        onCloseClicked() {\r\n        }\r\n        continueClicked() {\r\n            this.animateDisappearing(0, () => { });\r\n        }\r\n    }\r\n    BlockPuzzle.WindowAchievements = WindowAchievements;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class WindowManager {\r\n        constructor() {\r\n            this.containerWidth = BlockPuzzle.CustomScaleManager.ORIGINAL_WIDTH;\r\n            this.containerHeight = BlockPuzzle.CustomScaleManager.ORIGINAL_HEIGHT;\r\n            this.isInitialized = false;\r\n        }\r\n        static get instance() {\r\n            return WindowManager._instance ? WindowManager._instance : WindowManager._instance = new WindowManager();\r\n        }\r\n        init() {\r\n            this.container = BlockPuzzle.App.instance.stage.add(BlockPuzzle.App.instance.make.group());\r\n            this.settings = this.container.add(new BlockPuzzle.WindowSettings(this));\r\n            this.results = this.container.add(new BlockPuzzle.WindowResults(this));\r\n            this.revive = this.container.add(new BlockPuzzle.WindowRevive(this));\r\n            this.shop = this.container.add(new BlockPuzzle.WindowShop(this));\r\n            this.achievements = this.container.add(new BlockPuzzle.WindowAchievements(this));\r\n            this.isInitialized = true;\r\n            this.resize();\r\n        }\r\n        resize() {\r\n            if (this.isInitialized) {\r\n                this.container.scale.set(BlockPuzzle.CustomScaleManager.SCALE_X, BlockPuzzle.CustomScaleManager.SCALE_Y);\r\n                this.container.position.set(BlockPuzzle.CustomScaleManager.WIDTH / 2 - this.containerWidth * BlockPuzzle.CustomScaleManager.SCALE_X / 2, BlockPuzzle.CustomScaleManager.HEIGHT / 2 - this.containerHeight * BlockPuzzle.CustomScaleManager.SCALE_Y / 2);\r\n                this.windowBounds = this.windowBounds || new BlockPuzzle.WindowBounds();\r\n                this.windowBounds.set(-(BlockPuzzle.CustomScaleManager.WIDTH / BlockPuzzle.CustomScaleManager.SCALE_X - this.containerWidth) / 2, (BlockPuzzle.CustomScaleManager.WIDTH / BlockPuzzle.CustomScaleManager.SCALE_X - this.containerWidth) / 2 + this.containerWidth, -(BlockPuzzle.CustomScaleManager.HEIGHT / BlockPuzzle.CustomScaleManager.SCALE_Y - this.containerHeight) / 2, (BlockPuzzle.CustomScaleManager.HEIGHT / BlockPuzzle.CustomScaleManager.SCALE_Y - this.containerHeight) / 2 + this.containerHeight);\r\n                this.settings.resize();\r\n                this.results.resize();\r\n                this.revive.resize();\r\n                this.shop.resize();\r\n                this.achievements.resize();\r\n            }\r\n        }\r\n        hasOpenedWindows() {\r\n            return this.settings.visible || this.shop.visible || this.achievements.visible || this.revive.visible || this.results.visible;\r\n        }\r\n        showSettings() {\r\n            this.settings.show();\r\n        }\r\n        showResults() {\r\n            this.results.show();\r\n        }\r\n        showRevive() {\r\n            this.revive.show();\r\n        }\r\n        showShop(powerupType) {\r\n            this.shop.setPowerupType(powerupType);\r\n            this.shop.show();\r\n        }\r\n        showAchievements() {\r\n            this.achievements.show();\r\n        }\r\n        hideAll() {\r\n            this.settings.hide();\r\n            this.results.hide();\r\n            this.revive.hide();\r\n            this.shop.hide();\r\n            this.achievements.hide();\r\n        }\r\n    }\r\n    WindowManager._instance = null;\r\n    BlockPuzzle.WindowManager = WindowManager;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class WindowResults extends BlockPuzzle.DefaultWindow {\r\n        constructor(windowManager) {\r\n            super(windowManager, BlockPuzzle.WindowHeadingBackplateType.GOLD, 'iconHeadingVictory', BlockPuzzle.Settings.WINDOW_BACKGROUND_ALPHA);\r\n        }\r\n        buildContent() {\r\n            this.controlsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.scoresPanel = this.controlsContainer.add(new BlockPuzzle.ResultsScoresPanel(this));\r\n            this.starsPanel = this.controlsContainer.add(new BlockPuzzle.ResultsStarsPanel(this));\r\n            this.doubleStarsButton = this.controlsContainer.add(new BlockPuzzle.DoubleStarsButton(this));\r\n            this.recordEffect = this.controlsContainer.add(new BlockPuzzle.NewRecordEffect(this));\r\n            this.scoresPanel.position.set(-80, -70);\r\n            this.starsPanel.position.set(-80, 70);\r\n            this.doubleStarsButton.position.set(200, 160);\r\n            this.recordEffect.position.set(205, -63);\r\n            this.buttonRestart = this.contentContainer.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonRestart', 0, 0, 1.35, this.restartClicked, this));\r\n        }\r\n        showButtons() {\r\n            this.buttonRestart.visible = true;\r\n            this.buttonRestart.alpha = 0;\r\n            this.game.add.tween(this.buttonRestart)\r\n                .to({ alpha: 1 }, 350, Phaser.Easing.Linear.None, true, 1000);\r\n        }\r\n        animateAppearing() {\r\n            const currentScores = BlockPuzzle.ScoreManager.instance.getCurrentScores();\r\n            const lastRoundStars = BlockPuzzle.StarsManager.instance.getLastRoundStars();\r\n            const scoresTweenDuration = currentScores > 0 ? Phaser.Math.clamp(Math.pow(currentScores, 0.9), 450, 1500) : 0;\r\n            const starsTweenDuration = lastRoundStars > 0 ? Phaser.Math.clamp(Math.pow(lastRoundStars, 0.85) * 75, 50, 1000) : 0;\r\n            const bestScoreReached = BlockPuzzle.ScoreManager.instance.updateMaxScores(BlockPuzzle.ScoreManager.instance.getCurrentScores());\r\n            /* API & ANALYTICS */\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_GAMERESULT);\r\n                setTimeout(() => {\r\n                    Promise.all([\r\n                        window[\"famobi_analytics\"].trackEvent(\"EVENT_LEVELFAIL\", {\r\n                            levelName: '',\r\n                            reason: 'dead'\r\n                        }),\r\n                        window[\"famobi_analytics\"].trackEvent(\"EVENT_TOTALSCORE\", {\r\n                            totalScore: currentScores\r\n                        })\r\n                    ]).then(() => this.showButtons(), () => this.showButtons());\r\n                }, 500);\r\n            }\r\n            else {\r\n                this.showButtons();\r\n            }\r\n            /* END ANALYTICS */\r\n            this.buttonRestart.visible = false;\r\n            this.scoresPanel.showPanel(200, 800, scoresTweenDuration, bestScoreReached);\r\n            this.starsPanel.showPanel(400, 800 + 250, starsTweenDuration);\r\n            if (BlockPuzzle.APIUtils.instance.hasRewardedVideo()) {\r\n                this.doubleStarsButton.visible = true;\r\n                this.doubleStarsButton.show(1400, BlockPuzzle.Settings.RESULTS_DOUBLE_STARS_REWARD);\r\n            }\r\n            else {\r\n                this.doubleStarsButton.visible = false;\r\n            }\r\n            if (bestScoreReached) {\r\n                this.recordEffect.show(800 + scoresTweenDuration + starsTweenDuration);\r\n            }\r\n        }\r\n        addBonusStars(amount) {\r\n            BlockPuzzle.StarsManager.instance.addBonusStars(amount);\r\n            this.starsPanel.tweenTexts(BlockPuzzle.StarsManager.instance.getStarsAmount() - amount, BlockPuzzle.StarsManager.instance.getStarsAmount(), BlockPuzzle.StarsManager.instance.getStarsAmount() - amount, BlockPuzzle.StarsManager.instance.getStarsAmount(), '', '', 50, Phaser.Math.clamp(amount * 75, 200, 1200));\r\n        }\r\n        resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.buttonRestart);\r\n            this.game.tweens.removeFrom(this.buttonRestart.scale);\r\n            this.game.tweens.removeFrom(this.controlsContainer.scale);\r\n            this.recordEffect.visible = false;\r\n        }\r\n        resizeContent() {\r\n            super.resizeContent();\r\n            this.controlsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.5);\r\n            this.buttonRestart.position.set(5, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.85);\r\n        }\r\n        hide() {\r\n            BlockPuzzle.SoundController.instance.stopCountingSound();\r\n            super.hide();\r\n        }\r\n        restartClicked() {\r\n            BlockPuzzle.SoundController.instance.stopCountingSound();\r\n            BlockPuzzle.TransitionScreen.instance.changeState('Level');\r\n        }\r\n        ;\r\n    }\r\n    BlockPuzzle.WindowResults = WindowResults;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class WindowRevive extends BlockPuzzle.CloseableWindow {\r\n        constructor(windowManager) {\r\n            super(windowManager, BlockPuzzle.WindowHeadingBackplateType.SILVER, 'iconHeadingRevive', BlockPuzzle.Settings.WINDOW_BACKGROUND_ALPHA);\r\n            this.isActive = false;\r\n        }\r\n        buildContent() {\r\n            this.controlsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.reviveCountdown = this.controlsContainer.add(new BlockPuzzle.ReviveCountdown(this));\r\n            this.reviveCountdown.position.set(0, 0);\r\n            this.buttonWatchVideo = this.contentContainer.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonRevive', 0, 0, 1.35, this.watchVideoClicked, this));\r\n        }\r\n        resizeContent() {\r\n            super.resizeContent();\r\n            this.controlsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.55);\r\n            this.buttonWatchVideo.position.set(10, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.85);\r\n        }\r\n        show() {\r\n            super.show();\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_BONUS);\r\n            }\r\n            this.reviveCountdown.startCountdown();\r\n        }\r\n        hide() {\r\n            this.reviveCountdown.resetCountdown();\r\n            super.hide();\r\n        }\r\n        onCloseClicked() {\r\n            this.reviveFailed(false);\r\n        }\r\n        watchVideoClicked() {\r\n            BlockPuzzle.APIUtils.instance.showRewardedVideo(() => this.reviveSucceed());\r\n        }\r\n        reviveSucceed() {\r\n            if (!this.isActive) {\r\n                return;\r\n            }\r\n            this.animateDisappearing(0, () => {\r\n                if (this.game.state.getCurrentState() instanceof BlockPuzzle.Level) {\r\n                    this.game.state.getCurrentState().eventManager.onReviveApplied.dispatch();\r\n                }\r\n            });\r\n        }\r\n        reviveFailed(disappear) {\r\n            if (!this.isActive) {\r\n                return;\r\n            }\r\n            if (disappear) {\r\n                this.animateDisappearing(30, null);\r\n            }\r\n            if (this.game.state.getCurrentState() instanceof BlockPuzzle.Level) {\r\n                this.game.state.getCurrentState().eventManager.onReviveFailed.dispatch();\r\n            }\r\n        }\r\n        animateAppearing(delay) {\r\n            this.isActive = true;\r\n            this.reviveCountdown.alpha = 0;\r\n            this.game.add.tween(this.reviveCountdown)\r\n                .to({ alpha: 1 }, 350, Phaser.Easing.Linear.None, true, delay + 130);\r\n            this.reviveCountdown.scale.set(0.6);\r\n            this.game.add.tween(this.reviveCountdown.scale)\r\n                .to({ x: 1, y: 1 }, 350, Phaser.Easing.Back.Out, true, delay + 130);\r\n            this.buttonWatchVideo.inputEnabled = true;\r\n            this.game.tweens.removeFrom(this.buttonWatchVideo);\r\n            this.buttonWatchVideo.alpha = 1;\r\n            this.game.add.tween(this.buttonWatchVideo)\r\n                .from({ y: '70', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 200);\r\n        }\r\n        animateDisappearing(delay, onClosedCallback) {\r\n            this.isActive = false;\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n            this.reviveCountdown.animateDisappearing(delay);\r\n            this.buttonWatchVideo.inputEnabled = false;\r\n            this.game.tweens.removeFrom(this.buttonWatchVideo);\r\n            this.game.add.tween(this.buttonWatchVideo)\r\n                .to({ y: '100', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n        resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.controlsContainer, false);\r\n            this.game.tweens.removeFrom(this.controlsContainer.scale, false);\r\n            this.game.tweens.removeFrom(this.reviveCountdown, false);\r\n            this.game.tweens.removeFrom(this.reviveCountdown.scale, false);\r\n            this.game.tweens.removeFrom(this.buttonWatchVideo, false);\r\n        }\r\n    }\r\n    BlockPuzzle.WindowRevive = WindowRevive;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class WindowSettings extends BlockPuzzle.CloseableWindow {\r\n        constructor(windowManager) {\r\n            super(windowManager, BlockPuzzle.WindowHeadingBackplateType.SILVER, 'iconHeadingSettings', BlockPuzzle.Settings.WINDOW_BACKGROUND_ALPHA);\r\n        }\r\n        buildContent() {\r\n            this.controlsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.sfxControl = this.controlsContainer.add(new BlockPuzzle.SFXControlScrollbar());\r\n            this.musicControl = this.controlsContainer.add(new BlockPuzzle.MusicControlScrollbar());\r\n            this.sfxControl.position.set(-25, -70);\r\n            this.musicControl.position.set(-25, 70);\r\n            this.buttonRestart = this.contentContainer.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonRestart', 0, 0, 1.12, this.restartClicked, this));\r\n            this.publisherLogo = this.contentContainer.add(new BlockPuzzle.PublisherLogo(0, 0));\r\n        }\r\n        resizeContent() {\r\n            super.resizeContent();\r\n            this.sfxControl.position.set(-25, -70);\r\n            this.musicControl.position.set(-25, 70);\r\n            this.controlsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.53);\r\n            this.buttonRestart.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.76);\r\n            this.publisherLogo.position.set(5, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.92);\r\n        }\r\n        onCloseClicked() {\r\n            BlockPuzzle.LocalStorageController.instance.save();\r\n        }\r\n        tutorialClicked() {\r\n            this.hide();\r\n            if (this.game.state.getCurrentState() instanceof BlockPuzzle.Level) {\r\n                this.game.state.getCurrentState().tutorialManager.restartTutorial();\r\n            }\r\n        }\r\n        restartClicked() {\r\n            BlockPuzzle.TransitionScreen.instance.changeState('Level');\r\n        }\r\n        animateAppearing() {\r\n            this.sfxControl.initValue();\r\n            this.musicControl.initValue();\r\n            this.sfxControl.alpha = 0;\r\n            this.game.add.tween(this.sfxControl)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, 200);\r\n            this.sfxControl.scale.set(0.6);\r\n            this.game.add.tween(this.sfxControl.scale)\r\n                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, 200);\r\n            this.musicControl.alpha = 0;\r\n            this.game.add.tween(this.musicControl)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, 250);\r\n            this.musicControl.scale.set(0.6);\r\n            this.game.add.tween(this.musicControl.scale)\r\n                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, 250);\r\n            this.buttonRestart.alpha = 0;\r\n            this.game.add.tween(this.buttonRestart)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n            this.buttonRestart.scale.set(0.6);\r\n            this.game.add.tween(this.buttonRestart.scale)\r\n                .to({ x: 1.12, y: 1.12 }, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n            this.publisherLogo.alpha = 0;\r\n            this.game.add.tween(this.publisherLogo)\r\n                .to({ alpha: 1 }, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n            this.publisherLogo.scale.set(0.28);\r\n            this.game.add.tween(this.publisherLogo.scale)\r\n                .to({ x: 0.45, y: 0.45 }, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n        }\r\n        animateDisappearing(delay, onClosedCallback) {\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n            this.game.add.tween(this.sfxControl)\r\n                .to({ alpha: 0, x: '-150' }, 200, Phaser.Easing.Sinusoidal.InOut, true, delay + 100);\r\n            this.game.add.tween(this.musicControl)\r\n                .to({ alpha: 0, x: '+150' }, 200, Phaser.Easing.Sinusoidal.InOut, true, delay + 100);\r\n            this.game.tweens.removeFrom(this.buttonRestart);\r\n            this.game.add.tween(this.buttonRestart)\r\n                .to({ y: '100', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.In, true, delay + 100);\r\n            this.game.tweens.removeFrom(this.publisherLogo);\r\n            this.game.add.tween(this.publisherLogo)\r\n                .to({ y: '100', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.In, true, delay + 50);\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n        resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.controlsContainer, false);\r\n            this.game.tweens.removeFrom(this.controlsContainer.scale, false);\r\n            this.game.tweens.removeFrom(this.buttonRestart, false);\r\n            this.game.tweens.removeFrom(this.sfxControl, false);\r\n            this.game.tweens.removeFrom(this.musicControl, false);\r\n            this.game.tweens.removeFrom(this.publisherLogo, false);\r\n        }\r\n    }\r\n    BlockPuzzle.WindowSettings = WindowSettings;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nvar BlockPuzzle;\r\n(function (BlockPuzzle) {\r\n    class WindowShop extends BlockPuzzle.CloseableWindow {\r\n        constructor(windowManager) {\r\n            super(windowManager, BlockPuzzle.WindowHeadingBackplateType.SILVER, 'iconHeadingShop', BlockPuzzle.Settings.WINDOW_BACKGROUND_ALPHA);\r\n        }\r\n        buildContent() {\r\n            this.itemsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.itemsMap = new Map();\r\n            this.itemsMap.set(BlockPuzzle.PowerupType.BOMB, this.itemsContainer.add(new BlockPuzzle.ShopItem(this, BlockPuzzle.PowerupType.BOMB)));\r\n            this.itemsMap.set(BlockPuzzle.PowerupType.LIGHTNING, this.itemsContainer.add(new BlockPuzzle.ShopItem(this, BlockPuzzle.PowerupType.LIGHTNING)));\r\n            this.buttonContinue = this.contentContainer.add(BlockPuzzle.ButtonUtils.createSimpleButton(BlockPuzzle.Settings.GAME_ATLAS, 'buttonContinue', 0, 0, 1, this.continueClicked, this));\r\n            this.starsCounter = this.contentContainer.add(new BlockPuzzle.ShopStarsCounter(this));\r\n            this.windowHeading.visible = false;\r\n            this.buttonContinue.visible = false;\r\n        }\r\n        resizeContent() {\r\n            super.resizeContent();\r\n            this.itemsContainer.position.set(-22, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.54);\r\n            this.buttonContinue.position.set(-5, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.85);\r\n            this.starsCounter.position.set(-28 * BlockPuzzle.CustomScaleManager.UPSCALE_FACTOR, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.2);\r\n            this.starsCounter.scale.set(BlockPuzzle.CustomScaleManager.UPSCALE_FACTOR);\r\n            if (this.currentItem) {\r\n                this.currentItem.scale.set(BlockPuzzle.CustomScaleManager.UPSCALE_FACTOR);\r\n            }\r\n        }\r\n        setPowerupType(powerupType) {\r\n            this.itemsMap.forEach(item => item.visible = item.powerupType == powerupType);\r\n            this.currentItem = this.itemsMap.get(powerupType);\r\n        }\r\n        show() {\r\n            super.show();\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_SHOP);\r\n            }\r\n            this.starsCounter.visible = true;\r\n            this.updateData();\r\n        }\r\n        updateData() {\r\n            this.starsCounter.setStarsAmount(BlockPuzzle.StarsManager.instance.getStarsAmount());\r\n            this.currentItem.show();\r\n        }\r\n        powerupBought() {\r\n            this.starsCounter.setStarsAmount(BlockPuzzle.StarsManager.instance.getStarsAmount());\r\n            this.closeClicked();\r\n        }\r\n        animateAppearing(delay) {\r\n            this.currentItem.alpha = 0;\r\n            this.game.add.tween(this.currentItem)\r\n                .to({ alpha: 1 }, 200, Phaser.Easing.Sinusoidal.Out, true, 200);\r\n            this.currentItem.scale.set(0.6);\r\n            this.game.add.tween(this.currentItem.scale)\r\n                .to({\r\n                x: BlockPuzzle.CustomScaleManager.UPSCALE_FACTOR,\r\n                y: BlockPuzzle.CustomScaleManager.UPSCALE_FACTOR\r\n            }, 240, Phaser.Easing.Back.Out, true, 200);\r\n            this.game.tweens.removeFrom(this.starsCounter);\r\n            this.starsCounter.alpha = 1;\r\n            this.game.add.tween(this.starsCounter)\r\n                .from({ y: '-60', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay);\r\n            this.buttonContinue.inputEnabled = true;\r\n            this.game.tweens.removeFrom(this.buttonContinue);\r\n            this.buttonContinue.alpha = 1;\r\n            this.game.add.tween(this.buttonContinue)\r\n                .from({ y: '70', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 50);\r\n        }\r\n        animateDisappearing(delay, onClosedCallback) {\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n            this.game.add.tween(this.currentItem)\r\n                .to({ alpha: 0 }, 160, Phaser.Easing.Sinusoidal.InOut, true, delay);\r\n            this.game.tweens.removeFrom(this.starsCounter);\r\n            this.game.add.tween(this.starsCounter)\r\n                .to({ y: '-60', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n            this.buttonContinue.inputEnabled = false;\r\n            this.game.tweens.removeFrom(this.buttonContinue);\r\n            this.game.add.tween(this.buttonContinue)\r\n                .to({ y: '100', alpha: 0 }, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n            if (BlockPuzzle.Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n        resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.itemsContainer, false);\r\n            this.game.tweens.removeFrom(this.itemsContainer.scale, false);\r\n            this.game.tweens.removeFrom(this.buttonContinue, false);\r\n            this.game.tweens.removeFrom(this.starsCounter, false);\r\n            this.game.tweens.removeFrom(this.starsCounter.scale, false);\r\n            if (this.currentItem) {\r\n                this.game.tweens.removeFrom(this.currentItem, false);\r\n                this.game.tweens.removeFrom(this.currentItem.scale, false);\r\n            }\r\n        }\r\n        /**\r\n         * INPUT HANDLERS\r\n         */\r\n        onCloseClicked() {\r\n        }\r\n        continueClicked() {\r\n            this.animateDisappearing(0, () => {\r\n            });\r\n        }\r\n    }\r\n    BlockPuzzle.WindowShop = WindowShop;\r\n})(BlockPuzzle || (BlockPuzzle = {}));\r\n","namespace BlockPuzzle {\r\n    export class InscriptionsService extends AbstractService {\r\n\r\n        constructor(serviceManager: ServiceManager) {\r\n            super(serviceManager);\r\n\r\n            this.level.eventManager.onLinesDestroyed.add(this.dispatchLinesDestroyed, this);\r\n        }\r\n\r\n        private dispatchLinesDestroyed(destroyedLines: number, cellPositions: CellPosition[]) {\r\n            if(destroyedLines >= 2) {\r\n                let px: number = cellPositions.reduce((accumulator, current) => accumulator += current.x, 0) / cellPositions.length;\r\n                let py: number = cellPositions.reduce((accumulator, current) => accumulator += current.y, 0) / cellPositions.length;\r\n\r\n                let targetCellPosition: Phaser.Point = this.level.boardManager.getBoard().getCellAt(Math.floor(px), Math.floor(py)).position;\r\n                this.displayInscription(destroyedLines, targetCellPosition.x, targetCellPosition.y);\r\n            }\r\n        }\r\n\r\n        private displayInscription(inscriptionPower: number, x: number, y: number) {\r\n            let inscriptionLevel: InscriptionLevel = InscriptionLevel.AWESOME;\r\n            switch (inscriptionPower) {\r\n                case 2:\r\n                    inscriptionLevel = InscriptionLevel.GOOD;\r\n                    break;\r\n                case 3:\r\n                    inscriptionLevel = InscriptionLevel.GREAT;\r\n                    break;\r\n                case 4:\r\n                    inscriptionLevel = InscriptionLevel.EXCELLENT;\r\n                    break;\r\n                case 5:\r\n                    inscriptionLevel = InscriptionLevel.AWESOME;\r\n                    break;\r\n            }\r\n\r\n            let insription: InscriptionEffect = this.level.boardManager.getBoard().effectsContainer.add(new InscriptionEffect(inscriptionLevel, x, y));\r\n        }\r\n\r\n        public displayScoresEffect(scores: number, x: number, y: number) {\r\n            new ScoresEffect(this.level, scores * ScoreManager.instance.getMultiplier(), x, Math.max(y, -150), 50);\r\n            ScoreManager.instance.addScores(scores);\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class LayoutService extends AbstractService {\r\n\r\n        public getFigureDraggingDelta(figureBarIndex: number): object {\r\n            return App.instance.device.desktop ? {x: 0, y: 0} : CustomScaleManager.isPortrait() ? {x: 0, y: Settings.FIGURE_VIEW_DRAGGING_DELTA} : {x: Settings.FIGURE_VIEW_DRAGGING_DELTA, y: -30 * (figureBarIndex)};\r\n        }\r\n\r\n        public getPowerupDraggingDelta(): object {\r\n            return App.instance.device.desktop ? {x: 0, y: 0} : CustomScaleManager.isPortrait() ? {x: 0, y: Settings.POWERUP_DRAGGING_DELTA} : {x: 0, y: Settings.POWERUP_DRAGGING_DELTA};\r\n        }\r\n\r\n        public getAvailableBoardBounds(): Phaser.Rectangle {\r\n            if(CustomScaleManager.isPortrait()) {\r\n                const {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 1, 0.12, 0.75);\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            } else if(CustomScaleManager.isSquared()) {\r\n                const {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 0.75, 0.15, 1);\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            } else if(CustomScaleManager.isLandscape()) {\r\n                const {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0.2, 0.8, 0, 1);\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n\r\n        public getAvailableFiguresPanelBounds(): Phaser.Rectangle {\r\n            if(CustomScaleManager.isPortrait()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 1, 0.75, 0.94);\r\n                let bounds: PIXI.Rectangle = this.level.boardManager.getBoardBounds(this.level.container);\r\n                let availableHeight: number = this.level.boardManager.getBoardBounds(this.level.container).width * 5 / 15;\r\n                minY = this.level.boardManager.getBoardBounds(this.level.container, false).bottom;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, minY + availableHeight / 2, maxX - minX, availableHeight);\r\n            } else if(CustomScaleManager.isSquared()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0.75, 1, 0.15, 0.87);\r\n                minX = this.level.boardManager.getBoardBounds(this.level.container).right;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            } else if(CustomScaleManager.isLandscape()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0.8, 1, 0.16, 1);\r\n                minX = this.level.boardManager.getBoardBounds(this.level.container).right;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n\r\n        public getAvailableUIContainerBounds(): Phaser.Rectangle {\r\n            if(CustomScaleManager.isPortrait()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 1, 0, 0.15);\r\n                maxY = this.level.boardManager.getBoardBounds(this.level.container).top;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            } else if(CustomScaleManager.isSquared()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 1, 0, 0.15);\r\n                maxY = this.level.boardManager.getBoardBounds(this.level.container).top;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            } else if(CustomScaleManager.isLandscape()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 0.2, 0.25, 0.72);\r\n                maxX = this.level.boardManager.getBoardBounds(this.level.container).left;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n\r\n        public getFigureDisposingTweenParams(): object {\r\n            return CustomScaleManager.isPortrait() ? {y: '+75', alpha: 0} : {x: '+75', alpha: 0};\r\n        }\r\n\r\n        public getAvailablePowerupsContainerBounds(): Phaser.Rectangle {\r\n            if(CustomScaleManager.isPortrait()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 1, 0.9, 1);\r\n                minY = this.getAvailableFiguresPanelBounds().y + this.getAvailableFiguresPanelBounds().height / 2;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n                // minY = this.level.boardManager.getBoardBounds(this.level.container).bottom;\r\n                // return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            } else if(CustomScaleManager.isSquared()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0.8, 1, 0.88, 0.97);\r\n                minX = this.level.boardManager.getBoardBounds(this.level.container, false).right;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            } else if(CustomScaleManager.isLandscape()) {\r\n                let {minX, maxX, minY, maxY} = this.level.windowBounds.getBounds(0, 0.2, 0.86, 0.94);\r\n                maxX = this.level.boardManager.getBoardBounds(this.level.container, false).left;\r\n                return new Phaser.Rectangle((minX + maxX) / 2, (minY + maxY) / 2, maxX - minX, maxY - minY);\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class StarsService extends AbstractService {\r\n\r\n        private currentStarGenerationProbability: number = 0;\r\n\r\n        constructor(serviceManager: ServiceManager) {\r\n            super(serviceManager);\r\n            this.currentStarGenerationProbability = Settings.BASIC_STAR_GENERATION_PROBABILITY;\r\n\r\n            this.level.eventManager.onLinesDestroyed.add(this.dispatchLinesDestroyed, this);\r\n            this.level.eventManager.onMoveFinished.add(this.dispatchMoveFinished, this);\r\n        }\r\n\r\n\r\n        private dispatchMoveFinished(numMoves: number) {\r\n            if(numMoves < Settings.SKIP_STARS_GENERATION_FOR_FIRST_X_MOVES) {\r\n                return;\r\n            }\r\n            if(Math.random() < this.currentStarGenerationProbability) {\r\n                if(this.level.boardManager.getBoard().getNumStarsOnTheBoard() < Settings.MAX_STARS_ON_BOARD_SIMULTANEOUSLY) {\r\n                    this.currentStarGenerationProbability = Settings.BASIC_STAR_GENERATION_PROBABILITY;\r\n                    this.generateRandomStar(Settings.STAR_GENERATION_DELAY);\r\n                    if(Math.random() < Settings.ADDITIONAL_SECOND_STAR_GENERATION_PROBABILITY) {\r\n                        this.generateRandomStar(Settings.STAR_GENERATION_DELAY * 1.5);\r\n                    }\r\n                }\r\n            } else {\r\n                this.currentStarGenerationProbability = Phaser.Math.clamp(this.currentStarGenerationProbability + Settings.BASIC_STAR_GENERATION_PROBABILITY_STEP, 0, Settings.MAX_STAR_GENERATING_PROBABILITY);\r\n            }\r\n        }\r\n\r\n        private dispatchLinesDestroyed(destroyedLines: number) {\r\n            // if(destroyedLines >= 2) {\r\n            //     const additionalMultilineProbability: number = Math.max(0, destroyedLines - 1) * Settings.ADDITIONAL_STAR_GENERATION_PROBABILITY_FOR_DESTROYING_MULTIPLE_LINES;\r\n            //     if(Math.random() < additionalMultilineProbability) {\r\n            //         this.currentStarGenerationProbability = Settings.BASIC_STAR_GENERATION_PROBABILITY;\r\n            //         this.generateRandomStar(Settings.STAR_GENERATION_DELAY);\r\n            //     }\r\n            // }\r\n        }\r\n\r\n        private generateRandomStar(delay: number) {\r\n            App.instance.time.events.add(delay, () => {\r\n                if(this.level.gameStateManager.isGameActive()) {\r\n                    const availableCells: Cell[] = this.level.boardManager.getBoard().getCells().filter(cell => cell && !cell.isEmpty() && !cell.getBlock().hasStar());\r\n                    if(availableCells.length > 0) {\r\n                        Phaser.ArrayUtils.getRandomItem(availableCells).getBlock().addStar(this.level);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class FigureView extends Phaser.Group {\r\n\r\n        public readonly figure: Figure;\r\n        public readonly level: Level;\r\n\r\n        public isReady: boolean = false;\r\n        protected blocks: Block[];\r\n\r\n        public readonly viewDeltaX: number;\r\n        public readonly viewDeltaY: number;\r\n\r\n        constructor(figure: Figure, figureModel: FigureModel) {\r\n            super(figure.game);\r\n            this.figure = figure;\r\n            this.level = figure.level;\r\n            this.viewDeltaX = -this.figure.figureWidth / 2 + 0.5;\r\n            this.viewDeltaY = -this.figure.figureHeight / 2 + 0.5;\r\n\r\n            this.createBlocks(figureModel);\r\n            this.tweenScale(Settings.DEFAULT_FIGURE_SCALE, false, 0);\r\n        }\r\n\r\n        protected createBlocks(figureModel: FigureModel) {\r\n            this.blocks = figureModel.getCells().map(cellModel => this.add(new Block(cellModel, this.figure.color)));\r\n        }\r\n\r\n        protected alignBlocks() {\r\n            this.blocks.forEach(block =>\r\n                block.position.set(\r\n                    (block.posX + this.viewDeltaX) * Settings.CELL_WIDTH,\r\n                    (block.posY + this.viewDeltaY) * Settings.CELL_HEIGHT\r\n                )\r\n            );\r\n        }\r\n\r\n        /**\r\n         * PUBLIC\r\n         */\r\n\r\n        public getBlocks(): Block[] {\r\n            return this.blocks;\r\n        }\r\n\r\n        public getFirstBlock(): Block {\r\n            return this.blocks[0];\r\n        }\r\n\r\n        public playAppearingTween(delay: number) {\r\n            this.scale.set(0);\r\n            this.game.add.tween(this.scale)\r\n                .to({x: 1, y: 1}, Settings.FIGURE_APPEARING_DURATION, Phaser.Easing.Back.Out, true, delay)\r\n                .onComplete.add(() => this.isReady = true);\r\n        }\r\n\r\n        public tweenScale(scale: number, keepOriginalPosition: boolean, duration: number, scaleMultiplier: number = 1) {\r\n            const targetScale: number = scale * scaleMultiplier;\r\n            const noScale: number = 1 * scaleMultiplier;\r\n            this.blocks.forEach(block => {\r\n                this.game.tweens.removeFrom(block, false);\r\n                this.game.tweens.removeFrom(block.scale, false);\r\n                if(duration > 0) {\r\n                    this.game.add.tween(block.scale)\r\n                        .to({x: targetScale, y: targetScale}, duration, Phaser.Easing.Sinusoidal.In, true);\r\n                    this.game.add.tween(block)\r\n                        .to({\r\n                            x: (block.posX + this.viewDeltaX) * Settings.CELL_WIDTH * (keepOriginalPosition ? noScale : targetScale),\r\n                            y: (block.posY + this.viewDeltaY) * Settings.CELL_HEIGHT * (keepOriginalPosition ? noScale : targetScale)\r\n                        }, duration, Phaser.Easing.Sinusoidal.In, true);\r\n                } else {\r\n                    block.scale.set(targetScale);\r\n                    block.position.set(\r\n                        (block.posX + this.viewDeltaX) * Settings.CELL_WIDTH * (keepOriginalPosition ? noScale : targetScale),\r\n                        (block.posY + this.viewDeltaY) * Settings.CELL_HEIGHT * (keepOriginalPosition ? noScale : targetScale)\r\n                    )\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class PowerupManager {\r\n        private static _instance: PowerupManager = null;\r\n        public static get instance(): PowerupManager {\r\n            return PowerupManager._instance ? PowerupManager._instance : PowerupManager._instance = new PowerupManager();\r\n        }\r\n\r\n        private powerupStates: Map<PowerupType, boolean>;\r\n        private powerupPrices: Map<PowerupType, number>;\r\n        private powerupPriceSteps: Map<PowerupType, number>;\r\n\r\n        public onPowerupBought: Phaser.Signal;\r\n\r\n        constructor() {\r\n            this.onPowerupBought = new Phaser.Signal();\r\n\r\n            this.powerupStates = new Map<PowerupType, boolean>();\r\n            this.powerupStates.set(PowerupType.BOMB, false);\r\n            this.powerupStates.set(PowerupType.LIGHTNING,  false);\r\n\r\n            this.powerupPrices = new Map<PowerupType, number>();\r\n            this.powerupPrices.set(PowerupType.BOMB, Settings.BOMB_PRICE);\r\n            this.powerupPrices.set(PowerupType.LIGHTNING, Settings.LIGHTNING_PRICE);\r\n\r\n            this.powerupPriceSteps = new Map<PowerupType, number>();\r\n            this.powerupPriceSteps.set(PowerupType.BOMB, Settings.BOMB_PRICE_STEP);\r\n            this.powerupPriceSteps.set(PowerupType.LIGHTNING, Settings.LIGHTNING_PRICE_STEP);\r\n        }\r\n\r\n        public setInitialState(powerupType: PowerupType, value: boolean) {\r\n            this.powerupStates.set(powerupType, value);\r\n        }\r\n\r\n        public isBought(powerupType: PowerupType): boolean {\r\n            return this.powerupStates.get(powerupType) || false;\r\n        }\r\n\r\n        public resetPrices() {\r\n            this.powerupPrices.set(PowerupType.BOMB, Settings.BOMB_PRICE);\r\n            this.powerupPrices.set(PowerupType.LIGHTNING, Settings.LIGHTNING_PRICE);\r\n        }\r\n\r\n        public buy(powerupType: PowerupType) {\r\n            this.powerupStates.set(powerupType, true);\r\n            StarsManager.instance.setStarsAmount(StarsManager.instance.getStarsAmount() - this.getPrice(powerupType));\r\n            this.onPowerupBought.dispatch(powerupType);\r\n            LocalStorageController.instance.save();\r\n            this.powerupPrices.set(powerupType, this.powerupPrices.get(powerupType) + this.powerupPriceSteps.get(powerupType));\r\n        }\r\n\r\n        public usePowerup(powerupType: PowerupType) {\r\n            this.powerupStates.set(powerupType, false);\r\n            LocalStorageController.instance.save();\r\n        }\r\n\r\n        public getPrice(powerupType: PowerupType): number {\r\n            return this.powerupPrices.get(powerupType) || Number.MAX_SAFE_INTEGER;\r\n        }\r\n\r\n        public hasUnboughtPowerups(): boolean {\r\n            let hasAvailablePowerups: boolean = false;\r\n            this.powerupStates.forEach((state, key) => {\r\n                if (!state ) {\r\n                    hasAvailablePowerups = true;\r\n                }\r\n            });\r\n            return hasAvailablePowerups;\r\n        }\r\n\r\n        public hasBoughtPowerups(): boolean {\r\n            let hasBoughtPowerups: boolean = false;\r\n            this.powerupStates.forEach((state, key) => {\r\n                if (state) {\r\n                    hasBoughtPowerups = true;\r\n                }\r\n            });\r\n            return hasBoughtPowerups;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ScoreManager {\r\n        private static _instance: ScoreManager = null;\r\n        public static get instance(): ScoreManager {\r\n            return ScoreManager._instance ? ScoreManager._instance : ScoreManager._instance = new ScoreManager();\r\n        }\r\n\r\n        private currentMultiplier: number = 1;\r\n        private maxScores: number = 0;\r\n        private prevMaxScores: number = 0;\r\n        private currentScore: number = 0;\r\n        private lastRoundScores: number = 0;\r\n        private roundNumber: number = 0;\r\n\r\n        public readonly onScoreChanges: Phaser.Signal;\r\n        public readonly onMultiplierChanges: Phaser.Signal;\r\n\r\n        constructor() {\r\n            this.onScoreChanges = new Phaser.Signal();\r\n            this.onMultiplierChanges = new Phaser.Signal();\r\n        }\r\n\r\n        public reset() {\r\n            this.currentScore = 0;\r\n            this.currentMultiplier = 1;\r\n        }\r\n\r\n        public getCurrentScores(): number {\r\n            return ~~this.currentScore;\r\n        }\r\n\r\n        public addScores(value: number) {\r\n            this.lastRoundScores = value * this.getMultiplier();\r\n            this.currentScore += this.lastRoundScores;\r\n            if(value != 0) {\r\n                this.currentMultiplier = this.calculateMultiplier();\r\n                this.onScoreChanges.dispatch(this.getCurrentScores());\r\n                this.onMultiplierChanges.dispatch(this.getMultiplier(), this.getMultiplierProgress());\r\n                AchievementsManager.instance.addValue(AchievementType.TOTAL_SCORES, this.lastRoundScores);\r\n                AchievementsManager.instance.setValue(AchievementType.BEST_SCORE_REACHED, this.getCurrentScores());\r\n\r\n                Analytics.instance.updateLevelData({score: this.getCurrentScores()});\r\n            }\r\n        }\r\n\r\n        public startRound() {\r\n            this.roundNumber++;\r\n        }\r\n\r\n        public getRoundNumber(): number {\r\n            return this.roundNumber;\r\n        }\r\n\r\n        public isFirstRound(): boolean {\r\n            return this.roundNumber <= 1;\r\n        }\r\n\r\n        /**\r\n         * MULTIPLIER\r\n         */\r\n\r\n        private calculateMultiplier() {\r\n            const scores: number = this.getCurrentScores();\r\n            for(let i: number = 0; i < Settings.MULTIPLIER_MILESTONES.length; i++) {\r\n                if(Settings.MULTIPLIER_MILESTONES[i] > scores) {\r\n                    return i + 1;\r\n                }\r\n            }\r\n            return Settings.MULTIPLIER_MILESTONES.length;\r\n        }\r\n\r\n        public getMultiplier(): number {\r\n            return this.currentMultiplier;\r\n        }\r\n\r\n        public getMultiplierProgress(): number {\r\n            if(this.currentMultiplier >= 2) {\r\n                return (this.getCurrentScores() -  Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 2]) / (Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 1] -  Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 2]);\r\n            } else {\r\n                return this.getCurrentScores() / Settings.MULTIPLIER_MILESTONES[this.currentMultiplier - 1];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * MAX SCORES\r\n         */\r\n\r\n        public getMaxScores(): number {\r\n            return this.maxScores;\r\n        }\r\n\r\n        public getPrevMaxScores(): number {\r\n            return this.prevMaxScores;\r\n        }\r\n\r\n        public setMaxScores(value: number) {\r\n            this.maxScores = Math.max(this.maxScores, value);\r\n            this.prevMaxScores = this.maxScores;\r\n        }\r\n\r\n        public updateMaxScores(currentScores: number): boolean {\r\n            if(currentScores > this.maxScores) {\r\n                this.prevMaxScores = this.maxScores;\r\n                this.maxScores = currentScores;\r\n                LocalStorageController.instance.save();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * LISTENERS\r\n         */\r\n\r\n        public removeListeners() {\r\n            this.onScoreChanges.removeAll();\r\n            this.onMultiplierChanges.removeAll();\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class StarsManager {\r\n        private static _instance: StarsManager = null;\r\n        public static get instance(): StarsManager {\r\n            return StarsManager._instance ? StarsManager._instance : StarsManager._instance = new StarsManager();\r\n        }\r\n\r\n        private numStars: number = 0;\r\n        private lastRoundStars: number = 0;\r\n        public readonly onStarAdded: Phaser.Signal;\r\n        public readonly onStarsAmountChanged: Phaser.Signal;\r\n\r\n        constructor() {\r\n            this.onStarAdded = new Phaser.Signal();\r\n            this.onStarsAmountChanged = new Phaser.Signal();\r\n        }\r\n\r\n        public reset() {\r\n            this.lastRoundStars = 0;\r\n        }\r\n\r\n        public getLastRoundStars() {\r\n            return this.lastRoundStars;\r\n        }\r\n\r\n        public getStarsAmount(): number {\r\n            return this.numStars;\r\n        }\r\n\r\n        public setStarsAmount(value: number, save: boolean = true) {\r\n            this.numStars = value;\r\n            this.onStarsAmountChanged.dispatch(this.getStarsAmount());\r\n            if(save) {\r\n                LocalStorageController.instance.save();\r\n            }\r\n        }\r\n\r\n        public addBonusStars(amount: number) {\r\n            this.setStarsAmount(this.getStarsAmount() + amount);\r\n            this.lastRoundStars += amount;\r\n            AchievementsManager.instance.addValue(AchievementType.TOTAL_STARS, amount);\r\n            Analytics.instance.updateLevelData({stars: this.getStarsAmount()});\r\n        }\r\n\r\n        public pickupStars(amount: number, silent: boolean = false) {\r\n            this.setStarsAmount(this.getStarsAmount() + amount);\r\n            if(!silent) {\r\n                this.lastRoundStars += amount;\r\n            }\r\n            AchievementsManager.instance.addValue(AchievementType.TOTAL_STARS, amount);\r\n            Analytics.instance.updateLevelData({stars: this.getStarsAmount()});\r\n            this.onStarAdded.dispatch(this.getStarsAmount());\r\n            LocalStorageController.instance.save();\r\n        }\r\n\r\n        /**\r\n         * LISTENERS\r\n         */\r\n\r\n        public removeListeners() {\r\n\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class SoundController {\r\n        private static _instance: SoundController = null;\r\n        public static get instance(): SoundController {\r\n            return SoundController._instance ? SoundController._instance :\r\n                SoundController._instance = new SoundController();\r\n        }\r\n\r\n        private soundNames: string[];\r\n        private melodyNames: string[];\r\n        private mainTheme: Phaser.Sound;\r\n        private countingSound: Phaser.Sound;\r\n        private currentMusicVolume: number = Settings.MUSIC_ENABLED_BY_DEFAULT ? 0.4 : 0;\r\n        private currentSFXVolume: number = 0.5;\r\n\r\n        private currentBlockDestroyingSoundIndex: number = 0;\r\n        private debouncedSoundsTimestamps: Map<String, number>;\r\n        private hadBeenMutedBeforePauseTriggered: boolean = false;\r\n\r\n\r\n        constructor() {\r\n            this.debouncedSoundsTimestamps = new Map<String, number>();\r\n\r\n            this.melodyNames = [\"melody\"];\r\n\r\n            this.soundNames = [\r\n                \"click\",\r\n                \"error\",\r\n                \"counting\",\r\n                \"panel\",\r\n                \"panelUp\",\r\n                \"figureTap\",\r\n                \"figureRelease\",\r\n                \"figureFail\",\r\n                \"starAppear\",\r\n                \"starReceived\",\r\n                \"good\",\r\n                \"great\",\r\n                \"excellent\",\r\n                \"awesome\",\r\n                \"buying\",\r\n                \"match1\",\r\n                \"match2\",\r\n                \"match3\",\r\n                \"match4\",\r\n                \"match5\",\r\n                \"match6\",\r\n                \"match7\",\r\n                \"block\",\r\n                \"revive\",\r\n                \"lose\",\r\n                \"stamp\",\r\n                \"heartbeat\",\r\n                \"levelUp\",\r\n                \"reward\",\r\n                \"achievement\",\r\n                \"fire\",\r\n                \"bomb\",\r\n                \"lighting\"\r\n            ];\r\n        }\r\n\r\n        public isDecodingSupported(): boolean {\r\n            return App.instance.sound.usingWebAudio;\r\n        }\r\n\r\n        public getSFXNames(): string[] {\r\n            return this.soundNames;\r\n        }\r\n\r\n        public getSoundNames(): string[] {\r\n            return this.melodyNames.slice().concat(this.soundNames);\r\n        }\r\n\r\n        /**\r\n         * MUSIC\r\n         */\r\n\r\n        public init() {\r\n\r\n        }\r\n\r\n        public startMusic() {\r\n            this.mainTheme = App.instance.sound.play('melody', this.currentMusicVolume, true);\r\n        }\r\n\r\n        /**\r\n         * PAUSE/RESUME SOUND\r\n         */\r\n\r\n\r\n        public pauseAudio() {\r\n            this.hadBeenMutedBeforePauseTriggered = App.instance.sound.mute;\r\n            App.instance.sound.mute = true;\r\n        }\r\n\r\n        public resumeAudio() {\r\n            App.instance.sound.mute = this.hadBeenMutedBeforePauseTriggered;\r\n        }\r\n\r\n        public addSuspendedContextRestoreHandler() {\r\n            if('ontouchstart' in window && App.instance.sound.usingWebAudio) {\r\n                console.log(\"Adding context resume handler...\");\r\n                document.querySelector('canvas').addEventListener('touchstart', function() {\r\n                    if(App.instance.sound.context.state === 'suspended') {\r\n                        console.log('Resuming suspended context...');\r\n                        App.instance.sound.context.resume().then(() => {\r\n                            console.log('Playback resumed successfully');\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        public getMusicVolume(): number {\r\n            return this.currentMusicVolume;\r\n        }\r\n\r\n        public setMusicVolume(value: number) {\r\n            this.currentMusicVolume = Phaser.Math.clamp(value, 0, 1);\r\n            if (this.mainTheme && this.mainTheme.isPlaying) {\r\n                this.mainTheme.volume = this.currentMusicVolume;\r\n            }\r\n        }\r\n\r\n        public getSFXVolume(): number {\r\n            return this.currentSFXVolume;\r\n        }\r\n\r\n        public setSFXVolume(value: number) {\r\n            this.currentSFXVolume = Phaser.Math.clamp(value, 0, 1);\r\n        }\r\n\r\n\r\n        /**\r\n         * SOUNDS\r\n         */\r\n\r\n        public playClickSound() {\r\n            this.playSound('click');\r\n        }\r\n\r\n        public playPanelMovementSound() {\r\n            this.playSound('panel');\r\n        }\r\n\r\n        public playPanelUpMovementSound() {\r\n            this.playSound('panelUp');\r\n        }\r\n\r\n        public playFigurePickupSound() {\r\n            this.playSound('figureTap');\r\n        }\r\n\r\n        public playFigurePlaceSound() {\r\n            this.playSound('figureRelease');\r\n        }\r\n\r\n        public playFigureFailSound() {\r\n            this.playSound('figureFail');\r\n        }\r\n\r\n        public playStarAppearSound() {\r\n            this.playSound('starAppear');\r\n        }\r\n\r\n        public playStarReceivedSound() {\r\n            this.playSound('starReceived');\r\n        }\r\n\r\n        public playBuyingSound() {\r\n            this.playSound('buying');\r\n        }\r\n\r\n        public playBlockSound() {\r\n            this.playSound('block', 0.8);\r\n        }\r\n\r\n        public playReviveSound() {\r\n            this.playSound('revive', 0.6);\r\n        }\r\n\r\n        public playStampSound() {\r\n            this.playSound('stamp');\r\n        }\r\n\r\n        public playErrorSound() {\r\n            this.playSound('error');\r\n        }\r\n\r\n        public playLoseSound() {\r\n            App.instance.time.events.add(70, () => this.playSound('lose', 0.7));\r\n        }\r\n\r\n        public playHeartBeatSound() {\r\n            this.playSound('heartbeat', 1);\r\n        }\r\n\r\n        public playlevelUpSound() {\r\n            this.playSound('levelUp', 0.5);\r\n        }\r\n\r\n        public playAchievementClaimedSound() {\r\n            this.playSound('achievement', 0.8);\r\n        }\r\n\r\n        public playRewardClaimedSound() {\r\n            this.playSound('reward', 0.8);\r\n        }\r\n\r\n        public playExplosionSound() {\r\n            this.playSound('bomb', 0.8);\r\n            this.playSound('fire', 0.8);\r\n        }\r\n\r\n        public playLightningSound() {\r\n            this.playSound('lighting', 0.8);\r\n        }\r\n\r\n        public playNextLineDestroyingSound(numLines: number) {\r\n            this.playSound('match' + ((this.currentBlockDestroyingSoundIndex++ % 7) + 1));\r\n            this.playSound('block');\r\n            if (numLines > 1) {\r\n                App.instance.time.events.add(100, () => this.playSound('block'));\r\n            }\r\n        }\r\n\r\n        public playInscriptionSound(inscriptionLevel: InscriptionLevel) {\r\n            switch (inscriptionLevel) {\r\n                case InscriptionLevel.GOOD:\r\n                    this.playSound('good', 0.6);\r\n                    break;\r\n\r\n                case InscriptionLevel.GREAT:\r\n                    this.playSound('great', 0.6);\r\n                    break;\r\n\r\n                case InscriptionLevel.AWESOME:\r\n                    this.playSound('awesome', 0.6);\r\n                    break;\r\n\r\n                case InscriptionLevel.EXCELLENT:\r\n                    this.playSound('excellent', 0.6);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        protected playSound(key: string, volume: number = 0.5, loop: boolean = false) {\r\n            if (App.instance.sound.usingWebAudio && App.instance.sound.context.state === 'suspended') {\r\n                //skip this sound\r\n            } else {\r\n                App.instance.sound.play(key, volume * this.currentSFXVolume, loop);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * COUNTING\r\n         */\r\n\r\n\r\n        public startCountingSound() {\r\n            if (this.countingSound) {\r\n                this.stopCountingSound();\r\n            }\r\n            this.countingSound = App.instance.add.sound('counting', 0.55, true);\r\n            this.countingSound.play();\r\n        }\r\n\r\n        public stopCountingSound() {\r\n            if (this.countingSound) {\r\n                if (this.countingSound.isPlaying) {\r\n                    this.countingSound.stop();\r\n                }\r\n                this.countingSound.destroy();\r\n            }\r\n            this.countingSound = null;\r\n        }\r\n\r\n\r\n        /**\r\n         * PRIVATE\r\n         */\r\n\r\n        private debounceSound(key: string, volume: number, interval: number) {\r\n            const currentTime: number = new Date().getTime();\r\n            const lastTimestamp: number = this.debouncedSoundsTimestamps.get(key) || 0;\r\n            if (currentTime - lastTimestamp >= interval) {\r\n                this.playSound(key, volume, false);\r\n                this.debouncedSoundsTimestamps.set(key, currentTime);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * MUSIC\r\n         */\r\n\r\n        public chokeMusicVolume(duration: number = 500) {\r\n            if (this.mainTheme) {\r\n                this.mainTheme.fadeTo(duration, this.currentMusicVolume > 0 ? Math.min(0.1, this.currentMusicVolume / 3) : 0);\r\n            }\r\n        }\r\n\r\n        public restoreMusicVolume(duration: number = 500) {\r\n            if (this.mainTheme) {\r\n                this.mainTheme.fadeTo(duration, this.currentMusicVolume);\r\n            }\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AutoResizeableState extends Phaser.State {\r\n\r\n        public isInitialized: boolean;\r\n        public containerWidth: number;\r\n        public containerHeight: number;\r\n        public originalBounds: WindowBounds;\r\n        public windowBounds: WindowBounds;\r\n        public container: Phaser.Group;\r\n\r\n\r\n        init(containerWidth: number = CustomScaleManager.ORIGINAL_WIDTH, containerHeight: number = CustomScaleManager.ORIGINAL_HEIGHT) {\r\n            super.init();\r\n            this.isInitialized = false;\r\n            this.containerWidth = containerWidth;\r\n            this.containerHeight = containerHeight;\r\n            this.container = this.add.existing(this.game.make.group(null));\r\n\r\n            this.originalBounds = new WindowBounds();\r\n            this.originalBounds.set(0, CustomScaleManager.ORIGINAL_WIDTH, 0, CustomScaleManager.ORIGINAL_HEIGHT);\r\n\r\n            this.resize();\r\n        }\r\n\r\n        create() {\r\n            this.isInitialized = true;\r\n        }\r\n\r\n\r\n        public addChild(child: any): any {\r\n            return this.container.add(child);\r\n        }\r\n\r\n        public getInputPosition(): Phaser.Point {\r\n            return new Phaser.Point((this.game.input.activePointer.x - this.container.x) / CustomScaleManager.SCALE_X, (this.game.input.activePointer.y - this.container.y) / CustomScaleManager.SCALE_Y);\r\n        }\r\n\r\n        public translateInputPosition(pointer: Phaser.Pointer): Phaser.Point {\r\n            return new Phaser.Point((pointer.x - this.container.x) / CustomScaleManager.SCALE_X, (pointer.y - this.container.y) / CustomScaleManager.SCALE_Y);\r\n\r\n        }\r\n\r\n        resize(width: number = 0, height: number = 0) {\r\n            this.container.scale.set(CustomScaleManager.SCALE_X, CustomScaleManager.SCALE_Y);\r\n            this.container.position.set(CustomScaleManager.WIDTH / 2 - this.containerWidth * CustomScaleManager.SCALE_X / 2, CustomScaleManager.HEIGHT / 2 - this.containerHeight *  CustomScaleManager.SCALE_Y / 2);\r\n\r\n            this.windowBounds = this.windowBounds || new WindowBounds();\r\n            this.windowBounds.set(-(CustomScaleManager.WIDTH / CustomScaleManager.SCALE_X - this.containerWidth) / 2, (CustomScaleManager.WIDTH / CustomScaleManager.SCALE_X - this.containerWidth) / 2 + this.containerWidth, -(CustomScaleManager.HEIGHT / CustomScaleManager.SCALE_Y - this.containerHeight) / 2, (CustomScaleManager.HEIGHT / CustomScaleManager.SCALE_Y - this.containerHeight) / 2 + this.containerHeight);\r\n        }\r\n\r\n        shutdown() {\r\n            this.container.destroy();\r\n            this.container = null;\r\n        }\r\n\r\n    }\r\n\r\n    export class WindowBounds {\r\n        public left: number;\r\n        public right: number;\r\n        public top: number;\r\n        public down: number;\r\n        public x: number;\r\n        public y: number;\r\n        public width: number;\r\n        public height: number;\r\n        public centerX: number;\r\n        public centerY: number;\r\n\r\n        constructor() {\r\n            this.set(0,0,0,0);\r\n        }\r\n\r\n        public set(left: number, right: number, top: number, down: number) {\r\n            this.left = left;\r\n            this.right = right;\r\n            this.top = top;\r\n            this.down = down;\r\n            this.x = left;\r\n            this.y = top;\r\n            this.width = right - left;\r\n            this.height = down - top;\r\n            this.centerX = (right + left) / 2;\r\n            this.centerY = (down + top) / 2;\r\n        }\r\n\r\n\r\n        public getPosition(rx: number, ry: number, dx: number = 0, dy: number = 0): Phaser.Point {\r\n            return new Phaser.Point(this.left + rx * this.width + dx, this.top + ry * this.height + dy);\r\n        }\r\n\r\n        public getBounds(left: number, right: number, top: number, down: number): BoundsRectangle {\r\n            return {minX: this.left + left * this.width, maxX: this.left + right * this.width, minY: this.top + top * this.height, maxY: this.top + down * this.height};\r\n        }\r\n    }\r\n}\r\n","namespace BlockPuzzle {\r\n    export class Boot extends Phaser.State {\r\n\r\n        init() {\r\n            this.game.scale.scaleMode = CustomScaleManager.getScaleMode();\r\n            this.game.scale.fullScreenScaleMode = CustomScaleManager.getScaleMode();\r\n\r\n            this.game.scale.pageAlignHorizontally = true;\r\n            this.game.scale.pageAlignVertically = true;\r\n\r\n            if (this.game.device.android) {\r\n                this.game.input.mouse.enabled = !this.game.device.mspointer;\r\n            }\r\n\r\n            this.game.scale.setResizeCallback(this.resizeCallback, this);\r\n            this.game.scale.onSizeChange.add(this.sizeChanged, this);\r\n\r\n            this.stage.disableVisibilityChange = true;\r\n\r\n            Analytics.instance.initUser();\r\n\r\n            SoundController.instance.addSuspendedContextRestoreHandler();\r\n        }\r\n\r\n        preload() {\r\n            this.game.load.atlasJSONArray(Settings.PRELOADER_ATLAS, 'img/' + Settings.PRELOADER_ATLAS + '.png', 'img/' + Settings.PRELOADER_ATLAS + '.json');\r\n            this.game.load.json('l10n', 'lang/texts.json');\r\n        }\r\n\r\n        create() {\r\n            this.input.maxPointers = 1;\r\n\r\n            if (this.game.device.desktop) {\r\n                this.game.canvas.oncontextmenu = function (e) {\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n            LocalizationManager.init(this.game.cache.getJSON('l10n'));\r\n            this.game.state.start('Preloader', true, false);\r\n        }\r\n\r\n        resizeCallback(scaleManager: Phaser.ScaleManager, parentBounds: Phaser.Rectangle) {\r\n            if (CustomScaleManager.getScaleMode() == Phaser.ScaleManager.USER_SCALE) {\r\n                if (this.game.width != window.innerWidth * CustomScaleManager.getPixelRatio() || this.game.height != window.innerHeight * CustomScaleManager.getPixelRatio()) {\r\n                    scaleManager.setGameSize(window.innerWidth * CustomScaleManager.getPixelRatio(), window.innerHeight * CustomScaleManager.getPixelRatio());\r\n                    scaleManager.setUserScale(1 / CustomScaleManager.getPixelRatio(), 1 / CustomScaleManager.getPixelRatio());\r\n                }\r\n            }\r\n        }\r\n\r\n        sizeChanged(scaleManager: Phaser.ScaleManager, w: number, h: number) {\r\n            const windowDimensions: Phaser.Rectangle =\r\n                (this.game.device.android\r\n                    && window[\"visualViewport\"]\r\n                    && window[\"visualViewport\"].width\r\n                    && window[\"visualViewport\"].height)\r\n                    ? new Phaser.Rectangle(0, 0, Math.min(w, window[\"visualViewport\"].width), Math.min(h, window[\"visualViewport\"].height))\r\n                    : new Phaser.Rectangle(0, 0, window.innerWidth, window.innerHeight);\r\n\r\n            CustomScaleManager.update(windowDimensions.width * CustomScaleManager.getPixelRatio(), windowDimensions.height * CustomScaleManager.getPixelRatio());\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","///<reference path=\"AutoResizeableState.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class Level extends AutoResizeableState {\r\n\r\n        public eventManager: EventManager;\r\n        public dataManager: DataManager;\r\n        public serviceManager: ServiceManager;\r\n        public gameStateManager: GameStateManager;\r\n        public boardManager: BoardManager;\r\n        public figureManager: FigureManager;\r\n        public uiManager: UIManager;\r\n        public tutorialManager: TutorialManager;\r\n\r\n        create() {\r\n\r\n            ScoreManager.instance.reset();\r\n            ScoreManager.instance.startRound();\r\n            StarsManager.instance.reset();\r\n            PowerupManager.instance.resetPrices();\r\n\r\n            Analytics.instance.startLevel();\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n                if (!Settings.TUTORIAL_COMPLETED) {\r\n                    window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_TUTORIAL);\r\n                }\r\n            }\r\n\r\n            Analytics.instance.startLevel();\r\n\r\n            this.createChildren();\r\n\r\n            this.resize(this.game.width, this.game.height);\r\n        }\r\n\r\n\r\n        protected createChildren() {\r\n            super.create();\r\n\r\n            this.eventManager = this.addChild(new EventManager(this));\r\n            this.dataManager = this.addChild(new DataManager(this));\r\n            this.serviceManager = this.addChild(new ServiceManager(this));\r\n            this.gameStateManager = this.addChild(new GameStateManager(this));\r\n            this.boardManager = this.addChild(new BoardManager(this));\r\n            this.figureManager = this.addChild(new FigureManager(this));\r\n            this.uiManager = this.addChild(new UIManager(this));\r\n            this.tutorialManager = this.addChild(new TutorialManager(this));\r\n\r\n            this.resize(this.game.width, this.game.height);\r\n        }\r\n\r\n        resize(w: number, h: number) {\r\n            super.resize(w, h);\r\n            if (this.isInitialized) {\r\n                this.eventManager.resize();\r\n                this.dataManager.resize();\r\n                this.gameStateManager.resize();\r\n                this.serviceManager.resize();\r\n                this.boardManager.resize();\r\n                this.figureManager.resize();\r\n                this.uiManager.resize();\r\n                this.tutorialManager.resize();\r\n            }\r\n        }\r\n\r\n        shutdown() {\r\n            ScoreManager.instance.removeListeners();\r\n            StarsManager.instance.removeListeners();\r\n\r\n            this.eventManager.destroy();\r\n            this.eventManager = null;\r\n\r\n            this.dataManager.destroy();\r\n            this.dataManager = null;\r\n\r\n            this.gameStateManager.destroy();\r\n            this.gameStateManager = null;\r\n\r\n            this.serviceManager.destroy();\r\n            this.serviceManager = null;\r\n\r\n            this.figureManager.destroy();\r\n            this.figureManager = null;\r\n\r\n            this.boardManager.destroy();\r\n            this.boardManager = null;\r\n\r\n            this.uiManager.destroy();\r\n            this.uiManager = null;\r\n\r\n            this.tutorialManager.destroy();\r\n            this.tutorialManager = null;\r\n\r\n            super.shutdown();\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","namespace BlockPuzzle {\r\n    export class Preloader extends AutoResizeableState {\r\n\r\n        private preloadContainer: Phaser.Group;\r\n        private backScreen: Phaser.Sprite;\r\n        private logo: Phaser.Sprite;\r\n        private preloadPad: Phaser.Sprite;\r\n        private preloadBar: Phaser.Sprite;\r\n        private preloadText: BitmapTextField;\r\n        private versionText: Phaser.Text;\r\n\r\n        preload() {\r\n            super.preload(this.game);\r\n\r\n            this.buildChildren();\r\n            this.preloadContent();\r\n\r\n            this.resize(this.game.width, this.game.height);\r\n        }\r\n\r\n        protected buildChildren() {\r\n            BackgroundManager.instance.init();\r\n\r\n            this.game.state.onStateChange.add(this.handleStateChanged, this);\r\n\r\n            this.preloadContainer = this.addChild(this.game.make.group());\r\n\r\n            this.backScreen = this.game.world.addAt(this.game.make.sprite(0, 0, Settings.PRELOADER_ATLAS, 'blackSquare0000'), 0);\r\n            this.backScreen.position.set(-50, -50);\r\n            this.backScreen.width = 2400;\r\n            this.backScreen.height = 2400;\r\n            this.backScreen.alpha = 0.7;\r\n\r\n            this.logo = this.addChild(this.game.make.sprite(0, 0, Settings.PRELOADER_ATLAS, 'logo0000'));\r\n            this.logo.anchor.setTo(0.5);\r\n\r\n            this.preloadPad = this.preloadContainer.add(this.game.make.sprite(0, 0, Settings.PRELOADER_ATLAS, 'preloaderBack0000'));\r\n            this.preloadPad.anchor.setTo(0.5);\r\n\r\n            this.preloadBar = this.preloadContainer.add(this.game.make.sprite(  -314 / 2, -2, Settings.PRELOADER_ATLAS));\r\n            this.preloadBar.animations.add('cycle', Phaser.Animation.generateFrameNames('preloadBar', 0, 9, '', 4)).play(45, true);\r\n            this.preloadBar.anchor.setTo(0, 0.5);\r\n            this.load.setPreloadSprite(this.preloadBar);\r\n\r\n            this.versionText = this.addChild(TextUtils.getText('v' + Settings.GAME_VERSION, 0, 0, 12, \"#ffffff\"));\r\n\r\n            this.preloadText = this.preloadContainer.add(new BitmapTextField(\"0%\", Settings.PRELOADER_ATLAS, \"Gold\", 1, 0.5, 0.5, 1));\r\n            this.preloadText.position.set(0, 65);\r\n\r\n            this.game.load.onFileComplete.add(this.onFileComplete, this);\r\n            this.game.load.onLoadComplete.add(this.onLoadingComplete, this);\r\n\r\n            this.isInitialized = true;\r\n        }\r\n\r\n        protected preloadContent() {\r\n            for (let soundName of SoundController.instance.getSoundNames()) {\r\n                this.game.load.audio(soundName, ['sound/mp3/' + soundName + '.mp3', 'sound/m4a/' + soundName + '.m4a', 'sound/ogg/' + soundName + '.ogg']);\r\n            }\r\n            if(Settings.ENABLE_API) {\r\n                this.game.load.image('more_games', Settings.RELEASE_BUILD ? (<any>window).famobi.getMoreGamesButtonImage() : 'img/more-games.png');\r\n            }\r\n            this.game.load.atlasJSONArray(Settings.GAME_ATLAS, 'img/' + Settings.GAME_ATLAS + '.png', 'img/' + Settings.GAME_ATLAS + '.json');\r\n            this.game.load.atlasJSONArray(Settings.ANIMATION_ATLAS, 'img/' + Settings.ANIMATION_ATLAS + '.png', 'img/' + Settings.ANIMATION_ATLAS + '.json');\r\n            this.game.load.image('field-cover', 'img/field-cover.png');\r\n            this.game.load.spritesheet('explosionA', 'img/18.png', 256, 256, 40);\r\n            this.game.load.spritesheet('explosionB', 'img/22.png', 256, 256, 40);\r\n        }\r\n\r\n\r\n        create() {\r\n            super.create();\r\n        }\r\n\r\n        resize(width: number, height: number) {\r\n            super.resize(width, height);\r\n            if(this.isInitialized) {\r\n                this.backScreen.width = this.windowBounds.width * CustomScaleManager.SCALE_X + 100;\r\n                this.backScreen.height = this.windowBounds.height * CustomScaleManager.SCALE_X + 100;\r\n                this.preloadContainer.position.copyFrom(this.windowBounds.getPosition(0.5, 0.58));\r\n                this.versionText.position.set(this.windowBounds.left + 25, this.windowBounds.down - 16);\r\n                this.logo.position.copyFrom(this.windowBounds.getPosition(0.5, 0.24));\r\n            }\r\n        }\r\n\r\n\r\n        private handleStateChanged() {\r\n            BackgroundManager.instance.handleStateChanged();\r\n        }\r\n\r\n        private onFileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\r\n            this.preloadText.changeText(progress + \"%\");\r\n        }\r\n\r\n        private onLoadingComplete() {\r\n            WindowManager.instance.init();\r\n            TransitionScreen.instance.init();\r\n            LocalStorageController.instance.loadSave();\r\n            SoundController.instance.init();\r\n            if (SoundController.instance.isDecodingSupported()) {\r\n                this.game.sound.setDecodedCallback(SoundController.instance.getSFXNames(), this.onSoundsDecoded, this);\r\n            } else {\r\n                this.onSoundsDecoded();\r\n            }\r\n        }\r\n\r\n        private onSoundsDecoded() {\r\n            SoundController.instance.startMusic();\r\n            this.preloadText.changeText(\"100%\");\r\n            TransitionScreen.instance.changeState(\"Level\");\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BitmapTextField extends Phaser.Group {\r\n\r\n        private valueHolder = {value: 0, targetValue: 0};\r\n        public textValue: string;\r\n        public textScale: number;\r\n        public pivotX: number = 0.5;\r\n        public pivotY: number = 0.5;\r\n        public atlasKey: string = \"\";\r\n        public styleKey: string = \"\";\r\n        public letterSpacing: number = 0;\r\n        public letterFrame: number = 0;\r\n        public tintValue: number = 0;\r\n\r\n        private internalScale: number = 1;\r\n\r\n        constructor(textValue: string, atlasKey: string, styleKey: string, textScale: number = 1, pivotX: number = 0.5, pivotY: number = 0.5, letterSpacing: number = 0, letterFrame: number = 0, tintValue: number = 0xFFFFFF) {\r\n            super(App.instance);\r\n            this.atlasKey = atlasKey;\r\n            this.styleKey = styleKey;\r\n            this.letterSpacing = letterSpacing;\r\n            this.letterFrame = letterFrame;\r\n            this.textScale = textScale;\r\n            this.pivotX = pivotX;\r\n            this.pivotY = pivotY;\r\n            this.tintValue = tintValue;\r\n\r\n            this.changeText(textValue);\r\n        }\r\n\r\n        public changeText(textValue: string, force: boolean = false) {\r\n            if (!force && this.textValue == textValue) {\r\n                return;\r\n            }\r\n            this.textValue = textValue;\r\n            this.removeAll(true);\r\n            this.scale.set(1);\r\n\r\n\r\n            for (let i: number = 0; i < textValue.length; i++) {\r\n                let sprite: Phaser.Sprite = BitmapTextFactory.getLetter(this.styleKey, this.atlasKey, textValue.charAt(i), this.letterFrame);\r\n                if (sprite) {\r\n                    sprite.x = this.width + (i > 0 ?  this.letterSpacing : 0);\r\n                    sprite.anchor.set(0, 0.5);\r\n                    this.add(sprite);\r\n                } else {\r\n                    console.warn(`BitmapTextFactory.getSprite - letter '${textValue.charAt(i)}' not found in spritesheet`);\r\n                }\r\n            }\r\n\r\n            const currentWidth: number = this.width;\r\n            const currentHeight: number = this.height;\r\n            this.children.forEach(child => child.position.set(child.x - this.pivotX * currentWidth, child.y - (this.pivotY - 0.5) * currentHeight));\r\n            this.children.forEach(child => (<any>child).tint = this.tintValue);\r\n            this.scale.set(this.textScale * this.internalScale);\r\n        }\r\n\r\n        public setColor(value: number) {\r\n            this.tintValue = value;\r\n            this.children.forEach(child => (<any>child).tint = this.tintValue);\r\n        }\r\n\r\n        public tweenText(initialValue: number, targetValue: number, duration: number, delay: number) {\r\n            this.game.tweens.removeFrom(this.valueHolder);\r\n            this.valueHolder.value = initialValue;\r\n            this.valueHolder.targetValue = targetValue;\r\n            this.game.add.tween(this.valueHolder)\r\n                .to({value: targetValue}, duration, Phaser.Easing.Linear.None, true, delay)\r\n                .onUpdateCallback(() => this.changeText('' + Math.floor(this.valueHolder.value)))\r\n                .onComplete.add(() => this.changeText('' + Math.floor(this.valueHolder.targetValue)))\r\n        }\r\n\r\n        public tweenTextAdvanced(preffix: string, initialValue: number, targetValue: number, duration: number, delay: number, playCountingSound: boolean = false, countingSoundStates: string[] = ['Level']) {\r\n            this.changeText('' + Math.floor(initialValue));\r\n            if(initialValue == targetValue) {\r\n                return;\r\n            }\r\n            let valueHolder = {value: initialValue};\r\n            let textTween: Phaser.Tween = this.game.add.tween(valueHolder)\r\n                .to({value: targetValue}, duration, Phaser.Easing.Linear.None, true, delay);\r\n            textTween.onStart.add(() => {\r\n                if (playCountingSound && countingSoundStates.indexOf(this.game.state.getCurrentState().key) != -1) {\r\n                    SoundController.instance.startCountingSound();\r\n                }\r\n            });\r\n            textTween.onUpdateCallback(() => this.changeText(preffix + Math.floor(valueHolder.value)));\r\n            textTween.onComplete.add(() => {\r\n                this.changeText( preffix + Math.floor(valueHolder.value));\r\n                if (playCountingSound) {\r\n                    SoundController.instance.stopCountingSound();\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class TransitionScreen extends Phaser.Group {\r\n\r\n        private background: Phaser.Sprite;\r\n        private targetStateName: string;\r\n        private callback: Function;\r\n\r\n        public isInitialized: boolean = false;\r\n\r\n        private static _instance: TransitionScreen = null;\r\n        public static get instance(): TransitionScreen {\r\n            return TransitionScreen._instance ? TransitionScreen._instance : TransitionScreen._instance = new TransitionScreen();\r\n        }\r\n\r\n        constructor() {\r\n            super(App.instance, null);\r\n        }\r\n\r\n        private buildChildren() {\r\n            this.background = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'transitionSquare0000'));\r\n            this.background.anchor.set(0.5);\r\n            this.background.alpha = 0.01;\r\n            this.background.inputEnabled = true;\r\n            this.background.events.onInputDown.add(() => console.log('Transition Screen: input locked'));\r\n        }\r\n\r\n        public init() {\r\n            this.isInitialized = true;\r\n            this.buildChildren();\r\n        }\r\n\r\n        public resize() {\r\n            if (this.isInitialized) {\r\n                this.position.set(this.game.world.centerX, this.game.world.centerY);\r\n                this.background.width = this.game.width + 100;\r\n                this.background.height = this.game.height + 100;\r\n            }\r\n        }\r\n\r\n        public changeState(newState: string, callback: Function = null) {\r\n            this.targetStateName = newState;\r\n            this.callback = callback;\r\n            this.show();\r\n        }\r\n\r\n        private show() {\r\n            this.game.stage.addChild(this);\r\n            this.visible = true;\r\n\r\n            this.resize();\r\n\r\n            this.game.add.tween(this.background)\r\n                .to({alpha: 1}, 140, Phaser.Easing.Quadratic.Out, true)\r\n                .onComplete.add(this.close, this);\r\n        }\r\n\r\n        private close() {\r\n            if (this.targetStateName) {\r\n                this.game.state.start(this.targetStateName, true, false);\r\n                WindowManager.instance.hideAll();\r\n            }\r\n\r\n            if (this.callback) {\r\n                this.callback();\r\n                this.callback = null;\r\n            }\r\n\r\n            this.proceedClosing();\r\n        }\r\n\r\n        private proceedClosing() {\r\n            if (this.parent && this.parent.getChildIndex(this) > -1) {\r\n                this.parent.setChildIndex(this, this.parent.children.length - 1);\r\n            } else {\r\n                this.game.stage.addChild(this);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.game.add.tween(this.background)\r\n                    .to({alpha: 0}, 120, Phaser.Easing.Linear.None, true)\r\n                    .onComplete.add(this.onTransitionFinished, this);\r\n            }, 20);\r\n\r\n            setTimeout(() => {\r\n                this.onTransitionFinished();\r\n            }, 400);\r\n        }\r\n\r\n        private onTransitionFinished() {\r\n            this.hide();\r\n        }\r\n\r\n        private hide() {\r\n            if (this.parent && this.parent.getChildIndex(this) > -1) {\r\n                this.parent.removeChild(this);\r\n            }\r\n            this.visible = false;\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class AchievementInformer extends Phaser.Group {\r\n\r\n        public readonly level: Level;\r\n\r\n        public active: boolean = false;\r\n\r\n        private container: Phaser.Group;\r\n\r\n        private informerPad: Phaser.Sprite;\r\n        private achievementSprite: Phaser.Sprite;\r\n        private badgesSprite: Phaser.Sprite;\r\n\r\n        private visibilityTimer: number = 0;\r\n        private targetY: number = -100;\r\n\r\n        constructor(level: Level) {\r\n            super(level.game);\r\n            this.level = level;\r\n\r\n            this.buildChildren();\r\n        }\r\n\r\n        protected buildChildren() {\r\n            this.container = this.add(this.game.make.group());\r\n            this.container.position.set(0, -100);\r\n\r\n            this.informerPad = this.container.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'achievementInformerPad0000'));\r\n            this.informerPad.anchor.set(0.5);\r\n\r\n            this.achievementSprite = this.container.add(this.game.make.sprite(0, -5, Settings.GAME_ATLAS, 'achievement10000'));\r\n            this.achievementSprite.anchor.set(0.5);\r\n\r\n            this.badgesSprite = this.container.add(this.game.make.sprite(40, 30, Settings.GAME_ATLAS, 'achievementBadges0000'));\r\n            this.badgesSprite.anchor.set(0.5);\r\n\r\n            this.visible = false;\r\n        }\r\n\r\n        public show(achievementModel: AchievementModel) {\r\n            this.game.tweens.removeFrom(this.container.scale, false);\r\n            this.game.tweens.removeFrom(this.container, false);\r\n\r\n            this.game.tweens.removeFrom(this.achievementSprite);\r\n            this.game.tweens.removeFrom(this.achievementSprite.scale);\r\n\r\n            this.game.tweens.removeFrom(this.badgesSprite);\r\n            this.game.tweens.removeFrom(this.badgesSprite.scale);\r\n\r\n            this.visible = true;\r\n            this.active = true;\r\n            this.visibilityTimer = Settings.ACHIEVEMENT_INFORMER_VISIBILITY_DURATION;\r\n\r\n            this.container.y = 0;\r\n            this.container.alpha = 0;\r\n            this.game.add.tween(this.container)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.container)\r\n                .to({y: this.targetY}, 280, Phaser.Easing.Back.Out, true);\r\n            this.container.scale.set(0.6);\r\n            this.game.add.tween(this.container.scale)\r\n                .to({x: 1, y: 1}, 280, Phaser.Easing.Sinusoidal.Out, true);\r\n\r\n            this.achievementSprite.scale.set(0);\r\n            this.game.add.tween(this.achievementSprite.scale)\r\n                .to({x: 0.7, y: 0.7}, 270, Phaser.Easing.Back.Out, true, 30);\r\n\r\n            this.achievementSprite.y = -3;\r\n            this.game.add.tween(this.achievementSprite)\r\n                .to({y: -7}, 350, Phaser.Easing.Sinusoidal.InOut, true, 180, -1, true);\r\n\r\n\r\n            this.badgesSprite.alpha = 0;\r\n            this.game.add.tween(this.badgesSprite)\r\n                .to({alpha: 1}, 160, Phaser.Easing.Sinusoidal.In, true, 100);\r\n            this.badgesSprite.scale.set(0);\r\n            this.game.add.tween(this.badgesSprite.scale)\r\n                .to({x: 1, y: 1}, 200, Phaser.Easing.Back.Out, true, 100);\r\n\r\n            this.achievementSprite.frameName = 'achievement' + achievementModel.key + '0000';\r\n            this.badgesSprite.frameName =  'achievementBadges000' + Phaser.Math.clamp(AchievementsManager.getAchievementLevel(achievementModel) - 1, 0, 2);\r\n        }\r\n\r\n        public hide() {\r\n            this.active = false;\r\n            this.game.tweens.removeFrom(this.container.scale, false);\r\n            this.game.tweens.removeFrom(this.container, false);\r\n\r\n            this.game.add.tween(this.container)\r\n                .to({alpha: 0}, 150, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.container)\r\n                .to({y: 0}, 220, Phaser.Easing.Sinusoidal.Out, true);\r\n            this.game.add.tween(this.container.scale)\r\n                .to({x: 0.5, y: 0.5}, 150, Phaser.Easing.Back.Out, true)\r\n                .onComplete.add(() => this.visible = false);\r\n        }\r\n\r\n\r\n        public resizeLandscape() {\r\n            this.targetY = 110;\r\n            this.game.add.tween(this.container)\r\n                .to({y: this.targetY}, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n        }\r\n\r\n        public resizeSquared() {\r\n            this.targetY = 110;\r\n            this.game.add.tween(this.container)\r\n                .to({y: this.targetY}, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n        }\r\n\r\n        public resizePortrait() {\r\n            this.targetY = -110;\r\n            this.game.add.tween(this.container)\r\n                .to({y: this.targetY}, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n        }\r\n\r\n        update() {\r\n            if(this.visible && this.active) {\r\n                if(this.visibilityTimer > 0) {\r\n                    this.visibilityTimer-= this.game.time.elapsedMS;\r\n                    if(this.visibilityTimer <= 0) {\r\n                        this.hide();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class AchievementPanel extends Phaser.Group {\r\n\r\n        public readonly windowAchievements: WindowAchievements;\r\n\r\n        protected icon: Phaser.Sprite;\r\n        protected progressBarContainer: Phaser.Group;\r\n        protected progressPad: Phaser.Sprite;\r\n        protected progressBar: Phaser.Sprite;\r\n        protected progressBarMask: Phaser.Graphics;\r\n        protected progressText: Phaser.Text;\r\n        protected maxText: Phaser.Sprite;\r\n        protected badges: Phaser.Sprite;\r\n        protected buttonClaimReward: ButtonClaimReward;\r\n\r\n        private currentReward: number = 0;\r\n\r\n        public achievementKey: AchievementType;\r\n\r\n        constructor(windowAcheivements: WindowAchievements, achievementKey: AchievementType, x: number, y: number) {\r\n            super(windowAcheivements.game);\r\n            this.windowAchievements = windowAcheivements;\r\n            this.achievementKey = achievementKey;\r\n            this.position.set(x, y);\r\n\r\n            this.buildContent();\r\n        }\r\n\r\n        public updateView() {\r\n            const achievementModel: AchievementModel = AchievementsManager.instance.getAchievementModel(this.achievementKey);\r\n            const currentLevel: number = AchievementsManager.getAchievementLevel(achievementModel);\r\n\r\n            const currentValue: number = currentLevel > 0 ? currentLevel < 3 ? achievementModel.currentValue - achievementModel.requiredValues[currentLevel - 1] : achievementModel.requiredValues[2] : achievementModel.currentValue;\r\n            const displayedValue: number = currentLevel > 0 ? currentLevel < 3 ?  achievementModel.currentValue : achievementModel.requiredValues[2] : achievementModel.currentValue;\r\n            const targetValue: number = currentLevel > 0 ? currentLevel < 3 ? achievementModel.requiredValues[currentLevel] - achievementModel.requiredValues[currentLevel - 1] : achievementModel.requiredValues[2] : achievementModel.requiredValues[0];\r\n            const displayTargetValue: number = currentLevel > 0 ? currentLevel < 3 ?  achievementModel.requiredValues[currentLevel] : achievementModel.requiredValues[2]  : achievementModel.requiredValues[0] ;\r\n            const currentProgress: number = currentLevel < 3 ? currentValue / targetValue : 1;\r\n\r\n            this.buttonClaimReward.visible = false;\r\n            this.progressBarContainer.visible = true;\r\n            this.badges.visible = achievementModel.rewardClaimed[0] || achievementModel.rewardClaimed[1] || achievementModel.rewardClaimed[2];\r\n            this.badges.frameName =  achievementModel.rewardClaimed[2]  ? 'achievementBadges0002' :  achievementModel.rewardClaimed[1] ?  'achievementBadges0001' : 'achievementBadges0000';\r\n\r\n            /* update icon */\r\n            this.icon.frameName = 'achievement' +  this.achievementKey + '000' + (currentLevel > 0 ? '0' : '1');\r\n\r\n            /* update bar */\r\n            this.progressBarMask.x = this.progressBar.x - (1 - currentProgress) * this.progressBar.width;\r\n\r\n            /* update text */\r\n            if(currentLevel < 3) {\r\n                this.progressBarContainer.visible = true;\r\n                this.maxText.visible = false;\r\n                this.progressText.setText(`${displayedValue}/${displayTargetValue}`);\r\n            } else {\r\n                this.progressBarContainer.visible = false;\r\n                this.maxText.visible = true;\r\n            }\r\n\r\n            /* show/hide claim button */\r\n            if(achievementModel.currentValue >= achievementModel.requiredValues[0] && !achievementModel.rewardClaimed[0]) {\r\n                this.buttonClaimReward.visible = true;\r\n                this.progressBarContainer.visible = false;\r\n                this.currentReward = achievementModel.rewards[0];\r\n                this.buttonClaimReward.updateView('+' + this.currentReward);\r\n            } else if(achievementModel.currentValue >= achievementModel.requiredValues[1] && !achievementModel.rewardClaimed[1]) {\r\n                this.buttonClaimReward.visible = true;\r\n                this.progressBarContainer.visible = false;\r\n                this.currentReward = achievementModel.rewards[1];\r\n                this.buttonClaimReward.updateView('+' + this.currentReward);\r\n            } else if(achievementModel.currentValue >= achievementModel.requiredValues[2] && !achievementModel.rewardClaimed[2]) {\r\n                this.buttonClaimReward.visible = true;\r\n                this.progressBarContainer.visible = false;\r\n                this.currentReward = achievementModel.rewards[2];\r\n                this.buttonClaimReward.updateView('+' + this.currentReward);\r\n            }\r\n        }\r\n\r\n\r\n        private buildContent() {\r\n            this.icon = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'achievement' + this.achievementKey + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n\r\n            this.progressBarContainer = this.add(this.game.make.group());\r\n            this.progressBarContainer.position.set(0, 85);\r\n\r\n            this.progressPad = this.progressBarContainer.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'achievementProgressPad0000'));\r\n            this.progressPad.anchor.set(0.5);\r\n\r\n            this.progressBar = this.progressBarContainer.add(this.game.make.sprite(-this.progressPad.width / 2 + 5, -2, Settings.GAME_ATLAS, 'achievementProgressBar0000'));\r\n            this.progressBar.anchor.set(0, 0.5);\r\n\r\n            this.progressBarMask = this.progressBarContainer.add(this.game.make.graphics(this.progressBar.x, this.progressBar.y - this.progressBar.height / 2));\r\n            this.progressBarMask.beginFill(0xFFFFFF, 0.5).drawRect(0, 0, this.progressBar.width, this.progressBar.height).endFill();\r\n            this.progressBar.mask = this.progressBarMask;\r\n\r\n            this.progressText = this.progressBarContainer.add(TextUtils.getText('0/1000', 0, 1, 19, '#DAFFF4'));\r\n\r\n            this.maxText = this.add(this.game.make.sprite(0, 80, Settings.GAME_ATLAS, 'achievementMax0000'));\r\n            this.maxText.anchor.set(0.5);\r\n\r\n            this.badges = this.add(this.game.make.sprite(68, 46, Settings.GAME_ATLAS, 'achievementBadges0000'));\r\n            this.badges.anchor.set(0.5);\r\n\r\n            this.buttonClaimReward = this.add(new ButtonClaimReward(this, '+89', 1, this.claimRewardClicked, this));\r\n            this.buttonClaimReward.position.set(3, 85);\r\n        }\r\n\r\n        protected claimRewardClicked() {\r\n            StarsManager.instance.pickupStars(this.currentReward, true);\r\n            this.currentReward = 0;\r\n\r\n            const achievementModel: AchievementModel = AchievementsManager.instance.getAchievementModel(this.achievementKey);\r\n            const currentLevel: number = AchievementsManager.getAchievementLevel(achievementModel);\r\n\r\n            if(achievementModel) {\r\n                if(achievementModel.currentValue >= achievementModel.requiredValues[0] && !achievementModel.rewardClaimed[0]) {\r\n                    achievementModel.rewardClaimed[0] = true;\r\n                    this.badges.scale.set(0);\r\n                    this.game.add.tween(this.badges.scale)\r\n                        .to({x: 1, y: 1}, 300, Phaser.Easing.Back.Out, true, 0);\r\n                } else if(achievementModel.currentValue >= achievementModel.requiredValues[1] && !achievementModel.rewardClaimed[1]) {\r\n                    achievementModel.rewardClaimed[1] = true;\r\n                    this.badges.scale.set(0);\r\n                    this.game.add.tween(this.badges.scale)\r\n                        .to({x: 1, y: 1}, 300, Phaser.Easing.Back.Out, true, 0);\r\n                } else if(achievementModel.currentValue >= achievementModel.requiredValues[2] && !achievementModel.rewardClaimed[2]) {\r\n                    achievementModel.rewardClaimed[2] = true;\r\n                    this.badges.scale.set(0);\r\n                    this.game.add.tween(this.badges.scale)\r\n                        .to({x: 1, y: 1}, 300, Phaser.Easing.Back.Out, true, 0);\r\n                }\r\n                LocalStorageController.instance.save();\r\n            }\r\n            this.updateView();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ButtonClaimReward extends Phaser.Group {\r\n\r\n        public achievementPanel: AchievementPanel;\r\n\r\n        protected container: Phaser.Group;\r\n\r\n        protected backplate: Phaser.Sprite;\r\n        protected rewardText: BitmapTextField;\r\n\r\n\r\n        constructor(panel: AchievementPanel, reward: string, initialScale: number, actionHandler: Function, actionHandlerContext: any) {\r\n            super(panel.game);\r\n            this.achievementPanel = panel;\r\n\r\n            this.container = this.add(this.game.make.group());\r\n\r\n            /* backplate */\r\n            this.backplate = this.container.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'buttonClaim0000'));\r\n            this.backplate.anchor.setTo(0.5, 0.5);\r\n            this.backplate.inputEnabled = true;\r\n            this.backplate.events.onInputUp.add(actionHandler, actionHandlerContext);\r\n\r\n            this.backplate[\"overTween\"] = App.instance.add.tween(this.container.scale).to({x: 1.05, y: 1.05}, 100);\r\n            this.backplate[\"outTween\"] = App.instance.add.tween(this.container.scale).to({x: 1, y: 1 }, 100);\r\n            this.backplate[\"downTween\"] = App.instance.add.tween(this.container.scale).to({x: 0.95, y: 0.95}, 50).to({x: 1, y: 1}, 50);\r\n            this.backplate.events.onInputOver.add(ButtonUtils.mouseOverHandler, this, 0);\r\n            this.backplate.events.onInputOut.add(ButtonUtils.mouseOutHandler, this, 0);\r\n            this.backplate.events.onInputDown.add(ButtonUtils.mouseDownHandler, this, 0);\r\n            this.backplate.events.onInputDown.add(() => SoundController.instance.playRewardClaimedSound(), this);\r\n\r\n            /* price text */\r\n            this.rewardText = this.add(new BitmapTextField(reward,  Settings.GAME_ATLAS, 'Gold', 0.55, 0.5, 0.5, 1));\r\n            this.rewardText.position.set(-17, -3);\r\n        }\r\n\r\n        public updateView(rewardText: string) {\r\n            this.rewardText.changeText(rewardText);\r\n            this.game.tweens.removeFrom(this.scale);\r\n            this.scale.set(1);\r\n            this.game.add.tween(this.scale)\r\n                .to({x:1.04, y: 1.04}, 500, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ButtonAchievements extends Phaser.Group {\r\n\r\n        public readonly level: Level;\r\n\r\n        public button: Phaser.Button;\r\n        public exclamationMark: Phaser.Sprite;\r\n        public achievementInformer: AchievementInformer;\r\n\r\n        constructor(level: Level) {\r\n            super(level.game, null);\r\n            this.level = level;\r\n\r\n            this.button = this.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonAchievements', 0, 0, 1, this.achievementsClicked, this));\r\n\r\n            this.exclamationMark = this.add(this.game.make.sprite(25, 22, Settings.GAME_ATLAS));\r\n            this.exclamationMark.anchor.set(0.5);\r\n            this.exclamationMark.animations.add('twerking', Phaser.Animation.generateFrameNames('achievementsNotification', 0, 99, '', 4))\r\n                .play(60, true);\r\n            this.exclamationMark.visible = AchievementsManager.instance.hasAvailableRewards();\r\n\r\n            this.achievementInformer = this.add(new AchievementInformer(this.level));\r\n\r\n            AchievementsManager.instance.onAchievementCompleted.add(this.handleAchievementCompleted, this);\r\n        }\r\n\r\n\r\n        destroy() {\r\n            AchievementsManager.instance.onAchievementCompleted.remove(this.handleAchievementCompleted, this);\r\n            super.destroy();\r\n        }\r\n\r\n        protected handleAchievementCompleted(achievementModel: AchievementModel) {\r\n            this.achievementInformer.show(achievementModel);\r\n            if(this.exclamationMark.visible == false) {\r\n                this.exclamationMark.visible = true;\r\n            }\r\n        }\r\n\r\n        protected achievementsClicked() {\r\n            if(this.achievementInformer.active) {\r\n                this.achievementInformer.hide();\r\n            }\r\n            this.exclamationMark.visible  = false;\r\n            WindowManager.instance.showAchievements();\r\n        }\r\n\r\n        public resizePortrait() {\r\n            this.achievementInformer.resizePortrait();\r\n        }\r\n\r\n        public resizeSquared() {\r\n            this.achievementInformer.resizeSquared();\r\n        }\r\n\r\n        public resizeLandscape() {\r\n            this.achievementInformer.resizeLandscape();\r\n        }\r\n\r\n\r\n        public setScale(value: number) {\r\n            this.button[\"setScale\"](value);\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ButtonCloseWindow extends Phaser.Group {\r\n\r\n        public parentWindow: AbstractWindow;\r\n        public container: Phaser.Group;\r\n        public button: Phaser.Button;\r\n\r\n        constructor(parentWindow: AbstractWindow, actionHandler: Function, actionHandlerContext: any) {\r\n            super(parentWindow.game);\r\n            this.parentWindow = parentWindow;\r\n\r\n            this.container = this.add(this.game.make.group());\r\n            this.button = this.container.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonClose', 0, 0, 1, actionHandler, actionHandlerContext));\r\n        }\r\n\r\n        public resize(dx: number, dy: number) {\r\n            this.position.set(this.parentWindow.windowManager.windowBounds.right + dx, this.parentWindow.windowManager.windowBounds.top + dy);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ButtonGetStars extends Phaser.Group {\r\n\r\n        public button: Phaser.Button;\r\n        public numStarsText: BitmapTextField;\r\n        public isActive: boolean = false;\r\n        public starsAmount: number = Settings.GET_STARS_BUTTON_REWARD_STARS_AMOUNT;\r\n\r\n        constructor() {\r\n            super(App.instance, null);\r\n\r\n            this.button = this.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonGetStars', 0, 0, 1, this.getStarsClicked, this));\r\n\r\n            this.numStarsText = this.add(new BitmapTextField('+' + this.starsAmount,  Settings.GAME_ATLAS, 'Gold', 0.42, 0.5, 0.5, 1));\r\n            this.numStarsText.position.set(-20, 3);\r\n\r\n            this.visible = false;\r\n            this.isActive = false;\r\n        }\r\n\r\n        protected getStarsClicked() {\r\n            if(Settings.ENABLE_API) {\r\n                if(APIUtils.instance.hasRewardedVideo()) {\r\n                    Settings.GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP = +new Date().getTime();\r\n                    APIUtils.instance.showRewardedVideo(() => this.giveReward());\r\n                }\r\n            } else {\r\n                Settings.GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP = +new Date().getTime();\r\n                this.giveReward();\r\n            }\r\n\r\n        }\r\n\r\n        private giveReward() {\r\n            StarsManager.instance.pickupStars(this.starsAmount);\r\n            this.starsAmount += Settings.GET_STARS_BUTTON_REWARD_STARS_AMOUNT_STEP;\r\n            this.numStarsText.changeText('+' + this.starsAmount, true);\r\n            this.hide();\r\n        }\r\n\r\n        public activate() {\r\n            this.isActive = true;\r\n            this.visible = true;\r\n            this.button.inputEnabled = true;\r\n        }\r\n\r\n        public hide() {\r\n            this.isActive = false;\r\n            this.visible = false;\r\n        }\r\n\r\n        update() {\r\n            super.update();\r\n\r\n            if(!this.isActive && Settings.GET_STARS_BUTTON_ENABLED && Settings.ENABLE_API && +new Date().getTime() - Settings.GET_STARS_BUTTON_LAST_REWARD_TIMESTAMP > Settings.GET_STARS_BUTTON_COOLDOWN * 1000) {\r\n                if(APIUtils.instance.hasRewardedVideo()) {\r\n                   this.activate();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AbstractResultsCounter extends Phaser.Group {\r\n\r\n        protected readonly results: WindowResults;\r\n\r\n        protected padLeft: Phaser.Sprite;\r\n        protected padRight: Phaser.Sprite;\r\n\r\n        protected textFieldLeft: BitmapTextField;\r\n        protected textFieldRight: BitmapTextField;\r\n\r\n        protected icon: Phaser.Sprite;\r\n\r\n        constructor(results: WindowResults, iconFrameName) {\r\n            super(results.game, null);\r\n            this.results = results;\r\n\r\n            this.buildContent();\r\n            this.buildIcon(iconFrameName);\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.padLeft = this.add(this.game.make.sprite(5, 0, Settings.GAME_ATLAS, 'resultsScorePad0000'));\r\n            this.padLeft.anchor.set(0, 0.5);\r\n            this.padLeft.scale.x = -1;\r\n\r\n            this.padRight = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'resultsScorePad0000'));\r\n            this.padRight.anchor.set(0, 0.5);\r\n\r\n            this.textFieldLeft = this.add(new BitmapTextField('0', Settings.GAME_ATLAS, 'Gold', 0.75, 0.5, 0.5, 1));\r\n            this.textFieldLeft.position.set(-90, 0);\r\n\r\n            this.textFieldRight = this.add(new BitmapTextField('0', Settings.GAME_ATLAS, 'Gold', 0.75, 0.5, 0.5, 1));\r\n            this.textFieldRight.position.set(107, 0);\r\n        }\r\n\r\n        protected buildIcon(frameName: string) {\r\n            this.icon = this.add(this.game.make.sprite(10, 0, Settings.GAME_ATLAS, frameName + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n\r\n        protected show(leftValueInitial: number, leftValueTarget: number, rightValueInitial: number, rightValueTarget: number, leftValuePrefix: string = '', rightValuePrefix: string = '', delay: number, textTweenDelay: number, tweenTextDuration: number) {\r\n            this.resetTweens();\r\n\r\n            this.tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration);\r\n\r\n            this.animateAppearing(delay);\r\n        }\r\n\r\n        public tweenTexts(leftValueInitial: number, leftValueTarget: number, rightValueInitial: number, rightValueTarget: number, leftValuePrefix: string, rightValuePrefix: string, textTweenDelay: number, tweenTextDuration: number) {\r\n            this.textFieldLeft.tweenTextAdvanced(leftValuePrefix, leftValueInitial, leftValueTarget, tweenTextDuration, textTweenDelay, true);\r\n            this.textFieldRight.tweenTextAdvanced(rightValuePrefix, rightValueInitial, rightValueTarget, tweenTextDuration, textTweenDelay, true);\r\n        }\r\n\r\n        protected animateAppearing(delay: number) {\r\n            this.icon.scale.set(0.5);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({x: 1, y: 1}, 350, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.icon.alpha = 0;\r\n            this.game.add.tween(this.icon)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n\r\n            this.padLeft.scale.x = 0;\r\n            this.game.add.tween(this.padLeft.scale)\r\n                .to({x: -1}, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n\r\n            this.padRight.scale.x = 0;\r\n            this.game.add.tween(this.padRight.scale)\r\n                .to({x: 1}, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n\r\n            this.textFieldLeft.visible = false;\r\n            this.textFieldLeft.scale.set(0.5);\r\n            this.game.add.tween(this.textFieldLeft.scale)\r\n                .to({x: 0.75, y: 0.75}, 450, Phaser.Easing.Back.Out, true, delay + 250)\r\n                .onStart.add(() => this.textFieldLeft.visible = true);\r\n\r\n            this.textFieldRight.visible = false;\r\n            this.textFieldRight.scale.set(0.5);\r\n            this.game.add.tween(this.textFieldRight.scale)\r\n                .to({x: 0.75, y: 0.75}, 450, Phaser.Easing.Back.Out, true, delay + 330)\r\n                .onStart.add(() => this.textFieldRight.visible = true);\r\n\r\n            this.textFieldLeft.visible = false;\r\n            this.textFieldLeft.alpha = 0;\r\n            this.game.add.tween(this.textFieldLeft)\r\n                .to({alpha: 1}, 500, Phaser.Easing.Linear.None, true, delay + 250)\r\n                .onStart.add(() => this.textFieldLeft.visible = true);\r\n\r\n            this.textFieldRight.visible = false;\r\n            this.textFieldRight.alpha = 0;\r\n            this.game.add.tween(this.textFieldRight)\r\n                .to({alpha: 1}, 500, Phaser.Easing.Linear.None, true, delay + 330)\r\n                .onStart.add(() => this.textFieldRight.visible = true);\r\n        }\r\n\r\n        protected resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.game.tweens.removeFrom(this.padLeft.scale);\r\n            this.game.tweens.removeFrom(this.padRight.scale);\r\n            this.game.tweens.removeFrom(this.textFieldLeft);\r\n            this.game.tweens.removeFrom(this.textFieldLeft.scale);\r\n            this.game.tweens.removeFrom(this.textFieldRight);\r\n            this.game.tweens.removeFrom(this.textFieldRight.scale);\r\n\r\n            this.icon.scale.set(1);\r\n            this.icon.alpha = 1;\r\n            this.padLeft.scale.set(-1);\r\n            this.padRight.scale.set(1);\r\n            this.textFieldLeft.scale.set(0.75);\r\n            this.textFieldRight.scale.set(0.75);\r\n            this.textFieldLeft.visible = true;\r\n            this.textFieldRight.visible = true;\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AbstractUICounter extends Phaser.Group {\r\n\r\n        public readonly uiManager: UIManager;\r\n        public readonly level: Level;\r\n\r\n        protected pad: Phaser.Sprite;\r\n        protected icon: Phaser.Sprite;\r\n        protected textField: BitmapTextField;\r\n\r\n        constructor(uiManager: UIManager) {\r\n            super(uiManager.game, null);\r\n            this.uiManager = uiManager;\r\n            this.level = uiManager.level;\r\n\r\n            this.buildChildren();\r\n        }\r\n\r\n        protected abstract buildChildren();\r\n\r\n        protected tweenIcon(duration: number) {\r\n            if (duration < 400) {\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({x: 1.075, y: 1.075}, 100, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({x: 1.0, y: 1.0}, 240, Phaser.Easing.Sinusoidal.In, false)\r\n                    .start();\r\n            } else {\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({x: 1.13, y: 1.13}, .25 * duration, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({x: 1.15, y: 1.15}, 0.1 * duration, Phaser.Easing.Sinusoidal.In, false)\r\n                    .to({x: 1.0, y: 1.0}, 0.65 * duration, Phaser.Easing.Sinusoidal.In, false)\r\n                    .start();\r\n            }\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class DoubleStarsButton extends Phaser.Group {\r\n\r\n        private readonly results: WindowResults;\r\n\r\n        protected pad: Phaser.Sprite;\r\n        protected buttonContainer: Phaser.Group;\r\n        protected buttonDoubleStars: Phaser.Button;\r\n        protected textField: BitmapTextField;\r\n\r\n        private starsAmount: number = 0;\r\n\r\n        public isActive: boolean = true;\r\n\r\n        constructor(results: WindowResults) {\r\n            super(results.game, null);\r\n            this.results = results;\r\n\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.pad = this.add(this.game.make.sprite(10, 0, Settings.GAME_ATLAS, 'resultsScorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set( -0.8, 0.9);\r\n\r\n            this.textField = this.add(new BitmapTextField('+12', Settings.GAME_ATLAS, 'Gold', 0.7, 0.5, 0.5, 1));\r\n            this.textField.position.set(-82, 0);\r\n\r\n            this.buttonContainer = this.add(this.game.make.group());\r\n            this.buttonDoubleStars = this.buttonContainer.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonRewardedVideoSmall', 0, 0, 1, this.doubleStarsClicked, this));\r\n        }\r\n\r\n        protected doubleStarsClicked() {\r\n            if(this.isActive) {\r\n                APIUtils.instance.showRewardedVideo(() =>  this.collapse());\r\n            }\r\n        }\r\n\r\n        public show(delay: number, starsAmount: number) {\r\n            this.resetTweens();\r\n            this.scale.set(1.2);\r\n\r\n            this.isActive = true;\r\n            this.starsAmount = starsAmount;\r\n            this.textField.changeText('+' + starsAmount);\r\n\r\n            this.buttonContainer.scale.set(0.5);\r\n            this.game.add.tween(this.buttonContainer.scale)\r\n                .to({x: 1.2, y: 1.2}, 300, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.buttonContainer.alpha = 0;\r\n            this.game.add.tween(this.buttonContainer)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n\r\n            this.pad.scale.x = 0;\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({x: -0.8}, 250, Phaser.Easing.Back.Out, true, delay + 100);\r\n\r\n            this.textField.visible = false;\r\n            this.textField.scale.set(0.2);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({x: 0.7, y: 0.7}, 300, Phaser.Easing.Back.Out, true, delay + 200)\r\n                .onStart.add(() => this.textField.visible = true);\r\n        }\r\n\r\n        protected collapse() {\r\n            this.resetTweens();\r\n\r\n            this.isActive = false;\r\n\r\n            this.results.addBonusStars(this.starsAmount);\r\n            this.starsAmount = 0;\r\n\r\n            this.game.add.tween(this.textField)\r\n                .to({alpha: 0}, 120, Phaser.Easing.Linear.None, true);\r\n\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({x: 0, y: 0}, 120, Phaser.Easing.Back.In, true);\r\n\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({x: 0}, 200, Phaser.Easing.Sinusoidal.In, true, 0);\r\n\r\n            this.game.add.tween(this.buttonContainer.scale)\r\n                .to({x: 0, y: 0}, 200, Phaser.Easing.Back.In, true, 100)\r\n                .onComplete.add(() => this.buttonContainer.visible = false);\r\n        }\r\n\r\n        private resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.textField);\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n            this.game.tweens.removeFrom(this.pad);\r\n            this.game.tweens.removeFrom(this.pad.scale);\r\n            this.game.tweens.removeFrom(this.buttonContainer, false);\r\n            this.game.tweens.removeFrom(this.buttonContainer.scale, false);\r\n\r\n            this.textField.alpha = 1;\r\n            this.textField.visible = true;\r\n            this.textField.scale.set(0.7);\r\n            this.pad.scale.set(-0.8, 0.9);\r\n            this.buttonContainer.scale.set(1);\r\n            this.buttonContainer.visible = true;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ScoreCounter extends AbstractUICounter {\r\n\r\n        protected lastScoreValue: number = 0;\r\n        protected lastHighscoreValue: number = ScoreManager.instance.getMaxScores();\r\n\r\n        protected highscoreGroup: Phaser.Group;\r\n        protected highscoreIcon: Phaser.Sprite;\r\n        protected highscoreText: BitmapTextField;\r\n\r\n        protected buildChildren() {\r\n            this.pad = this.add(this.game.make.sprite(12, 0, Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n\r\n            this.icon = this.add(this.game.make.sprite(5, 0, Settings.GAME_ATLAS, 'uiIconCup0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.icon.visible = false;\r\n\r\n            this.textField = this.add(new BitmapTextField('0',  Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(100, 0);\r\n\r\n            this.highscoreGroup = this.add(this.game.make.group());\r\n            this.highscoreGroup.position.set(106, 37);\r\n\r\n            this.lastHighscoreValue = ScoreManager.instance.getMaxScores();\r\n\r\n            this.highscoreIcon = this.highscoreGroup.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'topScoreCrown0000'));\r\n            this.highscoreIcon.anchor.set(1, 0.5);\r\n\r\n            this.highscoreText = this.highscoreGroup.add(new BitmapTextField('' + this.lastHighscoreValue,  Settings.GAME_ATLAS, 'Gold', 0.42, 0, 0.5, 1));\r\n            this.highscoreText.position.set(0, 1);\r\n\r\n            ScoreManager.instance.onScoreChanges.add(this.dispatchScoreChanged, this);\r\n        }\r\n\r\n        protected dispatchScoreChanged(scores: number) {\r\n            if(this.lastScoreValue != scores) {\r\n                const duration: number = Phaser.Math.clamp(50 * Math.pow(Math.abs(scores - this.lastScoreValue), 0.5), 250, 1000);\r\n                this.textField.tweenText(this.lastScoreValue, scores, duration, 0);\r\n                this.lastScoreValue = scores;\r\n                this.tweenIcon(duration);\r\n\r\n                const currentHighscores: number = Math.max(ScoreManager.instance.getMaxScores(), scores);\r\n                if(this.lastHighscoreValue < currentHighscores) {\r\n                    this.highscoreText.tweenText(this.lastHighscoreValue, currentHighscores, duration, 0);\r\n                    this.lastHighscoreValue = currentHighscores;\r\n                }\r\n            }\r\n        }\r\n\r\n        update() {\r\n            if(this.highscoreGroup.visible) {\r\n                let textFieldWidth = this.highscoreText.getLocalBounds().width * this.highscoreText.scale.x;\r\n                this.highscoreIcon.x = -textFieldWidth / 2 - 2;\r\n                this.highscoreText.x = -textFieldWidth / 2;\r\n            }\r\n        }\r\n\r\n        destroy() {\r\n            ScoreManager.instance.onScoreChanges.remove(this.dispatchScoreChanged, this);\r\n            super.destroy();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ShopStarsCounter extends Phaser.Group {\r\n\r\n        public readonly windowShop: WindowShop;\r\n\r\n        protected contentContainer: Phaser.Group;\r\n        protected icon: Phaser.Sprite;\r\n        protected textField: BitmapTextField;\r\n        protected errorSmile: Phaser.Sprite;\r\n\r\n        constructor(windowShop: WindowShop) {\r\n            super(windowShop.game, null);\r\n            this.windowShop = windowShop;\r\n\r\n            this.buildChildren();\r\n        }\r\n\r\n        protected buildChildren() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n            this.contentContainer.scale.set(1.25);\r\n\r\n            this.icon = this.contentContainer.add(this.game.make.sprite(1, 0, Settings.GAME_ATLAS, 'uiIconStar0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.icon.scale.set(0.9);\r\n\r\n            this.textField = this.contentContainer.add(new BitmapTextField('0', Settings.GAME_ATLAS, 'Gold', 0.67, 0, 0.5, 1));\r\n            this.textField.position.set(40, 3);\r\n\r\n            this.errorSmile = this.add(this.game.make.sprite(135, 5, Settings.GAME_ATLAS, 'errorSmile0000'));\r\n            this.errorSmile.anchor.set(0.5);\r\n            this.errorSmile.alpha = 0;\r\n\r\n            this.updateStarsAmount(StarsManager.instance.getStarsAmount());\r\n\r\n            StarsManager.instance.onStarsAmountChanged.add(this.updateStarsAmount, this);\r\n        }\r\n\r\n        private dispatchStarAdded(starsAmount: number) {\r\n            this.updateStarsAmount(starsAmount);\r\n        }\r\n\r\n        public setStarsAmount(value: number) {\r\n            this.textField.changeText('' + value, true);\r\n        }\r\n\r\n        private updateStarsAmount(starsAmount: number) {\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n            this.textField.changeText('' + starsAmount);\r\n            this.textField.scale.set(0);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({x: 0.6, y: 0.6}, 190, Phaser.Easing.Back.Out, true);\r\n        }\r\n\r\n\r\n        public displayError() {\r\n            this.game.tweens.removeFrom(this.errorSmile);\r\n            this.game.tweens.removeFrom(this.errorSmile.scale);\r\n            this.errorSmile.alpha = 0;\r\n            this.errorSmile.x = this.textField.x + this.textField.getLocalBounds().width * this.textField.scale.x + 80;\r\n            this.errorSmile.y = 20;\r\n            this.errorSmile.scale.set(0);\r\n            this.game.add.tween(this.errorSmile)\r\n                .to({alpha: 0.9}, 120, Phaser.Easing.Sinusoidal.In, false)\r\n                .to({alpha: 0}, 700, Phaser.Easing.Quintic.In, false)\r\n                .start();\r\n            this.game.add.tween(this.errorSmile)\r\n                .to({y: 2}, 180, Phaser.Easing.Sinusoidal.In, false)\r\n                .to({y: -30}, 700, Phaser.Easing.Linear.None, false)\r\n                .start();\r\n\r\n            this.game.add.tween(this.errorSmile.scale)\r\n                .to({x: 1.5, y: 1.5}, 240, Phaser.Easing.Elastic.Out, false)\r\n                .to({x: 1.65, y: 1.65}, 550, Phaser.Easing.Quadratic.In, false)\r\n                .start();\r\n\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class StarsCounter extends AbstractUICounter {\r\n\r\n        protected buttonGetStars: ButtonGetStars;\r\n\r\n        protected buildChildren() {\r\n            this.pad = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n\r\n            this.icon = this.add(this.game.make.sprite(5, 0, Settings.GAME_ATLAS, 'uiIconStar0000'));\r\n            this.icon.anchor.set(0.5);\r\n\r\n            this.textField = this.add(new BitmapTextField('0',  Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(95, 0);\r\n\r\n            this.buttonGetStars = this.add(new ButtonGetStars());\r\n            this.buttonGetStars.position.set(124, 44);\r\n\r\n            this.updateStarsAmount(StarsManager.instance.getStarsAmount());\r\n\r\n            StarsManager.instance.onStarAdded.add(this.dispatchStarAdded, this);\r\n            StarsManager.instance.onStarsAmountChanged.add(this.updateStarsAmount, this);\r\n        }\r\n\r\n\r\n        private playStarIncreasingTween() {\r\n            SoundController.instance.playStarReceivedSound();\r\n\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({x: 1.3 / 2, y: 1.3 / 2}, 140, Phaser.Easing.Sinusoidal.Out, true, 0, 0, true);\r\n\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({x: 1.45, y: 1.45}, 80, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({x: 0.87, y: 0.87}, 200, Phaser.Easing.Sinusoidal.In, false)\r\n                .to({x: 1, y: 1}, 60, Phaser.Easing.Sinusoidal.Out, false)\r\n                .start();\r\n        }\r\n\r\n        private dispatchStarAdded(starsAmount: number) {\r\n            this.updateStarsAmount(starsAmount);\r\n            this.playStarIncreasingTween();\r\n        }\r\n\r\n        private updateStarsAmount(starsAmount: number) {\r\n            this.textField.changeText('' + starsAmount);\r\n        }\r\n\r\n        destroy() {\r\n            StarsManager.instance.onStarAdded.remove(this.dispatchStarAdded, this);\r\n            StarsManager.instance.onStarsAmountChanged.remove(this.updateStarsAmount, this);\r\n            super.destroy();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class MultiplierBar extends Phaser.Group {\r\n\r\n        public readonly uiManager: UIManager;\r\n        public readonly level: Level;\r\n\r\n        protected contentContainer: Phaser.Group;\r\n        protected padGrayscale: Phaser.Sprite;\r\n        protected padWhite: Phaser.Sprite;\r\n        protected padGold: Phaser.Sprite;\r\n        protected textFieldGold: BitmapTextField;\r\n        protected textFieldGrayscale: BitmapTextField;\r\n\r\n        protected progressMask: Phaser.Graphics;\r\n\r\n        private readonly padHeight: number = 70;\r\n\r\n        private storedMultiplierValue: number = 1;\r\n        private storedProgressValue: number = 0;\r\n\r\n        constructor(uiManager: UIManager) {\r\n            super(uiManager.game);\r\n            this.uiManager = uiManager;\r\n            this.level = uiManager.level;\r\n\r\n            this.buildChildren();\r\n\r\n            ScoreManager.instance.onMultiplierChanges.add(this.handleMultiplierChange, this);\r\n        }\r\n\r\n        protected buildChildren() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n\r\n            this.padGrayscale = this.contentContainer.add(this.game.make.sprite(0, 0, Settings.ANIMATION_ATLAS, 'multiplierPadGrey0000'));\r\n            this.padGrayscale.anchor.set(0.5);\r\n            this.padGrayscale.scale.set(0.75);\r\n\r\n            this.textFieldGrayscale = this.contentContainer.add(new BitmapTextField('x' + this.storedMultiplierValue, Settings.GAME_ATLAS,'MultiplierGrey', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGrayscale.position.set(0, 0);\r\n\r\n            this.padGold = this.contentContainer.add(this.game.make.sprite(0, 0, Settings.ANIMATION_ATLAS, 'multiplierPad0000'));\r\n            this.padGold.anchor.set(0.5);\r\n            this.padGold.scale.set(0.75);\r\n\r\n            this.padWhite = this.contentContainer.add(this.game.make.sprite(0, 0, Settings.ANIMATION_ATLAS, 'multiplierPadWhite0000'));\r\n            this.padWhite.anchor.set(0.5);\r\n            this.padWhite.alpha = 0;\r\n            this.padWhite.scale.set(0.75);\r\n\r\n            this.textFieldGold = this.contentContainer.add(new BitmapTextField('x' + this.storedMultiplierValue, Settings.GAME_ATLAS, 'Multiplier', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGold.position.set(0, 0);\r\n\r\n            this.progressMask = this.contentContainer.add(this.game.make.graphics(0, this.padHeight / 2));\r\n            this.progressMask.beginFill(0, 0.5).drawRect(-this.padGold.width / 2, 0, this.padGold.width, this.padGold.height).endFill();\r\n\r\n            this.padGold.mask = this.progressMask;\r\n            this.textFieldGold.mask = this.progressMask;\r\n        }\r\n\r\n        private handleMultiplierChange(multiplier: number, progress: number) {\r\n            if (this.storedMultiplierValue == multiplier) {\r\n                this.game.add.tween(this.progressMask)\r\n                    .to({y: -1 + (0.5 - progress) * this.padHeight}, 500, Phaser.Easing.Sinusoidal.Out, true);\r\n                this.game.tweens.removeFrom(this.padWhite);\r\n                this.game.add.tween(this.padWhite)\r\n                    .to({alpha: 0.5}, 250, Phaser.Easing.Linear.None, false)\r\n                    .to({alpha: 0.0}, 250, Phaser.Easing.Linear.None, false)\r\n                    .start();\r\n            } else if (multiplier > this.storedMultiplierValue) {\r\n                AchievementsManager.instance.addValue(AchievementType.TOTAL_LEVEL_UPS, multiplier - this.storedMultiplierValue);\r\n                SoundController.instance.playlevelUpSound();\r\n                const totalDuration: number = 500;\r\n                const fillingDuration: number = Phaser.Math.clamp(1 - this.storedProgressValue, 0.1, 0.8) * totalDuration;\r\n                this.game.add.tween(this.progressMask)\r\n                    .to({y: -1 + (0.5 - 1) * this.padHeight}, fillingDuration, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({y: -1 + (0.5) * this.padHeight}, 1, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .to({y: -1 + (0.5 - progress) * this.padHeight}, totalDuration - fillingDuration + 1, Phaser.Easing.Sinusoidal.Out, false)\r\n                    .start();\r\n                this.game.time.events.add(fillingDuration, () => this.updateMultiplierTexts(multiplier));\r\n                this.game.tweens.removeFrom(this.padWhite);\r\n                this.game.add.tween(this.padWhite)\r\n                    .to({alpha: 0.6}, fillingDuration, Phaser.Easing.Linear.None, false)\r\n                    .to({alpha: 0}, totalDuration - fillingDuration, Phaser.Easing.Linear.None, false)\r\n                    .start();\r\n            }\r\n\r\n            this.storedMultiplierValue = multiplier;\r\n            this.storedProgressValue = progress;\r\n        }\r\n\r\n        private updateMultiplierTexts(multiplier: number) {\r\n            this.textFieldGrayscale.changeText('x' + multiplier);\r\n            this.textFieldGold.changeText('x' + multiplier);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ResultsMultiplierBar extends Phaser.Group {\r\n\r\n        public readonly results: WindowResults;\r\n\r\n        protected contentContainer: Phaser.Group;\r\n        protected padGrayscale: Phaser.Sprite;\r\n        protected padGold: Phaser.Sprite;\r\n        protected textFieldGold: BitmapTextField;\r\n        protected textFieldGrayscale: BitmapTextField;\r\n\r\n        protected progressMask: Phaser.Graphics;\r\n\r\n        private readonly padHeight: number = 70;\r\n\r\n        private storedMultiplierValue: number = 1;\r\n        private storedProgressValue: number = 0;\r\n\r\n        constructor(results: WindowResults) {\r\n            super(results.game);\r\n            this.results = results;\r\n\r\n            this.buildChildren();\r\n        }\r\n\r\n        protected buildChildren() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n\r\n            this.padGrayscale = this.contentContainer.add(this.game.make.sprite(0, 0, Settings.ANIMATION_ATLAS, 'multiplierPadGrey0000'));\r\n            this.padGrayscale.anchor.set(0.5);\r\n            this.padGrayscale.scale.set(0.75);\r\n\r\n            this.textFieldGrayscale = this.contentContainer.add(new BitmapTextField('x' + this.storedMultiplierValue, Settings.GAME_ATLAS, 'MultiplierGrey', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGrayscale.position.set(0, 0);\r\n\r\n            this.padGold = this.contentContainer.add(this.game.make.sprite(0, 0, Settings.ANIMATION_ATLAS, 'multiplierPad0000'));\r\n            this.padGold.anchor.set(0.5);\r\n            this.padGold.scale.set(0.75);\r\n\r\n            this.textFieldGold = this.contentContainer.add(new BitmapTextField('x' + this.storedMultiplierValue, Settings.GAME_ATLAS, 'Multiplier', 1.1, 0.5, 0.5, -2));\r\n            this.textFieldGold.position.set(0, 0);\r\n\r\n            this.progressMask = this.contentContainer.add(this.game.make.graphics(0, this.padHeight / 2));\r\n            this.progressMask.beginFill(0, 0.5).drawRect(-this.padGold.width / 2, 0, this.padGold.width, this.padGold.height).endFill();\r\n\r\n            this.padGold.mask = this.progressMask;\r\n            this.textFieldGold.mask = this.progressMask;\r\n        }\r\n\r\n        public setValue(multiplier: number, progress: number) {\r\n            this.updateMultiplierTexts(multiplier);\r\n\r\n            this.game.add.tween(this.progressMask)\r\n                .to({y: -1 + (0.5 - progress) * this.padHeight}, 800, Phaser.Easing.Sinusoidal.Out, true, 650);\r\n\r\n            this.textFieldGrayscale.tweenTextAdvanced('x', 1, multiplier, 800, 650, false);\r\n            this.textFieldGold.tweenTextAdvanced('x', 1, multiplier, 800, 650, false);\r\n\r\n            this.storedMultiplierValue = multiplier;\r\n            this.storedProgressValue = progress;\r\n        }\r\n\r\n        private updateMultiplierTexts(multiplier: number) {\r\n            this.textFieldGrayscale.changeText('x' + multiplier);\r\n            this.textFieldGold.changeText('x' + multiplier);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AbstractPowerup extends Phaser.Group {\r\n\r\n        public readonly powerupContainer: PowerupContainer;\r\n        public readonly level: Level;\r\n\r\n        public readonly powerupType: PowerupType;\r\n        public dragging: boolean = false;\r\n\r\n        protected available: boolean = false;\r\n\r\n        private countdownActive: boolean = false;\r\n        private startAngle: number = 270;\r\n        private endAngle: number = -90 - 0.000001;\r\n        private currentStep: { value: number } = {value: 0};\r\n\r\n        protected countdownBar: Phaser.Sprite;\r\n        protected countdownMask: Phaser.Graphics;\r\n        protected pad: Phaser.Sprite;\r\n        protected icon: Phaser.Sprite;\r\n        protected mark: Phaser.Sprite;\r\n        protected tutorialHand: Phaser.Sprite;\r\n\r\n\r\n        protected iconDelta: { x: number, y: number } = {x: 0, y: 0};\r\n\r\n        protected constructor(powerupContainer: PowerupContainer, powerupType: PowerupType) {\r\n            super(powerupContainer.game, null);\r\n            this.powerupContainer = powerupContainer;\r\n            this.level = powerupContainer.level;\r\n            this.powerupType = powerupType;\r\n            this.available = PowerupManager.instance.isBought(this.powerupType);\r\n\r\n            this.buildContent();\r\n            this.addListeners();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.countdownBar = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'itemPad0001'));\r\n            this.countdownBar.anchor.set(0.5);\r\n            this.countdownBar.alpha = 0;\r\n\r\n            this.countdownMask = this.add(this.game.make.graphics(-1, -3));\r\n            this.countdownMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 60, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill()\r\n            this.countdownBar.mask = this.countdownMask;\r\n\r\n            this.pad = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'itemPad0000'));\r\n            this.pad.anchor.set(0.5);\r\n\r\n            this.icon = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'icon' + this.powerupType + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n\r\n            this.mark = this.add(this.game.make.sprite(28, -26, Settings.GAME_ATLAS, this.isAvailable() ? 'okaySign0000' : 'plusSign0000'));\r\n            this.mark.anchor.set(0.5);\r\n\r\n            this.tutorialHand = this.add(this.game.make.sprite(-4, 0, Settings.GAME_ATLAS, 'tutorialHand0000'));\r\n            this.tutorialHand.anchor.set(0, 0);\r\n            this.tutorialHand.scale.set(0.5);\r\n            this.tutorialHand.angle = -24;\r\n            this.tutorialHand.visible = false;\r\n\r\n            this.animateAppearing();\r\n\r\n            if (PowerupManager.instance.isBought(this.powerupType)) {\r\n                this.activate();\r\n            }\r\n        }\r\n\r\n        protected addListeners() {\r\n            PowerupManager.instance.onPowerupBought.add(this.handlePowerupBought, this);\r\n\r\n            this.level.eventManager.onPowerupApplied.add(this.handlePowerupApplied, this, 999);\r\n\r\n            this.pad.inputEnabled = true;\r\n            this.pad.input.pixelPerfectClick = true;\r\n            this.pad.input.pixelPerfectAlpha = 1;\r\n            this.pad.events.onInputDown.add(this.handleInputDown, this);\r\n            this.pad.events.onInputUp.add(this.handleInputUp, this);\r\n        }\r\n\r\n        protected animateAppearing() {\r\n            this.visible = true;\r\n\r\n            this.icon.scale.set(1);\r\n            this.icon.position.set(0, 0);\r\n\r\n            this.icon.visible = true;\r\n\r\n            this.scale.set(0);\r\n            this.game.add.tween(this.scale)\r\n                .to({x: 1, y: 1}, 240, Phaser.Easing.Circular.Out, true, 0);\r\n\r\n            this.game.tweens.removeFrom(this, false);\r\n            this.alpha = 0;\r\n            this.y = 35;\r\n            this.game.add.tween(this)\r\n                .to({alpha: 1, y: 0}, 240, Phaser.Easing.Linear.None, true);\r\n        }\r\n\r\n        protected handleInputDown(sprite, pointer: Phaser.Pointer) {\r\n            if (!this.isAvailable()) {\r\n                this.displayShop();\r\n                return;\r\n            }\r\n            this.dragging = true;\r\n            if (this.parent) {\r\n                this.parent.setChildIndex(this, this.parent.children.length - 1);\r\n            }\r\n\r\n            this.game.tweens.removeFrom(this.iconDelta);\r\n            this.iconDelta.x = 0;\r\n            this.iconDelta.y = 0;\r\n            this.game.add.tween(this.iconDelta)\r\n                .to(this.level.serviceManager.layoutService.getPowerupDraggingDelta(), 80, Phaser.Easing.Linear.None, true);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.icon.scale.set(1);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({x: 1.5, y: 1.5}, 80, Phaser.Easing.Linear.None, true);\r\n\r\n            this.game.tweens.removeFrom(this.mark.scale);\r\n            this.game.add.tween(this.mark.scale)\r\n                .to({x: 0, y: 0}, 60, Phaser.Easing.Linear.None, true);\r\n            this.game.tweens.removeFrom(this.mark);\r\n            this.game.add.tween(this.mark)\r\n                .to({alpha: 0}, 60, Phaser.Easing.Linear.None, true);\r\n\r\n            this.powerupContainer.pauseCountdowns();\r\n        }\r\n\r\n        protected handleInputUp(sprite, pointer: Phaser.Pointer) {\r\n            if (!this.isAvailable()) {\r\n                return;\r\n            }\r\n            const currentCell: Cell = this.getCurrentCell();\r\n            if (this.canBeApplied(currentCell)) {\r\n                this.applyPowerup(currentCell);\r\n            } else {\r\n                this.game.tweens.removeFrom(this.icon.scale);\r\n                this.icon.scale.set(1);\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({x: 1, y: 1}, 100, Phaser.Easing.Linear.None, true);\r\n                this.game.tweens.removeFrom(this.icon);\r\n                this.game.add.tween(this.icon)\r\n                    .to({x: 0, y: 0}, 100, Phaser.Easing.Linear.None, true);\r\n            }\r\n            this.dragging = false;\r\n            this.level.boardManager.getBoard().dispatchPowerupIsBeingDragged([]);\r\n\r\n            this.game.tweens.removeFrom(this.mark.scale);\r\n            this.game.add.tween(this.mark.scale)\r\n                .to({x: 1, y: 1}, 60, Phaser.Easing.Linear.None, true);\r\n\r\n            this.game.tweens.removeFrom(this.mark);\r\n            this.game.add.tween(this.mark)\r\n                .to({alpha: 1}, 60, Phaser.Easing.Linear.None, true);\r\n\r\n            this.powerupContainer.resumeCountdowns();\r\n        }\r\n\r\n        update() {\r\n            super.update();\r\n\r\n            if (this.countdownActive) {\r\n                if (!WindowManager.instance.hasOpenedWindows() && !this.powerupContainer.hasDraggingPowerups()) {\r\n                    this.currentStep.value += this.game.time.elapsedMS / Settings.POWERUP_USAGE_COUNTDOWN_WHEN_NO_MOVES_LEFT;\r\n                    if (this.currentStep.value > 1) {\r\n                        this.currentStep.value = 0;\r\n                        this.countdownFinished();\r\n                    }\r\n                }\r\n                this.countdownMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 70, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill()\r\n            }\r\n\r\n            if (this.level.gameStateManager.isGameActive() && this.dragging) {\r\n                const {x, y} = this.toLocal(this.game.input.activePointer.position, this.game.world);\r\n                this.icon.position.set(x + this.iconDelta.x, y + this.iconDelta.y);\r\n\r\n                this.level.boardManager.getBoard().dispatchPowerupIsBeingDragged(this.getTargetCells(this.getCurrentCell()));\r\n            } else {\r\n                this.updateView();\r\n            }\r\n        }\r\n\r\n        public pauseCountdown() {\r\n            if(this.countdownActive) {\r\n                this.game.add.tween(this.tutorialHand)\r\n                    .to({alpha: 0}, 70, Phaser.Easing.Linear.None, true);\r\n\r\n                this.game.add.tween(this.countdownBar)\r\n                    .to({alpha: 0}, 80, Phaser.Easing.Linear.None, true);\r\n            }\r\n        }\r\n\r\n        public resumeCountdown() {\r\n            if(this.countdownActive) {\r\n                this.game.add.tween(this.tutorialHand)\r\n                    .to({alpha: 1}, 70, Phaser.Easing.Linear.None, true);\r\n\r\n                this.game.add.tween(this.countdownBar)\r\n                    .to({alpha: 1}, 70, Phaser.Easing.Linear.None, true);\r\n            }\r\n        }\r\n\r\n        public isAvailable(): boolean {\r\n            return this.available;\r\n        }\r\n\r\n        public mayBeBought(): boolean {\r\n            return (PowerupManager.instance.getPrice(this.powerupType) <= StarsManager.instance.getStarsAmount());\r\n        }\r\n\r\n        public updateView() {\r\n            if (!PowerupManager.instance.isBought(this.powerupType)) {\r\n                this.icon.frameName = 'icon' + this.powerupType + '0000';\r\n                this.mark.visible = true;\r\n                this.mark.frameName = 'plusSign0000';\r\n            } else {\r\n                this.mark.visible = true;\r\n                this.mark.frameName = 'okaySign0000';\r\n            }\r\n        }\r\n\r\n        public activate() {\r\n            this.available = true;\r\n\r\n            this.icon.scale.set(1);\r\n            this.icon.position.set(0, 0);\r\n\r\n            this.icon.visible = true;\r\n            this.mark.frameName = 'okaySign0000';\r\n        }\r\n\r\n        public deactivate() {\r\n            if (this.isAvailable()) {\r\n                this.available = false;\r\n\r\n                this.game.tweens.removeFrom(this.icon.scale);\r\n                this.icon.scale.set(0);\r\n                this.icon.position.set(0, 0);\r\n\r\n                this.mark.frameName = 'plusSign0000';\r\n\r\n                this.game.add.tween(this.icon.scale)\r\n                    .to({x: 1, y: 1}, 180, Phaser.Easing.Sinusoidal.Out, true);\r\n            }\r\n        }\r\n\r\n        public startCountdown() {\r\n            if (this.isAvailable()) {\r\n                this.resetCountdown();\r\n                this.showTutorialHand();\r\n                this.countdownBar.visible = true;\r\n                this.countdownBar.alpha = 1;\r\n                this.countdownActive = true;\r\n            }\r\n        }\r\n\r\n        private countdownFinished() {\r\n            this.resetCountdown();\r\n            this.level.eventManager.onPowerupUsageTimerExceeded.dispatch();\r\n\r\n            this.hideTutorialHand();\r\n        }\r\n\r\n        private hideTutorialHand() {\r\n            this.game.tweens.removeFrom(this.tutorialHand);\r\n            this.game.add.tween(this.tutorialHand)\r\n                .to({alpha: 0}, 250, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(() => this.tutorialHand.visible = false);\r\n        }\r\n\r\n        private showTutorialHand() {\r\n            this.game.tweens.removeFrom(this.tutorialHand);\r\n            this.tutorialHand.visible = true;\r\n            this.game.add.tween(this.tutorialHand)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Linear.None, true);\r\n\r\n            this.game.add.tween(this.tutorialHand)\r\n                .to({x: '-6', y: '-6'}, 300, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n        }\r\n\r\n        private handlePowerupApplied() {\r\n            this.resetCountdown();\r\n            this.hideTutorialHand();\r\n        }\r\n\r\n        public resetCountdown() {\r\n            this.game.tweens.removeFrom(this.currentStep);\r\n            this.game.tweens.removeFrom(this.countdownBar);\r\n            this.currentStep.value = 0;\r\n            this.countdownActive = false;\r\n            this.countdownBar.visible = false;\r\n            this.countdownBar.alpha = 1;\r\n            this.countdownMask.clear();\r\n        }\r\n\r\n        public displayShop() {\r\n            WindowManager.instance.showShop(this.powerupType);\r\n        }\r\n\r\n        protected getCurrentCell(): Cell {\r\n            const boardLocalPosition: PIXI.Point = this.level.boardManager.getBoard().cellsContainer.toLocal(this.icon.position, this);\r\n            return this.level.boardManager.getBoard().getCellUnderPoint(boardLocalPosition);\r\n        }\r\n\r\n        protected handlePowerupBought(powerupType: PowerupType) {\r\n            if (powerupType === this.powerupType && !this.isAvailable()) {\r\n                this.activate();\r\n                this.powerupContainer.updatePowerups();\r\n            }\r\n        }\r\n\r\n        protected abstract getTargetCells(mainCell: Cell): Cell[];\r\n\r\n        protected abstract canBeApplied(cell: Cell): boolean;\r\n\r\n        protected abstract applyPowerup(cell: Cell);\r\n\r\n\r\n        destroy() {\r\n            PowerupManager.instance.onPowerupBought.remove(this.handlePowerupBought, this);\r\n            super.destroy();\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BombPowerup extends AbstractPowerup {\r\n\r\n        constructor(powerupContainer: PowerupContainer) {\r\n            super(powerupContainer, PowerupType.BOMB);\r\n        }\r\n\r\n        protected getTargetCells(mainCell: Cell): Cell[] {\r\n            if (mainCell) {\r\n                return this.level.boardManager.getBoard().getCells().filter(cell => Math.abs(cell.posX - mainCell.posX) <= 1 && Math.abs(cell.posY - mainCell.posY) <= 1);\r\n            }\r\n            return [];\r\n        }\r\n\r\n        protected canBeApplied(cell: Cell): boolean {\r\n            return cell && this.getTargetCells(cell).some(targetCell => targetCell.hasBlock());\r\n        }\r\n\r\n        protected applyPowerup(currentCell: Cell) {\r\n            PowerupManager.instance.usePowerup(this.powerupType);\r\n            AchievementsManager.instance.addValue(AchievementType.BOMB_EXPLOSIONS, 1);\r\n            this.getTargetCells(currentCell).forEach(cell => cell.destroyBlock(0));\r\n            this.level.boardManager.getBoard().effectsContainer.add(new ExplosionEffect(currentCell.x, currentCell.y));\r\n            this.level.figureManager.updateFiguresApplicability();\r\n            this.deactivate();\r\n            this.level.eventManager.onPowerupApplied.dispatch(this.powerupType);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class LightningPowerup extends AbstractPowerup {\r\n\r\n        constructor(powerupContainer: PowerupContainer) {\r\n            super(powerupContainer, PowerupType.LIGHTNING);\r\n        }\r\n\r\n        protected getTargetCells(mainCell:Cell): Cell[] {\r\n            if(mainCell) {\r\n                return this.level.boardManager.getBoard().getCells().filter(cell => mainCell.hasBlock() && cell.hasBlock() && cell.getBlock().color == mainCell.getBlock().color);\r\n            }\r\n            return [];\r\n        }\r\n\r\n        protected canBeApplied(cell: Cell): boolean {\r\n            return cell && cell.hasBlock();\r\n        }\r\n\r\n        protected applyPowerup(currentCell: Cell) {\r\n            PowerupManager.instance.usePowerup(this.powerupType);\r\n\r\n            const targetCells: Cell[] =  Phaser.ArrayUtils.shuffle(this.getTargetCells(currentCell));\r\n\r\n            if(targetCells.length == 1) {\r\n                this.level.boardManager.getBoard().effectsContainer.add(new LightningEffect(currentCell, currentCell).delayedStart(0));\r\n                this.game.time.events.add( 50, () => this.level.figureManager.updateFiguresApplicability());\r\n            } else {\r\n                let delay: number = 0;\r\n                let currentPortion: Cell[] = [currentCell];\r\n                while(currentPortion) {\r\n                    for (let cell of currentPortion) {\r\n                        let nextPortion: Cell[] = this.getNextPortionOfCells(targetCells);\r\n                        if(nextPortion) {\r\n                            for(let nextCell of nextPortion) {\r\n                                this.level.boardManager.getBoard().effectsContainer.add(new LightningEffect(cell, nextCell).delayedStart(delay));\r\n                            }\r\n                            delay += LightningEffect.TOTAL_FRAMES / LightningEffect.FPS * 1000 + Settings.LIGHTING_DELAY_BETWEEN_STRIKES;\r\n                        }\r\n                        currentPortion = nextPortion;\r\n                    }\r\n                }\r\n                this.game.time.events.add(delay + 50, () => {\r\n                    this.level.figureManager.updateFiguresApplicability();\r\n                    this.level.eventManager.onPowerupApplied.dispatch(this.powerupType);\r\n                });\r\n            }\r\n\r\n            this.deactivate();\r\n        }\r\n\r\n        private getNextPortionOfCells(cells: Cell[]): Cell[] {\r\n            if(cells.length == 0) {\r\n                return null;\r\n            }\r\n            if(cells.length <  Settings.LIGHTING_MIN_TARGETS) {\r\n                return cells.splice(0, cells.length);\r\n            }\r\n            let cellsCount:number = Settings.LIGHTING_MIN_TARGETS + Math.floor(Math.random() * (Settings.LIGHTING_MAX_TARGETS + 1 - Settings.LIGHTING_MIN_TARGETS));\r\n            return cells.splice(0, cellsCount > cells.length ? cells.length : cellsCount);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class PowerupContainer extends Phaser.Group {\r\n\r\n        public readonly uiManager: UIManager;\r\n        public readonly level: Level;\r\n\r\n        public usedPowerups: any[] = [];\r\n\r\n        protected bombPowerup: AbstractPowerup;\r\n        protected lightningPowerup: AbstractPowerup;\r\n\r\n        constructor(uiManager: UIManager) {\r\n            super(uiManager.game, null);\r\n            this.uiManager = uiManager;\r\n            this.level = uiManager.level;\r\n\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.lightningPowerup = this.add(new LightningPowerup(this));\r\n            this.lightningPowerup.position.set(0, 45);\r\n\r\n            this.bombPowerup = this.add(new BombPowerup(this));\r\n            this.bombPowerup.position.set(0, -45);\r\n\r\n            this.updatePowerups();\r\n\r\n            this.level.eventManager.onPowerupApplied.add(this.handlePowerupApplied, this);\r\n        }\r\n\r\n        public updatePowerups() {\r\n            this.game.time.events.add(20, () => this.resize());\r\n        }\r\n\r\n        public hidePowerups() {\r\n            this.game.add.tween(this.bombPowerup)\r\n                .to({y: '+50', alpha: 0}, 250, Phaser.Easing.Sinusoidal.Out, true, 0)\r\n                .onComplete.add(() => this.bombPowerup.visible = false);\r\n\r\n            this.game.add.tween(this.lightningPowerup)\r\n                .to({y: '+50', alpha: 0}, 250, Phaser.Easing.Sinusoidal.Out, true, 50)\r\n                .onComplete.add(() => this.lightningPowerup.visible = false);\r\n        }\r\n\r\n        public startCountdown() {\r\n            this.bombPowerup.startCountdown();\r\n            this.lightningPowerup.startCountdown();\r\n        }\r\n\r\n        public pauseCountdowns() {\r\n            this.bombPowerup.pauseCountdown();\r\n            this.lightningPowerup.pauseCountdown();\r\n        }\r\n\r\n        public resumeCountdowns() {\r\n            this.bombPowerup.resumeCountdown();\r\n            this.lightningPowerup.resumeCountdown();\r\n        }\r\n\r\n        public hasDraggingPowerups(): boolean {\r\n            return this.lightningPowerup.dragging || this.bombPowerup.dragging;\r\n        }\r\n\r\n        public resize() {\r\n            if (CustomScaleManager.isPortrait()) {\r\n                this.resizePortrait();\r\n            } else if (CustomScaleManager.isSquared()) {\r\n                this.resizeSquared();\r\n            } else if (CustomScaleManager.isLandscape()) {\r\n                this.resizeLandscape();\r\n            }\r\n        }\r\n\r\n        private resizeLandscape() {\r\n            const powerupContainerBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailablePowerupsContainerBounds();\r\n            this.position.set(powerupContainerBounds.x, powerupContainerBounds.y);\r\n            this.scale.set(Math.max(Math.min(powerupContainerBounds.width * 0.6 / 200, 1.4), 1));\r\n            this.bombPowerup.position.set(-48, 0);\r\n            this.lightningPowerup.position.set(48, 0);\r\n        }\r\n\r\n        private resizePortrait() {\r\n            const powerupContainerBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailablePowerupsContainerBounds();\r\n\r\n            this.scale.set(Math.max(1, Math.min(powerupContainerBounds.height / 90, 1.35)));\r\n            this.position.set(powerupContainerBounds.x, Math.min(powerupContainerBounds.y, powerupContainerBounds.y + powerupContainerBounds.height / 2 - 48 * this.scale.y));\r\n\r\n            this.bombPowerup.position.set(-47, 0);\r\n            this.lightningPowerup.position.set(47, 0);\r\n        }\r\n\r\n        private resizeSquared() {\r\n            const powerupContainerBounds: Phaser.Rectangle = this.level.serviceManager.layoutService.getAvailablePowerupsContainerBounds();\r\n            this.position.set(powerupContainerBounds.x, powerupContainerBounds.y);\r\n            this.scale.set(1 / (Math.pow(CustomScaleManager.UPSCALE_FACTOR, 0.5)));\r\n            this.bombPowerup.position.set(-48, 0);\r\n            this.lightningPowerup.position.set(48, 0);\r\n        }\r\n\r\n        private handlePowerupApplied(powerupType: PowerupType) {\r\n            Analytics.instance.updateLevelData({powerups: [powerupType]});\r\n            this.usedPowerups.push(powerupType);\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class PublisherLogo extends Phaser.Sprite {\r\n\r\n        constructor(x: number, y: number) {\r\n            super(App.instance, x, y, 'more_games');\r\n            this.anchor.set(0.5);\r\n\r\n            this.inputEnabled = true;\r\n            this.events.onInputDown.add(this.publisherLogoClicked, this);\r\n        }\r\n\r\n        protected publisherLogoClicked() {\r\n            App.instance.navigateToSponsor();\r\n        }\r\n    }\r\n}\r\n","namespace BlockPuzzle {\r\n    export class NewRecordEffect extends Phaser.Group {\r\n\r\n        private readonly resultsWindow: WindowResults;\r\n\r\n        protected stamp: Phaser.Sprite;\r\n\r\n        constructor(results: WindowResults) {\r\n            super(results.game, null);\r\n            this.resultsWindow = results;\r\n\r\n            this.stamp = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'newBestIcon0000'));\r\n            this.stamp.anchor.set(0.5);\r\n\r\n        }\r\n\r\n        public show(delay: number){\r\n            this.game.time.events.add(delay, () => this.playStampTween());\r\n        }\r\n\r\n\r\n        protected playStampTween() {\r\n            this.visible = true;\r\n            this.scale.set(2.5);\r\n            this.alpha = 0.45;\r\n            this.game.add.tween(this)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Linear.None, true);\r\n            this.game.add.tween(this.scale)\r\n                .to({x: 1, y: 1}, 250, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(() => {\r\n                    this.parent.scale.set(0.95, 0.95);\r\n                    this.game.add.tween(this.parent.scale)\r\n                        .to({x: 1, y: 1}, 320, Phaser.Easing.Back.Out, true);\r\n                    this.parent && this.parent.parent && this.parent.parent.addChildAt(new BestScoreReachedEffectEmitter(0,  -15, 120), 0);\r\n            });\r\n            this.game.time.events.add(160, () => SoundController.instance.playStampSound());\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ResultsScoresPanel extends Phaser.Group {\r\n\r\n        protected readonly results: WindowResults;\r\n\r\n        protected pad: Phaser.Sprite;\r\n        protected textField: BitmapTextField;\r\n        protected icon: Phaser.Sprite;\r\n\r\n        protected highscoreGroup: Phaser.Group;\r\n        protected highscoreIcon: Phaser.Sprite;\r\n        protected highscoreText: BitmapTextField;\r\n\r\n        protected lastHighscoreValue: number;\r\n\r\n        constructor(results: WindowResults) {\r\n            super(results.game, null);\r\n            this.results = results;\r\n\r\n            this.scale.set(1.25);\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.pad = this.add(this.game.make.sprite(12, 0, Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n\r\n            this.textField = this.add(new BitmapTextField('0',  Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(102, 0);\r\n\r\n            this.highscoreGroup = this.add(this.game.make.group());\r\n            this.highscoreGroup.position.set(106, 37);\r\n\r\n            this.highscoreIcon = this.highscoreGroup.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'topScoreCrown0000'));\r\n            this.highscoreIcon.anchor.set(1, 0.5);\r\n\r\n            this.highscoreText = this.highscoreGroup.add(new BitmapTextField('0',  Settings.GAME_ATLAS, 'Gold', 0.42, 0, 0.5, 1));\r\n            this.highscoreText.position.set(0, 1);\r\n\r\n            this.icon = this.add(this.game.make.sprite(5, 10, Settings.GAME_ATLAS, 'resultsIconCup0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n\r\n        protected show(leftValueInitial: number, leftValueTarget: number, rightValueInitial: number, rightValueTarget: number, leftValuePrefix: string = '', rightValuePrefix: string = '', delay: number, textTweenDelay: number, tweenTextDuration: number) {\r\n            this.resetTweens();\r\n\r\n            this.tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration);\r\n\r\n            this.animateAppearing(delay);\r\n        }\r\n\r\n        public tweenTexts(leftValueInitial: number, leftValueTarget: number, rightValueInitial: number, rightValueTarget: number, leftValuePrefix: string, rightValuePrefix: string, textTweenDelay: number, tweenTextDuration: number) {\r\n            this.highscoreText.changeText('' + rightValueInitial);\r\n\r\n            this.textField.tweenTextAdvanced(leftValuePrefix, leftValueInitial, leftValueTarget, tweenTextDuration, textTweenDelay, true);\r\n            this.highscoreText.tweenTextAdvanced(rightValuePrefix, rightValueInitial, rightValueTarget, tweenTextDuration, textTweenDelay, true);\r\n        }\r\n\r\n        protected animateAppearing(delay: number) {\r\n            this.icon.scale.set(0.5);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({x: 1, y: 1}, 350, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.icon.alpha = 0;\r\n            this.game.add.tween(this.icon)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n\r\n            this.pad.scale.x = 0;\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({x: 1.3}, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n\r\n            this.textField.visible = false;\r\n            this.textField.scale.set(0.5);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({x: 0.72, y: 0.72}, 450, Phaser.Easing.Back.Out, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n\r\n            this.highscoreGroup.visible = false;\r\n            this.highscoreGroup.alpha = 0;\r\n            this.game.add.tween(this.highscoreGroup)\r\n                .to({alpha: 1}, 300, Phaser.Easing.Sinusoidal.Out, true, delay + 400)\r\n                .onStart.add(() => this.highscoreGroup.visible = true);\r\n\r\n            this.textField.visible = false;\r\n            this.textField.alpha = 0;\r\n            this.game.add.tween(this.textField)\r\n                .to({alpha: 1}, 500, Phaser.Easing.Linear.None, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n        }\r\n\r\n        protected resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.game.tweens.removeFrom(this.pad.scale);\r\n            this.game.tweens.removeFrom(this.textField);\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n            this.game.tweens.removeFrom(this.highscoreGroup);\r\n\r\n            this.icon.scale.set(1);\r\n            this.icon.alpha = 1;\r\n            this.pad.scale.set(1.3);\r\n            this.textField.scale.set(1);\r\n            this.textField.visible = true;\r\n            this.highscoreGroup.alpha = 1;\r\n            this.highscoreGroup.visible = true;\r\n        }\r\n\r\n\r\n        public showPanel(delay: number, textTweenDelay: number, duration: number, bestScoresReached: boolean) {\r\n            this.show(0, ScoreManager.instance.getCurrentScores(), bestScoresReached ? ScoreManager.instance.getPrevMaxScores() : ScoreManager.instance.getMaxScores(), ScoreManager.instance.getMaxScores(), '', '', delay, delay + textTweenDelay, duration);\r\n        }\r\n\r\n        update() {\r\n            if(this.highscoreGroup.visible) {\r\n                let textFieldWidth = this.highscoreText.getLocalBounds().width * this.highscoreText.scale.x;\r\n                this.highscoreIcon.x = -textFieldWidth / 2 - 2;\r\n                this.highscoreText.x = -textFieldWidth / 2;\r\n            }\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ResultsStarsPanel extends Phaser.Group {\r\n\r\n        protected readonly results: WindowResults;\r\n\r\n        protected pad: Phaser.Sprite;\r\n        protected textField: BitmapTextField;\r\n        protected icon: Phaser.Sprite;\r\n\r\n        constructor(results: WindowResults) {\r\n            super(results.game, null);\r\n            this.results = results;\r\n\r\n            this.scale.set(1.25);\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.pad = this.add(this.game.make.sprite(10, 0, Settings.GAME_ATLAS, 'scorePad0000'));\r\n            this.pad.anchor.set(0, 0.5);\r\n            this.pad.scale.set(1.3);\r\n\r\n            this.textField = this.add(new BitmapTextField('0',  Settings.GAME_ATLAS, 'Gold', 0.72, 0.5, 0.5, 1));\r\n            this.textField.position.set(100, 0);\r\n\r\n            this.icon = this.add(this.game.make.sprite(10, 0, Settings.GAME_ATLAS, 'resultsIconStar0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n\r\n        protected show(leftValueInitial: number, leftValueTarget: number, rightValueInitial: number, rightValueTarget: number, leftValuePrefix: string = '', rightValuePrefix: string = '', delay: number, textTweenDelay: number, tweenTextDuration: number) {\r\n            this.resetTweens();\r\n\r\n            this.tweenTexts(leftValueInitial, leftValueTarget, rightValueInitial, rightValueTarget, leftValuePrefix, rightValuePrefix, textTweenDelay, tweenTextDuration);\r\n\r\n            this.animateAppearing(delay);\r\n        }\r\n\r\n        public tweenTexts(leftValueInitial: number, leftValueTarget: number, rightValueInitial: number, rightValueTarget: number, leftValuePrefix: string, rightValuePrefix: string, textTweenDelay: number, tweenTextDuration: number) {\r\n            this.textField.tweenTextAdvanced(leftValuePrefix, leftValueInitial, leftValueTarget, tweenTextDuration, textTweenDelay, true);\r\n        }\r\n\r\n        protected animateAppearing(delay: number) {\r\n            this.icon.scale.set(0.5);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({x: 1, y: 1}, 350, Phaser.Easing.Back.Out, true, delay + 100);\r\n            this.icon.alpha = 0;\r\n            this.game.add.tween(this.icon)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n\r\n            this.pad.scale.x = 0;\r\n            this.game.add.tween(this.pad.scale)\r\n                .to({x: 1.3}, 450, Phaser.Easing.Back.Out, true, delay + 150);\r\n\r\n            this.textField.visible = false;\r\n            this.textField.scale.set(0.5);\r\n            this.game.add.tween(this.textField.scale)\r\n                .to({x: 0.72, y: 0.72}, 450, Phaser.Easing.Back.Out, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n\r\n            this.textField.visible = false;\r\n            this.textField.alpha = 0;\r\n            this.game.add.tween(this.textField)\r\n                .to({alpha: 1}, 500, Phaser.Easing.Linear.None, true, delay + 250)\r\n                .onStart.add(() => this.textField.visible = true);\r\n        }\r\n\r\n        protected resetTweens() {\r\n            this.game.tweens.removeFrom(this.alpha);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n            this.game.tweens.removeFrom(this.pad.scale);\r\n            this.game.tweens.removeFrom(this.textField);\r\n            this.game.tweens.removeFrom(this.textField.scale);\r\n\r\n            this.icon.scale.set(1);\r\n            this.icon.alpha = 1;\r\n            this.pad.scale.set(1.3);\r\n            this.textField.scale.set(1);\r\n            this.textField.visible = true;\r\n        }\r\n\r\n        public showPanel(delay: number, textTweenDelay: number, duration: number) {\r\n            this.show(0, Math.max(0, StarsManager.instance.getStarsAmount()), 0, 0, '', '', delay, delay + textTweenDelay, duration);\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ReviveCountdown extends Phaser.Group {\r\n\r\n        private readonly windowRevive: WindowRevive;\r\n\r\n        private circle: Phaser.Sprite;\r\n        private heart: Phaser.Sprite;\r\n        private circleMask: Phaser.Graphics;\r\n        private timeLeftText: Phaser.Text;\r\n\r\n        private countdownActive: boolean = false;\r\n\r\n        private startAngle: number = 270;\r\n        private endAngle: number = -90 - 0.000001;\r\n        private currentStep: {value: number} = {value: 0};\r\n\r\n        constructor(windowRevive: WindowRevive) {\r\n            super(windowRevive.game, null);\r\n            this.windowRevive = windowRevive;\r\n\r\n            this.circle = this.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'reviveCircle0000'));\r\n            this.circle.anchor.set(0.5);\r\n\r\n            this.circleMask = this.add(this.game.make.graphics(-1, -3));\r\n            this.circleMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 160, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill()\r\n            this.circle.mask = this.circleMask;\r\n\r\n            this.heart = this.add(this.game.make.sprite(0, -25, Settings.GAME_ATLAS, 'iconRevive0000'));\r\n            this.heart.anchor.set(0.5);\r\n\r\n            this.timeLeftText = this.add(TextUtils.getText('9...', 0, 70, 65, '#FF5E40'));\r\n        }\r\n\r\n        update() {\r\n            super.update();\r\n\r\n            if(this.isActive()) {\r\n                const secondsLeft: number = Math.ceil((1 - this.currentStep.value) * 10);\r\n                this.timeLeftText.setText('' + TextUtils.convertMSToMSS(secondsLeft * 1000));\r\n                this.circleMask.clear().beginFill(0xFFFFFF, 0.5).arc(0, 0, 160, Phaser.Math.degToRad(this.startAngle), Phaser.Math.degToRad(this.endAngle + this.currentStep.value * 360), true, 180).endFill()\r\n            }\r\n        }\r\n\r\n        public startCountdown() {\r\n            SoundController.instance.chokeMusicVolume(400);\r\n\r\n            this.resetCountdown();\r\n            this.circle.visible = true;\r\n            this.circle.alpha = 1;\r\n            this.heart.visible = true;\r\n            this.timeLeftText.visible = true;\r\n            this.countdownActive = true;\r\n            this.game.add.tween(this.currentStep)\r\n                .to({value: 1}, Settings.REVIVE_TIMER_DURATION, Phaser.Easing.Linear.None, true)\r\n                .onComplete.add(this.stopCountdown, this);\r\n\r\n            this.heart.scale.set(0);\r\n            this.game.add.tween(this.heart.scale)\r\n                .to({x: 1, y: 1}, 600, Phaser.Easing.Back.Out, true)\r\n                .onComplete.add(() =>  this.startHeartbeatAnimation());\r\n        }\r\n\r\n        private startHeartbeatAnimation() {\r\n            this.game.tweens.removeFrom(this.heart.scale);\r\n            this.heart.scale.set(1);\r\n            const heartbeatTween: Phaser.Tween = this.game.add.tween(this.heart.scale)\r\n                .to({x: 1.1, y: 1.1}, 100, Phaser.Easing.Sinusoidal.In, false, 0)\r\n                .to({x: 1, y: 1}, 310, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({x: 1.1, y: 1.1}, 100, Phaser.Easing.Sinusoidal.In, false, 25)\r\n                .to({x: 1, y: 1}, 140, Phaser.Easing.Sinusoidal.Out, false)\r\n                .to({x: 1, y: 1}, 650, Phaser.Easing.Sinusoidal.Out, false)\r\n                .start()\r\n                .repeatAll(-1);\r\n            heartbeatTween.onLoop.add(() => SoundController.instance.playHeartBeatSound());\r\n            heartbeatTween.onStart.add(() => SoundController.instance.playHeartBeatSound());\r\n        }\r\n\r\n        protected stopCountdown() {\r\n            this.resetCountdown();\r\n            this.windowRevive.reviveFailed(true);\r\n        }\r\n\r\n        public animateDisappearing(delay: number) {\r\n            SoundController.instance.restoreMusicVolume(600);\r\n\r\n            this.game.add.tween(this)\r\n                .to({alpha: 0}, 200, Phaser.Easing.Linear.None, true, delay + 50)\r\n                .onComplete.add(() => {\r\n                    this.heart.visible = false;\r\n                    this.timeLeftText.visible = false;\r\n            });\r\n            this.game.add.tween(this.scale)\r\n                .to({x: 0.6, y: 0.6}, 200, Phaser.Easing.Back.In, true, delay + 50);\r\n\r\n            this.game.add.tween(this.circle)\r\n                .to({alpha: 0}, 200, Phaser.Easing.Sinusoidal.In, true, delay)\r\n                .onComplete.add(() => this.circle.visible = false);\r\n        }\r\n\r\n        public resetCountdown() {\r\n            this.game.tweens.removeFrom(this.currentStep);\r\n            this.game.tweens.removeFrom(this.heart.scale);\r\n            this.game.tweens.removeFrom(this.timeLeftText.scale);\r\n            this.game.tweens.removeFrom(this.circle);\r\n            this.timeLeftText.scale.set(1);\r\n            this.heart.scale.set(1);\r\n            this.currentStep.value = 0;\r\n            this.countdownActive = false;\r\n            this.circle.visible = false;\r\n            this.circle.alpha = 1;\r\n            this.circleMask.clear();\r\n        }\r\n\r\n        public isActive() : boolean {\r\n            return this.countdownActive;\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AbstractUIScrollbar extends Phaser.Group {\r\n\r\n        protected value: number;\r\n        protected prevValue: number = 0.5;\r\n\r\n        protected scrollerContainer: Phaser.Group;\r\n        protected pad: Phaser.Sprite;\r\n        protected bar: Phaser.Sprite;\r\n        protected barMask: Phaser.Graphics;\r\n        protected slider: Phaser.Sprite;\r\n        protected shadow: Phaser.Sprite;\r\n        protected icon: Phaser.Sprite;\r\n\r\n        private sliderDx: number = 0;\r\n\r\n        constructor() {\r\n            super(App.instance);\r\n\r\n            this.buildChildren();\r\n            this.initValue();\r\n        }\r\n\r\n        protected buildChildren() {\r\n            this.buildScrollerContainer();\r\n            this.buildPad();\r\n            this.buildBar();\r\n            this.buildSlider();\r\n            this.buildShadow();\r\n            this.buildIcon();\r\n            this.addIconListeners();\r\n        }\r\n\r\n\r\n        protected setInitialValue(value: number) {\r\n            this.setValue(value, true);\r\n            this.prevValue = this.value;\r\n        }\r\n\r\n        protected buildScrollerContainer() {\r\n            this.scrollerContainer = this.add(this.game.make.group());\r\n            this.scrollerContainer.position.set(58, 0);\r\n        }\r\n\r\n        protected buildPad() {\r\n            this.pad = this.scrollerContainer.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'musicControlPad0000'));\r\n            this.pad.anchor.set(0.5);\r\n        }\r\n\r\n        protected buildShadow() {\r\n            this.shadow = this.scrollerContainer.add(this.game.make.sprite(-100, -3, Settings.GAME_ATLAS, 'controlBarShadow0000'));\r\n            this.shadow.anchor.set(0.5);\r\n        }\r\n\r\n        protected buildBar() {\r\n            this.bar = this.scrollerContainer.add(this.game.make.sprite(0, 0, Settings.GAME_ATLAS, 'musicControlBar0000'));\r\n            this.bar.anchor.set(0.5);\r\n\r\n            this.barMask = this.scrollerContainer.add(this.game.make.graphics(-this.pad.width / 2, 0));\r\n            this.barMask.clear().beginFill(0, 0.5).drawRect(0, -20, this.pad.width, 40).endFill();\r\n\r\n            this.bar.mask = this.barMask;\r\n        }\r\n\r\n        protected buildSlider() {\r\n            this.slider = this.scrollerContainer.add(this.game.make.sprite(this.sliderDx, 0, Settings.GAME_ATLAS, 'musicControlSlider0000'));\r\n            this.slider.anchor.set(0.2, 0.5);\r\n            this.slider.hitArea = new Phaser.Rectangle(-60, -60, 120, 120);\r\n\r\n            this.slider.inputEnabled = true;\r\n            this.slider.input.allowVerticalDrag = false;\r\n            this.slider.input.enableDrag(false, false, false, 0, new Phaser.Rectangle(-this.pad.width / 2 +  this.sliderDx, -this.slider.height, this.pad.width - this.sliderDx, this.slider.height  * 2));\r\n            this.slider.events.onDragUpdate.add(this.handleSliderDrag, this);\r\n            this.slider.events.onDragStop.add(this.handleSliderDrag, this);\r\n        }\r\n\r\n        protected updateBarMask() {\r\n            this.barMask.clear().beginFill(0, 0.5).drawRect(0, -20, this.slider.x + this.pad.width / 2 + 20, 40).endFill();\r\n        }\r\n\r\n        protected handleSliderDrag() {\r\n            const value: number = this.slider.x / (this.pad.width - this.sliderDx - this.slider.width) + 0.5;\r\n            this.setValue(Phaser.Math.clamp(value, 0, 1))\r\n        }\r\n\r\n        protected addIconListeners() {\r\n            this.icon.inputEnabled = true;\r\n            this.icon.events.onInputDown.add(this.handleIconClicked, this);\r\n        }\r\n\r\n        protected handleIconClicked() {\r\n             if(this.value == 0) {\r\n                 this.setValue(this.prevValue);\r\n             } else {\r\n                 this.prevValue = this.value;\r\n                 this.setValue(0);\r\n             }\r\n        }\r\n\r\n        protected setValue(value: number, skipAnalytics: boolean = false) {\r\n            this.value = value;\r\n            this.slider.x = (value - 0.5) *  (this.pad.width - this.sliderDx - this.slider.width);\r\n            this.updateBarMask();\r\n            this.dispatchValueChanged(value, skipAnalytics);\r\n        }\r\n\r\n\r\n        protected abstract dispatchValueChanged(value: number, skipAnalytics: boolean);\r\n\r\n        protected abstract buildIcon();\r\n\r\n        protected abstract initValue();\r\n\r\n    }\r\n}","///<reference path=\"AbstractUIScrollbar.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class MusicControlScrollbar extends AbstractUIScrollbar {\r\n\r\n        public initValue() {\r\n            this.setInitialValue(SoundController.instance.getMusicVolume());\r\n        }\r\n\r\n        protected buildIcon() {\r\n            this.icon = this.add(this.game.make.sprite(-100, -5, Settings.GAME_ATLAS, 'musicControlIcon0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n\r\n        protected dispatchValueChanged(value: number, skipAnalytics: boolean) {\r\n            this.icon.frameName = this.value === 0 ? 'musicControlIcon0001' : 'musicControlIcon0000';\r\n            SoundController.instance.setMusicVolume(value);\r\n            if (Settings.ENABLE_API && !skipAnalytics) {\r\n                (<any>window).famobi_analytics.trackEvent((<any>window).famobi_analytics.EVENT_VOLUMECHANGE, {\r\n                    bgmVolume: Phaser.Math.roundTo(SoundController.instance.getMusicVolume(), -2),\r\n                    sfxVolume: Phaser.Math.roundTo(SoundController.instance.getSFXVolume(), -2)\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n}","///<reference path=\"AbstractUIScrollbar.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class SFXControlScrollbar extends AbstractUIScrollbar {\r\n\r\n        public initValue() {\r\n            this.setInitialValue(SoundController.instance.getSFXVolume());\r\n        }\r\n\r\n        protected buildIcon() {\r\n            this.icon = this.add(this.game.make.sprite(-100, -5, Settings.GAME_ATLAS, 'sfxControlIcon0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n\r\n\r\n        protected dispatchValueChanged(value: number, skipAnalytics: boolean) {\r\n            this.icon.frameName = this.value === 0 ? 'sfxControlIcon0001' : 'sfxControlIcon0000';\r\n            SoundController.instance.setSFXVolume(value);\r\n            if (Settings.ENABLE_API && !skipAnalytics) {\r\n                (<any>window).famobi_analytics.trackEvent((<any>window).famobi_analytics.EVENT_VOLUMECHANGE, {\r\n                    bgmVolume: Phaser.Math.roundTo(SoundController.instance.getMusicVolume(), -2),\r\n                    sfxVolume: Phaser.Math.roundTo(SoundController.instance.getSFXVolume(), -2)\r\n                });\r\n            }\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ShopItem extends Phaser.Group {\r\n\r\n        private readonly windowShop: WindowShop;\r\n\r\n        public readonly powerupType: PowerupType;\r\n\r\n        protected pad: Phaser.Sprite;\r\n        protected icon: Phaser.Sprite;\r\n        protected priceText: BitmapTextField;\r\n        protected priceStar: Phaser.Sprite;\r\n        protected buttonBuy: Phaser.Button;\r\n        protected boughtMark: Phaser.Sprite;\r\n\r\n\r\n        constructor(windowShop: WindowShop, powerupType: PowerupType) {\r\n            super(windowShop.game, null);\r\n            this.windowShop = windowShop;\r\n            this.powerupType = powerupType;\r\n\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.scale.set(1.2);\r\n\r\n            this.pad = this.add(this.game.make.sprite(-10, 0, Settings.GAME_ATLAS, 'shopPricePadBig0000'));\r\n            this.pad.anchor.set(0.5);\r\n            this.pad.inputEnabled = true;\r\n            this.pad.events.onInputDown.add(this.buyClicked, this);\r\n\r\n            this.icon = this.add(this.game.make.sprite(-88, -10, Settings.GAME_ATLAS, 'icon' + this.powerupType + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n            this.icon.scale.set(1.2);\r\n\r\n            this.priceStar = this.add(this.game.make.sprite(50, -3, Settings.GAME_ATLAS, 'iconStarShopBig0000'));\r\n            this.priceStar.anchor.set(0.5);\r\n\r\n            this.priceText = this.add(new BitmapTextField('' + PowerupManager.instance.getPrice(this.powerupType), Settings.GAME_ATLAS, 'Gold', 0.75, 0.5, 0.5, 1));\r\n            this.priceText.position.set(-16, -2);\r\n\r\n            this.buttonBuy = this.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonBuyBig', 130, -5, 1, this.buyClicked, this, false));\r\n\r\n            this.boughtMark = this.add(this.game.make.sprite(115, -5, Settings.GAME_ATLAS, 'boughtMarkBig0000'));\r\n            this.boughtMark.anchor.set(0.5);\r\n            this.boughtMark.scale.set(0.75);\r\n            this.boughtMark.visible = false;\r\n        }\r\n\r\n        public show() {\r\n            this.boughtMark.visible = false;\r\n\r\n            this.pad.frameName = 'shopPricePadBig0000';\r\n            this.icon.x = -88;\r\n            this.priceText.visible = true;\r\n            this.priceStar.visible = true;\r\n            this.buttonBuy.visible = this.buttonBuy.inputEnabled = true;\r\n\r\n            this.priceStar.frameName = 'iconStarShopBig0000';\r\n            this.icon.frameName = 'icon' + this.powerupType + '0000';\r\n            this.priceText.styleKey = \"Gold\";\r\n            this.priceText.changeText('' + PowerupManager.instance.getPrice(this.powerupType), true);\r\n        }\r\n\r\n        protected buyClicked() {\r\n            if (StarsManager.instance.getStarsAmount() >= PowerupManager.instance.getPrice(this.powerupType)) {\r\n                this.buttonBuy.inputEnabled = false;\r\n                this.buttonBuy.visible = false;\r\n                this.boughtMark.visible = true;\r\n                this.game.tweens.removeFrom(this.boughtMark.scale);\r\n                this.boughtMark.scale.set(0.2);\r\n                this.game.add.tween(this.boughtMark.scale)\r\n                    .to({x: 0.75, y: 0.75}, 50, Phaser.Easing.Sinusoidal.Out, true);\r\n                SoundController.instance.playBuyingSound();\r\n                PowerupManager.instance.buy(this.powerupType);\r\n                this.windowShop.powerupBought();\r\n            } else {\r\n                this.displayError();\r\n            }\r\n        }\r\n\r\n        private displayError() {\r\n            this.windowShop.starsCounter.displayError();\r\n\r\n            ColorUtils.bounceTint(this.priceStar, 0xFF0000, 0xFFFFFF, 350);\r\n            this.priceText.children.forEach(c =>\r\n                ColorUtils.bounceTint(c as Phaser.Sprite, 0xFF0000, 0xFFFFFF, 350));\r\n\r\n            SoundController.instance.playErrorSound();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class WindowHeading extends Phaser.Group {\r\n\r\n        protected plate: Phaser.Sprite;\r\n        protected container: Phaser.Group;\r\n        protected icon: Phaser.Sprite;\r\n\r\n        protected backplateType: WindowHeadingBackplateType;\r\n        protected iconFrameName: string;\r\n\r\n        constructor(iconFrameName: string, backplateType: WindowHeadingBackplateType) {\r\n            super(App.instance);\r\n\r\n            this.iconFrameName = iconFrameName;\r\n            this.backplateType = backplateType;\r\n\r\n            this.buildContent();\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.container = this.add(this.game.make.group());\r\n\r\n            this.plate = this.container.add(this.game.make.sprite(0, -5, Settings.GAME_ATLAS, 'windowHeadingBackplate000' + this.backplateType ));\r\n            this.plate.anchor.set(0.5, 0);\r\n\r\n            this.icon = this.container.add(this.game.make.sprite(0, 316, Settings.GAME_ATLAS, this.iconFrameName + '0000'));\r\n            this.icon.anchor.set(0.5);\r\n        }\r\n\r\n        public animateAppearing(delay: number) {\r\n            this.game.tweens.removeFrom(this.container);\r\n\r\n            this.container.y = -450;\r\n            this.game.add.tween(this.container)\r\n                .to({y: -100}, 350, Phaser.Easing.Back.Out, true, delay)\r\n                .onStart.add(() => SoundController.instance.playPanelMovementSound());\r\n\r\n            this.icon.alpha = 0;\r\n            this.icon.scale.set(0.6);\r\n            this.game.add.tween(this.icon)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 100);\r\n            this.game.add.tween(this.icon.scale)\r\n                .to({x: 1, y: 1}, 300, Phaser.Easing.Back.Out, true, delay);\r\n        }\r\n\r\n        public animateDisappearing(delay: number) {\r\n            this.game.tweens.removeFrom(this.container);\r\n            this.game.add.tween(this.container)\r\n                .to({y: -450}, 350, Phaser.Easing.Back.In, true, delay)\r\n                .onStart.add(() => SoundController.instance.playPanelUpMovementSound());\r\n        }\r\n\r\n        public resetTweens() {\r\n            this.game.tweens.removeFrom(this.container);\r\n            this.game.tweens.removeFrom(this.icon);\r\n            this.game.tweens.removeFrom(this.icon.scale);\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ArrayUtils {\r\n\r\n        static uniteArrays<T>(sourceArray: Array<T>, targetArray: Array<T>): Array<T> {\r\n            return sourceArray.concat(targetArray.filter(targetElem => sourceArray.indexOf(targetElem) === -1));\r\n        }\r\n\r\n        static getRandomItem<T>(array: Array<T>, compressionFactor: number) {\r\n            const randomIndex: number = Math.floor(array.length * Math.pow(Math.random(), compressionFactor));\r\n            return array[randomIndex];\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class BitmapTextFactory {\r\n\r\n        public static getLetter(textKey: string, atlasKey: string, letterKey: string, letterFrame: number): Phaser.Sprite {\r\n            let spriteName: string = null;\r\n            switch (letterKey) {\r\n                case '0':\r\n                    spriteName = 'text' + textKey + '_' + '0' + '000' + letterFrame;\r\n                    break;\r\n                case '1':\r\n                    spriteName = 'text' + textKey + '_' + '1' + '000' + letterFrame;\r\n                    break;\r\n                case '2':\r\n                    spriteName = 'text' + textKey + '_' + '2' + '000' + letterFrame;\r\n                    break;\r\n                case '3':\r\n                    spriteName = 'text' + textKey + '_' + '3' + '000' + letterFrame;\r\n                    break;\r\n                case '4':\r\n                    spriteName = 'text' + textKey + '_' + '4' + '000' + letterFrame;\r\n                    break;\r\n                case '5':\r\n                    spriteName = 'text' + textKey + '_' + '5' + '000' + letterFrame;\r\n                    break;\r\n                case '6':\r\n                    spriteName = 'text' + textKey + '_' + '6' + '000' + letterFrame;\r\n                    break;\r\n                case '7':\r\n                    spriteName = 'text' + textKey + '_' + '7' + '000' + letterFrame;\r\n                    break;\r\n                case '8':\r\n                    spriteName = 'text' + textKey + '_' + '8' + '000' + letterFrame;\r\n                    break;\r\n                case '9':\r\n                    spriteName = 'text' + textKey + '_' + '9' + '000' + letterFrame;\r\n                    break;\r\n                case '.':\r\n                    spriteName = 'text' + textKey + '_' + 'point' + '000' + letterFrame;\r\n                    break;\r\n                case '+':\r\n                    spriteName = 'text' + textKey + '_' + 'plus' + '000' + letterFrame;\r\n                    break;\r\n                case '*':\r\n                    spriteName = 'text' + textKey + '_' + 'multiply' + '000' + letterFrame;\r\n                    break;\r\n                case '=':\r\n                    spriteName = 'text' + textKey + '_' + 'equals' + '000' + letterFrame;\r\n                    break;\r\n                case '%':\r\n                    spriteName = 'text' + textKey + '_' + 'percent' + '000' + letterFrame;\r\n                    break;\r\n                case 'a':\r\n                    spriteName = 'text' + textKey + '_' + 'a' + '000' + letterFrame;\r\n                    break;\r\n                case 'b':\r\n                    spriteName = 'text' + textKey + '_' + 'b' + '000' + letterFrame;\r\n                    break;\r\n                case 'c':\r\n                    spriteName = 'text' + textKey + '_' + 'c' + '000' + letterFrame;\r\n                    break;\r\n                case 'd':\r\n                    spriteName = 'text' + textKey + '_' + 'd' + '000' + letterFrame;\r\n                    break;\r\n                case 'e':\r\n                    spriteName = 'text' + textKey + '_' + 'e' + '000' + letterFrame;\r\n                    break;\r\n                case 'f':\r\n                    spriteName = 'text' + textKey + '_' + 'f' + '000' + letterFrame;\r\n                    break;\r\n                case 'g':\r\n                    spriteName = 'text' + textKey + '_' + 'g' + '000' + letterFrame;\r\n                    break;\r\n                case 'h':\r\n                    spriteName = 'text' + textKey + '_' + 'h' + '000' + letterFrame;\r\n                    break;\r\n                case 'i':\r\n                    spriteName = 'text' + textKey + '_' + 'i' + '000' + letterFrame;\r\n                    break;\r\n                case 'j':\r\n                    spriteName = 'text' + textKey + '_' + 'j' + '000' + letterFrame;\r\n                    break;\r\n                case 'k':\r\n                    spriteName = 'text' + textKey + '_' + 'k' + '000' + letterFrame;\r\n                    break;\r\n                case 'l':\r\n                    spriteName = 'text' + textKey + '_' + 'l' + '000' + letterFrame;\r\n                    break;\r\n                case 'm':\r\n                    spriteName = 'text' + textKey + '_' + 'm' + '000' + letterFrame;\r\n                    break;\r\n                case 'n':\r\n                    spriteName = 'text' + textKey + '_' + 'n' + '000' + letterFrame;\r\n                    break;\r\n                case 'o':\r\n                    spriteName = 'text' + textKey + '_' + 'o' + '000' + letterFrame;\r\n                    break;\r\n                case 'p':\r\n                    spriteName = 'text' + textKey + '_' + 'p' + '000' + letterFrame;\r\n                    break;\r\n                case 'q':\r\n                    spriteName = 'text' + textKey + '_' + 'q' + '000' + letterFrame;\r\n                    break;\r\n                case 'r':\r\n                    spriteName = 'text' + textKey + '_' + 'r' + '000' + letterFrame;\r\n                    break;\r\n                case 's':\r\n                    spriteName = 'text' + textKey + '_' + 's' + '000' + letterFrame;\r\n                    break;\r\n                case 't':\r\n                    spriteName = 'text' + textKey + '_' + 't' + '000' + letterFrame;\r\n                    break;\r\n                case 'u':\r\n                    spriteName = 'text' + textKey + '_' + 'u' + '000' + letterFrame;\r\n                    break;\r\n                case 'v':\r\n                    spriteName = 'text' + textKey + '_' + 'v' + '000' + letterFrame;\r\n                    break;\r\n                case 'w':\r\n                    spriteName = 'text' + textKey + '_' + 'w' + '000' + letterFrame;\r\n                    break;\r\n                case 'x':\r\n                    spriteName = 'text' + textKey + '_' + 'x' + '000' + letterFrame;\r\n                    break;\r\n                case 'y':\r\n                    spriteName = 'text' + textKey + '_' + 'y' + '000' + letterFrame;\r\n                    break;\r\n                case 'z':\r\n                    spriteName = 'text' + textKey + '_' + 'z' + '000' + letterFrame;\r\n                    break;\r\n                case '/':\r\n                    spriteName = 'text' + textKey + '_' + 'slash' + '000' + letterFrame;\r\n                    break;\r\n                case ' ':\r\n                    spriteName = 'text' + textKey + '_' + 'z' + '000' + letterFrame;\r\n                    break;\r\n                case '_':\r\n                    spriteName = 'text' + textKey + '_' + 'point' + '000' + letterFrame;\r\n                    break;\r\n                case '?':\r\n                    spriteName = 'text' + textKey + '_' + 'question' + '000' + letterFrame;\r\n                    break;\r\n            }\r\n\r\n            if (!spriteName) {\r\n                return null;\r\n            }\r\n\r\n            let sprite: Phaser.Sprite = new Phaser.Sprite(App.instance, 0, 0, atlasKey, spriteName);\r\n            sprite.anchor.setTo(0, 0);\r\n            sprite.alpha = letterKey === ' ' || letterKey == '_' ? 0 : 1;\r\n            sprite.scale.x = letterKey === '_' ? 0.5 : 1;\r\n            return sprite;\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ButtonUtils {\r\n        public static createButton(atlasName:string, spriteName:string, x:number, y:number, callback:Function, callbackContext:any): Phaser.Button {\r\n            let button:Phaser.Button = new Phaser.Button(App.instance, x, y, atlasName, callback, callbackContext, spriteName + '0001', spriteName + '0000', spriteName + '0002', spriteName + '0000');\r\n            button.anchor.setTo(0.5, 0.5);\r\n            button.input.pixelPerfectClick = true;\r\n            button.input.pixelPerfectAlpha = 1;\r\n            button.input.useHandCursor = true;\r\n            return button;\r\n        }\r\n\r\n        public static createOneFrameButton(atlasName:string, spriteName:string, x:number, y:number, callback:Function, callbackContext:any): Phaser.Button {\r\n            let button:Phaser.Button = new Phaser.Button(App.instance, x, y, atlasName, callback, callbackContext, spriteName + '0000', spriteName + '0000', spriteName + '0000', spriteName + '0000');\r\n            button.anchor.setTo(0.5, 0.5);\r\n            button.input.pixelPerfectClick = true;\r\n            button.input.pixelPerfectAlpha = 1;\r\n            button.input.useHandCursor = true;\r\n            return button;\r\n        }\r\n\r\n        public static createSimpleButton(atlasName:string, spriteName:string, x:number, y:number, startScale:number, callback:Function, callbackContext:any, playClickSound: boolean = true): Phaser.Button {\r\n            let button:Phaser.Button = new Phaser.Button(App.instance, x, y, atlasName, callback, callbackContext, spriteName + '0000', spriteName + '0000', spriteName + '0000', spriteName + '0000');\r\n            button.anchor.setTo(0.5, 0.5);\r\n            button.scale.set(startScale);\r\n            button.input.pixelPerfectClick = true;\r\n            button.input.pixelPerfectAlpha = 1;\r\n            button.input.useHandCursor = false;\r\n\r\n            button[\"overTween\"] = App.instance.add.tween(button.scale).to({x: startScale * 1.05, y: startScale * 1.05}, 100);\r\n            button[\"outTween\"] = App.instance.add.tween(button.scale).to({x: startScale, y: startScale}, 100);\r\n            button[\"downTween\"] = App.instance.add.tween(button.scale).to({x: startScale *  0.95, y: startScale *  0.95}, 50).to({x:startScale, y:startScale}, 50);\r\n            button.events.onInputOver.add(ButtonUtils.mouseOverHandler, this, 0);\r\n            button.events.onInputOut.add(ButtonUtils.mouseOutHandler, this, 0);\r\n            button.events.onInputDown.add(ButtonUtils.mouseDownHandler, this, 0);\r\n            if(playClickSound) {\r\n                button.events.onInputDown.add(() => SoundController.instance.playClickSound(), 0);\r\n            }\r\n\r\n            button[\"setScale\"] = function(value) {\r\n                button.scale.set(value);\r\n                button[\"overTween\"] = App.instance.add.tween(button.scale).to({x: value * 1.05, y: value * 1.05}, 100);\r\n                button[\"outTween\"] = App.instance.add.tween(button.scale).to({x: value, y: value}, 100);\r\n                button[\"downTween\"] = App.instance.add.tween(button.scale).to({x: value *  0.95, y: value *  0.95}, 50).to({x:value, y:value}, 50);\r\n            };\r\n\r\n            return button;\r\n        }\r\n\r\n        public static mouseOverHandler(caller:any) {\r\n            caller[\"overTween\"].start();\r\n        }\r\n\r\n        public static mouseOutHandler(caller:any) {\r\n            caller[\"outTween\"].start();\r\n        }\r\n\r\n        public static mouseDownHandler(caller:any) {\r\n            caller[\"downTween\"].start();\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class ColorUtils {\r\n\r\n        public static tweenTint(spriteToTween: Phaser.Sprite, startColor: number, endColor: number, duration: number): void {\r\n            let colorBlend = {step: 0};\r\n\r\n            App.instance.add.tween(colorBlend).to({step: 100}, duration, Phaser.Easing.Linear.None, true)\r\n                .onUpdateCallback(() => {\r\n                    spriteToTween.tint = Phaser.Color.interpolateColor(startColor, endColor, 100, colorBlend.step, 1);\r\n                })\r\n                .onComplete.add(() => spriteToTween.tint = endColor);\r\n        };\r\n\r\n        public static bounceTint(spriteToTween: Phaser.Sprite, startColor: number, endColor: number, duration: number): void {\r\n            let colorBlend = {step: 10};\r\n\r\n            App.instance.add.tween(colorBlend).to({step: 100}, duration, Phaser.Easing.Bounce.Out, true)\r\n                .onUpdateCallback(() => {\r\n                    spriteToTween.tint = Phaser.Color.interpolateColor(startColor, endColor, 100, colorBlend.step, 1);\r\n                })\r\n                .onComplete.add(() => spriteToTween.tint = endColor);\r\n        };\r\n    }\r\n}","///<reference path=\"../Settings.ts\"/>\r\nnamespace BlockPuzzle {\r\n    import Sound = Phaser.Sound;\r\n\r\n    export class LocalStorageController {\r\n        private static _instance: LocalStorageController;\r\n        public static get instance(): LocalStorageController {\r\n            return LocalStorageController._instance ? LocalStorageController._instance\r\n                : LocalStorageController._instance = new LocalStorageController();\r\n        }\r\n\r\n        private isLocalStorageSupported: boolean = false;\r\n        public data: Object = null;\r\n\r\n        private currentLocalStorage: any = null;\r\n\r\n        private static readonly STORAGE_NAME = Settings.LOCAL_STORAGE_KEY;\r\n\r\n        constructor() {\r\n            this.currentLocalStorage = Settings.ENABLE_API ? window[\"famobi\"].localStorage : window.localStorage;\r\n\r\n            this.data = {\r\n                \"maxScore\": 0,\r\n                \"numStars\": 0,\r\n                \"bombBought\": false,\r\n                \"lightningBought\": false,\r\n                \"achievements\": null,\r\n                \"tutorialCompleted\": false,\r\n                \"sfxVolume\": 0.5,\r\n                \"musicVolume\": 0.5\r\n            };\r\n        }\r\n\r\n        public getMaxScores(): number {\r\n            return this.data[\"maxScore\"];\r\n        }\r\n\r\n        public getNumStars(): number {\r\n            return this.data[\"numStars\"];\r\n        }\r\n\r\n        public getSFXVolume(): number {\r\n            return this.data[\"sfxVolume\"];\r\n        }\r\n\r\n        public getMusicVolume(): number {\r\n            return this.data[\"musicVolume\"];\r\n        }\r\n\r\n        public isBombBought(): boolean {\r\n            return this.data[\"bombBought\"];\r\n        }\r\n\r\n        public isLightningBought(): boolean {\r\n            return this.data[\"lightningBought\"];\r\n        }\r\n\r\n        public isTutorialCompleted(): boolean {\r\n            return this.data[\"tutorialCompleted\"];\r\n        }\r\n\r\n        public getAchievementsStates(): AchievementState[] {\r\n            return this.data[\"achievements\"] || [];\r\n        }\r\n\r\n        public save(): void {\r\n            this.data[\"maxScore\"] = ScoreManager.instance.getMaxScores();\r\n            this.data[\"numStars\"] = StarsManager.instance.getStarsAmount();\r\n            this.data[\"achievements\"] = AchievementsManager.instance.getAchievementsStates();\r\n            this.data[\"bombBought\"] = PowerupManager.instance.isBought(PowerupType.BOMB);\r\n            this.data[\"lightningBought\"] = PowerupManager.instance.isBought(PowerupType.LIGHTNING);\r\n            this.data[\"tutorialCompleted\"] = Settings.TUTORIAL_COMPLETED;\r\n            this.data[\"sfxVolume\"] = SoundController.instance.getSFXVolume();\r\n            this.data[\"musicVolume\"] = SoundController.instance.getMusicVolume();\r\n\r\n            if (this.isLocalStorageSupported) {\r\n                this.currentLocalStorage.setItem(LocalStorageController.STORAGE_NAME, JSON.stringify(this.data));\r\n            }\r\n        }\r\n\r\n        private checkLocalStorageSupported(): void {\r\n            try {\r\n                this.isLocalStorageSupported = \"localStorage\" in window && window[\"localStorage\"] !== null;\r\n            }\r\n            catch (e) {\r\n                this.isLocalStorageSupported = false;\r\n            }\r\n        }\r\n\r\n        public loadSave() {\r\n            this.checkLocalStorageSupported();\r\n\r\n            if (this.isLocalStorageSupported) {\r\n                if (this.currentLocalStorage.getItem(LocalStorageController.STORAGE_NAME)) {\r\n                    this.data = JSON.parse(this.currentLocalStorage.getItem(LocalStorageController.STORAGE_NAME));\r\n                } else {\r\n                    this.currentLocalStorage.setItem(LocalStorageController.STORAGE_NAME, JSON.stringify(this.data));\r\n                }\r\n            }\r\n            this.finalizeLoading();\r\n        }\r\n\r\n        private finalizeLoading() {\r\n            SoundController.instance.setSFXVolume(this.getSFXVolume());\r\n            SoundController.instance.setMusicVolume(this.getMusicVolume());\r\n            Settings.TUTORIAL_COMPLETED = LocalStorageController.instance.isTutorialCompleted();\r\n            ScoreManager.instance.setMaxScores(LocalStorageController.instance.getMaxScores());\r\n            StarsManager.instance.setStarsAmount(LocalStorageController.instance.getNumStars(), false);\r\n            AchievementsManager.instance.loadAchievementsState(LocalStorageController.instance.getAchievementsStates());\r\n            PowerupManager.instance.setInitialState(PowerupType.BOMB, LocalStorageController.instance.isBombBought());\r\n            PowerupManager.instance.setInitialState(PowerupType.LIGHTNING, LocalStorageController.instance.isLightningBought());\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class LocalizationManager {\r\n\r\n        private static texts: JSON;\r\n\r\n        public static init(jsonFile:any) {\r\n            LocalizationManager.texts = jsonFile;\r\n        }\r\n\r\n        public static getText(key:string): string {\r\n            return LocalizationManager.texts[key] ? LocalizationManager.texts[key] : \"NO_TEXT\";\r\n        }\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class TextUtils {\r\n\r\n        public static getText(text: string, x: number, y: number, fontSize: number, color: string, fontFamily: string = Settings.DEFAULT_FONT_FAMILY, fontWidth: string = null): Phaser.Text {\r\n            let textField: Phaser.Text = new Phaser.Text(App.instance, x, y, text, {\r\n                font: (fontWidth ? fontWidth + ' ' : '') + fontSize + \"px \" + fontFamily,\r\n                fill: color,\r\n                align: \"center\"\r\n            });\r\n            textField.anchor.setTo(0.5, 0.5);\r\n            return textField;\r\n        }\r\n\r\n        public static getBitmapText(text: string, x: number, y: number, fontSize: number, color: number = 0xFFFFFF, family: string = Settings.DEFAULT_FONT_FAMILY): Phaser.BitmapText {\r\n            let textField: Phaser.BitmapText = new Phaser.BitmapText(App.instance, x, y, family, text, fontSize, \"center\");\r\n            textField.anchor.setTo(0.5, 0.5);\r\n            textField.tint = color;\r\n            return textField;\r\n        }\r\n\r\n        public static getShadowText(text: string, x: number, y: number, fontSize: number, color: string, shadowColor: string = \"#000000\", shadowX: number = 0, shadowY: number = 2, anchorX: number = 0.5, anchorY: number = 0.5, fontFamily: string = Settings.DEFAULT_FONT_FAMILY, fontWidth: string = null): Phaser.Text {\r\n            let textField: Phaser.Text = new Phaser.Text(App.instance, x, y, text, {\r\n                font: (fontWidth ? fontWidth + ' ' : '') + fontSize + \"px \" + fontFamily,\r\n                fill: color,\r\n                align: \"center\"\r\n            });\r\n            textField.anchor.setTo(anchorX, anchorY);\r\n            textField.setShadow(shadowX, shadowY, shadowColor, 0);\r\n            return textField;\r\n        }\r\n\r\n        public static getStyledText(text: string, x: number, y: number, fontSize: number, color: string, strokeColor: string, strokeThinkness: number = 4, fontFamily: string = Settings.DEFAULT_FONT_FAMILY, fontWidth: string = null): Phaser.Text {\r\n            let textField: Phaser.Text = new Phaser.Text(App.instance, x, y, text, {\r\n                font: (fontWidth ? fontWidth + ' ' : '') + fontSize + \"px \" + fontFamily,\r\n                fill: color,\r\n                stroke: strokeColor,\r\n                strokeThickness: strokeThinkness,\r\n                align: \"center\"\r\n            });\r\n            textField.setShadow(0, 2, strokeColor, 0);\r\n            textField.anchor.set(0.5, 0.5);\r\n            return textField;\r\n        }\r\n\r\n        public static convertMSToHumanTime(milliseconds: number): string {\r\n            let seconds: number = Math.floor(milliseconds / 1000);\r\n            let minutes: number = Math.floor(seconds / 60);\r\n            let restSeconds: number = seconds - minutes * 60;\r\n\r\n            return (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (restSeconds < 10 ? \"0\" : \"\") + restSeconds;\r\n        }\r\n\r\n        public static convertMSToMSS(milliseconds: number): string {\r\n            let seconds: number = Math.floor(milliseconds / 1000);\r\n            let minutes: number = Math.floor(seconds / 60);\r\n            let restSeconds: number = seconds - minutes * 60;\r\n\r\n            return minutes + \":\" + (restSeconds < 10 ? \"0\" : \"\") + restSeconds;\r\n        }\r\n\r\n        public static normalizeTime(seconds: number): string {\r\n            let restSeconds: number = seconds;\r\n            let hours: number = Math.floor(restSeconds / 3600);\r\n            restSeconds %= 3600;\r\n            let minutes: number = Math.floor(restSeconds / 60);\r\n            restSeconds %= 60;\r\n\r\n            return (hours < 10 ? \"0\" : \"\") + hours + \":\" + (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (restSeconds < 10 ? \"0\" : \"\") + restSeconds;\r\n        }\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export abstract class AbstractWindow extends Phaser.Group {\r\n\r\n        public windowManager: WindowManager;\r\n\r\n        protected background: Phaser.Sprite;\r\n        protected backgroundAlpha: number = Settings.WINDOW_BACKGROUND_ALPHA;\r\n\r\n        constructor(windowManager, backgroundAlpha: number = Settings.WINDOW_BACKGROUND_ALPHA) {\r\n            super(App.instance, null);\r\n            this.windowManager = windowManager;\r\n            this.backgroundAlpha = backgroundAlpha;\r\n            this.visible = false;\r\n\r\n            this.buildBackground();\r\n        }\r\n\r\n        protected buildBackground() {\r\n            this.background = this.add(this.game.make.sprite(-50, -50, Settings.GAME_ATLAS, 'blackSquare0000'));\r\n            this.background.anchor.set(0.5);\r\n            this.background.width = this.game.world.width + 100;\r\n            this.background.height = this.game.world.height + 100;\r\n            this.background.alpha = this.backgroundAlpha;\r\n            this.background.inputEnabled = true;\r\n\r\n            this.inputEnableChildren = true;\r\n        }\r\n\r\n        public resize() {\r\n            this.position.set(0, 0);\r\n\r\n            this.background.position.set(this.windowManager.windowBounds.centerX, this.windowManager.windowBounds.centerY);\r\n            this.background.width = this.windowManager.windowBounds.width + 100;\r\n            this.background.height = this.windowManager.windowBounds.height + 100;\r\n\r\n            this.resizeContent();\r\n        }\r\n\r\n        protected abstract resizeContent();\r\n\r\n\r\n        public show() {\r\n            this.visible = true;\r\n            this.resize();\r\n        }\r\n\r\n        public hide() {\r\n            this.visible = false;\r\n        }\r\n\r\n        protected lockUpButtons(...args: Phaser.Button[]) {\r\n            for (let i: number = 0; i < args.length; i++) {\r\n                args[i][\"inputEnabled\"] = false;\r\n            }\r\n        }\r\n\r\n        protected unlockButtons(...args: Phaser.Button[]) {\r\n            for (let i: number = 0; i < args.length; i++) {\r\n                args[i][\"inputEnabled\"] = true;\r\n            }\r\n        }\r\n\r\n        destroy() {\r\n            super.destroy();\r\n            this.background = null;\r\n        }\r\n    }\r\n}","///<reference path=\"AbstractWindow.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export abstract class DefaultWindow extends AbstractWindow {\r\n\r\n        protected contentContainer: Phaser.Group;\r\n        protected windowHeading: WindowHeading;\r\n\r\n        private headingBackplateType: WindowHeadingBackplateType;\r\n        private headingIconFrameName: string;\r\n\r\n        constructor(windowManager: WindowManager, headingBackplateType: WindowHeadingBackplateType, headingIconFrameName: string, backgroundAlpha: number) {\r\n            super(windowManager, backgroundAlpha);\r\n\r\n            this.headingBackplateType = headingBackplateType;\r\n            this.headingIconFrameName = headingIconFrameName;\r\n\r\n            /* create basic elements */\r\n            this.buildWindowBase();\r\n            this.buildAdditionalElements();\r\n            this.buildContent();\r\n\r\n\r\n\r\n        }\r\n\r\n        private buildWindowBase() {\r\n            this.contentContainer = this.add(this.game.make.group());\r\n            this.windowHeading = this.contentContainer.add(new WindowHeading(this.headingIconFrameName, this.headingBackplateType));\r\n        }\r\n\r\n        protected buildAdditionalElements() {\r\n\r\n        }\r\n\r\n\r\n        protected abstract buildContent();\r\n\r\n\r\n        protected resizeContent() {\r\n            this.contentContainer.position.set(this.windowManager.windowBounds.centerX, this.windowManager.windowBounds.top);\r\n            this.contentContainer.scale.set(Math.min(1, this.windowManager.windowBounds.height / CustomScaleManager.ORIGINAL_HEIGHT));\r\n\r\n            this.windowHeading.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.001);\r\n        }\r\n\r\n        public show() {\r\n            super.show();\r\n\r\n            this.resetTweens();\r\n            this.background.alpha = 0;\r\n            this.game.add.tween(this.background)\r\n                .to({alpha: this.backgroundAlpha}, 300, Phaser.Easing.Circular.Out, true, 0);\r\n\r\n            this.windowHeading.animateAppearing(150);\r\n\r\n            this.animateAppearing(200);\r\n        }\r\n\r\n        protected abstract animateAppearing(delay: number);\r\n\r\n        protected resetTweens() {\r\n            this.windowHeading.resetTweens();\r\n        }\r\n\r\n        public hide() {\r\n            this.resetTweens();\r\n            super.hide();\r\n        }\r\n\r\n    }\r\n}","///<reference path=\"DefaultWindow.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export abstract class CloseableWindow extends DefaultWindow {\r\n\r\n        protected buttonClose: ButtonCloseWindow;\r\n\r\n        constructor(windowManager: WindowManager, headingBackplateType: WindowHeadingBackplateType, headingIconFrameName: string, backgroundAlpha: number) {\r\n            super(windowManager, headingBackplateType, headingIconFrameName, backgroundAlpha);\r\n        }\r\n\r\n        protected buildAdditionalElements() {\r\n            this.buttonClose = this.add(new ButtonCloseWindow(this, this.closeClicked, this));\r\n        }\r\n\r\n        protected resizeContent() {\r\n            super.resizeContent();\r\n            this.buttonClose.resize(-75, 75);\r\n        }\r\n\r\n        public show() {\r\n            super.show();\r\n\r\n            this.buttonClose.alpha = 1;\r\n            this.buttonClose.scale.set(0);\r\n            this.game.add.tween(this.buttonClose.scale)\r\n                .to({x: 1, y: 1}, 350, Phaser.Easing.Back.Out, true, 300);\r\n        }\r\n\r\n        public animateDisappearing(delay: number, onClosedCallback: Function = null) {\r\n            this.windowHeading.animateDisappearing(delay);\r\n\r\n            this.game.tweens.removeFrom(this.buttonClose);\r\n            this.game.add.tween(this.buttonClose)\r\n                .to({y: '-100', alpha: 0}, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n\r\n            this.game.tweens.removeFrom(this.background);\r\n            this.game.add.tween(this.background)\r\n                .to({alpha: 0}, 300, Phaser.Easing.Circular.In, true, delay + 100)\r\n                .onComplete.add(() => {\r\n                    if(onClosedCallback) onClosedCallback();\r\n                    this.hide();\r\n            });\r\n        }\r\n\r\n        protected resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.buttonClose, false);\r\n            this.game.tweens.removeFrom(this.buttonClose.scale, false);\r\n        }\r\n\r\n        protected closeClicked() {\r\n            this.onCloseClicked();\r\n            this.animateDisappearing(0);\r\n        }\r\n\r\n        protected abstract onCloseClicked();\r\n    }\r\n}","///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class WindowAchievements extends CloseableWindow {\r\n\r\n        protected itemsContainer: Phaser.Group;\r\n        protected achievementPanels: Map<AchievementType, AchievementPanel>;\r\n\r\n        constructor(windowManager: WindowManager) {\r\n            super(windowManager, WindowHeadingBackplateType.SILVER, 'iconHeadingAchievements', Settings.WINDOW_BACKGROUND_ALPHA);\r\n\r\n            StarsManager.instance.onStarAdded.add(this.handleStarAdded, this);\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.itemsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.achievementPanels = new Map<AchievementType, AchievementPanel>();\r\n\r\n            Object.keys(AchievementType).filter(value => !isNaN(+value)).map(value => +value).forEach(key => {\r\n                this.achievementPanels.set(key, this.itemsContainer.add(new AchievementPanel(this, key, ((key - 1) % 3 - 1) * 185, (Math.floor((key - 1) / 3) - 1) * 200)));\r\n            })\r\n        }\r\n\r\n        protected resizeContent() {\r\n            super.resizeContent();\r\n            this.itemsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.55 + 90);\r\n        }\r\n\r\n        protected updateAchievementPanels() {\r\n            this.achievementPanels.forEach(panel => panel.updateView());\r\n        }\r\n\r\n        public show() {\r\n            super.show();\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_OTHER, \"ACHIEVEMENTS\");\r\n            }\r\n\r\n            this.updateAchievementPanels();\r\n        }\r\n\r\n\r\n        public animateAppearing(delay: number) {\r\n            this.achievementPanels.forEach((panel, key) => {\r\n                panel.alpha = 1;\r\n                this.game.add.tween(panel)\r\n                    .from({alpha: 0, y: '-50'}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + key * 25);\r\n                panel.scale.set(0.8);\r\n                this.game.add.tween(panel.scale)\r\n                    .to({x: 1, y: 1}, 250, Phaser.Easing.Back.Out, true, delay + key * 25);\r\n            });\r\n        }\r\n\r\n        public animateDisappearing(delay: number, onClosedCallback: Function) {\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n\r\n            this.achievementPanels.forEach((panel, key) => {\r\n                this.game.add.tween(panel)\r\n                    .to({alpha: 0}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + key * 25);\r\n                this.game.add.tween(panel.scale)\r\n                    .to({x: 0.55, y: 0.55}, 250, Phaser.Easing.Back.In, true, delay + key * 25);\r\n            });\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n\r\n        protected resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.itemsContainer, false);\r\n            this.game.tweens.removeFrom(this.itemsContainer.scale, false);\r\n        }\r\n\r\n        /**\r\n         * INPUT HANDLERS\r\n         */\r\n\r\n        private handleStarAdded() {\r\n            if(this.achievementPanels) {\r\n                const totalStarsAchievement: AchievementPanel = this.achievementPanels.get(AchievementType.TOTAL_STARS);\r\n                if(totalStarsAchievement) {\r\n                    totalStarsAchievement.updateView();\r\n                }\r\n            }\r\n        }\r\n\r\n        protected onCloseClicked() {\r\n\r\n        }\r\n\r\n        protected continueClicked() {\r\n            this.animateDisappearing(0, () => {})\r\n        }\r\n\r\n\r\n    }\r\n}","namespace BlockPuzzle {\r\n    export class WindowManager {\r\n\r\n        private static _instance: WindowManager = null;\r\n        public static get instance(): WindowManager {\r\n            return WindowManager._instance ? WindowManager._instance : WindowManager._instance = new WindowManager();\r\n        }\r\n        public containerWidth: number = CustomScaleManager.ORIGINAL_WIDTH;\r\n        public containerHeight: number = CustomScaleManager.ORIGINAL_HEIGHT;\r\n        private container: Phaser.Group;\r\n        public windowBounds: WindowBounds;\r\n        public isInitialized: boolean = false;\r\n\r\n        public settings: WindowSettings;\r\n        public results: WindowResults;\r\n        public revive: WindowRevive;\r\n        public shop: WindowShop;\r\n        public achievements: WindowAchievements;\r\n\r\n\r\n        public init() {\r\n            this.container = App.instance.stage.add(App.instance.make.group());\r\n\r\n            this.settings = this.container.add(new WindowSettings(this));\r\n            this.results = this.container.add(new WindowResults(this));\r\n            this.revive = this.container.add(new WindowRevive(this));\r\n            this.shop = this.container.add(new WindowShop(this));\r\n            this.achievements = this.container.add(new WindowAchievements(this));\r\n\r\n            this.isInitialized = true;\r\n            this.resize();\r\n        }\r\n\r\n        public resize() {\r\n            if (this.isInitialized) {\r\n                this.container.scale.set(CustomScaleManager.SCALE_X, CustomScaleManager.SCALE_Y);\r\n                this.container.position.set(CustomScaleManager.WIDTH / 2 - this.containerWidth * CustomScaleManager.SCALE_X / 2, CustomScaleManager.HEIGHT / 2 - this.containerHeight *  CustomScaleManager.SCALE_Y / 2);\r\n                this.windowBounds = this.windowBounds || new WindowBounds();\r\n                this.windowBounds.set(-(CustomScaleManager.WIDTH / CustomScaleManager.SCALE_X - this.containerWidth) / 2, (CustomScaleManager.WIDTH / CustomScaleManager.SCALE_X - this.containerWidth) / 2 + this.containerWidth, -(CustomScaleManager.HEIGHT / CustomScaleManager.SCALE_Y - this.containerHeight) / 2, (CustomScaleManager.HEIGHT / CustomScaleManager.SCALE_Y - this.containerHeight) / 2 + this.containerHeight);\r\n\r\n                this.settings.resize();\r\n                this.results.resize();\r\n                this.revive.resize();\r\n                this.shop.resize();\r\n                this.achievements.resize();\r\n            }\r\n        }\r\n\r\n        public hasOpenedWindows(): boolean {\r\n            return this.settings.visible || this.shop.visible || this.achievements.visible || this.revive.visible || this.results.visible;\r\n        }\r\n\r\n        public showSettings() {\r\n            this.settings.show();\r\n        }\r\n\r\n        public showResults() {\r\n            this.results.show();\r\n        }\r\n\r\n        public showRevive() {\r\n            this.revive.show();\r\n        }\r\n\r\n        public showShop(powerupType: PowerupType) {\r\n            this.shop.setPowerupType(powerupType);\r\n            this.shop.show();\r\n        }\r\n\r\n        public showAchievements() {\r\n            this.achievements.show();\r\n        }\r\n\r\n        public hideAll() {\r\n            this.settings.hide();\r\n            this.results.hide();\r\n            this.revive.hide();\r\n            this.shop.hide();\r\n            this.achievements.hide();\r\n        }\r\n    }\r\n}","///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class WindowResults extends DefaultWindow {\r\n\r\n        protected controlsContainer: Phaser.Group;\r\n        protected buttonRestart: Phaser.Button;\r\n        protected scoresPanel: ResultsScoresPanel;\r\n        protected starsPanel: ResultsStarsPanel;\r\n        protected doubleStarsButton: DoubleStarsButton;\r\n        protected recordEffect: NewRecordEffect;\r\n\r\n        constructor(windowManager: WindowManager) {\r\n            super(windowManager, WindowHeadingBackplateType.GOLD, 'iconHeadingVictory', Settings.WINDOW_BACKGROUND_ALPHA);\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.controlsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.scoresPanel = this.controlsContainer.add(new ResultsScoresPanel(this));\r\n            this.starsPanel = this.controlsContainer.add(new ResultsStarsPanel(this));\r\n            this.doubleStarsButton = this.controlsContainer.add(new DoubleStarsButton(this));\r\n            this.recordEffect = this.controlsContainer.add(new NewRecordEffect(this));\r\n            this.scoresPanel.position.set(-80, -70);\r\n            this.starsPanel.position.set(-80, 70);\r\n            this.doubleStarsButton.position.set(200, 160);\r\n            this.recordEffect.position.set(205, -63);\r\n\r\n            this.buttonRestart = this.contentContainer.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonRestart', 0, 0, 1.35, this.restartClicked, this));\r\n        }\r\n\r\n        protected showButtons() {\r\n            this.buttonRestart.visible = true;\r\n            this.buttonRestart.alpha = 0;\r\n            this.game.add.tween(this.buttonRestart)\r\n                .to({alpha: 1}, 350, Phaser.Easing.Linear.None, true, 1000);\r\n        }\r\n\r\n\r\n        protected animateAppearing() {\r\n            const currentScores: number = ScoreManager.instance.getCurrentScores();\r\n            const lastRoundStars: number = StarsManager.instance.getLastRoundStars();\r\n\r\n            const scoresTweenDuration: number = currentScores > 0 ? Phaser.Math.clamp(Math.pow(currentScores, 0.9), 450, 1500) : 0;\r\n            const starsTweenDuration: number = lastRoundStars > 0 ? Phaser.Math.clamp(Math.pow(lastRoundStars, 0.85) * 75, 50, 1000) : 0;\r\n\r\n            const bestScoreReached: boolean = ScoreManager.instance.updateMaxScores(ScoreManager.instance.getCurrentScores());\r\n\r\n            /* API & ANALYTICS */\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_GAMERESULT);\r\n\r\n                setTimeout(() => {\r\n                    Promise.all([\r\n                        window[\"famobi_analytics\"].trackEvent(\r\n                            \"EVENT_LEVELFAIL\",\r\n                            {\r\n                                levelName: '',\r\n                                reason: 'dead'\r\n                            }\r\n                        ),\r\n                        window[\"famobi_analytics\"].trackEvent(\r\n                            \"EVENT_TOTALSCORE\",\r\n                            {\r\n                                totalScore: currentScores\r\n                            }\r\n                        )\r\n                    ]).then(() => this.showButtons(), () => this.showButtons());\r\n                }, 500);\r\n            } else {\r\n                this.showButtons();\r\n            }\r\n\r\n\r\n            /* END ANALYTICS */\r\n\r\n            this.buttonRestart.visible = false;\r\n\r\n            this.scoresPanel.showPanel(200, 800, scoresTweenDuration, bestScoreReached);\r\n            this.starsPanel.showPanel(400, 800 + 250, starsTweenDuration);\r\n            if(APIUtils.instance.hasRewardedVideo()) {\r\n                this.doubleStarsButton.visible = true;\r\n                this.doubleStarsButton.show(1400, Settings.RESULTS_DOUBLE_STARS_REWARD);\r\n            } else {\r\n                this.doubleStarsButton.visible = false;\r\n            }\r\n\r\n            if (bestScoreReached) {\r\n                this.recordEffect.show(800 + scoresTweenDuration + starsTweenDuration);\r\n            }\r\n        }\r\n\r\n        public addBonusStars(amount: number) {\r\n            StarsManager.instance.addBonusStars(amount);\r\n            this.starsPanel.tweenTexts(StarsManager.instance.getStarsAmount() - amount, StarsManager.instance.getStarsAmount(), StarsManager.instance.getStarsAmount() - amount, StarsManager.instance.getStarsAmount(), '', '', 50, Phaser.Math.clamp(amount * 75, 200, 1200));\r\n        }\r\n\r\n        protected resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.buttonRestart);\r\n            this.game.tweens.removeFrom(this.buttonRestart.scale);\r\n            this.game.tweens.removeFrom(this.controlsContainer.scale);\r\n            this.recordEffect.visible = false;\r\n        }\r\n\r\n        protected resizeContent() {\r\n            super.resizeContent();\r\n            this.controlsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.5);\r\n            this.buttonRestart.position.set(5, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.85);\r\n        }\r\n\r\n        public hide() {\r\n            SoundController.instance.stopCountingSound();\r\n            super.hide();\r\n        }\r\n\r\n        protected restartClicked() {\r\n            SoundController.instance.stopCountingSound();\r\n            TransitionScreen.instance.changeState('Level');\r\n        };\r\n    }\r\n}","///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nnamespace BlockPuzzle {\r\n\r\n    export class WindowRevive extends CloseableWindow {\r\n\r\n        protected controlsContainer: Phaser.Group;\r\n        protected reviveCountdown: ReviveCountdown;\r\n        protected buttonWatchVideo: Phaser.Button;\r\n\r\n        private isActive: boolean = false;\r\n\r\n        constructor(windowManager: WindowManager) {\r\n            super(windowManager, WindowHeadingBackplateType.SILVER, 'iconHeadingRevive', Settings.WINDOW_BACKGROUND_ALPHA);\r\n        }\r\n\r\n\r\n        protected buildContent() {\r\n            this.controlsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.reviveCountdown = this.controlsContainer.add(new ReviveCountdown(this));\r\n            this.reviveCountdown.position.set(0, 0);\r\n            this.buttonWatchVideo = this.contentContainer.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonRevive', 0, 0, 1.35, this.watchVideoClicked, this));\r\n        }\r\n\r\n\r\n        protected resizeContent() {\r\n            super.resizeContent();\r\n            this.controlsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.55);\r\n            this.buttonWatchVideo.position.set(10, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.85);\r\n        }\r\n\r\n        public show() {\r\n            super.show();\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_BONUS);\r\n            }\r\n\r\n            this.reviveCountdown.startCountdown();\r\n        }\r\n\r\n        public hide() {\r\n            this.reviveCountdown.resetCountdown();\r\n            super.hide();\r\n        }\r\n\r\n        protected onCloseClicked() {\r\n            this.reviveFailed(false);\r\n        }\r\n\r\n        protected watchVideoClicked() {\r\n            APIUtils.instance.showRewardedVideo(() => this.reviveSucceed());\r\n        }\r\n\r\n        public reviveSucceed() {\r\n            if(!this.isActive) {\r\n                return;\r\n            }\r\n            this.animateDisappearing(0, () => {\r\n                if (this.game.state.getCurrentState() instanceof Level) {\r\n                    (this.game.state.getCurrentState() as Level).eventManager.onReviveApplied.dispatch();\r\n                }\r\n            });\r\n        }\r\n\r\n        public reviveFailed(disappear: boolean) {\r\n            if(!this.isActive) {\r\n                return;\r\n            }\r\n            if (disappear) {\r\n                this.animateDisappearing(30, null);\r\n            }\r\n            if (this.game.state.getCurrentState() instanceof Level) {\r\n                (this.game.state.getCurrentState() as Level).eventManager.onReviveFailed.dispatch();\r\n            }\r\n        }\r\n\r\n        public animateAppearing(delay: number) {\r\n            this.isActive = true;\r\n\r\n            this.reviveCountdown.alpha = 0;\r\n            this.game.add.tween(this.reviveCountdown)\r\n                .to({alpha: 1}, 350, Phaser.Easing.Linear.None, true, delay + 130);\r\n            this.reviveCountdown.scale.set(0.6);\r\n            this.game.add.tween(this.reviveCountdown.scale)\r\n                .to({x: 1, y: 1}, 350, Phaser.Easing.Back.Out, true, delay + 130);\r\n\r\n            this.buttonWatchVideo.inputEnabled = true;\r\n            this.game.tweens.removeFrom(this.buttonWatchVideo);\r\n            this.buttonWatchVideo.alpha = 1;\r\n            this.game.add.tween(this.buttonWatchVideo)\r\n                .from({y: '70', alpha: 0}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 200);\r\n        }\r\n\r\n        public animateDisappearing(delay: number, onClosedCallback: Function) {\r\n            this.isActive = false;\r\n\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n            this.reviveCountdown.animateDisappearing(delay);\r\n\r\n            this.buttonWatchVideo.inputEnabled = false;\r\n            this.game.tweens.removeFrom(this.buttonWatchVideo);\r\n            this.game.add.tween(this.buttonWatchVideo)\r\n                .to({y: '100', alpha: 0}, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n\r\n        protected resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.controlsContainer, false);\r\n            this.game.tweens.removeFrom(this.controlsContainer.scale, false);\r\n            this.game.tweens.removeFrom(this.reviveCountdown, false);\r\n            this.game.tweens.removeFrom(this.reviveCountdown.scale, false);\r\n            this.game.tweens.removeFrom(this.buttonWatchVideo, false);\r\n        }\r\n\r\n    }\r\n}","///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nnamespace BlockPuzzle {\r\n\r\n    export class WindowSettings extends CloseableWindow {\r\n\r\n        protected controlsContainer: Phaser.Group;\r\n        protected musicControl: MusicControlScrollbar;\r\n        protected sfxControl: SFXControlScrollbar;\r\n        protected buttonRestart: Phaser.Button;\r\n        protected publisherLogo: PublisherLogo;\r\n\r\n        constructor(windowManager: WindowManager) {\r\n            super(windowManager, WindowHeadingBackplateType.SILVER, 'iconHeadingSettings', Settings.WINDOW_BACKGROUND_ALPHA);\r\n        }\r\n\r\n\r\n        protected buildContent() {\r\n            this.controlsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.sfxControl = this.controlsContainer.add(new SFXControlScrollbar());\r\n            this.musicControl = this.controlsContainer.add(new MusicControlScrollbar());\r\n            this.sfxControl.position.set(-25, -70);\r\n            this.musicControl.position.set(-25, 70);\r\n            this.buttonRestart = this.contentContainer.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonRestart', 0, 0, 1.12, this.restartClicked, this));\r\n            this.publisherLogo = this.contentContainer.add(new PublisherLogo(0, 0));\r\n        }\r\n\r\n\r\n        protected resizeContent() {\r\n            super.resizeContent();\r\n            this.sfxControl.position.set(-25, -70);\r\n            this.musicControl.position.set(-25, 70);\r\n            this.controlsContainer.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.53);\r\n            this.buttonRestart.position.set(0, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.76);\r\n            this.publisherLogo.position.set(5, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.92);\r\n        }\r\n\r\n        protected onCloseClicked() {\r\n            LocalStorageController.instance.save();\r\n        }\r\n\r\n        protected tutorialClicked() {\r\n            this.hide();\r\n            if(this.game.state.getCurrentState() instanceof Level) {\r\n                (this.game.state.getCurrentState() as Level).tutorialManager.restartTutorial();\r\n            }\r\n        }\r\n\r\n        protected restartClicked() {\r\n            TransitionScreen.instance.changeState('Level');\r\n        }\r\n\r\n        public animateAppearing() {\r\n            this.sfxControl.initValue();\r\n            this.musicControl.initValue();\r\n\r\n            this.sfxControl.alpha = 0;\r\n            this.game.add.tween(this.sfxControl)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, 200);\r\n            this.sfxControl.scale.set(0.6);\r\n            this.game.add.tween(this.sfxControl.scale)\r\n                .to({x: 1, y: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, 200);\r\n\r\n            this.musicControl.alpha = 0;\r\n            this.game.add.tween(this.musicControl)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, 250);\r\n            this.musicControl.scale.set(0.6);\r\n            this.game.add.tween(this.musicControl.scale)\r\n                .to({x: 1, y: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, 250);\r\n\r\n            this.buttonRestart.alpha = 0;\r\n            this.game.add.tween(this.buttonRestart)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n            this.buttonRestart.scale.set(0.6);\r\n            this.game.add.tween(this.buttonRestart.scale)\r\n                .to({x: 1.12, y: 1.12}, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n\r\n            this.publisherLogo.alpha = 0;\r\n            this.game.add.tween(this.publisherLogo)\r\n                .to({alpha: 1}, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n            this.publisherLogo.scale.set(0.28);\r\n            this.game.add.tween(this.publisherLogo.scale)\r\n                .to({x: 0.45, y: 0.45}, 250, Phaser.Easing.Sinusoidal.Out, true, 350);\r\n        }\r\n\r\n        public animateDisappearing(delay: number, onClosedCallback: Function) {\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n\r\n            this.game.add.tween(this.sfxControl)\r\n                .to({alpha: 0, x: '-150'}, 200, Phaser.Easing.Sinusoidal.InOut, true, delay + 100);\r\n\r\n            this.game.add.tween(this.musicControl)\r\n                .to({alpha: 0, x: '+150'}, 200, Phaser.Easing.Sinusoidal.InOut, true, delay + 100);\r\n\r\n            this.game.tweens.removeFrom(this.buttonRestart);\r\n            this.game.add.tween(this.buttonRestart)\r\n                .to({y: '100', alpha: 0}, 250, Phaser.Easing.Sinusoidal.In, true, delay + 100);\r\n\r\n            this.game.tweens.removeFrom(this.publisherLogo);\r\n            this.game.add.tween(this.publisherLogo)\r\n                .to({y: '100', alpha: 0}, 250, Phaser.Easing.Sinusoidal.In, true, delay + 50);\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n\r\n        protected resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.controlsContainer, false);\r\n            this.game.tweens.removeFrom(this.controlsContainer.scale, false);\r\n            this.game.tweens.removeFrom(this.buttonRestart, false);\r\n            this.game.tweens.removeFrom(this.sfxControl, false);\r\n            this.game.tweens.removeFrom(this.musicControl, false);\r\n            this.game.tweens.removeFrom(this.publisherLogo, false);\r\n        }\r\n\r\n    }\r\n}","///<reference path=\"abstract/CloseableWindow.ts\"/>\r\nnamespace BlockPuzzle {\r\n    export class WindowShop extends CloseableWindow {\r\n\r\n        protected itemsMap: Map<PowerupType, ShopItem>;\r\n        protected currentItem: ShopItem;\r\n        protected itemsContainer: Phaser.Group;\r\n        protected buttonContinue: Phaser.Button;\r\n        public starsCounter: ShopStarsCounter;\r\n\r\n        constructor(windowManager: WindowManager) {\r\n            super(windowManager, WindowHeadingBackplateType.SILVER, 'iconHeadingShop', Settings.WINDOW_BACKGROUND_ALPHA);\r\n        }\r\n\r\n        protected buildContent() {\r\n            this.itemsContainer = this.contentContainer.add(this.game.make.group());\r\n            this.itemsMap = new Map<PowerupType, ShopItem>();\r\n            this.itemsMap.set(PowerupType.BOMB, this.itemsContainer.add(new ShopItem(this, PowerupType.BOMB)));\r\n            this.itemsMap.set(PowerupType.LIGHTNING, this.itemsContainer.add(new ShopItem(this, PowerupType.LIGHTNING)));\r\n\r\n            this.buttonContinue = this.contentContainer.add(ButtonUtils.createSimpleButton(Settings.GAME_ATLAS, 'buttonContinue', 0, 0, 1, this.continueClicked, this));\r\n            this.starsCounter = this.contentContainer.add(new ShopStarsCounter(this));\r\n\r\n            this.windowHeading.visible = false;\r\n            this.buttonContinue.visible = false;\r\n        }\r\n\r\n        protected resizeContent() {\r\n            super.resizeContent();\r\n            this.itemsContainer.position.set(-22, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.54);\r\n            this.buttonContinue.position.set(-5, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.85);\r\n            this.starsCounter.position.set(-28 * CustomScaleManager.UPSCALE_FACTOR, this.windowManager.windowBounds.height / this.contentContainer.scale.y * 0.2);\r\n            this.starsCounter.scale.set(CustomScaleManager.UPSCALE_FACTOR);\r\n            if (this.currentItem) {\r\n                this.currentItem.scale.set(CustomScaleManager.UPSCALE_FACTOR);\r\n            }\r\n        }\r\n\r\n        public setPowerupType(powerupType: PowerupType) {\r\n            this.itemsMap.forEach(item => item.visible = item.powerupType == powerupType);\r\n            this.currentItem = this.itemsMap.get(powerupType);\r\n        }\r\n\r\n        public show() {\r\n            super.show();\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_SHOP);\r\n            }\r\n\r\n            this.starsCounter.visible = true;\r\n            this.updateData();\r\n        }\r\n\r\n        public updateData() {\r\n            this.starsCounter.setStarsAmount(StarsManager.instance.getStarsAmount());\r\n            this.currentItem.show();\r\n        }\r\n\r\n        public powerupBought() {\r\n            this.starsCounter.setStarsAmount(StarsManager.instance.getStarsAmount());\r\n            this.closeClicked();\r\n        }\r\n\r\n        public animateAppearing(delay: number) {\r\n            this.currentItem.alpha = 0;\r\n            this.game.add.tween(this.currentItem)\r\n                .to({alpha: 1}, 200, Phaser.Easing.Sinusoidal.Out, true, 200);\r\n            this.currentItem.scale.set(0.6);\r\n            this.game.add.tween(this.currentItem.scale)\r\n                .to({\r\n                    x: CustomScaleManager.UPSCALE_FACTOR,\r\n                    y: CustomScaleManager.UPSCALE_FACTOR\r\n                }, 240, Phaser.Easing.Back.Out, true, 200);\r\n\r\n            this.game.tweens.removeFrom(this.starsCounter);\r\n            this.starsCounter.alpha = 1;\r\n            this.game.add.tween(this.starsCounter)\r\n                .from({y: '-60', alpha: 0}, 250, Phaser.Easing.Sinusoidal.Out, true, delay);\r\n\r\n            this.buttonContinue.inputEnabled = true;\r\n            this.game.tweens.removeFrom(this.buttonContinue);\r\n            this.buttonContinue.alpha = 1;\r\n            this.game.add.tween(this.buttonContinue)\r\n                .from({y: '70', alpha: 0}, 250, Phaser.Easing.Sinusoidal.Out, true, delay + 50);\r\n        }\r\n\r\n        public animateDisappearing(delay: number, onClosedCallback: Function) {\r\n            super.animateDisappearing(delay, onClosedCallback);\r\n\r\n            this.game.add.tween(this.currentItem)\r\n                .to({alpha: 0}, 160, Phaser.Easing.Sinusoidal.InOut, true, delay);\r\n\r\n            this.game.tweens.removeFrom(this.starsCounter);\r\n            this.game.add.tween(this.starsCounter)\r\n                .to({y: '-60', alpha: 0}, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n\r\n            this.buttonContinue.inputEnabled = false;\r\n            this.game.tweens.removeFrom(this.buttonContinue);\r\n            this.game.add.tween(this.buttonContinue)\r\n                .to({y: '100', alpha: 0}, 250, Phaser.Easing.Sinusoidal.In, true, delay);\r\n\r\n            if (Settings.ENABLE_API) {\r\n                window[\"famobi_analytics\"].trackScreen(window[\"famobi_analytics\"].SCREEN_LEVEL);\r\n            }\r\n        }\r\n\r\n        protected resetTweens() {\r\n            super.resetTweens();\r\n            this.game.tweens.removeFrom(this.itemsContainer, false);\r\n            this.game.tweens.removeFrom(this.itemsContainer.scale, false);\r\n            this.game.tweens.removeFrom(this.buttonContinue, false);\r\n            this.game.tweens.removeFrom(this.starsCounter, false);\r\n            this.game.tweens.removeFrom(this.starsCounter.scale, false);\r\n            if (this.currentItem) {\r\n                this.game.tweens.removeFrom(this.currentItem, false);\r\n                this.game.tweens.removeFrom(this.currentItem.scale, false);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * INPUT HANDLERS\r\n         */\r\n\r\n\r\n        protected onCloseClicked() {\r\n\r\n        }\r\n\r\n        protected continueClicked() {\r\n            this.animateDisappearing(0, () => {\r\n            })\r\n        }\r\n    }\r\n}"]}