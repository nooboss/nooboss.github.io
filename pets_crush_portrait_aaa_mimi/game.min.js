var sdkName = "FaceBookTest";
var gameServerVersion = "20181210_v2";
var sendBugLog = new Object();
sendBugLog.bugInfoHttp = function(bugStr){};
sendBugLog.initialize = function(){};
sendBugLog.updateGameErrorType = function(type){};
sendBugLog.setLogInfo = function(logInfo){};
var gameSaveDataKey = "petscrush_20180530",
    gameWidth = 640,
    gameHeigh = 1136,
    gameLayout = cc.ResolutionPolicy.SHOW_ALL,
    loadResCount = 100,
    connectedTxt = "Disconnect from the server!",
    playEffectMinTime = 300,
    defaultTxt = "Microsoft YaHei",
    defaultBottonSound = "res/sound/defaultbottonsound.mp3",
    escapeTxt = {
        "/": "gang",
        x: "x",
        ".": "dian",
        "+": "jia",
        k: "k",
        m: "m",
        "`": "signal",
        b: "b"
    },
    french = "french",
    spanish = "spanish",
    portuguese = "portuguese",
    english = "english",
    chinese = "chinese",
    gamelanguage = english,
    mappingSDK = {};
var artWordNo = "artWordNo",
    artWordMiddle = "artWordMiddle",
    artWordLeft = "artWordLeft",
    artWordRight = "artWordRight",
    GameArtWord = cc.Node.extend({
        text: null,
        txtWidth: null,
        fontName: null,
        alignmentType: null,
        contentSprite: null,
        stringSize: null,
        ctor: function(a, b, c) {
            null == a && engine.gameTool.printLog("GameArtWord里的fontName值不能为NULL");
            this.alignmentType = artWordNo;
            this.txtWidth = b;
            this.txtHight = c;
            this.stringSize = cc.size(0, 0);
            this.fontName = a;
            this._super();
            this.scheduleUpdate()
        },
        update: function() {},
        setString: function(a) {
            if (a != this.text) {
                null == this.contentSprite ? (this.contentSprite = new cc.Sprite, this.addChild(this.contentSprite)) : this.contentSprite.removeAllChildren();
                this.text = a;
                for (var b = 0, c = 0; c < a.length; c++) {
                    var d = a[c];
                    null != escapeTxt[d] && (d = escapeTxt[d]);
                    d = new cc.Sprite("#fnt/" + this.fontName + "_" + d + ".png");
                    d.setAnchorPoint(0, 0.5);
                    d.x = b;
                    if (null != this.txtWidth) b += this.txtWidth;
                    else {
                        var e = d.getContentSize();
                        this.stringSize.width = e.width;
                        b += e.width
                    }
                    this.contentSprite.addChild(d)
                }
                this.stringSize.width =
                    b;
                switch (this.alignmentType) {
                    case artWordMiddle:
                        this.contentSprite.x = -b / 2;
                        break;
                    case artWordLeft:
                        this.contentSprite.x = 0;
                        break;
                    case artWordRight:
                        this.contentSprite.x = b
                }
            }
        }
    });
var ScaleLandscape3Progress = cc.Sprite.extend({
    bottomSprite: null,
    leftSprite: null,
    rightSprite: null,
    middleSprite: null,
    leftSpriteWidth: null,
    rightSpriteWidth: null,
    middleSpriteWidth: null,
    percent: null,
    maxWidth: null,
    initialize: function(a) {
        this.bottomSprite = a.bottomSprite;
        this.leftSprite = a.leftSprite;
        this.rightSprite = a.rightSprite;
        this.middleSprite = a.middleSprite;
        this.rightSprite.setAnchorPoint(cc.p(0, 0.5));
        this.middleSprite.setAnchorPoint(cc.p(0, 0.5));
        this.leftSpriteWidth = a.leftSpriteWidth;
        this.rightSpriteWidth =
            a.rightSpriteWidth;
        this.middleSpriteWidth = a.middleSpriteWidth;
        this.maxWidth = a.maxWidth;
        this.middleSprite.x = -this.maxWidth / 2;
        null != this.bottomSprite && this.addChild(this.bottomSprite);
        this.addChild(this.middleSprite);
        this.addChild(this.rightSprite)
    },
    setProgress: function(a) {
        1 < a && (a = 1);
        this.percent = a;
        a < this.rightSpriteWidth / this.maxWidth ? this.middleSprite.setVisible(!1) : (this.middleSprite.setVisible(!0), this.middleSprite.setScaleX(this.maxWidth / this.middleSpriteWidth * (a - this.rightSpriteWidth / this.maxWidth)));
        this.rightSprite.x = -this.maxWidth / 2 + this.percent * this.maxWidth - this.rightSpriteWidth - 1
    }
});
var currentScene = null,
    GameScene = cc.Scene.extend({
        sceneName: null,
        serverTimer: null,
        serverTimerCD: null,
        localTime: null,
        gameRuningTime: null,
        onceUpdataTime: null,
        onEnter: function() {
            currentScene = this;
            this._super()
        },
        initialize: function() {
            this.localTime = (new Date).getTime();
            this.gameRuningTime = engineGameRunTime();
            this.onceUpdataTime = 3E3;
            this.scheduleUpdate();
            this.serverTimer = engineGameRunTime();
            this.serverTimerCD = 31E4;
            this.onceUpdataTime = engineGameRunTime()
        },
        update: function(a) {
            engine.engineuUpdate(a)
        }
    }),
    transitions =
    function(a, b, c, d, e, f, g) {
        null == b && (b = []);
        null == c && (c = LoadScene);
        currentScene = null;
        engine.gameUpdate.cleanUpdate();
        return loaderRes(b, function() {
            null != a && cc.director.runScene(new a(e))
        }, c, d, f, g)
    };
var createMaskLayer = function(a, b) {
        var c = new cc.Layer;
        if (null != b) c.addChild(b);
        else {
            var d = new cc.DrawNode;
            d.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            var e = new cc.Sprite;
            e.addChild(d);
            c.addChild(e)
        }
        a.maskLayer = c;
        a.addChild(c, -1);
        engine.gameEvent.createMouseDown(c, function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
        return a
    },
    createMaskRectLayer = function(a, b, c) {
        null == c && (c = []);
        for (var d = new cc.Layer, e = 0; e < b.length; e++) {
            var f = b[e],
                g = new cc.DrawNode;
            g.drawRect(cc.p(0,
                0), cc.p(f.width, f.height), cc.color(0, 0, 0, 90), 1, cc.color(0, 0, 0, 0));
            var h = new cc.Sprite;
            h.addChild(g);
            h.x = f.x;
            h.y = f.y;
            d.addChild(h)
        }
        for (e = 0; e < c.length; e++) f = c[e], g = new cc.DrawNode, g.drawRect(cc.p(0, 0), cc.p(f.width, f.height), cc.color(0, 0, 0, 1), 1, cc.color(0, 0, 0, 0)), h = new cc.Sprite, h.addChild(g), h.x = f.x, h.y = f.y, d.addChild(h);
        d.checkClick = function(a, c) {
            for (var d = c.getCurrentTarget().convertToNodeSpace(a.getLocation()), e = 0; e < b.length; e++)
                if (cc.rectContainsPoint(b[e], d)) return !0;
            return !1
        };
        engine.gameEvent.createMouseDown(d,
            function() {}, null);
        a.maskLayer = d;
        a.addChild(d, -1);
        return a
    },
    createPageLayer = function(a) {
        var b = new GamePageLayer;
        b.addChild(a.ui);
        b.initialize(a);
        return b
    },
    landscapePage = 1,
    portaitPage = 2,
    GamePageLayer = cc.Layer.extend({
        mouseDownPoint: null,
        isMove: null,
        pageIndex: null,
        pageWidth: null,
        pageMax: null,
        turnPageState: null,
        pageIconList: null,
        pageList: null,
        pageEffect: null,
        pageItemCount: null,
        isPlayPageEffect: null,
        pageEffectFun: null,
        setPageInfo: null,
        ctor: function() {
            this.isMove = !1;
            this.pageIndex = 0;
            this.isPlayPageEffect = !1;
            this._super()
        },
        initialize: function(a) {
            this.pageMax = a.pageMax;
            this.pageWidth = a.pageWidth;
            this.turnPageState = a.turnPageState;
            this.pageIconList = a.pageIconList;
            this.pageList = a.pageList;
            this.pageEffect = a.pageEffect;
            this.pageComplete = a.pageComplete;
            this.pageItemCount = a.pageItemCount;
            this.pageEffectFun = a.pageEffectFun;
            this.setPageInfo = a.setPageInfo;
            switch (this.pageEffect) {
                case 1:
                    engine.gameEvent.createMouseDown(this, this.mouseDown, null, a.clickRect), engine.gameEvent.createMouseMove(this, this.mouseMove,
                        null, a.clickRect), engine.gameEvent.createMouseUp(this, this.mouseUp, null, a.clickRect)
            }
            this.setPageIcons();
            this.setPageIndex(0)
        },
        hiddenNoCheckedPage: function() {
            for (var a = 0; a < this.pageList.length; a++) a >= this.pageIndex * this.pageItemCount && a < (this.pageIndex + 1) * this.pageItemCount ? this.pageList[a].setVisible(!0) : this.pageList[a].setVisible(!1)
        },
        mouseUp: function(a, b) {
            this.isMove = !1;
            this.mouseDownPoint = null
        },
        mouseDown: function(a, b) {
            this.isMove = !1;
            var c = b.getCurrentTarget();
            c.getClickRect();
            this.mouseDownPoint =
                c.convertToNodeSpace(a.getLocation())
        },
        mouseMove: function(a, b) {
            var c = b.getCurrentTarget();
            c.getClickRect();
            c = c.convertToNodeSpace(a.getLocation());
            if (null != this.mouseDownPoint && 30 <= cc.pDistance(this.mouseDownPoint, c)) switch (this.isMove = !0, this.turnPageState) {
                case landscapePage:
                    0 <= c.x - this.mouseDownPoint.x ? this.lastPage() : this.nextPage();
                    this.mouseDownPoint = null;
                    break;
                case portaitPage:
                    0 <= c.y - this.mouseDownPoint.y ? this.lastPage() : this.nextPage(), this.mouseDownPoint = null
            }
        },
        nextPage: function() {
            !0 != this.isPlayPageEffect &&
                this.pageIndex + 1 < this.pageMax && (this.pageIndex++, this.setPageIndex(this.pageIndex))
        },
        lastPage: function() {
            !0 != this.isPlayPageEffect && 0 <= this.pageIndex - 1 && (this.pageIndex--, this.setPageIndex(this.pageIndex))
        },
        setPageIndex: function(a) {
            switch (this.pageEffect) {
                case 1:
                    this.stopAllActions();
                    this.pageIndex = a;
                    a = cc.moveTo(0.5, cc.p(-this.pageIndex * this.pageWidth, this.y));
                    this.runAction(a);
                    this.setPageIcons();
                    null != this.setPageInfo && this.setPageInfo(this.pageIndex);
                    break;
                case 2:
                    this.pageIndex = a;
                    this.x = -this.pageIndex *
                        this.pageWidth;
                    this.y = this.y;
                    a = [];
                    for (var b = 0; b < this.pageList.length; b++) b >= this.pageIndex * this.pageItemCount && b < (this.pageIndex + 1) * this.pageItemCount && a.push(this.pageList[b]);
                    this.isPlayPageEffect = !0;
                    null != this.pageEffectFun && this.pageEffectFun(a);
                    this.setPageIcons();
                    null != this.setPageInfo && this.setPageInfo(this.pageIndex)
            }
        },
        setPageIcons: function() {
            if (!(0 >= this.pageIconList.length)) {
                for (var a = 0; a < this.pageIconList.length; a++) this.pageIconList[a].setVisible(!1);
                this.pageIconList[this.pageIndex].setVisible(!0)
            }
        }
    }),
    GameLayer = cc.Class.extend({
        isInit: null,
        createMaskLayer: null,
        createPageLayer: null,
        ctor: function() {
            this.isInit = !1
        },
        initialize: function() {
            !0 != this.isInit && (this.isInit = !0, this.createMaskLayer = createMaskLayer, this.createPageLayer = createPageLayer)
        }
    });
var GameCustomImage = cc.Class.extend({
    width: null,
    height: null,
    pngData: null,
    fontData: null,
    drawFun: null,
    drawCompleteFun: null,
    initialize: function(a) {
        this.pngData = null != a.pngData ? a.pngData : [];
        this.fontData = null != a.fontData ? a.fontData : [];
        this.width = a.width;
        this.height = a.height;
        this.getBase64Image(a)
    },
    getBase64Image: function(a) {
        var b = this;
        for (a = 0; a < this.pngData.length; a++) {
            var c = this.pngData[a],
                d = new Image;
            c.playImage = d;
            d.crossOrigin = "anonymous";
            d.imgHeight = c.imgHeight;
            d.imgWidth = c.imgWidth;
            d.src = c.url;
            d.isLoad = !1;
            d.onload = function() {
                this.width = this.imgWidth;
                this.height = this.imgHeight;
                this.isLoad = !0;
                b.drawImage()
            }
        }
    },
    drawImage: function() {
        for (var a = 0; a < this.pngData.length; a++) {
            var b = this.pngData[a];
            if (!1 == b.playImage.isLoad) return
        }
        if (null != this.drawFun) this.drawFun();
        else {
            a = document.createElement("canvas");
            a.width = this.width;
            a.height = this.height;
            for (var c = 0; c < this.pngData.length; c++) {
                var b = this.pngData[c],
                    d = a.getContext("2d");
                d.drawImage(b.playImage, b.posX, b.posY, b.playImage.width, b.playImage.height)
            }
            for (b =
                0; b < this.fontData.length; b++) c = this.fontData[b], d.font = c.font, d.lineWidth = c.lineWidth, d.fillStyle = c.fillStyle, d.textAlign = c.textAlign, d.strokeStyle = c.strokeStyle, d.strokeText(c.des.toString(), c.posX, c.posY), d.fillText(c.des.toString(), c.posX, c.posY);
            d = a.toDataURL("image/png");
            null != this.drawCompleteFun && this.drawCompleteFun(d)
        }
    }
});
var LoadControl = cc.Class.extend({
        cb: null,
        resources: null,
        originalResources: null,
        loadClassName: null,
        analysisFun: null,
        loadMC: null,
        loadTotalCount: null,
        initialize: function(a) {
            this.cb = a.cb;
            this.analysisFun = a.analysisFun;
            this.loadClassName = a.loadClassName;
            this.loadTotalCount = 0;
            this.originalResources = this.getCheckLoadResources(a.resources);
            this.load()
        },
        load: function() {
            this.loadTotalCount++;
            if (!(15 < this.loadTotalCount)) {
                var a = this.getCheckLoadResources(this.originalResources);
                0 < a.length ? (this.resources = a,
                    this.loadMC = null, this.loadClassName && (this.loadMC = new this.loadClassName(this))) : this.loadEnd()
            }
        },
        getLoadCount: function() {
            return this.originalResources.length - this.getCheckLoadResources(this.originalResources).length
        },
        loadEnd: function() {
            null != this.analysisFun && this.analysisFun();
            null != this.cb && this.cb()
        },
        setLoadPercent: function(a) {
            this.loadMC && this.loadMC.setLoadPercent(a)
        },
        getCheckLoadResources: function(a) {
            for (var b = [], c = 0; c < a.length; c++)
                if (null != a[c].type && "font" == a[c].type)
                    for (var d = 0; d < a[c].srcs.length; d++) null ==
                        cc.loader.getRes(a[c].srcs[d]) && b.push(a[c].srcs[d]);
                else null == cc.loader.getRes(a[c]) && b.push(a[c]);
            return b
        }
    }),
    LoadScene = GameScene.extend({
        label: null,
        loadControl: null,
        ctor: function(a) {
            this.sceneName = "LoadScene";
            this.loadControl = a;
            this._super();
            this.setLoadStyle();
            cc.director.runScene(this)
        },
        onEnter: function() {
            this._super();
            this.load();
            this.showLoad()
        },
        initialize: function() {
            this._super()
        },
        load: function() {
            var a = this,
                b = 1 * this.loadControl.loadTotalCount;
            5 < b && (b = 5);
            cc.log("第" + this.loadControl.loadTotalCount +
                "次，" + b + "秒后启动加载");
            this.scheduleOnce(function() {
                cc.loader.load(this.loadControl.resources, function(b, d, e) {
                    a.showLoad()
                }, function() {
                    a.loadControl.load()
                })
            }, b)
        },
        setLoadStyle: function() {
            var a = new cc.Sprite("res/load_big_bg.jpg");
            a.x = cc.winSize.width / 2;
            a.y = cc.winSize.height / 2;
            this.addChild(a);
            this.label = new cc.LabelTTF("Loading...", defaultTxt, 30);
            this.label.setPosition(cc.winSize.width / 2, 80);
            this.label.setColor(cc.color(67, 14, 21));
            this.addChild(this.label, 100)
        },
        computationsLoadProgress: function() {
            var a =
                Math.floor(this.loadControl.getLoadCount() / this.loadControl.originalResources.length * 100) | 0;
            return a = Math.min(a, 99)
        },
        showLoad: function() {
            var a = this.computationsLoadProgress();
            this.setLoadPercent(a)
        },
        setLoadPercent: function(a) {
            this.label.setString("Loading..." + a + "%")
        }
    }),
    loadSoundDic = {},
    LoadSound = cc.Class.extend({
        playSound: null,
        loadEffectSound: function(a) {
            null == loadSoundDic[a] && (loadSoundDic[a] = !0, cc.loader.load(a, function() {}))
        },
        loadBackgroundSound: function(a) {
            null == loadSoundDic[a] && (loadSoundDic[a] = {}, loadSoundDic[a].loadCount = 1, loadSoundDic[a].isNowLoad = !1);
            if (!(10 <= loadSoundDic[a].loadCount)) {
                var b = cc.loader.getRes(a);
                null != b && null == b._element && (b = null, cc.loader.release(a));
                if (null == b) {
                    if (!1 == loadSoundDic[a].isNowLoad) {
                        var c = this;
                        null == b && (loadSoundDic[a].isNowLoad = !0, loadSoundDic[a].loadCount++, setTimeout(function() {
                            cc.loader.load(a, function() {
                                loadSoundDic[a].isNowLoad = !1;
                                c.loadBackgroundSound(a)
                            })
                        }, 2))
                    }
                } else this.playSound(a)
            }
        }
    }),
    loaderRes = function(a, b, c, d, e, f) {
        var g = {};
        g.resources = a;
        g.cb =
            b;
        g.analysisFun = d;
        g.loadClassName = c;
        g.isloadBefore = e;
        g.loadBeforeValue = f;
        a = new LoadControl;
        a.initialize(g);
        return a
    };
var GameSound = cc.Class.extend({
    isInit: null,
    soundVolume: null,
    stopSound: null,
    stopBackground: null,
    stopEffect: null,
    playMusicUrl: null,
    lastTimeDic: null,
    ctor: function() {
        this.isInit = !1;
        this.soundVolume = 100;
        this.stopEffect = this.stopBackground = this.stopSound = !1;
        this.playMusicUrl = "";
        this.lastTimeDic = {}
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0)
    },
    stopBackgroundMusic: function() {
        this.stopBackground = !0;
        cc.audioEngine.setMusicVolume(0);
        gameLocalData.musicVolume = 0;
        saveLocalUserData()
    },
    openBackgroundMusic: function() {
        this.stopBackground = !1;
        cc.audioEngine.setMusicVolume(this.soundVolume);
        gameLocalData.musicVolume = 1;
        saveLocalUserData()
    },
    stopEffectMusic: function() {
        this.stopEffect = !0;
        cc.audioEngine.setEffectsVolume(0);
        gameLocalData.effectsVolume = 0;
        saveLocalUserData()
    },
    openEffectMusic: function() {
        this.stopEffect = !1;
        cc.audioEngine.setEffectsVolume(this.soundVolume);
        gameLocalData.effectsVolume = 1;
        saveLocalUserData()
    },
    stopMusic: function() {
        this.stopSound = !0;
        this.stopBackgroundMusic();
        this.stopEffectMusic()
    },
    openMusic: function() {
        this.stopSound = !1;
        this.openBackgroundMusic();
        this.openEffectMusic()
    },
    changeBackgroundMusicState: function() {
        !0 == this.stopBackground ? this.openBackgroundMusic() : this.stopBackgroundMusic()
    },
    changeEffectMusicState: function() {
        !0 == this.stopEffect ? this.openEffectMusic() : this.stopEffectMusic()
    },
    changeMusicState: function() {
        !0 == this.stopSound ? this.openMusic() : this.stopMusic()
    },
    setSoundVolume: function(a) {
        this.soundVolume = a;
        !1 == this.stopSound && (cc.audioEngine.setMusicVolume(a), cc.audioEngine.setEffectsVolume(this.soundVolume))
    },
    playEffect: function(a) {
        var b = engineGameRunTime();
        null != this.lastTimeDic[a] && b - playEffectMinTime <= this.lastTimeDic[a] || (this.lastTimeDic[a] = b, (new LoadSound).loadEffectSound(a), cc.audioEngine.playEffect(a))
    },
    playMusic: function(a, b) {
        null == b && (b = !0);
        this.playMusicUrl = a;
        var c = this,
            d = new LoadSound;
        d.playSound = function(a) {
            a == c.playMusicUrl && cc.audioEngine.playMusic(a, b)
        };
        d.loadBackgroundSound(a)
    }
});
var GameCocosStudio = cc.Class.extend({
        isInit: null,
        ctor: function() {
            this.isInit = !1
        },
        initialize: function() {
            !0 != this.isInit && (this.isInit = !0, this.createLanguageSprite = createLanguageSprite, this.setGrowthTextNum = setGrowthTextNum)
        },
        loadCSS: function(a) {
            a = ccs.load(a).node;
            setCCSAllUI(a);
            return a
        }
    }),
    createKeyPressed = function(a, b) {
        null != a.onKeyPressed && null != a.onKeyReleased || createKeyEvent(a);
        a.onKeyPressedFun = b
    },
    createKeyReleased = function(a, b) {
        null != a.onKeyPressed && null != a.onKeyReleased || createKeyEvent(a);
        a.onKeyReleasedFun =
            b
    },
    createKeyEvent = function(a) {
        if ("keyboard" in cc.sys.capabilities) {
            a.onKeyPressed = function(b, d) {
                if (null != a.onKeyPressedFun) a.onKeyPressedFun(b, d)
            };
            a.onKeyReleased = function(b, d) {
                if (null != a.onKeyReleasedFun) a.onKeyReleasedFun(b, d)
            };
            var b = cc.EventListener.create({
                event: cc.EventListener.KEYBOARD,
                target: this,
                onKeyPressed: a.onKeyPressed,
                onKeyReleased: a.onKeyReleased
            });
            cc.eventManager.addListener(b, a)
        }
    },
    createMouseMove = function(a, b, c, d) {
        a.mouseDownTypeList = c;
        null != a.addTouchEventListener ? createCCSTouchEventListener(a) :
            createTouchEventListener(a, d);
        a.mouseMovefun = b;
        a.mouseMove = function(b, c) {
            if (!1 == a.visible) return !1;
            null != a.mouseMovefun && a.mouseMovefun(b, c)
        }
    },
    createMouseDown = function(a, b, c, d) {
        a.mouseDownTypeList = c;
        null != a.addTouchEventListener ? createCCSTouchEventListener(a) : createTouchEventListener(a, d);
        a.mouseDownfun = b;
        a.mouseDown = function(b, c) {
            if (!1 == a.visible) return !1;
            null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && (null == a.bottonSound && 0 < defaultBottonSound.length && engine.gameSound.playEffect(defaultBottonSound),
                null != a.realScale ? a.setScale(0.9 * a.realScale) : a.setScale(0.9));
            null != a.mouseDownfun && a.mouseDownfun(b, c)
        };
        null == a.mouseUp && (a.mouseUp = function(b, c) {
            if (!1 == a.visible) return !1;
            null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && (null != a.realScale ? a.setScale(a.realScale) : a.setScale(1))
        })
    },
    createMouseUp = function(a, b, c, d) {
        null != c && (a.mouseDownTypeList = c);
        null != a.addTouchEventListener ? createCCSTouchEventListener(a) : createTouchEventListener(a, d);
        a.mouseUpfun = b;
        a.mouseUp = function(b,
            c) {
            if (!1 == a.visible) return !1;
            null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && (null != a.realScale ? a.setScale(a.realScale) : a.setScale(1));
            null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType1) && a.runAction(cc.sequence(cc.scaleTo(0.05, 1.02), cc.scaleTo(0.05, 1)));
            if (!1 != a.isUpCheck && null != a.checkClick && !1 == a.checkClick(b, c)) return !1;
            null != a.mouseUpfun && a.mouseUpfun(b, c)
        };
        null == a.mouseDown && (a.mouseDown = function(b, c) {
            if (!1 == a.visible) return !1;
            null != a.mouseDownTypeList &&
                0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && (null == a.bottonSound && 0 < defaultBottonSound.length && engine.gameSound.playEffect(defaultBottonSound), null != a.realScale ? a.setScale(0.9 * a.realScale) : a.setScale(0.9));
            null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType1) && (null == a.bottonSound && 0 < defaultBottonSound.length && engine.gameSound.playEffect(defaultBottonSound), null != a.realScale ? a.setScale(0.97 * a.realScale) : a.setScale(0.97))
        })
    },
    createTouchEventListener = function(a, b) {
        if (null ==
            a.checkClick) {
            if (null != b) a.getClickRect = function() {
                return b
            };
            else if (a.constructor == cc.Node) {
                var c = null,
                    c = findClickSize(a, c);
                a.getClickRect = null != c ? function() {
                    return cc.rect(1 * -c.width / 2, 1 * -c.height / 2, c.width, c.height)
                } : function() {
                    var b = a.getContentSize();
                    return cc.rect(cc.rect(0, 0, b.width, b.height))
                }
            } else a.getClickRect = function() {
                var b = a.getContentSize();
                return cc.rect(cc.rect(0, 0, b.width, b.height))
            };
            a.checkClick = function(a, b) {
                var c = b.getCurrentTarget(),
                    d = c.getClickRect(),
                    c = c.convertToNodeSpace(a.getLocation());
                return cc.rectContainsPoint(d, c) ? !0 : !1
            }
        }
        a.eventMouseDown = function(b, c) {
            if (!1 == a.checkClick(b, c)) return !1;
            null != a.mouseDown && a.mouseDown(b, c);
            return !0
        };
        a.eventMouseMove = function(b, c) {
            null != a.mouseMove && a.mouseMove(b, c)
        };
        a.eventMouseUp = function(b, c) {
            null != a.mouseUp && a.mouseUp(b, c)
        };
        var d = !0;
        null != a.isSwallowTouches && (d = a.isSwallowTouches);
        a.uiListener = cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: d,
            onTouchBegan: a.eventMouseDown,
            onTouchMoved: a.eventMouseMove,
            onTouchEnded: a.eventMouseUp,
            onTouchCancelled: null
        }, a);
        a.uiRemoveListener = function(b) {
            null != b ? cc.eventManager.removeListeners(a, b) : cc.eventManager.removeListeners(a)
        }
    },
    createCCSTouchEventListener = function(a) {
        null == a.touchEvent && (a.touchEvent = function(b, c) {
            switch (c) {
                case ccui.Widget.TOUCH_BEGAN:
                    null != a.mouseDown && a.mouseDown();
                    break;
                case ccui.Widget.TOUCH_MOVED:
                    null != a.mouseMove && a.mouseMove();
                    break;
                case ccui.Widget.TOUCH_ENDED:
                    null != a.mouseUp && a.mouseUp()
            }
        }, a.addTouchEventListener(a.touchEvent, a), a.uiRemoveListener = function(b) {
            null !=
                b ? cc.eventManager.removeListeners(a, b) : cc.eventManager.removeListeners(a)
        })
    },
    findClickSize = function(a, b) {
        var c = a.getContentSize();
        if (0 != c.width && 0 != c.height) b = c;
        else
            for (var c = a.getChildren(), d = 0; d < c.length; d++) b = findClickSize(c[d], b);
        return b
    },
    setCCSSpriteArtWord = function(a) {
        var b = a.getName().split("_"),
            b = new GameArtWord(b[1]);
        switch (a.getTextHorizontalAlignment()) {
            case cc.TEXT_ALIGNMENT_CENTER:
                b.alignmentType = artWordMiddle;
                break;
            case cc.TEXT_ALIGNMENT_LEFT:
                b.alignmentType = artWordLeft;
                break;
            case cc.TEXT_ALIGNMENT_RIGHT:
                b.alignmentType =
                    artWordRight
        }
        b.x = a.x;
        b.y = a.y;
        null != a.parent && (a.parent.addChild(b), a.removeFromParent());
        return b
    },
    setCCSSpriteLanguage = function(a) {
        var b = a.getName().split("_"),
            b = getSpriteLanguageUrl(b[1]);
        a.setSpriteFrame(b)
    },
    getSpriteLanguageUrl = function(a) {
        return "language/" + gamelanguage + "/" + a + ".png"
    },
    setCCSAllUI = function(a) {
        var b = a.getChildren(),
            c = b.length,
            d = a.getName();
        0 <= d.indexOf("lg_") && setCCSSpriteLanguage(a);
        0 <= d.indexOf("_sound") && setCCSSound(a);
        0 <= d.indexOf("_df") && a.setFontName(defaultTxt);
        0 <= d.indexOf("aw_") &&
            (a = setCCSSpriteArtWord(a));
        null != a.parent && null == a.parent[d] && (a.parent[d] = a);
        for (a = c - 1; 0 <= a; a--) setCCSAllUI(b[a])
    };
var LoadSprite = cc.Sprite.extend({
        loadComplete: null,
        setPNGUrl: function(a, b) {
            if (null != cc.spriteFrameCache.getSpriteFrame(a)) this.setSpriteFrame(a), this.setScale(b / this.getContentSize().width);
            else {
                var c = this,
                    d = new Image;
                d.crossOrigin = "anonymous";
                d.src = a;
                d.onload = function() {
                    null != c.loadComplete && c.loadComplete(d)
                }
            }
        }
    }),
    createLanguageSprite = function(a) {
        var b = new cc.Sprite;
        b.baseSetSpriteFrame = b.setSpriteFrame;
        b.setSpriteFrame = function(a) {
            if (!0 == cc.isString(a)) {
                a = "language/" + gamelanguage + "/" + a;
                var d = cc.spriteFrameCache.getSpriteFrame(a)
            }
            b.baseSetSpriteFrame(d)
        };
        null != a && b.setSpriteFrame(a);
        return b
    },
    setGrowthTextNum = function(a, b, c, d, e, f) {
        a.setString("+" + b.toString());
        null != f && a.setString(b.toString() + f);
        a.nowNum = b;
        a.scheduleUpdate();
        var g = parseInt((c - b) / d);
        1 > g && (g = 1);
        a.update = function() {
            a.nowNum += g;
            a.nowNum >= c && (a.unscheduleUpdate(), a.nowNum = c, null != e && e());
            a.setString(a.nowNum.toString());
            null != f && a.setString(a.nowNum.toString() + f)
        }
    },
    createClippingNode = function(a, b, c, d, e, f, g) {
        var h = new cc.ClippingNode;
        h.anchorX = a;
        h.anchorY = b;
        h.x = c;
        h.y = d;
        h.alphaThreshold =
            e;
        h.inverted = f;
        h.stencil = g;
        return h
    },
    setSpriteGray = function(a) {
        cc._renderType === cc.game.RENDER_TYPE_WEBGL ? a.shaderProgram = cc.shaderCache.programForKey(cc.SHADER_SPRITE_POSITION_TEXTURECOLOR_GRAY) : a.visible = !1
    },
    recoverySprite = function(a) {
        cc._renderType === cc.game.RENDER_TYPE_WEBGL ? a.shaderProgram = cc.shaderCache.programForKey(cc.SHADER_SPRITE_POSITION_TEXTURECOLOR) : a.visible = !0
    };
var buttonScalingType = "1",
    buttonScalingType1 = "2";

function setCCSEffectMuiscSound(a, b) {
    a.setUIState = function() {
        engine.gameSound.stopEffect ? (a.closesound.setVisible(!0), a.opensound.setVisible(!1)) : (a.closesound.setVisible(!1), a.opensound.setVisible(!0))
    };
    engine.gameEvent.createMouseDown(a, function(b, d) {
        engine.gameSound.changeEffectMusicState();
        a.setUIState()
    }, buttonScalingType, b)
}
var createEffectMuiscByPNGURL = function(a, b, c) {
        var d = new cc.Sprite;
        d.setSpriteFrame(a);
        a = new cc.Sprite;
        a.setSpriteFrame(b);
        return createEffectMuiscByPNG(d, a, c)
    },
    createEffectMuiscByPNG = function(a, b, c) {
        var d = new cc.Sprite;
        d.addChild(a);
        d.addChild(b);
        d.closesound = a;
        d.opensound = b;
        setCCSEffectMuiscSound(d, c);
        return d
    };

function setCCSBackgroundMusicSound(a, b) {
    a.setUIState = function() {
        engine.gameSound.stopBackground ? (a.closesound.setVisible(!0), a.opensound.setVisible(!1)) : (a.closesound.setVisible(!1), a.opensound.setVisible(!0))
    };
    engine.gameEvent.createMouseDown(a, function(b, d) {
        engine.gameSound.changeBackgroundMusicState();
        a.setUIState()
    }, buttonScalingType, b)
}
var createBackgroundMusicSoundByPNGURL = function(a, b, c) {
        var d = new cc.Sprite;
        d.setSpriteFrame(a);
        a = new cc.Sprite;
        a.setSpriteFrame(b);
        return createBackgroundMusicSoundByPNG(d, a, c)
    },
    createBackgroundMusicSoundByPNG = function(a, b, c) {
        var d = new cc.Sprite;
        d.addChild(a);
        d.addChild(b);
        d.closesound = a;
        d.opensound = b;
        setCCSBackgroundMusicSound(d, c);
        return d
    };

function setCCSSound(a, b) {
    a.setUIState = function() {
        engine.gameSound.stopSound ? (a.closesound.setVisible(!0), a.opensound.setVisible(!1)) : (a.closesound.setVisible(!1), a.opensound.setVisible(!0))
    };
    engine.gameEvent.createMouseDown(a, function(b, d) {
        engine.gameSound.changeMusicState();
        a.setUIState()
    }, buttonScalingType, b)
}
var createSoundByPNGURL = function(a, b, c) {
        var d = new cc.Sprite;
        d.setSpriteFrame(a);
        a = new cc.Sprite;
        a.setSpriteFrame(b);
        return createSoundByPNG(d, a, c)
    },
    createSoundByPNG = function(a, b, c) {
        var d = new cc.Sprite;
        d.addChild(a);
        d.addChild(b);
        d.closesound = a;
        d.opensound = b;
        setCCSSound(d, c);
        return d
    };
var dataPathDic = {},
    dataAnalysisMC = {},
    GameData = cc.Class.extend({
        isInit: null,
        dataDic: null,
        isCreateJsonData: null,
        languageDic: null,
        animationDic: null,
        ctor: function() {
            this.isCreateJsonData = this.isInit = !1;
            this.dataDic = {}
        },
        addDataDic: function(a, b) {
            this.dataDic[a] = b
        },
        initialize: function() {
            !0 != this.isInit && (this.isInit = !0)
        },
        createJsonData: function() {
            if (!this.isCreateJsonData) {
                this.isCreateJsonData = !0;
                for (var a in dataPathDic) this.dataDic[a] = this.analysisJsonData(cc.loader.getRes(dataPathDic[a]), a);
                this.dataDic.language = {};
                for (a = 0; a < MY_language_data.length; a++) {
                    var b = MY_language_data[a];
                    this.dataDic.language[b[0]] = {
                        id: b[0],
                        content: b[1]
                    }
                }
            }
        },
        analysisJsonData: function(a, b) {
            if (null == a) engine.gameTool.printLog("配置的" + b + "JSON文件缺失");
            else {
                for (var c = {}, d = 1; d < a.length; d++) {
                    for (var e = {}, f = 0; f < a[d].length; f++) e[a[0][f]] = "null" != a[d][f] ? a[d][f] : "";
                    c[a[d][0]] = e
                }
                return c
            }
        },
        multipleData: function(a, b) {
            for (var c = 0, d = cc.loader.getRes(b); null != d["mc" + c.toString()];) this.analysisData(a + "|" + d["mc" + c.toString()].name,
                d["mc" + c.toString()]), c++
        },
        analysisData: function(a, b) {
            if (null == dataAnalysisMC[a] && (dataAnalysisMC[a] = {}, dataAnalysisMC[a].elementList = [], null != b))
                for (var c = 0; null != b["mcdata" + c.toString()];) {
                    var d = b["mcdata" + c.toString()],
                        e = {};
                    e.url = d.url + ".png";
                    e.zIndex = d.zi;
                    e.x = parseFloat(d.x);
                    e.y = parseFloat(d.y);
                    dataAnalysisMC[a].elementList.push(e);
                    c++
                }
        },
        getAnalysisDataByMCName: function(a, b) {
            var c = dataAnalysisMC[a + "|" + b];
            null == c && this.multipleData(a, b);
            return c
        }
    }),
    GameDataDic = cc.Class.extend({
        dataDic: null,
        num: null,
        ctor: function() {
            this.dataDic = {};
            this.num = 0
        },
        addData: function(a, b) {
            this.dataDic[a] = b;
            this.num++
        },
        deleteData: function(a) {
            this.dataDic[a] = null;
            delete this.dataDic[a];
            this.num--
        },
        getDataByKey: function(a) {
            return this.dataDic[a]
        },
        getDataNum: function() {
            return this.num
        }
    });
var GameGridData = cc.Class.extend({
    grildList: null,
    gridMaxX: null,
    gridMaxY: null,
    initialize: function(a) {
        if (!0 != this.isInit)
            for (this.isInit = !0, this.gridMaxX = a.gridMaxX, this.gridMaxY = a.gridMaxY, this.grildList = [], a = 0; a < this.gridMaxX; a++) {
                for (var b = [], c = 0; c < this.gridMaxY; c++) b.push([]);
                this.grildList.push(b)
            }
    },
    reset: function() {
        for (var a = 0; a < this.grildList.length; a++)
            for (var b = 0; b < this.grildList[a].length; b++) this.grildList[a][b] = []
    }
});
var gameUserData, gameLocalData, readGameUserData = function() {
        var a;
        try {
            a = cc.sys.localStorage.getItem(gameSaveDataKey), a = JSON.parse(a)
        } catch (b) {}
        return a
    },
    saveLocalUserData = function() {
        try {
            cc.sys.localStorage.setItem(gameSaveDataKey, JSON.stringify(gameLocalData))
        } catch (a) {}
    },
    initGameLocalData = function() {
        null == gameLocalData && (gameLocalData = {
            musicVolume: 1,
            effectsVolume: 1
        });
        var a = readGameUserData(),
            b;
        for (b in a) gameLocalData[b] = a[b]
    };
var TileMap = cc.Class.extend({
    offsetX: null,
    offsetY: null,
    gridWidth: null,
    gridHeight: null,
    gridMaxX: null,
    gridMaxY: null,
    isInit: null,
    gridArr: null,
    defaultGridValue: null,
    gridAngle: null,
    ctor: function() {
        this.gridAngle = 90
    },
    initialize: function(a) {
        if (!0 != this.isInit)
            for (this.isInit = !0, null != a.gridAngle && (this.gridAngle = a.gridAngle), this.offsetX = a.offsetX, this.offsetY = a.offsetY, this.gridWidth = a.gridWidth, this.gridHeight = a.gridHeight, this.gridMaxX = a.gridMaxX, this.gridMaxY = a.gridMaxY, this.defaultGridValue = a.defaultGridValue,
                this.gridArr = [], a = 0; a < this.gridMaxX; a++) {
                for (var b = [], c = 0; c < this.gridMaxY; c++) b.push(this.defaultGridValue);
                this.gridArr.push(b)
            }
    },
    setTileMapAttribute: function(a) {
        this.offsetX = a.offsetX;
        this.offsetY = a.offsetY;
        this.gridWidth = a.gridWidth;
        this.gridHeight = a.gridHeight;
        this.gridMaxX = a.gridMaxX;
        this.gridMaxY = a.gridMaxY;
        this.defaultGridValue = a.defaultGridValue;
        this.gridArr = [];
        for (a = 0; a < this.gridMaxX; a++) {
            for (var b = [], c = 0; c < this.gridMaxY; c++) b.push(this.defaultGridValue);
            this.gridArr.push(b)
        }
    },
    clearGridInfo: function(a,
        b) {
        this.setGridInfo(a, b, this.defaultGridValue)
    },
    setGridInfo: function(a, b, c) {
        if (null != c) {
            if (c.isDespose) {
                engine.gameTool.printLog("消除掉的元素");
                return
            }
            c.gridX = a;
            c.gridY = b
        }
        this.gridArr[a][b] = c
    },
    getGridByGridPoint: function(a, b) {
        return 0 > a || 0 > b || a >= this.gridMaxX || b >= this.gridMaxY ? null : this.gridArr[a][b]
    },
    getGridByScenePoint: function(a, b) {
        var c = this.getScenePointByGridPoint(a, b);
        return this.getGridByGridPoint(c.x, c.y)
    },
    getScenePointByGridPoint: function(a, b) {
        var c, d;
        90 == this.gridAngle ?
            (c = Math.floor((a - this.offsetX) / this.gridWidth), d = this.gridMaxY - 1 - Math.floor((b - this.offsetY) / this.gridHeight)) : (a = a - this.offsetX + this.gridWidth / 2, b -= this.offsetY, c = Math.floor(a / this.gridWidth - b / this.gridHeight), d = this.gridMaxY - 1 - Math.floor(a / this.gridWidth + b / this.gridHeight));
        return cc.p(c, d)
    },
    getGridPointByScenePoint: function(a, b) {
        var c = cc.p(0, 0);
        90 == this.gridAngle ? (c.x = a * this.gridWidth + this.gridWidth / 2, c.y = (this.gridMaxY - 1 - b) * this.gridHeight + this.gridHeight / 2) : (c.x = (a + (this.gridMaxY - 1 - b)) * this.gridWidth /
            2, c.y = (this.gridMaxY - 1 - b - a) * this.gridHeight / 2);
        c.x += this.offsetX;
        c.y += this.offsetY;
        return c
    },
    settingGridByScene: function(a) {
        for (var b = 0; b < a.length; b++) {
            var c = this.getScenePointByGridPoint(a[b].x, a[b].y),
                c = this.getGridPointByScenePoint(c.x, c.y);
            a[b].x = c.x;
            a[b].y = c.y
        }
    },
    settingGridByAStar: function(a) {
        for (a = 0; a < this.gridArr.length; a++)
            for (var b = 0; b < this.gridArr[a].length; b++) {
                var c = this.gridArr[a][b];
                if (null != c) {
                    var d = this.getGridPointByScenePoint(a, b);
                    c.x = d.x;
                    c.y = d.y
                }
            }
    },
    getRectGridsPointByFour: function(a,
        b) {
        var c = [];
        a + 1 < this.gridMaxX && c.push(cc.p(a + 1, b));
        0 <= a - 1 && c.push(cc.p(a - 1, b));
        0 <= b - 1 && c.push(cc.p(a, b - 1));
        b + 1 < this.gridMaxY && c.push(cc.p(a, b + 1));
        return c
    }
});

function sendHttp(a, b, c) {
    (new Date).getTime();
    var d = cc.loader.getXMLHttpRequest();
    d.open("POST", a);
    d.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
    d.htttpType = c.htttpType;
    d.callFun = c.callFun;
    d.onreadystatechange = function() {
        if (4 == d.readyState && 200 <= d.status && 207 >= d.status) {
            var a = JSON.parse(d.responseText);
            switch (d.htttpType) {
                case createPlayrID:
                    getPlayerInfoByPlayerID();
                    break;
                case getPlayerInfoID:
                    null != d.callFun && d.callFun(a);
                    break;
                case getFrienInfoID:
                    heroData.gameFriendData.initialize(a);
                    c.callFun && c.callFun();
                    break;
                case getMailListID:
                    heroData.gameMailData.initialize(a);
                    getRankDataFun();
                    break;
                case getRankData:
                    heroData.gameWorldData.initialize(a);
                    c.callFun && c.callFun();
                    break;
                case getWorldRank:
                    heroData.gameWorldData.initialize(a);
                    c.callFun && c.callFun();
                    transitionGameLevelScene();
                    break;
                case seeADOrInivte:
                    Use_AD_Or_Invite = a.is_share
            }
        }
    };
    d.send(b)
};
var GameAnimation = cc.Sprite.extend({
        frameIndex: null,
        frameMaxIndex: null,
        lastFrameTime: null,
        frameIntervalTime: null,
        isInit: null,
        playCount: null,
        curPlayCount: null,
        isStop: null,
        isRemoveFromComplete: null,
        frameFun: null,
        frameCompleteFun: null,
        folderName: null,
        playFrameIndex: null,
        fromFrameIndex: null,
        isPool: !1,
        animationSprite: null,
        imgeData: null,
        startPauseTime: 0,
        onEnter: function() {
            this._super()
        },
        onExit: function() {
            this.removeAllChildren();
            this.setBitmapInfo = this.url = this.imgeSkeletalData = this.imgeData = this.animationSprite =
                this.isPool = this.fromFrameIndex = this.playFrameIndex = this.folderName = this.frameCompleteFun = this.frameFun = this.isRemoveFromComplete = this.isStop = this.curPlayCount = this.playCount = this.isInit = this.frameIntervalTime = this.lastFrameTime = this.frameMaxIndex = this.frameIndex = null;
            this._super()
        },
        ctor: function(a, b, c) {
            this._super();
            this.folderName = "";
            this.animationSprite = new cc.Sprite;
            this.addChild(this.animationSprite);
            this.resetAttribute()
        },
        resetAttribute: function() {
            this.isPool = !1;
            this.frameIntervalTime = this.lastFrameTime =
                this.frameMaxIndex = this.frameIndex = 0;
            this.isInit = !1;
            this.playCount = -1;
            this.curPlayCount = 0;
            this.isRemoveFromComplete = this.isStop = !1;
            this.frameCompleteFun = this.frameFun = null
        },
        reuse: function() {
            this.resetAttribute()
        },
        initialize: function(a) {
            !0 != this.isInit && (this.setInfo(a), this.scheduleUpdate())
        },
        setStartDelayTime: function(a) {
            this.startPauseTime = a;
            this.visible = !1
        },
        update: function(a) {
            0 < this.startPauseTime ? this.startPauseTime -= a : (this.visible = !0, this.playFrame())
        },
        playFrame: function() {
            if (!0 != this.isStop &&
                engineGameRunTime() - this.lastFrameTime > this.frameIntervalTime) {
                if (this.frameIndex > this.playFrameIndex)
                    if (this.curPlayCount++, -1 == this.playCount) this.frameIndex = this.fromFrameIndex;
                    else if (this.curPlayCount < this.playCount) this.frameIndex = this.fromFrameIndex;
                else {
                    this.gotoAndStop(this.playFrameIndex);
                    null != this.frameCompleteFun && this.frameCompleteFun();
                    !0 == this.isRemoveFromComplete && this.dispose();
                    return
                }
                this.lastFrameTime = engineGameRunTime();
                this.setBitmapInfo(this.frameIndex);
                null != this.frameFun &&
                    this.frameFun(this.frameIndex);
                this.frameIndex++
            }
        },
        dispose: function() {
            this.unscheduleAllCallbacks();
            this.isPool && engine.gamePool.putInPool(this);
            this.removeFromParent()
        },
        setFrameIntervalTime: function(a) {
            this.frameIntervalTime = parseInt(1E3 / a)
        },
        gotoAndPlay: function(a) {
            this.isStop = !1;
            this.lastFrameTime = 0;
            this.frameIndex = a;
            this.setBitmapInfo(this.frameIndex)
        },
        fromFrameIndexToPlayFrameIndex: function(a, b) {
            this.isStop = !1;
            this.frameIndex = this.fromFrameIndex = a;
            this.lastFrameTime = 0;
            this.setBitmapInfo(this.frameIndex);
            this.playFrameIndex = b
        },
        gotoAndStop: function(a) {
            this.isStop = !0;
            this.lastFrameTime = 0;
            this.frameIndex = a;
            this.setBitmapInfo(this.frameIndex)
        },
        setIsStop: function(a) {
            this.isStop = a
        },
        resetInfo: function(a) {
            this.setInfo(a)
        },
        setInfo: function(a) {
            this.folderName = a.folderName;
            this.fromFrameIndex = this.lastFrameTime = this.frameIndex = this.curPlayCount = 0;
            this.frameMaxIndex = a.frameMaxIndex;
            this.playFrameIndex = this.frameMaxIndex - 1;
            this.imgeData = a.framesBitmapList;
            null != a.isRemoveFromComplete && (this.isRemoveFromComplete =
                a.isRemoveFromComplete);
            null != a.playCount && (this.playCount = a.playCount);
            this.gotoAndPlay(this.frameIndex)
        },
        setBitmapInfo: function(a) {
            var b = this.imgeData[a];
            b || cc.error("动画不存在:", this.imgeData, a);
            this.folderName ? this.animationSprite.setSpriteFrame(this.folderName + "/" + b.url + ".png") : this.animationSprite.setSpriteFrame(b.url + ".png");
            this.animationSprite.x = b.x;
            this.animationSprite.y = b.y
        },
        setBlendFunc: function(a, b) {
            cc._renderType == cc.game.RENDER_TYPE_WEBGL && this.animationSprite.setBlendFunc(a,
                b)
        }
    }),
    customAnimation = function(a, b) {
        var c = {};
        switch (b.copyType) {
            case "frame":
                var d = b.gameAnimationFrameConfig.split("|");
                switch (a.type) {
                    case "mc":
                        c.frameMaxIndex = d.length;
                        c.framesBitmapList = a.framesBitmapList;
                        c.framesBitmapInfo = {};
                        c.type = a.type;
                        c.folderName = a.folderName;
                        var e = a.framesBitmapInfo,
                            f;
                        for (f in e) {
                            c.framesBitmapInfo[f] = [];
                            for (var e = a.framesBitmapInfo[f], g = 0; g < d.length; g++) {
                                var h = parseInt(d[g]) - 1;
                                c.framesBitmapInfo[f].push(e[h])
                            }
                        }
                        break;
                    case "im":
                        for (c.frameMaxIndex = d.length, c.type = a.type,
                            c.folderName = a.folderName, c.framesBitmapList = [], g = 0; g < d.length; g++) c.framesBitmapList.push(a.framesBitmapList[d[parseInt(g)]])
                }
        }
        return c
    },
    createGameAnimation = function(a, b, c, d) {
        if ("grideffect1" == b) {
            var e = skeletalAnimation["gridskin|gridbroken"];
            e.folderName = "pngdata/playeffect";
            c = new GameAnimation;
            c.initialize(e);
            c.setStartDelayTime(0.3);
            return c
        }
        e = skeletalAnimation[a + "|" + b];
        null == e && (cc.error("数据为空:" + a + "|" + b), multipleAnimation(a, a), e = skeletalAnimation[a + "|" + b]);
        null != d && (b = customSkeletalAnimation[a +
            "|" + b + "|" + d.gameAnimationConfig], null == b && (b = customAnimation(e, d)), e = b);
        switch (e.type) {
            case "mc":
                return d = new GameSkeletalAnimation, e.jsonName = a, d.initialize(e), d.setFrameIntervalTime(c), d;
            case "im":
                return a = new GameAnimation, a.initialize(e), a.setFrameIntervalTime(c), a
        }
    };
var skeletalAnimation = {},
    customSkeletalAnimation = {},
    multipleAnimationDic = {},
    GameSkeletalAnimation = cc.Sprite.extend({
        frameIndex: null,
        lastFrameTime: null,
        frameIntervalTime: null,
        isInit: null,
        framesData: null,
        framesBitmapUrlList: null,
        playCount: null,
        isRemoveFromComplete: null,
        curPlayCount: null,
        frameMaxIndex: null,
        playFrameIndex: null,
        fromFrameIndex: null,
        isStop: null,
        frameCompleteFun: null,
        isPool: !1,
        frameFun: null,
        jsonName: null,
        updateCheck: null,
        onEnter: function() {
            this._super();
            this.scheduleUpdate()
        },
        ctor: function(a,
            b, c) {
            this._super();
            this.lastFrameTime = this.frameIndex = 0;
            this.playCount = -1;
            this.frameMaxIndex = this.curPlayCount = 0;
            this.playFrameIndex = 1;
            this.frameBitmapList = [];
            this.isPool = this.isRemoveFromComplete = this.isStop = this.isInit = !1
        },
        initialize: function(a) {
            !0 != this.isInit && this.setInfo(a)
        },
        update: function(a) {
            this.updateCheck && this.updateCheck();
            this.playFrame()
        },
        playFrame: function() {
            if (!0 != this.isStop && engineGameRunTime() - this.lastFrameTime > this.frameIntervalTime) {
                this.lastFrameTime = engineGameRunTime();
                if (this.frameIndex >
                    this.playFrameIndex)
                    if (this.curPlayCount++, -1 == this.playCount) this.frameIndex = this.fromFrameIndex;
                    else if (this.curPlayCount < this.playCount) this.frameIndex = this.fromFrameIndex;
                else {
                    this.gotoAndStop(this.playFrameIndex);
                    null != this.frameCompleteFun && this.frameCompleteFun();
                    !0 == this.isRemoveFromComplete && this.removeFromParent();
                    return
                }
                for (var a = 0; a < this.frameBitmapList.length; a++) this.frameBitmapList[a].setBitmapInfo(this.frameIndex), 255 != this.opacity && (this.frameBitmapList[a].opacity = this.opacity);
                null !=
                    this.frameFun && this.frameFun(this.frameIndex);
                this.frameIndex++
            }
        },
        onExit: function() {
            this.jsonName = this.frameFun = this.isPool = this.frameCompleteFun = this.isStop = this.fromFrameIndex = this.playFrameIndex = this.frameMaxIndex = this.curPlayCount = this.isRemoveFromComplete = this.playCount = this.framesData = this.isInit = this.frameIntervalTime = this.lastFrameTime = this.frameIndex = null;
            if (this.frameBitmapList)
                for (; 0 < this.frameBitmapList.length;) {
                    var a = this.frameBitmapList.shift();
                    a.url = null;
                    a.imgeData = null;
                    a.bonename =
                        null;
                    a.setBitmapInfo = null;
                    a.imgeSkeletalData = null
                }
            this.framesBitmapList = this.frameBitmapList = null;
            this._super()
        },
        steFrameComplete: function(a) {
            this.frameCompleteFun = a
        },
        setFrameIntervalTime: function(a) {
            this.frameIntervalTime = parseInt(1E3 / a)
        },
        gotoAndPlay: function(a) {
            this.isStop = !1;
            this.frameIndex = a;
            for (a = 0; a < this.frameBitmapList.length; a++) this.frameBitmapList[a].setBitmapInfo(this.frameIndex)
        },
        gotoAndStop: function(a) {
            this.isStop = !0;
            this.frameIndex = a;
            for (a = 0; a < this.frameBitmapList.length; a++) this.frameBitmapList[a].setBitmapInfo(this.frameIndex)
        },
        fromFrameIndexToPlayFrameIndex: function(a, b) {
            this.isStop = !1;
            this.frameIndex = this.fromFrameIndex = a;
            for (var c = 0; c < this.frameBitmapList.length; c++) this.frameBitmapList[c].setBitmapInfo(this.frameIndex);
            this.playFrameIndex = b
        },
        setIsStop: function(a) {
            this.isStop = a
        },
        resetInfo: function(a) {
            this.setInfo(a)
        },
        setInfo: function(a) {
            this.removeAllChildren();
            this.jsonName = a.jsonName;
            this.curPlayCount = this.frameIndex = this.fromFrameIndex = 0;
            this.frameBitmapList = [];
            null != a.isRemoveFromComplete && (this.isRemoveFromComplete =
                a.isRemoveFromComplete);
            null != a.playCount && (this.playCount = a.playCount);
            this.frameMaxIndex = a.frameMaxIndex;
            this.playFrameIndex = this.frameMaxIndex - 1;
            this.frameIntervalTime = null == a.frameIntervalTime ? parseInt(1 / cc.game.config[cc.game.CONFIG_KEY.frameRate] * 1E3) : a.frameIntervalTime;
            this.framesBitmapList = a.framesBitmapList;
            this.framesData = a.framesBitmapInfo;
            for (a = 0; a < this.framesBitmapList.length; a++) {
                var b = {};
                b.url = this.framesBitmapList[a].url;
                b.imgeData = this.framesData[this.framesBitmapList[a].url + "|" +
                    a];
                b.px = this.framesBitmapList[a].px;
                b.py = this.framesBitmapList[a].py;
                b.jsonName = this.jsonName;
                b.isPool = this.isPool;
                b.bonename = this.framesBitmapList[a].bonename;
                b = this.createGameBitmap(b);
                this.addChild(b, this.framesBitmapList[a].zIndex);
                b.setBitmapInfo(this.frameIndex);
                this.frameBitmapList.push(b)
            }
        },
        getBitmapByBoneName: function(a) {
            for (var b = 0; b < this.frameBitmapList.length; b++) {
                var c = this.frameBitmapList[b];
                if (c.bonename == a) return c
            }
            return null
        },
        getBitmapByUrlName: function(a) {
            for (var b = 0; b < this.frameBitmapList.length; b++) {
                var c =
                    this.frameBitmapList[b],
                    d = c.url.split("/");
                if (d[d.length - 1] == a) return c
            }
            return null
        },
        setBlendFunc: function(a, b) {
            for (var c = 0; c < this.frameBitmapList.length; c++) cc._renderType == cc.game.RENDER_TYPE_WEBGL && this.frameBitmapList[c].setBlendFunc(a, b)
        },
        createGameBitmap: function(a) {
            var b, c = a.url.split("/"),
                c = c[c.length - 1];
            "im::" == c.substr(0, 4) ? (c = c.substr(4, c.length).split("."), b = createGameAnimation(a.jsonName, c[0], 60), b.setAnchorPoint(cc.p(a.px, a.py)), b.unscheduleUpdate(), b.imgeSkeletalData = a.imgeData, b.url =
                    a.url, b.setBitmapInfo = function(a) {
                        var c = this.imgeSkeletalData[a];
                        this.animationSprite.opacity != c.opacity && this.animationSprite.setOpacity(c.opacity);
                        a = b.imgeData[a];
                        this.animationSprite.setSpriteFrame(a.url + ".png");
                        this.animationSprite.x = a.x;
                        this.animationSprite.y = a.y;
                        this.x = c.x;
                        this.y = -c.y;
                        this.skewY != c.skewY && (this.skewY = c.skewY);
                        this.skewX != c.skewX && (this.skewX = c.skewX);
                        this.scaleY != c.scaleY && this.setScaleY(c.scaleY);
                        this.scaleX != c.scaleX && this.setScaleX(c.scaleX);
                        this.setRotation(c.rotation)
                    }) :
                (b = new cc.Sprite, b.setAnchorPoint(cc.p(a.px, a.py)), b.setSpriteFrame(a.url), b.url = a.url, b.imgeData = a.imgeData, b.bonename = a.bonename, b.setBitmapInfo = function(a) {
                    a = this.imgeData[a];
                    this.opacity != a.opacity && this.setOpacity(a.opacity);
                    this.x = a.x;
                    this.y = -a.y;
                    this.skewY != a.skewY && (this.skewY = a.skewY);
                    this.skewX != a.skewX && (this.skewX = a.skewX);
                    this.scaleX != a.scaleX && this.setScaleX(a.scaleX);
                    this.scaleY != a.scaleY && this.setScaleY(a.scaleY);
                    this.setRotation(a.rotation)
                });
            return b
        }
    }),
    isMultipleAnimation = function(a,
        b) {
        return null == multipleAnimationDic[a + "|" + b] ? !1 : !0
    },
    multipleAnimation = function(a, b) {
        if (!0 != isMultipleAnimation(a, b)) {
            cc.log(a + "|" + b);
            var c = 0,
                d = cc.loader.getRes(b);
            if (null == d) cc.log("没加载json：   " + b);
            else
                for (multipleAnimationDic[a + "|" + b] = !0; null != d["mc" + c.toString()] || null != d["im" + c.toString()];) {
                    var e = "";
                    null != d["mc" + c.toString()] && (e = a + "|" + d["mc" + c.toString()].name, analysisSkeletalAnimation(e, d["mc" + c.toString()]));
                    null != d["im" + c.toString()] && (e = a + "|" + d["im" + c.toString()].name,
                        analysisAnimation(e, d["im" + c.toString()]));
                    c++
                }
        }
    },
    analysisAnimation = function(a, b) {
        if (null == skeletalAnimation[a]) {
            skeletalAnimation[a] = {};
            skeletalAnimation[a].frameMaxIndex = b.max;
            skeletalAnimation[a].type = b.type;
            skeletalAnimation[a].framesBitmapList = [];
            for (var c = b.folderName, d = b.bi.split("|"), e = 0; e < d.length; e++) {
                var f = d[e].split(","),
                    g = {},
                    h = f[0];
                0 <= h.indexOf("-") ? (h = h.split("-"), g.url = h[1].replace("_", "/") + "/" + h[0]) : g.url = c + "/" + h;
                g.x = parseFloat(f[1]);
                g.y = -parseFloat(f[2]);
                skeletalAnimation[a].framesBitmapList.push(g)
            }
        }
    },
    analysisSkeletalAnimation = function(a, b) {
        if (null == skeletalAnimation[a]) {
            skeletalAnimation[a] = {};
            skeletalAnimation[a].frameMaxIndex = b.max;
            skeletalAnimation[a].framesBitmapList = [];
            skeletalAnimation[a].framesBitmapInfo = {};
            skeletalAnimation[a].type = b.type;
            var c = b.folderName;
            if (null != b)
                for (var d = 0; null != b["mcdata" + d.toString()];) {
                    var e = b["mcdata" + d.toString()],
                        f = {},
                        g = e.url;
                    0 <= g.indexOf("-") ? (g = g.split("-"), f.url = g[1].replace("_", "/") + "/" + g[0] + ".png") : f.url = c + "/" + g + ".png";
                    f.zIndex = e.zi;
                    f.px = null == e.px ? 0.5 :
                        parseFloat(e.px);
                    f.py = null == e.py ? 0.5 : parseFloat(e.py);
                    f.bonename = e.bonename;
                    skeletalAnimation[a].framesBitmapList.push(f);
                    skeletalAnimation[a].framesBitmapInfo[f.url + "|" + d] = [];
                    e = e.bi.split("|");
                    for (g = 0; g < e.length; g++) {
                        var h = e[g].split(","),
                            k = {};
                        k.x = null == h[0] || "" == h[0] ? 0 : parseFloat(h[0]);
                        k.y = null == h[1] || "" == h[1] ? 0 : parseFloat(h[1]);
                        k.scaleX = null == h[2] || "" == h[2] ? 1 : parseFloat(h[2]);
                        k.scaleY = null == h[3] || "" == h[3] ? 1 : parseFloat(h[3]);
                        k.opacity = null == h[4] || "" == h[4] ? 255 : 255 * parseFloat(h[4]);
                        k.rotation = null ==
                            h[5] || "" == h[5] ? 0 : parseFloat(h[5]);
                        k.skewX = null == h[6] || "" == h[6] ? 0 : parseFloat(h[6]);
                        k.skewY = null == h[7] || "" == h[7] ? 0 : parseFloat(h[7]);
                        skeletalAnimation[a].framesBitmapInfo[f.url + "|" + d].push(k)
                    }
                    d++
                }
        }
    };
var heroTypeID = 1E3,
    monsterTypeID = 1001,
    GameElementManage = cc.Class.extend({
        isInit: null,
        gameElementDic: null,
        elementID: null,
        checkSillElementDic: null,
        gameGridDataDic: null,
        ctor: function() {
            this.isInit = !1;
            this.checkSillElementDic = {};
            this.gameGridDataDic = {}
        },
        cleanGameGridDic: function() {
            for (var a in this.gameGridDataDic) this.gameGridDataDic[a].reset()
        },
        setGameGridDic: function(a, b) {
            var c = new GameGridData;
            c.initialize(b);
            this.gameGridDataDic[a] = c
        },
        resetGameGridDic: function(a) {
            this.gameGridDataDic[a].reset()
        },
        getGameGridDic: function(a) {
            return this.gameGridDataDic[a]
        },
        setCheckSkillElementDic: function(a) {
            this.checkSillElementDic[a] = a
        },
        initialize: function() {
            !0 != this.isInit && (this.gameElementDic = {})
        },
        addGameElementDic: function(a) {
            null == this.gameElementDic[a] && (this.gameElementDic[a] = new GameDataDic)
        },
        cleanGameElementDic: function() {
            this.elementID = 1E3;
            for (var a in this.gameElementDic) this.gameElementDic[a] = new GameDataDic
        },
        getGameElementDic: function(a) {
            return this.gameElementDic[a].dataDic
        },
        addElement: function(a,
            b, c) {
            this.gameElementDic[b].addData(a, c)
        },
        getElement: function(a, b) {
            return null == this.gameElementDic[b] ? null : this.gameElementDic[b].getDataByKey(a)
        },
        deleteElement: function(a, b) {
            this.gameElementDic[b].deleteData(a)
        },
        getElementID: function() {
            this.elementID++;
            return this.elementID
        },
        getElementTypeNum: function(a) {
            return this.gameElementDic[a].getDataNum()
        }
    }),
    engineGetElement = function(a, b) {
        return engine.gameElementManage.getElement(a, b)
    };
var GameTime = cc.Class.extend({
        nowDate: null,
        isInit: null,
        gameRunTime: null,
        isPause: null,
        lastTime: null,
        ctor: function() {
            this.isPause = this.isInit = !1;
            this.gameRunTime = 0;
            this.lastTime = this.nowDate = (new Date).getTime()
        },
        initialize: function() {
            !0 != this.isInit && (this.isInit = !0)
        },
        updateTime: function(a) {
            !1 == this.isPause && (this.gameRunTime += 1E3 * a)
        }
    }),
    engineGameRunTime = function() {
        return engine.gameTime.gameRunTime
    },
    engineGamePause = function(a) {
        engine.gameTime.isPause = a
    },
    gameUpdateType = 2,
    sceneUpdateType = 1,
    GameUpdate =
    cc.Class.extend({
        gameUpdateList: null,
        sceneUpdateList: null,
        isInit: null,
        ctor: function() {
            this.gameUpdateList = [];
            this.sceneUpdateList = [];
            this.isInit = !1
        },
        initialize: function() {
            !0 != this.isInit && (this.isInit = !0)
        },
        update: function() {
            for (var a = this.gameUpdateList.length - 1; 0 <= a; a--) this.gameUpdateList[a].update(), !0 == this.gameUpdateList[a].isEnd && this.gameUpdateList.splice(a, 1);
            for (a = this.sceneUpdateList.length - 1; 0 <= a; a--) this.sceneUpdateList[a].update(), !0 == this.sceneUpdateList[a].isEnd && this.sceneUpdateList.splice(a,
                1)
        },
        addUpdate: function(a, b) {
            null == b && (b = sceneUpdateType);
            switch (b) {
                case gameUpdateType:
                    this.gameUpdateList.push(a);
                    break;
                case sceneUpdateType:
                    this.sceneUpdateList.push(a)
            }
        },
        cleanUpdate: function(a) {
            switch (a) {
                case gameUpdateType:
                    this.sceneUpdateList = [];
                    break;
                case sceneUpdateType:
                    this.gameUpdateList = []
            }
        }
    }),
    TimeOut = cc.Class.extend({
        endTime: null,
        isInit: null,
        callFuntion: null,
        data: null,
        isEnd: null,
        ctor: function() {
            this.isEnd = this.isInit = !1
        },
        initialize: function(a) {
            !0 != this.isInit && (this.isInit = !0, this.endTime =
                a.endTime, this.callFuntion = a.callFuntion, this.endTime = a.endTime, this.data = a.data)
        },
        update: function() {
            !0 != this.isEnd && 0 <= engineGameRunTime() - this.endTime && (this.callFuntion.call(this.data), this.isEnd = !0)
        }
    }),
    engineSetTimeOut = function(a, b, c, d) {
        var e = new TimeOut,
            f = {};
        f.callFuntion = a;
        f.endTime = engineGameRunTime() + 1E3 * b;
        f.data = c;
        e.initialize(f);
        engine.gameUpdate.addUpdate(e, d)
    },
    GameInterval = cc.Class.extend({
        updateList: null,
        isInit: null,
        ctor: function() {
            this.isEnd = this.isInit = !1
        },
        initialize: function(a) {
            if (!0 !=
                this.isInit) {
                this.isInit = !0;
                this.updateList = {};
                var b = this;
                setInterval(function() {
                    for (var a in b.updateList) b.updateList[a].updateInterval()
                }, 1E3)
            }
        },
        addUpdateList: function(a, b) {
            null != this.updateList[a] ? cc.log("key:" + a + " 该心跳被添加过了") : this.updateList[a] = b
        },
        removeUpdateList: function(a, b) {
            null == this.updateList[a] && cc.log("key:" + a + " 该心跳没有被添加过了");
            this.updateList[a] = null;
            delete this.updateList[a]
        },
        updateUpdateList: function(a,
            b) {
            this.removeUpdateList(a, b);
            this.addUpdateList(a, b)
        }
    });
var author = "yx",
    leftSetting = "leftSetting",
    rightSetting = "rightSetting",
    centerSetting = "centerSetting",
    verticalCenterSetting = "verticalCenterSetting",
    GameTool = cc.Class.extend({
        isInit: null,
        ctor: function() {
            this.isInit = !1
        },
        initialize: function() {
            !0 != this.isInit && (this.isInit = !0)
        },
        printLog: function(a) {
            cc.log(author + ":" + a)
        },
        getAngle: function(a, b) {
            var c = 0,
                c = Math.atan2(b.y - a.y, b.x - a.x),
                c = 180 / Math.PI * c;
            0 > c && (c += 360);
            return c % 360
        },
        getRadian: function(a, b) {
            var c = 0,
                c = Math.atan2(b.x - a.x, b.y - a.y);
            0 > c && (c += 2 * Math.PI);
            return c
        },
        beginPointTodistance: function(a, b, c) {
            b *= Math.PI / 180;
            return cc.pAdd(a, cc.p(c * Math.cos(b), c * Math.sin(b)))
        },
        cloneObject: function(a) {
            var b = {},
                c;
            for (c in a) b[c] = a[c];
            return b
        },
        gameSpSettingFun: function(a) {
            var b = a.spArr,
                c = a.spWidth,
                d = a.p,
                e = [];
            switch (a.settingType) {
                case leftSetting:
                    for (a = 0; a < b.length; a++) b[a].x = d.x - c * a, b[a].y = d.y;
                    break;
                case rightSetting:
                    for (a = 0; a < b.length; a++) b[a].x = d.x + c * a, b[a].y = d.y;
                    break;
                case centerSetting:
                    if (0 < b.length % 2) {
                        var f = Math.floor(b.length / 2) + 1;
                        for (a = 0; a < b.length; a++) a <=
                            f - 1 ? e.push(d.x - a * c) : e.push(d.x + (a - Math.floor(b.length / 2)) * c)
                    } else
                        for (a = 0; a < b.length; a++) b[a].y = d.y, a < Math.floor(b.length / 2) ? e.push(d.x - (Math.floor(b.length / 2) - a) * c + b[a].anchorX * c) : e.push(d.x + (a - Math.floor(b.length / 2)) * c + b[a].anchorX * c);
                    e.sort(function(a, b) {
                        return a - b
                    });
                    for (a = 0; a < b.length; a++) b[a].y = d.y, b[a].x = e[a];
                    break;
                case verticalCenterSetting:
                    if (0 < b.length % 2)
                        for (f = Math.floor(b.length / 2), a = 0; a < b.length; a++) b[a].x = d.x, b[a].y = a <= f ? d.y + (f - a) * c : d.y - (a - f) * c;
                    else
                        for (a = 0; a < b.length; a++) b[a].x = d.x, b[a].y =
                            a < Math.floor(b.length / 2) ? d.y + (Math.floor(b.length / 2) - a) * c - 0.5 * c : d.y - (a - Math.floor(b.length / 2)) * c - 0.5 * c
            }
        },
        getDirByPointFour: function(a, b) {
            var c = 4;
            a.x < b.x && (c = 6);
            a.x > b.x && (c = 4);
            a.x == b.x && (c = a.y < b.y ? 6 : 4);
            return c
        }
    });
var GamePool = cc.Class.extend({
    isInit: null,
    ctor: function() {
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0)
    },
    initObjPool: function(a, b) {
        for (var c = [], d = b - 1; 0 <= d; d--) {
            var e = new a;
            e.isPoolNode = !0;
            c.push(e);
            cc.pool.putInPool(e)
        }
        return c
    },
    popOut: function(a) {
        var b = cc.pool.getFromPool(a);
        null == b && (b = new a);
        return b
    },
    putInPool: function(a) {
        cc.pool.putInPool(a)
    },
    hasObject: function(a) {
        return cc.pool.hasObject(a)
    },
    clearObject: function(a) {
        cc.pool.removeObject(a)
    },
    clearPool: function() {
        cc.pool.drainAllPools()
    }
});
var beforeEnterGame = "beforeEnterGame",
    afterEnterGame = "afterEnterGame",
    GameLog = cc.Class.extend({
        bugLimitCount: null,
        isInit: null,
        gameErrorType: null,
        logInfo: null,
        logVersion: null,
        initialize: function() {
            if (!0 != this.isInit) {
                this.isInit = !0;
                this.bugLimitCount = 0;
                this.gameErrorType = beforeEnterGame;
                this.logInfo = "";
                this.logVersion = "log日志版本：20180813";
                cc.log(this.logVersion);
                var a = this;
                window.onerror = function(b, c, d, e, f) {
                    null != f && null != f.stack && 30 >= a.bugLimitCount && (a.bugLimitCount++, a.bugInfoHttp(f.stack.toString()))
                }
            }
        },
        bugInfoHttp: function(a) {

        },
        updateGameErrorType: function(a) {
            this.gameErrorType = a
        },
        setLogInfo: function(a) {
            this.logInfo = a
        }
    });
var STATISTICS_GAMEEND = 1E3,
    STATISTICS_CLICKLOOKAD = 1001,
    GameStatistics = cc.Class.extend({
        sendFaceBookStatistiObj: function(a, b, c, d) {
            null != d && (d = {});
            d.faceBookEventName = a;
            d.faceBookValue = b;
            d.faceBookObj = c;
            this.platformStatistics(d);
            return d
        },
        platformStatistics: function(a) {
            switch (sdkName) {
                case "FaceBook":
                    FBInstant.logEvent(a.faceBookEventName, a.faceBookValue, a.faceBookObj)
            }
        },
        initialize: function() {},
        serverStatistics: function(a) {
            var b = 0;
            null != gameSDK && null != gameSDK.sdkPlayInfo && null != gameSDK.sdkPlayInfo.id &&
                (b = gameSDK.sdkPlayInfo.id);
            a.player_id = b;
            b = serverUrl + "opcode=90003";
            a = JSON.stringify(a);
            var c = cc.loader.getXMLHttpRequest();
            c.open("POST", b);
            c.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
            c.send(a)
        }
    });
var gameEngineVersion = "5.0",
    gameVersion = "201711281",
    getUrlByVersion = function(a) {
        return a
    };
var GameEvent = cc.Class.extend({
    isInit: null,
    createMouseMove: null,
    createMouseDown: null,
    createMouseUp: null,
    createKeyPressed: null,
    createKeyReleased: null,
    ctor: function() {
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0, this.createMouseMove = createMouseMove, this.createMouseDown = createMouseDown, this.createMouseUp = createMouseUp, this.createKeyPressed = createKeyPressed, this.createKeyReleased = createKeyReleased)
    }
});
var engine = null,
    Engine = cc.Class.extend({
        isInit: null,
        gameTime: null,
        gameData: null,
        gameSound: null,
        gamePool: null,
        gameElementManage: null,
        gameSkillManage: null,
        gameUpdate: null,
        gameEvent: null,
        gameCocosStudio: null,
        gameLayer: null,
        gameLog: null,
        ctor: function() {
            this.isInit = !1
        },
        initialize: function() {
            !0 != this.isInit && (this.isInit = !0, this.gameTime = new GameTime, this.gameTime.initialize(), this.gameData = new GameData, this.gameData.initialize(), this.gameSound = new GameSound, this.gameSound.initialize(), this.gamePool = new GamePool,
                this.gamePool.initialize(), this.gameTool = new GameTool, this.gameTool.initialize(), this.gameElementManage = new GameElementManage, this.gameElementManage.initialize(), this.gameUpdate = new GameUpdate, this.gameUpdate.initialize(), this.gameEvent = new GameEvent, this.gameEvent.initialize(), this.gameLayer = new GameLayer, this.gameLayer.initialize(), this.gameCocosStudio = new GameCocosStudio, this.gameCocosStudio.initialize(), this.gameLog = new GameLog, this.gameLog.initialize(), cc.director.setProjection(cc.Director.PROJECTION_2D),
                cc.FIX_ARTIFACTS_BY_STRECHING_TEXEL = 1)
        },
        engineuUpdate: function(a) {
            engine.gameTime.updateTime(a);
            engine.gameUpdate.update()
        }
    }),
    initEngine = function() {
        null == engine && (engine = new Engine, engine.initialize())
    };
window.fbSaveDataKey = "datapetcrush";
var RANK_STAR = "petcrush_star",
    RANK_TIME = "petcrush_time",
    faceBookDataKey = "petcrush_save_fb_cm44671123",
    TreeHeight3Min = 0,
    Use_AD_Or_Invite = 0,
    gameInitGemCount = 0,
    itemPriceCoefficient = 1,
    hitEggPriceCoefficient = 1,
    iniStrengthCount = 5,
    petGold1 = 2E3,
    petGem1 = 40,
    petGem2 = 190,
    contiuneFunctionallity = 1,
    showBoostersGameOver = !0,
    isExistStrength = !0,
    isPlayGameUSEStrength = !0,
    isGameOverUSEStrength = !1,
    addStrengthNeedTime = 66E4,
    showAddStrengthEmpty = !1,
    showAddStrengthHalf = !1,
    giftCoefficient = 0,
    goldShopCoefficient = 0,
    petShopCoefficient =
    0,
    isShowUnlimitedLives = !1,
    addTimeShowUnlimitedLives = 36E5,
    lockLevel = 0,
    isGameFree = !0,
    cnBuyStrengthToGem = [20, 40, 80, 160],
    cnAddStrength = [3, 8, 20, 50],
    readInitGameValue = function() {
        gameInitGemCount = 1E3;
        hitEggPriceCoefficient = itemPriceCoefficient = 3;
        contiuneFunctionallity = 2;
        showBoostersGameOver = !0;
        iniStrengthCount = 5;
        addStrengthNeedTime = 18E5;
        showAddStrengthHalf = showAddStrengthEmpty = !0;
        petShopCoefficient = goldShopCoefficient = giftCoefficient = 3;
        isShowUnlimitedLives = !0;
        addTimeShowUnlimitedLives = 36E5;
        lockLevel = 0;
        isShowGemShopUI = !1;
        isPlayGameUSEStrength = isExistStrength = !0;
        isGameOverUSEStrength = !1;
        petGold1 = [1400, 3500, 2E3, 14E3, 35E3][hitEggPriceCoefficient - 1];
        petGem1 = [8, 20, 40, 80, 200][hitEggPriceCoefficient - 1];
        petGem2 = [40, 100, 200, 400, 1E3][hitEggPriceCoefficient - 1]
    },
    gameUserDataForJiexiArrayOb = {},
    initGameUserData = function(a) {
        var b = new Date,
            c = heroData.gameUserData || {};
        if (a) {
            if (c.createtime = a.createtime, c.vitgettime = a.vitgettime, a.tagetlvl && (c.targetBoxLev = a.tagetlvl), debugtest.setTargetLevel && (c.targetBoxLev = debugtest.setTargetLevel),
                c.boxget = a.boxget, debugtest.targetBoxGetMuch && (c.boxget = 0), void 0 != a.starboxget && (c.starBoxIndex = a.starboxget), debugtest.starbox && (c.starBoxIndex = debugtest.starbox), c.powerByView = a.powerByView, c.dayGift = a.dayGift, debugtest.setDayGift && (c.dayGift = 0), c.powerUsed = a.powerUsed, c.dayDiamond = a.dayDiamond, c.dayPet = a.dayPet, c.playerid = heroData.playerid, c.gold = a.gold, c.gem = a.gem, debugtest.muchDiamond && 200 > c.gem && (c.gem = 2E3), c.strength = a.strength, c.addStrengthTime = a.addStrengthTime, c.uesStrengthTime = a.uesStrengthTime,
                c.gameTimeBestScore = a.gameTimeBestScore, c.achievementCommon = a.achievementCommon, c.achievementStart = a.achievementStart, c.achievementStandardBestScore = a.achievementStandardBestScore, c.achievementCommonBestScore = a.achievementCommonBestScore, a.achievementTreeHeight || (a.achievementTreeHeight = 1), c.achievementTreeHeight = a.achievementTreeHeight, debugtest.clearAchevement && (c.achievementCommon = 1, c.achievementStart = 1, c.achievementStandardBestScore = 1, c.achievementCommonBestScore = 1, c.achievementTreeHeight = 1),
                c.achievementView = a.achievementView, c.newbieGuide = a.newbieGuide, c.paylock = 0, c.maxLevelAchievement = [], c.maxLevelStart = [], c.maxLevelScore = [], c.itemcount = [], null == a.daymaxscore && (a.daymaxscore = 0), a.signDate && (c.signDate = a.signDate), a.signTime && (c.signTime = a.signTime), debugtest.clearSignData && (c.signDate = -1, c.signTime = 0), a.inviteGetGemArr && (c.inviteGetGemArr = a.inviteGetGemArr, -1 == c.inviteGetGemArr.indexOf(gameSDK.sdkPlayInfo.id) && c.inviteGetGemArr.push(gameSDK.sdkPlayInfo.id)), a.inviteStrOb && (c.inviteStrOb =
                    a.inviteStrOb), debugtest.clearInviteInfo && (c.inviteGetGemArr = [gameSDK.sdkPlayInfo.id], c.inviteStrOb = {}), a.showTargetDate && (c.showTargetDate = a.showTargetDate), a.invitedPlayerId && (c.invitedPlayerId = a.invitedPlayerId), a.getInvitedArr && (c.getInvitedArr = a.getInvitedArr), a.todayMissionArr && (heroData.missionData.todayMissionArr = a.todayMissionArr), a.missionCountDic && (heroData.missionData.missionCountDic = a.missionCountDic), a.finishMissionArr && !debugtest.noRecordMissionFinish && (heroData.missionData.finishMissionArr =
                    a.finishMissionArr), a.getMissionLastAward && (c.getMissionLastAward = a.getMissionLastAward), c.daymaxscore = a.daymaxscore, gameUserDataForJiexiArrayOb = a, a.lastDate != b.getDate() || debugtest.skepTomorrow) cc.log("隔天登陆"), c.getMissionLastAward = !1, heroData.missionData.todayMissionArr = [], heroData.missionData.missionCountDic = {}, heroData.missionData.finishMissionArr = [], c.getInvitedArr = [], c.invitedPlayerId = [], c.inviteGetGemArr = [gameSDK.sdkPlayInfo.id], c.boxget = 0, c.powerByView = 0, c.dayDiamond = 0,
                c.dayGift = 0, a = a.maxLevelScore.length, 13 <= a && 80 >= a ? c.targetBoxLev = a + 5 : 81 <= a && 120 >= a && (c.targetBoxLev = a + 3)
        } else c = {
            achievementView: "12345",
            vitgettime: 0,
            targetBoxLev: 12,
            achievementTreeHeight: 1,
            maxLevelScore: [],
            boxget: 0,
            achievementCommonBestScore: 1,
            selectpetid: 1,
            gold: 1E3,
            gameTimeBestScore: 0,
            starboxget: 0,
            starBoxIndex: 0,
            maxLevelStart: [],
            resulst: 0,
            powerByView: 0,
            daymaxscore: 0,
            itemlist: [],
            dayPet: 0,
            gamepetlist: "1*1000*1*0",
            gem: 0,
            achievementCommon: 1,
            powerUsed: 0,
            dayDiamond: 0,
            achievementStandardBestScore: 1,
            robot: [],
            createtime: ~~(b.getTime() / 1E3),
            maxLevelAchievement: [],
            achievementStart: 1,
            strength: 10,
            newbieGuide: 1,
            uesStrengthTime: 0,
            addStrengthTime: 0,
            petid: 0,
            dayGift: 0,
            signDate: -1,
            signTime: 0,
            inviteGetGemArr: [gameSDK.sdkPlayInfo.id],
            inviteStrOb: {},
            showTargetDate: -1,
            invitedPlayerId: [],
            getInvitedArr: [],
            todayMissionArr: [3, 4, 6, 7, 8],
            missionCountDic: {},
            finishMissionArr: [],
            getMissionLastAward: !1
        };
        heroData.gameUserData = c
    },
    initGameUserData_last = function() {
        function a(a) {
            for (var b = a.length, c, d; b;) d = Math.floor(Math.random() *
                b--), c = a[b], a[b] = a[d], a[d] = c;
            return a
        }
        var b = heroData.gameUserData;
        b.itemcount = [];
        for (var c = 0; 12 > c; c++) gameUserDataForJiexiArrayOb && gameUserDataForJiexiArrayOb.itemlist && null != gameUserDataForJiexiArrayOb.itemlist[c] ? b.itemcount.push(gameUserDataForJiexiArrayOb.itemlist[c]) : b.itemcount.push(0);
        b.reachMaxLevel = 0;
        b.maxLevelAchievement = [];
        for (c = 0; c < maxLevel; c++) gameUserDataForJiexiArrayOb && gameUserDataForJiexiArrayOb.maxLevelAchievement && null != gameUserDataForJiexiArrayOb.maxLevelAchievement[c] ? (b.maxLevelAchievement.push(gameUserDataForJiexiArrayOb.maxLevelAchievement[c]),
            b.reachMaxLevel++) : b.maxLevelAchievement.push(0);
        b.maxLevelStart = [];
        for (c = b.allStarNum = 0; c < maxLevel; c++) gameUserDataForJiexiArrayOb && gameUserDataForJiexiArrayOb.maxLevelStart && null != gameUserDataForJiexiArrayOb.maxLevelStart[c] ? (b.maxLevelStart.push(gameUserDataForJiexiArrayOb.maxLevelStart[c]), b.allStarNum += gameUserDataForJiexiArrayOb.maxLevelStart[c]) : b.maxLevelStart.push(0);
        b.maxLevelScore = [];
        for (c = 0; c < maxLevel; c++) gameUserDataForJiexiArrayOb && gameUserDataForJiexiArrayOb.maxLevelScore && null != gameUserDataForJiexiArrayOb.maxLevelScore[c] ?
            b.maxLevelScore.push(gameUserDataForJiexiArrayOb.maxLevelScore[c]) : b.maxLevelScore.push(0);
        if (debugtest.setOpenLevel)
            for (b.reachMaxLevel = debugtest.setOpenLevel, c = 0; c < maxLevel; c++) c < debugtest.setOpenLevel ? (b.maxLevelStart[c] = 3, b.maxLevelScore[c] = 777) : (b.maxLevelStart[c] = 0, b.maxLevelScore[c] = 0);
        b.selectpetid = 1;
        b.gamepetlist = "1*1000*1*0";
        gameUserDataForJiexiArrayOb && gameUserDataForJiexiArrayOb.maxLevelStart && (need_step_load = void 0 == gameUserDataForJiexiArrayOb.maxLevelStart[3] || 0 == gameUserDataForJiexiArrayOb.maxLevelStart[3]);
        b.robot = [];
        c = "Gavin Hardy Hugh Ives Jo Ken Kerr Mandel Noah Philip Porter Steven Oliveia Lily Sophia Emily Amelia Ave Isla isabella Aria Evealyn Hannah Isaac Harry Jacob Aiden Ioesph Mason".split(" ");
        a(c);
        var d = [1, 2, 3, 4, 5, 6, 7];
        a(d);
        do b.robot.push({
            image: "#rank/robothead" + d.shift() + ".png",
            nickname: c.shift()
        }); while (7 > b.robot.length);
        gameUserDataForJiexiArrayOb = null
    },
    getGemBuyGoldCount = function() {
        switch (goldShopCoefficient) {
            case 1:
                return [1E3, 4E3, 1E4, 4E4];
            case 2:
                return [2500, 1E4, 25E3, 1E5];
            case 3:
                return [1E3,
                    5E3, 1E4, 8E4
                ];
            case 4:
                return [1E4, 4E4, 1E5, 4E5];
            case 5:
                return [25E3, 1E5, 25E4, 1E6]
        }
    },
    getGemBuyGemCount = function() {
        switch (goldShopCoefficient) {
            case 1:
                return [2, 10, 20, 100];
            case 2:
                return [5, 25, 50, 250];
            case 3:
                return [10, 50, 100, 500];
            case 4:
                return [20, 100, 200, 1E3];
            case 5:
                return [50, 250, 500, 2500]
        }
    },
    getPetListShop = function() {
        return [2001, 1001, 3002, 4002, 5003, 6003]
    },
    getPetGoldListShop = function() {
        switch (petShopCoefficient) {
            case 1:
                return [1400, 2E3, 0, 0, 0, 0];
            case 2:
                return [3500, 5E3, 0, 0, 0, 0];
            case 3:
                return [7E3, 1E4, 0, 0, 0, 0];
            case 4:
                return [14E3,
                    2E4, 0, 0, 0, 0
                ];
            case 5:
                return [35E3, 5E4, 0, 0, 0, 0]
        }
    },
    getPetGemListShop = function() {
        switch (petShopCoefficient) {
            case 1:
                return [0, 0, 10, 20, 40, 80];
            case 2:
                return [0, 0, 25, 50, 100, 200];
            case 3:
                return [0, 0, 50, 100, 200, 400];
            case 4:
                return [0, 0, 100, 200, 400, 800];
            case 5:
                return [0, 0, 250, 500, 1E3, 2E3]
        }
    },
    getLuckyRollerGem = function() {
        return engine.gameData.dataDic.itemdata[1005]["gem" + itemPriceCoefficient.toString()]
    },
    getAddStep5Gem = function() {
        return [4, 10, 20, 40, 100][contiuneFunctionallity]
    },
    getFaceBookTestEntriesLeaderboardData = function() {
        var a = [];
        a.push({
            id: 464654654,
            name: "world1",
            score: 54,
            photo: "facebook_ad/weikin_png.png",
            rank: 2
        });
        a.push({
            id: 4684645,
            name: "world2",
            score: 32,
            photo: "facebook_ad/weikin_png.png",
            rank: 3
        });
        a.push({
            id: 9689464,
            name: "world3",
            score: 19,
            photo: "facebook_ad/weikin_png.png",
            rank: 4
        });
        return a
    },
    getFaceBookTestPlayerEntriesboardLeaderboardData = function() {
        var a = [];
        a.push({
            id: gameSDK.sdkPlayInfo.id,
            name: gameSDK.sdkPlayInfo.name,
            score: 33,
            photo: gameSDK.sdkPlayInfo.photo,
            rank: 1
        });
        for (var b = 0; 2 > b; b++) a.push({
            id: 7687684561 + b,
            name: "friend" +
                b,
            score: 25 + b,
            photo: "#rank/robothead" + (b % 7 + 1) + ".png",
            rank: b + 2
        });
        a.sort(function(a, b) {
            return b.score - a.score
        });
        return a
    },
    getFaceBookTestNearbyData = function() {
        var a = [];
        a.push({
            id: gameSDK.sdkPlayInfo.id,
            name: gameSDK.sdkPlayInfo.name,
            score: 77777,
            photo: gameSDK.sdkPlayInfo.photo,
            rank: 1
        });
        a.push({
            id: 7687684561,
            name: "near1",
            score: 102,
            photo: "facebook_ad/weikin_png.png",
            rank: 2
        });
        for (var b = 0; 30 > b; b++) a.push({
            id: 156415154,
            name: "near2",
            score: 79,
            photo: "facebook_ad/weikin_png.png",
            rank: 3
        });
        return a
    },
    myGameTool = {
        shuffleArray: function(a) {
            for (var b =
                    a.length, c, d; b;) d = Math.floor(Math.random() * b--), c = a[b], a[b] = a[d], a[d] = c;
            return a
        },
        cutName: function(a) {
            return 12 < a.length ? a.slice(0, 10) + ".." : a
        },
        createCatPet: function() {
            var a = createGameAnimation(res.pettime_json, "pettime_2", 24),
                b = heroData.getSelectePet();
            a.setAnchorPoint(cc.p(0.5, 0));
            a.y = -20;
            a.setScale(0.7);
            a.petObj = b;
            return a
        },
        createInviteFlyEffect: function(a, b) {
            var c = new cc.Sprite(1 == b ? "#achievement/gem1.png" : "#gameselectlayer/t2.png");
            c.setPosition(a);
            currentScene.addChild(c, 9999);
            var d = 1 == b ? cc.p(320,
                1097) : cc.p(517, 1103);
            c.runAction(cc.sequence(cc.moveTo(0.5, d), cc.removeSelf(), cc.callFunc(function() {
                2 == b && heroData.buyStrength(1);
                currentScene.refresh();
                saveHeroData()
            })))
        },
        getInviteTime: function(a, b) {
            var c = heroData.gameUserData.inviteStrOb;
            if (c[a]) {
                if (b) return c[a].send = c[a].send || 0, (new Date).getTime() - c[a].send >= 1E3 * sendStrTime && (c[a].send = 0), c[a].send;
                c[a].request = c[a].request || 0;
                (new Date).getTime() - c[a].request >= 1E3 * sendStrTime && (c[a].request = 0);
                return c[a].request
            }
            return 0
        },
        getCanInvite: function(a,
            b) {
            if (gameSDK.sdkPlayInfo.id == a) return !1;
            var c = this.getInviteTime(a, b),
                d = (new Date).getTime();
            return 0 == c || d - c >= 1E3 * sendStrTime ? !0 : !1
        },
        logEvent: function(a) {
            var b = {};
            b[a] = a;
            gameSDK.logEvent(a, 1, b)
        }
    };
var heroData, initHeroData = function() {
        heroData = new HeroData
    },
    saveHeroData = function() {
        var a = heroData.gameUserData,
            b = {};
        b.createtime = a.createtime;
        b.vitgettime = a.vitgettime;
        if (0 != b.vitgettime) {
            var c = new Date,
                d = c.getDate();
            c.setTime(1E3 * heroData.gameUserData.createtime);
            c = c.getDate();
            d == c && (b.vitgettime = 0)
        }
        b.tagetlvl = a.targetBoxLev;
        b.boxget = a.boxget;
        b.boxget = a.boxget;
        b.starboxget = void 0 != a.starBoxIndex ? a.starBoxIndex : 0;
        b.powerByView = a.powerByView;
        b.dayGift = a.dayGift;
        b.powerUsed = a.powerUsed;
        b.dayDiamond =
            a.dayDiamond;
        b.dayPet = a.dayPet;
        b.playerid = a.playerid + "";
        b.gold = a.gold;
        b.gem = a.gem;
        b.strength = a.strength;
        b.addStrengthTime = a.addStrengthTime;
        b.uesStrengthTime = a.uesStrengthTime;
        b.showTargetDate = a.showTargetDate;
        null == a.daymaxscore && (a.daymaxscore = 0);
        b.daymaxscore = a.daymaxscore;
        null == a.uesStrengthTime && (b.uesStrengthTime = 0);
        c = 0;
        for (d = a.maxLevelAchievement.length - 1; 0 <= d; d--)
            if (0 != a.maxLevelAchievement[d]) {
                c = d;
                break
            } d = a.maxLevelAchievement.concat();
        d.splice(c + 1, a.maxLevelAchievement.length - c);
        b.maxLevelAchievement =
            d;
        c = 0;
        for (d = a.maxLevelStart.length - 1; 0 <= d; d--)
            if (0 != a.maxLevelStart[d]) {
                c = d;
                break
            } d = a.maxLevelStart.concat();
        d.splice(c + 1, a.maxLevelStart.length - c);
        b.maxLevelStart = d;
        c = 0;
        for (d = a.maxLevelScore.length - 1; 0 <= d; d--)
            if (0 != a.maxLevelScore[d]) {
                c = d;
                break
            } d = a.maxLevelScore.concat();
        d.splice(c + 1, a.maxLevelScore.length - c);
        b.maxLevelScore = d;
        b.achievementCommon = a.achievementCommon;
        b.achievementStart = a.achievementStart;
        b.achievementStandardBestScore = a.achievementStandardBestScore;
        b.achievementCommonBestScore = a.achievementCommonBestScore;
        a.achievementTreeHeight || (a.achievementTreeHeight = 1);
        b.achievementTreeHeight = a.achievementTreeHeight;
        b.achievementView = a.achievementView;
        b.gameTimeBestScore = a.gameTimeBestScore;
        b.newbieGuide = a.newbieGuide;
        b.selectpetid = a.selectpetid;
        b.gamepetlist = a.gamepetlist;
        b.itemlist = a.itemcount;
        b.signDate = a.signDate;
        b.signTime = a.signTime;
        b.inviteGetGemArr = a.inviteGetGemArr;
        b.inviteStrOb = a.inviteStrOb;
        b.invitedPlayerId = a.invitedPlayerId;
        b.getInvitedArr = a.getInvitedArr;
        b.todayMissionArr = heroData.missionData.todayMissionArr;
        b.missionCountDic = heroData.missionData.missionCountDic;
        b.finishMissionArr = heroData.missionData.finishMissionArr;
        b.getMissionLastAward = a.getMissionLastAward;
        b.petid = 0;
        c = new Date;
        b.lastDate = c.getDate();
        a = {};
        a[fbSaveDataKey] = b;
        cc.warn("存档：", a);
        gameSDK.saveUserData(a)
    },
    HeroData = cc.Class.extend({
        gameUserData: null,
        petDic: null,
        gameBeginUseItem: null,
        newbieUIGuideStep: null,
        newbieGamePlayGuideStep: null,
        gameFriendData: null,
        gameWorldData: null,
        gameMailData: null,
        targetData: null,
        missionData: null,
        fightPerson: null,
        initialize: function() {
            this.newbieUIGuideStep = 2;
            this.newbieGamePlayGuideStep = 1;
            this.petDic = {};
            for (var a = this.gameUserData.gamepetlist.split("|"), b = 0; b < a.length; b++) {
                var c = a[b].split("*"),
                    d = new PetData;
                d.id = parseInt(c[0]);
                d.petid = parseInt(c[1]);
                d.petlevel = parseInt(c[2]);
                d.petlevelnum = parseInt(c[3]);
                this.petDic[d.id] = d
            }
            this.gameBeginUseItem = [];
            this.gameFriendData = new GameFriendData;
            this.gameWorldData = new GameWorldRankData;
            this.gameMailData = new GameMailData;
            this.targetData = new GameTargetData
        },
        readyMissionData: function() {
            this.missionData = new MissionData
        },
        getStrength: function() {
            debugtest.veryStrength && 10 > this.gameUserData.strength && (this.gameUserData.strength = 300);
            return this.gameUserData.strength
        },
        buyStrength: function(a) {
            this.gameUserData.strength += a
        },
        useStrength: function() {
            isExistStrength && !1 == this.isUnlimiteLives() && 1 <= this.gameUserData.strength && !endlessStrengthGet && (this.gameUserData.strength -= 1, heroData.gameUserData.powerUsed++, saveHeroData())
        },
        isUnlimiteLives: function() {
            //return (new Date).getTime() > this.gameUserData.uesStrengthTime ? !1 : !0;
            return !0;
        },
        addUesStrengthTime: function(a) {
            var b = (new Date).getTime();
            this.gameUserData.uesStrengthTime = b < this.gameUserData.uesStrengthTime ? this.gameUserData.uesStrengthTime + a : b + a
        },
        getPayLock: function() {
            return 0 == this.gameUserData.paylock ? !0 : !1
        },
        setPayLock: function() {
            this.gameUserData.paylock = 1
        },
        getUesStrengthTime: function() {
            return this.gameUserData.uesStrengthTime
        },
        addStrength: function(a) {
            this.gameUserData.strength < iniStrengthCount && (this.gameUserData.strength + a > iniStrengthCount ?
                (a = iniStrengthCount - this.gameUserData.strength, 0 < a && (this.gameUserData.strength += a)) : this.gameUserData.strength += a)
        },
        getAddStrengthTime: function() {
            return this.gameUserData.addStrengthTime
        },
        addUpateStrengthByTime: function(a) {
            if (heroData.getStrength() >= iniStrengthCount) return this.gameUserData.addStrengthTime = a, !1;
            if (0 != this.gameUserData.addStrengthTime && 0 < a - this.gameUserData.addStrengthTime) {
                var b = a - this.gameUserData.addStrengthTime;
                if (1 <= b / addStrengthNeedTime) return this.addStrength(Math.floor(b /
                    addStrengthNeedTime)), this.gameUserData.addStrengthTime = a, saveHeroData(), !0
            } else return this.gameUserData.addStrengthTime = a, saveHeroData(), !0;
            return !1
        },
        resetNewbieGamePlayGuideStep: function() {
            this.newbieGamePlayGuideStep = 1
        },
        getNewbieGuide: function() {
            return this.gameUserData.newbieGuide
        },
        runGamePlayNewbieGuide: function() {
            this.newbieGamePlayGuideStep++
        },
        runUINewbieGuide: function(a) {
            switch (this.gameUserData.newbieGuide) {
                case 1:
                    a == newbieGuideLayerGameSelectType && (this.newbieUIGuideStep = 2), a == newbieGuideLayerGameLevelSceneType &&
                        (this.newbieUIGuideStep = 3), a == newbieLevelDetailsLayer1Type && (this.newbieUIGuideStep = 4), a == newbieSelectUseItemLayer1Type && (this.newbieUIGuideStep = 5), a == newbieCommonLevelPlayGameType && (this.gameUserData.newbieGuide = 2, this.newbieUIGuideStep = 1, saveHeroData())
            }
            return this.gameUserData.newbieGuide
        },
        isSendPet: function() {
            return null != currentScene.newbieGuideLayer ? !1 : !0
        },
        sendPet: function() {
            return this.addNewPetByID(sendPetID)
        },
        getPetCount: function() {
            return Object.getOwnPropertyNames(this.petDic).length
        },
        updateGold: function(a) {
            this.gameUserData.gold +=
                a
        },
        updateGem: function(a) {
            0 < a && heroData.missionData.recordData(10, a);
            return this.gameUserData.gem += a
        },
        getGold: function() {
            return this.gameUserData.gold
        },
        getGem: function() {
            return this.gameUserData.gem
        },
        useGem: function(a) {
            if (this.gameUserData.gem < a) return addBuyGemUI(), showAlterInfo(engine.gameData.dataDic.language[129].content), !1;
            this.gameUserData.gem -= a;
            saveHeroData();
            return !0
        },
        addtem: function(a, b) {
            null == b && (b = 1);
            this.gameUserData.itemcount[a - 999] += b
        },
        setLevelStart: function(a, b) {
            this.gameUserData.maxLevelStart[a - 1] < b && (this.gameUserData.maxLevelStart[a - 1] = b)
        },
        getLevelStart: function() {
            return this.gameUserData.maxLevelStart
        },
        getMaxOpenLevel: function() {
            for (var a = 1, b = 0; b < maxLevel; b++)
                if (0 != this.gameUserData.maxLevelStart[b]) a = b + 2;
                else return a;
            a > maxLevel && (a = maxLevel);
            return a
        },
        setAchievementCount: function(a, b) {
            this.gameUserData.maxLevelAchievement[a - 1] < b && (this.gameUserData.maxLevelAchievement[a - 1] = b)
        },
        getAchievementCount: function(a) {
            return this.gameUserData.maxLevelAchievement[a - 1]
        },
        getMaxLevelStart: function(a) {
            return this.gameUserData.maxLevelStart[a - 1]
        },
        getMaxLevelScore: function(a) {
            return this.gameUserData.maxLevelScore[a - 1]
        },
        setLevelMaxScore: function(a, b) {
            this.gameUserData.maxLevelScore[a - 1] < b && (this.gameUserData.maxLevelScore[a - 1] = b)
        },
        getItemCount: function(a) {
            a = parseInt(a) - 999;
            a = this.gameUserData.itemcount[a];
            debugtest.muchItem && (a = 99);
            return a
        },
        getSelectePet: function() {
            return this.petDic[this.gameUserData.selectpetid]
        },
        upLevelByPetID: function(a, b) {
            this.petDic[a].upLevelByExperience(this.petDic[b].getPetExperience());
            this.petDic[b] = null;
            delete this.petDic[b]
        },
        addNewPetByID: function(a) {
            var b = new PetData;
            b.id = getPetNewID();
            b.petid = a;
            b.petlevel = 1;
            b.petlevelnum = 0;
            return this.petDic[b.id] = b
        },
        buyItem: function(a) {
            var b = engine.gameData.dataDic.itemdata[a]["gem" + itemPriceCoefficient.toString()];
            return this.getGem() >= b ? (this.updateGem(-b), this.addtem(a), saveHeroData(), !0) : !1
        },
        userItem: function(a) {
            return 1 <= this.gameUserData.itemcount[a - 999] ? (this.gameUserData.itemcount[a - 999] -= 1, saveHeroData(), !0) : !1
        },
        buyPetByType: function(a, b, c) {
            return this.getGold() >= b && this.getGem() >=
                c ? (this.updateGold(-b), this.updateGem(-c), a = buyPet(a), a = this.addNewPetByID(a), saveHeroData(), a) : null
        },
        buyStep5: function() {
            var a = getAddStep5Gem();
            return this.getGem() >= a ? (this.updateGem(-a), saveHeroData(), !0) : !1
        },
        buyLuckyroller: function() {
            var a = getLuckyRollerGem();
            return this.getGem() >= a ? (this.updateGem(-a), this.addtem(1005), saveHeroData(), !0) : !1
        },
        selectPetByID: function(a) {
            2 == this.gameUserData.newbieGuide && 7 == this.newbieUIGuideStep ? this.gameUserData.selectpetid = a : (this.gameUserData.selectpetid = a, saveHeroData())
        },
        upPetByPetList: function(a) {
            for (var b = 0, c = 0; c < a.length; c++) {
                var d = this.petDic[a[c]],
                    b = b + d.getPetExperience();
                this.petDic[d.id] = null;
                delete this.petDic[d.id]
            }
            this.getSelectePet().upLevelByExperience(b);
            saveHeroData()
        },
        getAchievementCommonCount: function() {
            for (var a = 0, b = 0; b < this.gameUserData.maxLevelAchievement.length; b++) a += this.gameUserData.maxLevelAchievement[b];
            return a
        },
        getLevelStartCount: function() {
            for (var a = 0, b = 0; b < this.gameUserData.maxLevelStart.length; b++) a += this.gameUserData.maxLevelStart[b];
            return a
        },
        getCommonBestScore: function() {
            for (var a = 0, b = 0; b < this.gameUserData.maxLevelScore.length; b++) this.gameUserData.maxLevelScore[b] > a && (a = this.gameUserData.maxLevelScore[b]);
            return a
        },
        getTreeHight: function() {
            return this.getMaxOpenLevel() * treeHeightMultiple
        },
        getShowAchievementOrder: function() {
            for (var a = [], b = 0; b < this.gameUserData.achievementView.length; b++) a.push(this.gameUserData.achievementView[b]);
            5 > a.length && (a = [1, 2, 3, 4, 5]);
            return a
        },
        getAchievementByType: function(a) {
            var b = 0;
            switch (a) {
                case achievementCommon:
                    b =
                        this.gameUserData.achievementCommon;
                    break;
                case achievementStart:
                    b = this.gameUserData.achievementStart;
                    break;
                case achievementStandardBestScore:
                    b = this.gameUserData.achievementStandardBestScore;
                    break;
                case achievementCommonBestScore:
                    b = this.gameUserData.achievementCommonBestScore;
                    break;
                case achievementTreeHeight:
                    b = this.gameUserData.achievementTreeHeight
            }
            return getAchievementData(a, b)
        },
        getIsOKAchievementByInfo: function(a, b, c) {
            b = getAchievementData(a, b);
            if (null == b) return !1;
            switch (a) {
                case achievementCommon:
                    if (c.achievementCommonCount <
                        b.count) return !1;
                    break;
                case achievementStart:
                    if (c.levelStartCount < b.count) return !1;
                    break;
                case achievementStandardBestScore:
                    if (c.standardBestScore < b.count) return !1;
                    break;
                case achievementCommonBestScore:
                    if (c.commonBestScore < b.count) return !1;
                    break;
                case achievementTreeHeight:
                    if (c.treeHeight < b.count) return !1
            }
            return !0
        },
        setGameTimeBestScore: function(a) {
            a > this.gameUserData.gameTimeBestScore && (this.gameUserData.gameTimeBestScore = a)
        },
        getGameTimeBestScore: function(a) {
            return this.gameUserData.gameTimeBestScore
        },
        receiveAchievementByInfo: function(a, b, c) {
            var d = 0;
            switch (c) {
                case achievementCommon:
                    d = this.gameUserData.achievementCommon;
                    break;
                case achievementStart:
                    d = this.gameUserData.achievementStart;
                    break;
                case achievementStandardBestScore:
                    d = this.gameUserData.achievementStandardBestScore;
                    break;
                case achievementCommonBestScore:
                    d = this.gameUserData.achievementCommonBestScore;
                    break;
                case achievementTreeHeight:
                    d = this.gameUserData.achievementTreeHeight
            }
            if (this.getIsOKAchievementByInfo(c, d, b)) {
                b = getAchievementData(c, d);
                a && (myGameTool.logEvent("doubleAchievementAward"), b.gem += b.gem);
                this.updateGem(b.gem);
                a = this.gameUserData.achievementView;
                switch (c) {
                    case achievementCommon:
                        this.gameUserData.achievementCommon++;
                        a = a.replace("1", "");
                        a += "1";
                        break;
                    case achievementStart:
                        this.gameUserData.achievementStart++;
                        a = a.replace("2", "");
                        a += "2";
                        break;
                    case achievementStandardBestScore:
                        this.gameUserData.achievementStandardBestScore++;
                        a = a.replace("3", "");
                        a += "3";
                        break;
                    case achievementCommonBestScore:
                        this.gameUserData.achievementCommonBestScore++;
                        a = a.replace("4", "");
                        a += "4";
                        break;
                    case achievementTreeHeight:
                        this.gameUserData.achievementTreeHeight++, a = a.replace("5", ""), a += "5"
                }
                this.gameUserData.achievementView = a
            }
            saveHeroData()
        },
        buyGift: function(a, b) {
            a.diamond && 0 < a.diamond && this.updateGem(a.diamond);
            if (a.gold)
                for (var c = 0; c < a.gold.length; c++) this.updateGold(a.gold[c]);
            if (a.pet)
                for (c = 0; c < a.pet.length; c++) this.addNewPetByID(a.pet[c]);
            if (a.item)
                for (var c = a.item.split("|"), d = 0; d < c.length; d += 2) this.addtem(c[d], ~~c[d + 1]);
            a.randompet && 0 < a.randompet.length &&
                (c = a.randompet.split("|"), d = parseInt(100 * Math.random()) % (c.length - 1), this.addNewPetByID(parseInt(c[d])));
            saveHeroData();
            return !0
        },
        addCurrency: function(a) {
            this.updateGem(a);
            currentScene.refresh()
        }
    });
var res = {
        csi1_plist: "res/imglist/csi1.plist",
        csi1_png: "res/imglist/csi1.png",
        csi2_plist: "res/imglist/csi2.plist",
        csi2_png: "res/imglist/csi2.png",
        gameplayeffect1_plist: "res/imglist/gameplayeffect1.plist",
        gameplayeffect1_png: "res/imglist/gameplayeffect1.png",
        gameplayeffect2_plist: "res/imglist/gameplayeffect2.plist",
        gameplayeffect2_png: "res/imglist/gameplayeffect2.png",
        gameplayeffect3_plist: "res/imglist/gameplayeffect3.plist",
        gameplayeffect3_png: "res/imglist/gameplayeffect3.png",
        gameplayeffect4_plist: "res/imglist/gameplayeffect4.plist",
        gameplayeffect4_png: "res/imglist/gameplayeffect4.png",
        gameplaylayer1_plist: "res/imglist/gameplaylayer1.plist",
        gameplaylayer1_png: "res/imglist/gameplaylayer1.png",
        gameplaylayer2_plist: "res/imglist/gameplaylayer2.plist",
        gameplaylayer2_png: "res/imglist/gameplaylayer2.png",
        gridskinplist1_plist: "res/imglist/gridskin1.plist",
        gridskinplist1_png: "res/imglist/gridskin1.png",
        gridskinplist2_plist: "res/imglist/gridskin2.plist",
        gridskinplist2_png: "res/imglist/gridskin2.png",
        gridskinplist3_plist: "res/imglist/gridskin3.plist",
        gridskinplist3_png: "res/imglist/gridskin3.png",
        petskinplist1_plist: "res/imglist/petskinplist1.plist",
        petskinplist1_png: "res/imglist/petskinplist1.png",
        publicimg1_plist: "res/imglist/publicimg1.plist",
        publicimg1_png: "res/imglist/publicimg1.png",
        scaleplist_plist: "res/imglist/scaleplist.plist",
        scaleplist_png: "res/imglist/scaleplist.png",
        gameplayeffect_json: "res/pngdata/gameplayeffect/gameplayeffect.json",
        uieffect_json: "res/pngdata/uieffect/uieffect.json",
        noviceeffect_json: "res/pngdata/noviceeffect/noviceeffect.json",
        awardbox_json: "res/pngdata/awardbox/awardbox.json",
        pet1_json: "res/pngdata/pet1/pet1.json",
        pettime_json: "res/pngdata/pettime/pettime.json",
        leveldata: "res/data/leveldata.json",
        itemdata: "res/data/itemdata.json",
        achievementdata: "res/data/achievementdata.json",
        noviceguide: "res/data/noviceguide.json",
        gameplaytimelayer: "res/gameplaytimelayer.json",
        progressmiddle_png: "res/gameplaylayer/progressmiddle.png",
        goldgemlayer: "res/goldgemlayer.json",
        pauselayer: "res/pauselayer.json",
        setlayer: "res/setlayer.json",
        commonlevelwinlayer: "res/commonlevelwinlayer.json",
        commonlevelloselayer: "res/commonlevelloselayer.json",
        gametimeendlayer: "res/gametimeendlayer.json",
        victoryconditionlayer: "res/victoryconditionlayer.json",
        selectuseitemlayer: "res/selectuseitemlayer.json",
        gamebuyitemlayer: "res/gamebuyitemlayer.json",
        paymentinfolayer: "res/paymentinfolayer.json",
        addsteplayer_plist: "res/addsteplayer.json",
        leveldetailslayer: "res/leveldetailslayer.json",
        strengthlayer: "res/strengthlayer.json",
        diamondayer: "res/diamondayer.json",
        gameplaylayer: "res/gameplaylayer.json",
        parachuteawardlayer: "res/parachuteawardlayer.json",
        upRankLayer: "res/upranklayer.json",
        gameEndFlyEffect1: "res/pngdata/gameendflyeffect/remainsteptrailing1.plist",
        gameEndFlyEffect2: "res/pngdata/gameendflyeffect/remainsteptrailing2.plist",
        detailInviteFriendPanel: "res/detailInviteFriendPanel.json",
        receive_other_send_str_layer: "res/receive_other_send_str_layer.json"
    },
    res_open_load = {
        achievementlayer: "res/achievementlayer.json",
        giftlayer: "res/giftlayer.json"
    },
    first_no_need_load = {
        gridskinplist5_plist: "res/imglist/gridskin5.plist",
        gridskinplist5_png: "res/imglist/gridskin5.png",
        gridskinplist6_plist: "res/imglist/gridskin6.plist",
        gridskinplist6_png: "res/imglist/gridskin6.png",
        gridskinplist7_plist: "res/imglist/gridskin7.plist",
        gridskinplist7_png: "res/imglist/gridskin7.png",
        gridskinplist8_plist: "res/imglist/gridskin8.plist",
        gridskinplist8_png: "res/imglist/gridskin8.png"
    },
    soundres = {
        gameplaybg: "res/sound/gameplaybg.mp3",
        mainbg: "res/sound/mainbg.mp3",
        bottonsound1: "res/sound/bottonsound1.mp3",
        gridword: "res/sound/gridword.mp3",
        gridice: "res/sound/gridice.mp3",
        griddespose: "res/sound/griddespose.mp3",
        gridspecial: "res/sound/gridspecial.mp3",
        gridwaterup: "res/sound/gridwaterup.mp3",
        gridmove: "res/sound/gridmove.mp3",
        gamewin: "res/sound/gamewin.mp3",
        gamelose: "res/sound/gamelose.mp3",
        gametimeout: "res/sound/gametimeout.mp3",
        incubationpet: "res/sound/incubationpet.mp3",
        getincubationpet: "res/sound/getincubationpet.mp3",
        petskill: "res/sound/petskill.mp3",
        petup: "res/sound/petup.mp3",
        dice: "res/sound/dice.mp3",
        buyitem: "res/sound/buyitem.mp3",
        undoitem: "res/sound/undoitem.mp3",
        showtime: "res/sound/showtime.mp3",
        gridsuction: "res/sound/gridsuction.mp3",
        begingame: "res/sound/begingame.mp3",
        step5: "res/sound/step5.mp3",
        step10: "res/sound/step10.mp3",
        cool: "res/sound/cool.mp3",
        good: "res/sound/good.mp3",
        great: "res/sound/great.mp3"
    },
    g_resources = [],
    initRes = function() {
        for (var a in res) g_resources.push(res[a])
    };
dataPathDic.leveldata = "res/data/leveldata.json";
dataPathDic.itemdata = "res/data/itemdata.json";
dataPathDic.achievementdata = "res/data/achievementdata.json";
dataPathDic.noviceguide = "res/data/noviceguide.json";
var PurityLoadScene = LoadScene.extend({
    setLoadStyle: function() {
        var a = new cc.Sprite("res/loadbg.png");
        a.x = 320;
        a.y = 700;
        this.addChild(a);
        this.label = new cc.LabelTTF("", defaultTxt, 24);
        this.label.x = 320;
        this.label.y = 620;
        this.label.setColor(cc.color(106, 43, 42));
        this.addChild(this.label, 100);
        a = new cc.LabelTTF("Loading takes a little longer for the 1st time.\n                        Please be patient.", defaultTxt, 24);
        a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        a.setPosition(320, 140);
        a.setColor(cc.color(255,
            255, 255));
        a.enableStroke(cc.color(0, 0, 0), 2);
        this.addChild(a, 100)
    },
    showLoad: function() {
        var a = this.computationsLoadProgress();
        this.setLoadPercent(a)
    },
    setLoadPercent: function(a) {
        null != this.label && this.label.setString("Loading..." + a + "%")
    }
});
var FacebookLoadScene = LoadScene.extend({
    showLoad: function() {
        var a = this.computationsLoadProgress();
        this.setLoadPercent(a)
    },
    setLoadPercent: function(a) {
        gameSDK.setLoadingProgress(a)
    }
});
var rewardedVideoID1 = "147579912728683_183457519140922",
    rewardedVideoID2 = "147579912728683_183456899140984",
    rewardedVideoID3 = "147579912728683_183456999140974",
    rewardedVideoID4 = "147579912728683_183457079140966",
    rewardedVideoID5 = "147579912728683_183974975755843",
    rewardedVideoID6 = "147579912728683_183975129089161",
    adMaskLayerId = 10001,
    setFriendsList = function(a) {},
    getShareData = function() {
        return {}
    },
    getSendFriendData = function() {
        return {
            text: "Come and play together",
            template: "play_turn"
        }
    },
    createTestPlayer = function() {
        var a =
            GetRequest();
        null != a.serverUrl && (serverUrl = a.serverUrl);
        !0 == isNaN(a.playerid) || null == a.playerid ? gameSDK.sdkPlayInfo.id = "71234" : gameSDK.sdkPlayInfo.id = a.playerid;
        gameSDK.sdkPlayInfo.name = null == a.pname ? "doubi" + gameSDK.sdkPlayInfo.id : a.pname;
        !0 == isNaN(a.sex) || null == a.sex ? gameSDK.sdkPlayInfo.sex = 0 : gameSDK.sdkPlayInfo.sex = parseInt(a.sex);
        gameSDK.sdkPlayInfo.photo = "https://fb-s-d-a.akamaihd.net/h-ak-fbx/v/t1.0-1/p320x320/24131500_889798657851941_1372837406836141609_n.jpg?oh=ed5b223b3690d182d3fa533108c5ac93&oe=5AB4557C&__gda__=1523177196_1b37aa2716ae1692cef393d4f1b796b8";
        heroData.playerid = gameSDK.sdkPlayInfo.id;
        heroData.pname = gameSDK.sdkPlayInfo.name;
        heroData.image = gameSDK.sdkPlayInfo.photo
    },
    upateFriendData = function() {},
    addLoadingCircle = function() {
        var a = null,
            a = new ADMaskLayer;
        a.initialize({
            isCanClick: !0
        });
        a.setTag(adMaskLayerId);
        null != currentScene && currentScene.addChild(a, maxZindex)
    },
    removeLoadingCircle = function() {
        null != currentScene && null != currentScene.getChildByTag(adMaskLayerId) && currentScene.getChildByTag(adMaskLayerId).removeFromParent()
    },
    createGameSureTitleWindow =
    function() {
        var a = new PlayADFailLayer;
        currentScene.addChild(a, maxZindex)
    },
    appointFaceBookFriendData = function() {
        return {}
    },
    ADMaskLayer = cc.Layer.extend({
        circle: null,
        ctor: function() {
            this._super()
        },
        initialize: function(a) {
            !0 == a.isCanClick && (a = new cc.DrawNode, a.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120)), this.addChild(a, -1), engine.gameEvent.createMouseDown(this, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height)));
            a = new cc.Sprite("res/facebook_ad/circle.png");
            a.setAnchorPoint(0.5, 0.5);
            a.setPosition(cc.winSize.width >> 1, 667);
            this.addChild(a);
            var b = cc.rotateBy(2, 360);
            b.repeatForever();
            a.runAction(b);
            this.circle = a
        },
        removeGameLayer: function() {
            this.circle.stopAllActions();
            this.removeAllChildrenWithCleanup(!0);
            this.removeFromParent()
        }
    }),
    PlayADFailLayer = cc.Layer.extend({
        mainUI: null,
        ctor: function(a) {
            this._super();
            var b = new cc.DrawNode;
            b.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            this.addChild(b, -1);
            engine.gameEvent.createMouseDown(this,
                function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
            this.mainUI = engine.gameCocosStudio.loadCSS(res.paymentinfolayer, !1);
            this.mainUI.txtContent_df.setString(engine.gameData.dataDic.language[a || 227].content);
            engine.gameEvent.createMouseUp(this.mainUI.btnconfirm, this.close.bind(this), buttonScalingType);
            this.addChild(this.mainUI)
        },
        close: function(a, b) {
            this.removeFromParent()
        }
    }),
    InviteSameErrorLayer = cc.Layer.extend({
        mainUI: null,
        ctor: function() {
            this._super();
            var a = new cc.DrawNode;
            a.drawRect(cc.p(0,
                0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            this.addChild(a, -1);
            engine.gameEvent.createMouseDown(this, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
            this.mainUI = engine.gameCocosStudio.loadCSS(res.paymentinfolayer, !1);
            this.mainUI.txtContent_df.setString("WHOA THERE! LOOKS LIKE YOU ALREADY MESSAGED THIS FRIEND.\n\nTRY AGAIN IN LATER");
            engine.gameEvent.createMouseUp(this.mainUI.btnconfirm, this.close.bind(this), buttonScalingType);
            this.addChild(this.mainUI)
        },
        close: function(a, b) {
            this.removeFromParent()
        }
    }),
    getFriendsSDKServerUrl = function() {
    },
    getGameLogServerUrl = function() {
    };
var gameSDK, GameSDK = cc.Class.extend({
        isFirstStartGame: null,
        sdkPlayInfo: null,
        nearbyEntriesboard: null,
        ctor: function() {
            this.sdkPlayInfo = {};
            this.sdkPlayInfo.friendsList = {};
            this.nearbyEntriesboard = {};
            this.isFirstStartGame = !0
        },
        runSDK: function() {},
        getPlayerInfo: function() {},
        startGame: function() {},
        getLoadScene: function() {
            return PurityLoadScene
        },
        getfriendsList: function() {},
        shareGame: function() {},
        setHeroData: function(a) {}
    }),
    initGameSDK = function() {
        switch (sdkName) {
            case "FaceBook":
                gameSDK = new FaceBookSDK;
                break;
            case "FaceBookTest":
                gameSDK = new FaceBookSDK;
                break;
            default:
                console.log("not find init sdk")
        }
    };
var FaceBookSDK = GameSDK.extend({
    entriesLeaderboard: null,
    playerEntriesboard: null,
    ctor: function() {
        this._super();
        this.entriesLeaderboard = {};
        this.playerEntriesboard = {}
    },
    runSDK: function(a) {
        cc.log("FaceBookSDK版本号20180821");
        switch (sdkName) {
            case "FaceBookTest":
                createTestPlayer();
                a();
                break;
            case "FaceBook":
                var b = this;
                cc.log("获取用户登录信息，调用FBInstant.initializeAsync方法");
                FBInstant.initializeAsync().then(function() {
                    b.sdkPlayInfo.id = FBInstant.player.getID();
                    cc.log("拉取到用户登录信息，FBInstant.initializeAsync回调。玩家 playerid=", b.sdkPlayInfo.id);
                    a()
                }).catch(function(a) {
                    cc.warn("error:", a)
                })
        }
    },
    startGame: function(a) {
        switch (sdkName) {
            case "FaceBookTest":
                !0 == this.isFirstStartGame && (this.isFirstStartGame = !1, null != a && a());
                break;
            case "FaceBook":
                var b = this;
                cc.log("获取游戏isFirstStartGame属性，如果true则调用FBInstant.startGameAsync方法" + this.isFirstStartGame);
                !0 == this.isFirstStartGame && (this.isFirstStartGame = !1, FBInstant.startGameAsync().then(function() {
                    b.sdkPlayInfo.name = FBInstant.player.getName();
                    b.sdkPlayInfo.photo = FBInstant.player.getPhoto();
                    cc.log("FBInstant.startGameAsync回调。玩家 name=" + b.sdkPlayInfo.name + "photo=" + b.sdkPlayInfo.photo);
                    b.sdkPlayInfo.entryPointData = FBInstant.getEntryPointData();
                    null != a && a()
                }))
        }
    },
    getFirstLoadScene: function() {
        switch (sdkName) {
            case "FaceBookTest":
                return LoadScene;
            case "FaceBook":
                return FacebookLoadScene
        }
    },
    getFriendsList: function(a) {
        switch (sdkName) {
            case "FaceBookTest":
                setFriendsList(this.sdkPlayInfo);
                null != a && a();
                break;
            case "FaceBook":
                var b = this;
                cc.log(" 获取好友列表, 调用FBInstant.player.getConnectedPlayersAsync方法。");
                FBInstant.player.getConnectedPlayersAsync().then(function(c) {
                    for (var d = 0; d < c.length; d++) {
                        var e = c[d],
                            f = {};
                        f.name = e.getName();
                        f.id = e.getID();
                        f.photo = e.getPhoto();
                        b.sdkPlayInfo.friendsList[f.id] = f;
                        cc.log(" 获取玩家好友列表:名字" +
                            f.name + "玩家id:" + f.id + " 玩家头像：" + f.photo)
                    }
                    upateFriendData();
                    cc.log("FBInstant.player.getConnectedPlayersAsync回调处理完毕。");
                    null != a && a()
                })
        }
    },
    upateFriendsInfo: function(a) {
        var b = null;
        null == a.id && cc.log("friendsInfo.id is null");
        null == a.photo && cc.log("friendsInfo.photo is null");
        null == a.name && cc.log("friendsInfo.name is null");
        var c = this.sdkPlayInfo.friendsList[a.id];
        if (null != c && (c.photo != a.photo || c.name != a.name) && null != c.name && null != c.photo) {
            b = {};
            b.id = c.id;
            b.name = c.name;
            b.photo = c.photo;
            c = {};
            c.playerid = b.id.toString();
            c.imageurl = b.photo;
            c.name = b.name;
            a = getFriendsSDKServerUrl();
            c = JSON.stringify(c);
            cc.log("发送给服务信息90002：" + c);
            var d = cc.loader.getXMLHttpRequest();
            d.open("POST", a);
            d.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
            d.send(c)
        }
        return b
    },
    setLoadingProgress: function(a) {
        switch (sdkName) {
            case "FaceBook":
                FBInstant.setLoadingProgress(a)
        }
    },
    sendFaceBookFriend: function(a, b) {
        var c = this;
        switch (sdkName) {
            case "FaceBookTest":
                cc.log("走邀请好友");
                null != a && a(265265352);
                break;
            case "FaceBook":
                FBInstant.context.chooseAsync({
                    filters: []
                }).then(function() {
                    cc.log("邀请玩家id：------------------------" + FBInstant.context.getID());
                    var d = FBInstant.context.getID();
                    a && -1 != heroData.gameUserData.invitedPlayerId.indexOf(d) ? (d = new InviteSameErrorLayer, currentScene.addChild(d, maxZindex - 9E3), b && b()) : (heroData.gameUserData.invitedPlayerId.push(d), c.getBase64Image({
                        pngArr: [{
                            url: "res/invitefriends.jpg",
                            posX: 0,
                            posY: 0,
                            imgWidth: 750,
                            imgHeight: 440
                        }],
                        fontData: [],
                        canvasWidth: 750,
                        canvasHeight: 440
                    }), null != a && (cc.log("查找好友回调---------------------------------5"), a(FBInstant.context.getID())))
                }).catch(function(c) {
                    a && "SAME_CONTEXT" == c.code && (c = new InviteSameErrorLayer, currentScene.addChild(c, maxZindex - 9E3));
                    b && b()
                })
        }
    },
    getBase64Image: function(a) {
        this.loadPng(a, 0, [])
    },
    loadPng: function(a, b, c) {
        var d = this;
        if (a.pngArr.length <= b) {
            var e = document.createElement("canvas");
            e.width = a.canvasWidth;
            e.height = a.canvasHeight;
            for (var f = 0; f <
                c.length; f++) {
                var g = c[f],
                    h = e.getContext("2d");
                h.drawImage(g, a.pngArr[f].posX, a.pngArr[f].posY, g.width, g.height)
            }
            if (null != a.fontData)
                for (f = 0; f < a.fontData.length; f++) g = a.fontData[f], h.font = g.font, h.lineWidth = 5, h.fillStyle = g.fillStyle, h.textAlign = g.textAlign, h.strokeStyle = "#120500", h.strokeText("" + g.des, g.posX, g.posY), h.fillText("" + g.des, g.posX, g.posY);
            e = e.toDataURL("image/png");
            switch (sdkName) {
                case "FaceBookTest":
                    var k = new Image;
                    k.crossOrigin = "anonymous";
                    k.src = e;
                    k.onload = function() {
                        var a = new cc.Sprite(k);
                        currentScene.addChild(a);
                        a.x = 375;
                        a.y = 667
                    };
                    break;
                case "FaceBook":
                    cc.log("查找好友---------------------------------发送 FBInstant.updateAsync"), FBInstant.updateAsync({
                        action: "CUSTOM",
                        cta: "Play",
                        template: "play_turn",
                        image: e,
                        text: "Your friends is challenging you",
                        data: {},
                        strategy: "LAST",
                        notification: "PUSH"
                    }).then(function() {})
            }
        } else {
            var m = new Image;
            m.crossOrigin = "anonymous";
            m.src = a.pngArr[b].url;
            m.onload = function() {
                m.width = a.pngArr[b].imgWidth;
                m.height = a.pngArr[b].imgHeight;
                c.push(m);
                b++;
                d.loadPng(a, b, c)
            }
        }
    },
    shareGame: function(a, b) {
        switch (sdkName) {
            case "FaceBookTest":
                null != a && a();
                break;
            case "FaceBook":
                var c = getShareData();
                null == b && (b = {});
                null == b.text && (b.text = c.text);
                c = new GameCustomImage;
                c.initialize(b);
                c.drawCompleteFun = function(c) {
                    var e = new Image;
                    e.crossOrigin = "anonymous";
                    e.src = c;
                    e.onload = function() {
                        FBInstant.shareAsync({
                            intent: "SHARE",
                            image: c,
                            text: b.text,
                            data: {
                                myReplayData: "..."
                            }
                        }).then(function() {
                            null != a && a()
                        })
                    }
                }
        }
    },
    showRewardVideoAd: function(a, b) {
        switch (sdkName) {
            case "FaceBookTest":
                null !=
                    b && b();
                break;
            case "FaceBook":
                var c = null;
                addLoadingCircle();
                FBInstant.getRewardedVideoAsync(a).then(function(a) {
                    cc.log("RewardedVideo开始加载");
                    c = a;
                    return c.loadAsync()
                }).then(function() {
                    cc.log("RewardedVideo加载成功回调");
                    return c.showAsync()
                }).then(function() {
                    cc.log("RewardedVideo广告显示成功");
                    removeLoadingCircle();
                    null != b && b()
                }).catch(function() {
                    removeLoadingCircle();
                    createGameSureTitleWindow();
                    cc.log("RewardedVideo广告显示失败")
                })
        }
    },
    appointFaceBookFriend: function(a, b) {
        switch (sdkName) {
            case "FaceBookTest":
                null != a && a();
                null == b && appointFaceBookFriendData();
                var c = new GameCustomImage;
                c.initialize(b);
                c.drawCompleteFun = function(a) {
                    var b = new Image;
                    b.crossOrigin = "anonymous";
                    b.src = a;
                    b.onload = function() {
                        var a = new cc.Sprite(b);
                        currentScene.addChild(a, 999999);
                        a.x = cc.winSize.width / 2;
                        a.y = cc.winSize.height / 2;
                        engine.gameEvent.createMouseUp(a, function() {
                            a.removeFromParent()
                        }, buttonScalingType)
                    }
                };
                break;
            case "FaceBook":
                cc.log("调用appointFaceBookFriend方法,邀请指定玩家id：" +
                    b.playerid), addLoadingCircle(), FBInstant.context.createAsync(b.playerid).then(function() {
                    removeLoadingCircle();
                    cc.log("appointFaceBookFriend方法回调");
                    null == b.data && (b.data = {});
                    var c = new GameCustomImage;
                    c.initialize(b);
                    c.drawCompleteFun = function(c) {
                        cc.log("邀请指定玩家图片加载完成，调用FBInstant.updateAsync方法");
                        FBInstant.updateAsync({
                            action: "CUSTOM",
                            cta: "Play",
                            template: b.updateAsyncTemplate,
                            image: c,
                            text: b.updateAsyncText,
                            data: b.data,
                            strategy: "LAST",
                            notification: "PUSH"
                        }).then(function() {});
                        null != a && (cc.log("指定好友邀请成功！"), a())
                    }
                }).catch(function(b) {
                    removeLoadingCircle();
                    "SAME_CONTEXT" == b.code && null != a && (cc.log("已经邀请过，直接进对战"), a());
                    cancelfun && cancelfun()
                })
        }
    },
    getUserData: function(a, b) {
        switch (sdkName) {
            case "FaceBookTest":
                var c = JSON.parse(cc.sys.localStorage.getItem(faceBookDataKey + this.sdkPlayInfo.id));
                cc.log("取到缓存数据:");
                cc.log(c);
                b(c);
                break;
            case "FaceBook":
                cc.log("尝试获取缓存数据:");
                var d = this;
                this.logEvent("getDataAsync", 1, {
                    getDataAsync: "getDataAsync"
                });
                FBInstant.player.getDataAsync(a).then(function(a) {
                    d.logEvent("getDataAsyncOK", 1, {
                        getDataAsyncOK: "getDataAsyncOK"
                    });
                    cc.log("取到FB的数据:");
                    cc.log(a);
                    var c = 0,
                        g;
                    for (g in a) null != a[g] && c++;
                    0 == c ? b(null) : b(a)
                }).catch(function(a) {
                    cc.log("获取数据失败。");
                    cc.log(a)
                })
        }
    },
    saveUserData: function(a,
        b) {
        switch (sdkName) {
            case "FaceBookTest":
                cc.warn("存档成功");
                var c = JSON.parse(cc.sys.localStorage.getItem(faceBookDataKey + this.sdkPlayInfo.id));
                if (null == c) c = a;
                else
                    for (var d in a) c[d] = a[d];
                cc.sys.localStorage.setItem(faceBookDataKey + this.sdkPlayInfo.id, JSON.stringify(c));
                break;
            case "FaceBook":
                FBInstant.player.setDataAsync(a).then(function() {
                    cc.log("游戏存档成功！");
                    null != b && b()
                })
        }
    },
    logEvent: function(a, b, c) {
        switch (sdkName) {
            case "FaceBookTest":
                cc.log("log event:",
                    a, b, c);
                break;
            case "FaceBook":
                FBInstant.logEvent(a, b, c)
        }
    },
    createShortcut: function(a) {
        switch (sdkName) {
            case "FaceBookTest":
                cc.log("创建桌面快捷方式。");
                null != a && a(null);
                break;
            case "FaceBook":
                cc.log("创建桌面快捷方式sdk。"), FBInstant.player.getDataAsync(["shortcut"]).then(function(b) {
                    cc.log("获取到的data。", b);
                    null != b && null != b.shortcut && 1 == b.shortcut || FBInstant.canCreateShortcutAsync().then(function(b) {
                        cc.log("........创建值canCreateShortcut：" +
                            b);
                        cc.log(b);
                        b && FBInstant.createShortcutAsync().then(function() {
                            FBInstant.player.setDataAsync({
                                shortcut: 1
                            }).then(function() {});
                            cc.log("创建成功。");
                            null != a && a(null)
                        }).catch(function(a) {
                            cc.log("创建失败。");
                            cc.log(a)
                        })
                    }).catch(function(a) {
                        cc.log("不可以创建。");
                        cc.log(a)
                    })
                }).catch(function(a) {
                    cc.log("获取数据失败。");
                    cc.log(a)
                })
        }
    },
    setScoreAsync: function(a, b, c, d) {
        switch (sdkName) {
            case "FaceBookTest":
                null != d &&
                    d();
                break;
            case "FaceBook":
                FBInstant.getLeaderboardAsync(a).then(function(a) {
                    cc.log("添加自己排行榜。", b);
                    return a.setScoreAsync(b, JSON.stringify(c))
                }).then(function(a) {
                    null != d && d(a)
                }).catch(function(a) {
                    cc.log("上传排行失败。");
                    cc.log(a);
                    null != d && d(null)
                })
        }
    },
    getPlayerEntryAsync: function(a, b) {
        switch (sdkName) {
            case "FaceBookTest":
                this.sdkPlayInfo.rank = this.sdkPlayInfo.rank || {};
                this.sdkPlayInfo.rank[a] = 2;
                break;
            case "FaceBook":
                var c = this;
                FBInstant.getLeaderboardAsync(a).then(function(a) {
                    return a.getPlayerEntryAsync()
                }).then(function(d) {
                    cc.log("getPlayerEntryAsync获取自己排行榜成功：",
                        a);
                    cc.log(d);
                    null != d && (c.sdkPlayInfo.rank = c.sdkPlayInfo.rank || {}, c.sdkPlayInfo.rank[a] = d.getRank());
                    null != b && b()
                })
        }
    },
    getEntriesAsync: function(a, b, c) {
        if (null == this.nearbyEntriesboard[a]) switch (sdkName) {
            case "FaceBook":
                var d = this;
                FBInstant.getLeaderboardAsync(a).then(function(a) {
                    return a.getEntriesAsync(b, c)
                }).then(function(b) {
                    cc.log("getEntriesAsync获取世界排行榜成功：");
                    cc.log(b);
                    for (var c = [], g = 0; g < b.length; g++) {
                        var h = {};
                        h.id = b[g].getPlayer().getID();
                        h.photo =
                            b[g].getPlayer().getPhoto();
                        h.name = b[g].getPlayer().getName();
                        h.score = b[g].getScore();
                        h.rank = b[g].getRank();
                        h.data = b[g].getExtraData();
                        c.push(h)
                    }
                    d.nearbyEntriesboard[a] = c
                })
        }
    },
    getEntriesLeaderboardDataByPlayer: function(a, b) {
        if (null == this.nearbyEntriesboard[a]) switch (sdkName) {
            case "FaceBook":
                var c = this;
                this.getPlayerEntryAsync(a, function() {
                    if (null != c.sdkPlayInfo.rank && 0 < c.sdkPlayInfo.rank[a]) {
                        var d = c.sdkPlayInfo.rank[a] - 15;
                        0 >= d && (d = 0);
                        c.getEntriesAsync(a, b, d, !0)
                    } else c.getEntriesAsync(a, b, 0, !0)
                })
        }
    },
    getConnectedPlayerEntriesAsync: function(a, b, c) {
        if (null == this.playerEntriesboard[a]) switch (sdkName) {
            case "FaceBook":
                var d = this;
                FBInstant.getLeaderboardAsync(a).then(function(a) {
                    return a.getConnectedPlayerEntriesAsync(b, c)
                }).then(function(b) {
                    cc.log("getEntriesAsync获取好友排行榜成功：");
                    cc.log(b);
                    for (var c = [], g = 0; g < b.length; g++) {
                        var h = {};
                        h.id = b[g].getPlayer().getID();
                        h.photo = b[g].getPlayer().getPhoto();
                        h.name = b[g].getPlayer().getName();
                        h.score = b[g].getScore();
                        h.rank = b[g].getRank();
                        h.data = b[g].getExtraData();
                        c.push(h)
                    }
                    c.push({
                        id: 4832,
                        name: "Ida Dewar",
                        score: 3,
                        photo: "#rank/robothead1.png",
                        rank: c.length + 1
                    });
                    d.playerEntriesboard[a] = c
                })
        }
    },
    getEntriesLeaderboardData: function(a) {
        switch (sdkName) {
            case "FaceBookTest":
                return getFaceBookTestEntriesLeaderboardData();
            case "FaceBook":
                return this.entriesLeaderboard[a]
        }
    },
    setEntriesLeaderboardData: function(a, b) {
        this.entriesLeaderboard[a] = b
    },
    getPlayerEntriesboardLeaderboardData: function(a) {
        "FaceBookTest" == sdkName && (this.playerEntriesboard[a] =
            this.playerEntriesboard[a] || getFaceBookTestPlayerEntriesboardLeaderboardData());
        return this.playerEntriesboard[a]
    },
    setEntriesNearByData: function(a, b) {
        this.nearbyEntriesboard[a] = b
    },
    getEntriesNearByData: function(a) {
        switch (sdkName) {
            case "FaceBookTest":
                return this.sdkPlayInfo.rank = this.sdkPlayInfo.rank || {}, this.sdkPlayInfo.rank[a] = 2, getFaceBookTestNearbyData();
            case "FaceBook":
                return this.nearbyEntriesboard[a]
        }
    },
    setPlayerEntriesboardLeaderboardData: function(a, b) {
        this.playerEntriesboard[a] = b
    }
});
var EVENTMGR_ID = {
        MONSTER_ENTER: 1,
        MONSTER_WAIT: 2,
        MONSTER_COLLECT: 3,
        MONSTER_WORRY: 4,
        MONSTER_WIN: 5,
        MONSTER_FAIL: 6,
        MONSTER_SHOW_ON_UI: 7,
        MONSTER_CLEAR_ON_UI: 8,
        MONSTER_RESET_WORRY: 9,
        MONSTER_RESET_WAIT: 10,
        BUY_ITEM_REFRESH: 20,
        FLUSH_TARGET_KEY: 21,
        COLLECTION_HIT: 30,
        MISSION_FINISH_FLY: 31,
        MISSION_REFRESH_TOTAL: 32,
        MISSION_CHECK_NEED_MOVE_UP: 33,
        MISSION_UPDATE_VALUE: 34
    },
    EventMgr = {
        events: {},
        register: function(a, b, c) {
            if (a && b)
                if (this.checkIsExist(a, c)) cc.error("already exist in event!!!");
                else {
                    var d = {};
                    d.self = c || null;
                    d.func = b || null;
                    this.events[a] || (this.events[a] = []);
                    this.events[a].push(d)
                }
            else cc.log("register error param !!!")
        },
        checkIsExist: function(a, b) {
            var c = this.events[a];
            if (!c) return !1;
            for (var d = 0; d < c.length; ++d)
                if (c[d].self == b) return !0;
            return !1
        },
        emit: function(a, b) {
            var c = this.events[a];
            if (c)
                for (var d = 0; d < c.length; ++d) this.callBack(c[d], b || null)
        },
        broad: function(a) {
            for (var b in this.events)
                for (var c = 0; c < this.events[b].length; ++c) this.callBack(this.events[b][c], a)
        },
        callBack: function(a, b) {
            var c = a.self,
                d = a.func;
            c && c.func ? c.func(b) : d.call(c, b)
        },
        remove: function(a, b) {
            var c = this.events[a];
            if (c)
                for (var d = 0; d < c.length; ++d) c[d].self == b && c.splice(d, 1)
        },
        clean: function() {
            this.events = {}
        }
    };
cc.pool = {
    _pool: {},
    _releaseCB: function() {
        this.release()
    },
    _autoRelease: function(a) {
        var b = void 0 === a._running ? !1 : !a._running;
        cc.director.getScheduler().schedule(this._releaseCB, a, 0, 0, 0, b)
    },
    putInPool: function(a) {
        var b = a.constructor.prototype.__pid;
        if (!b) {
            var c = {
                writable: !0,
                enumerable: !1,
                configurable: !0
            };
            c.value = ClassManager.getNewID();
            Object.defineProperty(a.constructor.prototype, "__pid", c)
        }
        this._pool[b] || (this._pool[b] = []);
        a.retain && a.retain();
        a.unuse && a.unuse();
        this._pool[b].push(a)
    },
    hasObject: function(a) {
        return (a =
            this._pool[a.prototype.__pid]) && 0 !== a.length ? !0 : !1
    },
    removeObject: function(a) {
        var b = a.constructor.prototype.__pid;
        if (b && (b = this._pool[b]))
            for (var c = 0; c < b.length; c++) a === b[c] && (a.release && a.release(), b.splice(c, 1))
    },
    getFromPool: function(a) {
        if (this.hasObject(a)) {
            var b = this._pool[a.prototype.__pid],
                c = Array.prototype.slice.call(arguments);
            c.shift();
            b = b.pop();
            b.reuse && b.reuse.apply(b, c);
            cc.sys.isNative && b.release && this._autoRelease(b);
            return b
        }
    },
    drainAllPools: function() {
        for (var a in this._pool)
            for (var b =
                    0; b < this._pool[a].length; b++) {
                var c = this._pool[a][b];
                c.release && c.release()
            }
        this._pool = {}
    }
};
var Global = {
        FailLevelArr: [],
        RandomPersonForTimeModel: null,
        dogPenStr: ""
    },
    FailLevelArr = [],
    sendStrTime = 172800,
    tileMapOffsetX = 16,
    tileMapOffsetY = 164,
    tileMapGridWidth = 76,
    tileMapGridHeight = 76,
    tileMapGridMaxX = 8,
    tileMapGridMaxY = 8,
    selectLevel = null,
    selectType = 1,
    minDeleteCount = 3,
    gridTypeMax = 6,
    gridTypeFirst2Max = 4,
    gridNodeMoveTime = 13,
    gridNodeDownTime = 5,
    maxLevel = 174,
    skillgrid3 = 312,
    skillgrid4 = 416,
    skillgrid5 = 520,
    skillgridadd5 = 100,
    skillgridlinerow = 300,
    deletebyLinecolumn = 1040,
    skilbomb = 3300,
    skillsuction = 5200,
    skillcontinuous =
    104,
    specialskillcontinuous = 312,
    fallgridscore = 1500,
    pigscore = 8E3,
    gamePromptTime = 3E3,
    sendPetID = 2001,
    maxZindex = 9999999999,
    starBoxGetArr = [15, 50, 100, 150, 210, 300, 360],
    endlessStrengthGet = !1,
    scoreRotateA = 16,
    scoreRotateB = -105,
    addStepActionEndPo = cc.p(60, 1100),
    treeHeightMultiple = 10,
    heartFlyShowed = !1,
    only5TypeGridLevelArr = [24, 25, 28],
    MY_language_data = [
        ["id", "content"],
        [1, "Remove enough jelly"],
        [2, "Remove enough jelly"],
        [3, "Remove enough jelly"],
        [4, "Remove enough jelly"],
        [5, "Remove enough jelly"],
        [6, "Remove enough jelly"],
        [7, "Grow & squares of lawn"],
        [8, "Remove & boxes"],
        [9, "Remove & ice cubes"],
        [10, "Gain & bone cookies"],
        [11, "Gain & diamonds"],
        [12, "Remove & bubbles"],
        [13, "null"],
        [14, "null"],
        [15, "null"],
        [16, "null"],
        [17, "null"],
        [18, "null"],
        [19, "null"],
        [20, "Remove & walnuts"],
        [21, "Score &"],
        [25, "Remove enough animals"],
        [31, "Remove enough jelly"],
        [32, "Remove enough jelly"],
        [33, "Remove enough jelly"],
        [34, "Remove enough jelly"],
        [35, "Remove enough jelly"],
        [36, "Remove enough jelly"],
        [37, "Remove enough jelly"],
        [38, "Remove enough jelly"],
        [101, "score"],
        [102, "Select Items"],
        [103, "You can select max 4 items in a round."],
        [104, "Achievement"],
        [105, "Pet Attribute"],
        [106, "Poor network!"],
        [107, "Lv."],
        [108, "1.Number of achievements in normal mode "],
        [109, "2.Number of rate stars "],
        [110, "3.Score in classical mode "],
        [111, "4.Best score in normal mode "],
        [112, "Magic stick can help you break the blocking stuff."],
        [113, 'Use the tool "3 more step" can earn you extral 3 steps'],
        [114, 'The tool "Margic eyepiece" can turn everying into eyepiece.'],
        [115, 'The tool "Refresh" can realign the animals on the board.'],
        [116, 'The tool "Positiong change" can exchange any two animals\' position.'],
        [117, "max"],
        [118, "Add 5 Steps?"],
        [119, "LuckyRoller"],
        [120, "MAX"],
        [121, "∞"],
        [122, "Refill all lives"],
        [123, "Min Unlimited lives "],
        [124, "Purchased"],
        [125, "Only 1 life left.Wanna refill all lives?"],
        [126, "Unlimited lives.Get unlimited lives for "],
        [127, " minutes!"],
        [128, " min"],
        [129, "No enough diamonds!"],
        [130, "No enough Golds!"],
        [131, "Invite friends to send you\\nenergies."],
        [132, "Max level: "],
        [133, "Unlock help, ask a friend once a day."],
        [134, "%s sent you a life!"],
        [201, "3 same animals in a row \\nwill be removed."],
        [202, "You will get a amazing \\neyepiece when you match 4."],
        [203, "When the match elements formed \\na L or a T. A Sunglass Boom turns up."],
        [204, "If match 5, the powerful \\nspirit would turn up."],
        [205, "Those special animals can \\nget a mix effects."],
        [206, "Remove animals could break the ice."],
        [207, "Remove the animals with gem, \\nyou can get the gems."],
        [208, "Remove animals around flowers \\ncould make them bloom."],
        [209, "When we send the bone cake to \\nthe bottom, we can get it."],
        [210, "Collect bubbles to make water \\nlevel rise."],
        [211, "Remove the animals on the grass, \\nthe grass will spread away."],
        [212, "Remove animals around eggs to \\nrelease animals."],
        [213, "Remove frozen animals \\ncould save them."],
        [214, "Golden Egg will create Eyepieces."],
        [215, "Collect full energy then \\nlase to break stones"],
        [217, "Move the bone above \\nthe bowl to collect."],
        [218, "emove beside cloud to break it."],
        [219, "Need a key to open the chest"],
        [220, "only open on tomorrow!"],
        [221, "only open on tomorrow!"],
        [222, "Pass this stage to get the key"],
        [223, "Goal: Clear Stage %num"],
        [224, "Coming soon"],
        [225, "Unlock at level 15"],
        [226, "Unlock at level 5"],
        [227, "We're sorry, but there are no available videos to show right now. Please try again later!"],
        [228, "Today's chances used up. Please come back tomorrow."],
        [229, "Unlock at level 4"],
        [230, "Stars aren't enough!"],
        [231, "Unlock at level 10"]
    ];
var GameFriendData = cc.Class.extend({
    friendList: null,
    ctor: function() {
        this.friendList = []
    },
    initialize: function(a) {
        this.friendList = a.FriendList;
        for (a = 0; a < this.friendList.length; a++) {
            var b = this.friendList[a],
                c = {};
            c.id = b.playerid;
            c.name = b.nickname;
            c.photo = b.image;
            c = gameSDK.upateFriendsInfo(c);
            null != c && null != c.photo && (b.image = c.photo);
            null != c && null != c.name && (b.nickname = c.name)
        }
        for (a = 0; a < this.friendList.length; a++)
            for (b = this.friendList[a], c = this.friendList[a].allStarNum = 0; c < b.maxLevel.length; c++) this.friendList[a].allStarNum +=
                b.maxLevel[c]
    },
    updateHeroInfo: function() {
        for (; c < this.friendList.length; c++) {
            var a = this.friendList[0];
            if (a.playerid == heroData.playerid) {
                a.gameTimeBestScore = heroData.gameUserData.gameTimeBestScore;
                for (var b = 0, c = heroData.gameUserData.maxLevelStart.length - 1; 0 <= c; c--)
                    if (0 != heroData.gameUserData.maxLevelStart[c]) {
                        b = c;
                        break
                    } c = heroData.gameUserData.maxLevelStart.concat();
                c.splice(b + 1, heroData.gameUserData.maxLevelStart.length - b);
                a.maxLevel = c;
                a.petid = heroData.getSelectePet().petid;
                a.allStarNum = 0;
                a.daymaxscore =
                    heroData.gameUserData.daymaxscore;
                for (b = 0; b < a.maxLevel.length; b++) a.allStarNum += a.maxLevel[b];
                this.friendList[0] = a;
                break
            }
        }
    },
    getFriendDataByPlayerID: function(a) {
        for (var b = 0; b < this.friendList.length; b++) {
            var c = this.friendList[b];
            if (c.playerid == a) return c
        }
        return null
    },
    getCanSendStrength: function() {
        for (var a = [], b = 0; b < this.friendList.length; b++) {
            var c = this.friendList[b];
            heroData.playerid != c.playerid && 0 == c.lastStrengthSendTime && a.push(c)
        }
        6 < a.length && a.splice(6, a.length - 6);
        return a
    },
    getCanAskStrength: function() {
        for (var a = [], b = 0; b < this.friendList.length; b++) {
            var c = this.friendList[b];
            heroData.playerid != c.playerid && 0 == c.lastStrengthAskTime && a.push(c)
        }
        6 < a.length && a.splice(6, a.length - 6);
        return a
    },
    sortTimeModel: function() {
        var a = this.friendList.concat();
        a.sort(function(a, c) {
            return c.gameTimeBestScore - a.gameTimeBestScore
        });
        return a
    },
    sortAdventureModel: function() {
        var a = this.friendList.concat();
        a.sort(function(a, c) {
            return c.maxLevel.length - a.maxLevel.length
        });
        return a
    },
    sortStarNum: function() {
        var a = this.friendList.concat();
        a.sort(function(a, c) {
            var d = 0;
            a.maxLevel.every(function(a) {
                d += a;
                return !0
            });
            var e = 0;
            c.maxLevel.every(function(a) {
                e += a;
                return !0
            });
            return e - d
        });
        return a
    },
    sortDayMaxScore: function() {
        var a = this.friendList.concat();
        a.sort(function(a, c) {
            return c.daymaxscore - a.daymaxscore
        });
        return a
    }
});
var GameRankLayer = cc.Layer.extend({
        mainUI: null,
        friendInfoLayer: null,
        friendSpList: null,
        pageNum: null,
        globalOrFriends: null,
        heroInfoSp: null,
        mySelfInfo: null,
        dataList: null,
        findDataTxt: null,
        ctor: function() {
            this._super();
            this.friendInfoLayer = this.mainUI = null;
            this.friendSpList = [];
            this.globalOrFriends = this.pageNum = 1;
            this.dataList = this.heroInfoSp = null
        },
        onEnter: function() {
            this._super();
            this.initialize();
            this.schedule(this.checkGetRankData.bind(this), 0.1);
            gameSDK.setEntriesNearByData(RANK_STAR, null);
            gameSDK.setEntriesNearByData(RANK_TIME,
                null);
            gameSDK.getEntriesLeaderboardDataByPlayer(RANK_STAR, 20);
            gameSDK.getEntriesLeaderboardDataByPlayer(RANK_TIME, 20)
        },
        onExit: function() {
            this._super();
            this.unscheduleAllCallbacks()
        },
        initialize: function() {
            this.mainUI = engine.gameCocosStudio.loadCSS(res_open_load.gameranklayer);
            this.addChild(this.mainUI);
            this.mainUI.bg.zIndex = -2;
            this.friendInfoLayer = new cc.Layer;
            var a = new cc.DrawNode;
            a.drawRect(cc.p(0, 60), cc.p(840, 540), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            a.x = -210;
            a = createClippingNode(0.5, 0.5,
                0, 0, 1, !1, a);
            a.addChild(this.friendInfoLayer);
            this.mainUI.addChild(a, -1);
            a.x = 200;
            a.y = 320;
            heroData.gameFriendData.updateHeroInfo();
            heroData.gameWorldData.updateHeroInfo();
            this.addListener();
            this.setPage();
            this.findDataTxt = new cc.LabelTTF("Finding  data……", defaultTxt, 30);
            this.findDataTxt.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            this.findDataTxt.enableStroke(cc.color(106, 43, 42));
            this.findDataTxt.setColor(cc.color(106, 43, 42));
            this.findDataTxt.setPosition(300, 760);
            this.addChild(this.findDataTxt)
        },
        starRankNeedGet: !0,
        timeRankNeedGet: !0,
        checkGetRankData: function() {
            if (this.starRankNeedGet) {
                var a = gameSDK.getEntriesNearByData(RANK_STAR);
                a && (this.starRankNeedGet = !1, cc.log("星数排行榜拉到了。"), this.checkShowThisPage())
            }
            this.timeRankNeedGet && (a = gameSDK.getEntriesNearByData(RANK_TIME)) && (this.timeRankNeedGet = !1, cc.log("时间排行榜拉到了。"), this.checkShowThisPage())
        },
        setPage: function() {
            1 == this.pageNum ? (this.mainUI.pagebtnnode.pagebtn1.zIndex =
                3, this.mainUI.pagebtnnode.pagebtn1.setSpriteFrame("rank/stary.png"), this.mainUI.pagebtnnode.pagebtn2.zIndex = 2, this.mainUI.pagebtnnode.pagebtn2.setSpriteFrame("rank/timen.png")) : (this.mainUI.pagebtnnode.pagebtn1.zIndex = 1, this.mainUI.pagebtnnode.pagebtn1.setSpriteFrame("rank/starn.png"), this.mainUI.pagebtnnode.pagebtn2.zIndex = 2, this.mainUI.pagebtnnode.pagebtn2.setSpriteFrame("rank/timey.png"))
        },
        checkShowThisPage: function() {
            var a = null,
                b = 1 == this.pageNum ? gameSDK.getEntriesNearByData(RANK_STAR) : gameSDK.getEntriesNearByData(RANK_TIME);
            b && (a = b);
            a && (this.dataList = a, this.creatRankNode())
        },
        addListener: function() {
            engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.clickCloseBtnFun, buttonScalingType);
            this.mainUI.closebtn.realScale = 0.8;
            engine.gameEvent.createMouseUp(this.mainUI.batchsending, this.clickBatchsendingFun, buttonScalingType);
            this.friendInfoLayer.swallowTouches = !1;
            engine.gameEvent.createMouseDown(this.friendInfoLayer, this.clickDownFun, null, cc.rect(-200, -2E4, 640, 37340));
            this.friendInfoLayer.gameRankLayer = this;
            engine.gameEvent.createMouseMove(this.friendInfoLayer,
                this.clickMoveFun, null, cc.rect(-200, -2E4, 640, 37340));
            engine.gameEvent.createMouseUp(this.mainUI.pagebtnnode.pagebtn1, this.clickPageBtnFun);
            this.mainUI.pagebtnnode.pagebtn1.index = 1;
            this.mainUI.pagebtnnode.pagebtn1.gameRankLayer = this;
            engine.gameEvent.createMouseUp(this.mainUI.pagebtnnode.pagebtn2, this.clickPageBtnFun);
            this.mainUI.pagebtnnode.pagebtn2.index = 2;
            this.mainUI.pagebtnnode.pagebtn2.gameRankLayer = this
        },
        clickPageBtnFun: function() {
            this.index != this.gameRankLayer.pageNum && (this.gameRankLayer.pageNum =
                this.index, this.gameRankLayer.setPage(), this.gameRankLayer.checkShowThisPage(), this.gameRankLayer.moveSetY(0))
        },
        clickDownFun: function(a, b) {
            this.moveY = a.getLocation().y
        },
        clickMoveFun: function(a, b) {
            var c = a.getLocation(),
                d = this.y - (this.moveY - c.y);
            this.moveY = c.y;
            this.gameRankLayer.moveSetY(d)
        },
        moveSetY: function(a) {
            0 > a && (a = 0);
            var b = this.friendSpList.length - 3;
            0 > b && (b = 0);
            a > 120 * b && (a = 120 * b);
            this.friendInfoLayer.y = a;
            var c = this,
                d = 0;
            this.friendSpList.forEach(function(a) {
                var b = c.friendInfoLayer.y + a.y;
                a.visible =
                    600 > b && 0 < b;
                a.visible && d++
            })
        },
        creatRankNode: function() {
            if (this.dataList) {
                this.findDataTxt && (this.findDataTxt.removeFromParent(), this.findDataTxt = null);
                this.friendInfoLayer && this.friendInfoLayer.removeAllChildren();
                this.heroInfoSp && this.heroInfoSp.removeFromParent();
                for (var a = 0, b = 0; b < this.dataList.length; b++) {
                    var c = this.dataList[b];
                    c.index = b + 1;
                    var d = new RankNode;
                    d.initialize(c, this.pageNum, this.globalOrFriends);
                    this.friendInfoLayer.addChild(d);
                    d.x = 120;
                    d.y = 485 - 120 * b;
                    this.friendSpList.push(d);
                    heroData.playerid ==
                        c.id && (a = b + 1)
                }
                1 == this.pageNum ? (b = gameSDK.sdkPlayInfo.rank[RANK_STAR], c = heroData.getLevelStartCount()) : (b = gameSDK.sdkPlayInfo.rank[RANK_TIME], c = heroData.gameUserData.daymaxscore);
                b = {
                    id: gameSDK.sdkPlayInfo.id,
                    score: c,
                    photo: gameSDK.sdkPlayInfo.photo,
                    name: gameSDK.sdkPlayInfo.name,
                    rank: b
                };
                c = engine.gameTool.cloneObject(b);
                c.index = a;
                c.bgColor = "blue";
                this.heroInfoSp = new RankNode;
                this.heroInfoSp.initialize(b, this.pageNum, this.globalOrFriends);
                this.addChild(this.heroInfoSp);
                this.heroInfoSp.x = 320;
                this.heroInfoSp.y =
                    80
            }
        },
        clickCloseBtnFun: function() {
            this.parent.parent.parentUI.closeRankLayer()
        },
        clickBatchsendingFun: function() {
            gameSDK.sendFaceBookFriend(null, {
                pngData: [{
                    url: "res/invitefriends.jpg",
                    posX: 0,
                    posY: 0,
                    imgWidth: 750,
                    imgHeight: 440
                }],
                fontData: [],
                width: 750,
                height: 440
            })
        }
    }),
    createClippingNode = function(a, b, c, d, e, f, g) {
        var h = new cc.ClippingNode;
        h.anchorX = a;
        h.anchorY = b;
        h.x = c;
        h.y = d;
        h.alphaThreshold = e;
        h.inverted = f;
        h.stencil = g;
        return h
    };
var ClassicTimeModel = 2,
    AdventureModel = 1,
    RankNode = cc.Sprite.extend({
        playerid: null,
        lastStrengthSendTime: null,
        onEnter: function() {
            this._super()
        },
        initialize: function(a, b, c) {
            this.playerid = a.id;
            c = new ccui.ImageView("publicimg/scalesprite4.png", ccui.Widget.PLIST_TEXTURE);
            c.setScale9Enabled(!0);
            c.setContentSize(cc.size(579, 107));
            this.addChild(c);
            c = null;
            4 > a.index ? (c = new cc.Sprite("#rank/rank" + a.index + ".png"), c.x = -200) : (c = new GameArtWord("rankfnt", 35, 55), c.alignmentType = artWordMiddle, a.rank ? c.setString(a.rank.toString()) :
                c.setString(a.index.toString()), c.x = -210);
            this.addChild(c);
            var d = this;
            c = new MyLoadHeadSprite;
            c.loadComplete = function(a) {
                a.setPosition(-80, 1);
                d.addChild(a, 99)
            };
            c.setPNGUrl(a.photo, 66);
            c = new cc.Sprite("#rank/head_rect.png");
            c.setPosition(-80, -1);
            this.addChild(c, 98);
            c = new cc.LabelTTF(myGameTool.cutName(a.name), defaultTxt, 24);
            this.addChild(c);
            c.setAnchorPoint(0, 0.5);
            c.setColor(cc.color(110, 47, 50));
            c.x = -10;
            c.y = 15;
            1 == b ? this.showStarRank(a) : 2 == b && this.showScoreRank(a)
        },
        showTreeRank: function(a) {
            var b = 0;
            a &&
                a.maxLevel && (b = 10 * a.maxLevel.length);
            a = new cc.Sprite("#rank/treeoflife.png");
            a.setAnchorPoint(cc.p(0, 0.5));
            this.addChild(a);
            a.x = -10;
            a.y = -15;
            a = new GameArtWord("rankstarfnt", 19, 28);
            a.alignmentType = artWordLeft;
            a.x = 70;
            a.setString(b + "m");
            a.y = -15;
            this.addChild(a)
        },
        showStarRank: function(a) {
            var b = new cc.Sprite("#rank/starbg.png");
            b.setAnchorPoint(cc.p(0, 0.5));
            this.addChild(b);
            b.x = -20;
            b.y = -15;
            var c = new cc.Sprite("#rank/star.png");
            b.addChild(c);
            c.x = 30;
            c.y = 17;
            var d = new GameArtWord("rankstarfnt", 17, 28);
            d.alignmentType =
                artWordLeft;
            b.addChild(d);
            a.allStarNum || (a.allStarNum = 0);
            d.setString(a.score.toString());
            d.x = c.x + c.getContentSize().width / 2 + 10;
            d.y = c.y
        },
        showScoreRank: function(a) {
            var b = 0;
            a && a.score && (b = a.score);
            a = new cc.Sprite("#rank/score.png");
            a.setAnchorPoint(cc.p(0, 0.5));
            this.addChild(a);
            a.x = -10;
            a.y = -15;
            var c = new GameArtWord("rankstarfnt", 17, 28);
            c.alignmentType = artWordLeft;
            c.x = a.x + a.getContentSize().width;
            c.setString(b + "");
            c.y = a.y;
            this.addChild(c)
        },
        clickSendStrengthBtnFun: function() {
            heroData.gameFriendData.getFriendDataByPlayerID(this.playerid).lastStrengthSendTime =
                1;
            setSpriteGray(this.sendStrengthBtn);
            var a = {};
            a.strengthList = [this.playerid];
            sendStrength(a)
        }
    });
var GridBrokenAni = GameAnimation.extend({
    aniData: null,
    ctor: function() {
        this._super();
        this.aniData = skeletalAnimation["gridskin|gridbroken"];
        this.aniData.folderName = "pngdata/playeffect"
    },
    dispose: function() {
        this.animationSprite.visible = !1;
        this.parent = null;
        cc.pool.putInPool(this)
    },
    unuse: function() {},
    reuse: function() {
        this.initialize(this.aniData);
        this.isRemoveFromComplete = this.animationSprite.visible = !0;
        this.playCount = 1;
        cc._renderType == cc.game.RENDER_TYPE_WEBGL && this.setBlendFunc(cc.ONE, cc.ONE);
        this.setStartDelayTime(0.125);
        this.setFrameIntervalTime(24)
    }
});
var GameMailLayer = cc.Layer.extend({
        mailInfoLayer: null,
        mainUI: null,
        mailInfoSpList: null,
        ctor: function() {
            this._super();
            this.mailInfoLayer = this.mainUI = null;
            this.mailInfoSpList = []
        },
        onEnter: function() {
            this._super();
            this.initialize()
        },
        initialize: function() {
            this.mainUI = engine.gameCocosStudio.loadCSS(res_open_load.maillayer);
            this.addChild(this.mainUI);
            this.mainUI.bg.zIndex = -2;
            this.mailInfoLayer = new cc.Layer;
            var a = new cc.DrawNode;
            a.drawRect(cc.p(0, 0), cc.p(840, 660), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            a.x = -210;
            a = createClippingNode(0.5, 0.5, 0, 0, 1, !1, a);
            a.addChild(this.mailInfoLayer);
            this.mainUI.addChild(a, -1);
            a.x = 200;
            a.y = 260;
            this.mainUI.nomail.setString(engine.gameData.dataDic.language[131].content);
            engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.clickCloseBtnFun.bind(this), buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.receivebtn, this.clickReceiveBtnFun.bind(this), buttonScalingType);
            this.mailInfoLayer.swallowTouches = !1;
            engine.gameEvent.createMouseDown(this.mailInfoLayer,
                this.clickDownFun, null, cc.rect(0, -2E4, 640, 37340));
            this.mailInfoLayer.gameMailLayer = this;
            engine.gameEvent.createMouseMove(this.mailInfoLayer, this.clickMoveFun, null, cc.rect(0, -2E4, 640, 37340));
            for (a = 0; a < heroData.gameMailData.mailList.length; a++) {
                var b = heroData.gameMailData.mailList[a];
                b.index = a;
                b = this.createMailNode(b);
                this.mailInfoLayer.addChild(b);
                b.x = 120;
                b.y = 590 - 134 * a;
                this.mailInfoSpList.push(b)
            }
            this.refreshView()
        },
        clickDownFun: function(a, b) {
            this.moveY = a.getLocation().y
        },
        clickMoveFun: function(a, b) {
            var c =
                a.getLocation(),
                d = this.y - (this.moveY - c.y);
            this.moveY = c.y;
            this.gameMailLayer.moveSetY(d)
        },
        moveSetY: function(a) {
            a > 120 * (this.mailInfoSpList.length - 3) && (a = 120 * (this.mailInfoSpList.length - 3));
            0 > a && (a = 0);
            this.mailInfoLayer.y = a
        },
        createMailNode: function(a) {
            var b = new cc.Sprite;
            b.index = a.index;
            b.mailtype = a.type;
            b.mailid = a.mailid;
            var c = new ccui.ImageView("publicimg/scalesprite7.png", ccui.Widget.PLIST_TEXTURE);
            c.setScale9Enabled(!0);
            c.setContentSize(cc.size(570, 124));
            b.addChild(c);
            c = new MyLoadHeadSprite;
            c.willPos =
                cc.p(-220, 0);
            c.loadComplete = function(a) {
                a.setPosition(this.willPos);
                b.addChild(a, 98)
            };
            c.setPNGUrl(a.image, 74, "#publicimg/gezi_2.png");
            c = new cc.Sprite("#publicimg/headbg.png");
            c.setPosition(-221, -1);
            b.addChild(c, 99);
            c = "";
            c = a.fromnickname;
            10 < c.length && (c = c.slice(0, 7) + "...");
            c = 1 == a.type ? c + " sent you a life!" : c + " asks for lives!";
            c = new cc.LabelTTF(c, defaultTxt, 22);
            c.setAnchorPoint(0, 0.5);
            b.addChild(c);
            c.x = -160;
            c.setColor(cc.color(152, 41, 58));
            c = new cc.Sprite("#rank/sendStrengthbtn_1.png");
            b.addChild(c);
            engine.gameEvent.createMouseUp(c, this.clickSendStrengthBtnFun, buttonScalingType);
            c.gameMailLayer = this;
            c.fromplayerid = a.fromplayerid;
            c.x = 210;
            return b
        },
        refreshView: function(a) {
            1 <= this.mailInfoSpList.length ? (this.mainUI.nomailicon.setVisible(!1), this.mainUI.nomail.setVisible(!1)) : (this.mainUI.nomailicon.setVisible(!0), this.mainUI.nomail.setVisible(!0));
            if (null != a) {
                for (var b = this.mailInfoSpList.length - 1; b >= a; b--) 0 <= b - 1 && (this.mailInfoSpList[b].x = this.mailInfoSpList[b - 1].x, this.mailInfoSpList[b].y = this.mailInfoSpList[b -
                    1].y);
                this.mailInfoSpList[a].removeFromParent();
                this.mailInfoSpList.splice(a, 1);
                for (a = 0; a < this.mailInfoSpList.length; a++) this.mailInfoSpList[a].index = a
            }
        },
        clickReceiveBtnFun: function() {
            gameSDK.sendFaceBookFriend(null, {
                pngData: [{
                    url: "res/invitefriends.jpg",
                    posX: 0,
                    posY: 0,
                    imgWidth: 750,
                    imgHeight: 440
                }],
                fontData: [],
                width: 750,
                height: 440
            })
        },
        clickSendStrengthBtnFun: function() {
            this.gameMailLayer.refreshView(this.parent.index);
            if (1 == this.parent.mailtype) {
                heroData.buyStrength(1);
                var a = {};
                a.strengthList = [this.parent.mailid];
                receiveStrength(a);
                saveHeroData();
                currentScene.refresh()
            } else a = {}, a.strengthList = [this.fromplayerid], sendStrength(a), heroData.gameFriendData.getFriendDataByPlayerID(this.fromplayerid).lastStrengthSendTime = 1;
            for (a = 0; a < heroData.gameMailData.mailList.length; a++)
                if (heroData.gameMailData.mailList[a].mailid == this.parent.mailid) {
                    heroData.gameMailData.mailList.splice(a, 1);
                    break
                } this.gameMailLayer.refreshView()
        },
        clickCloseBtnFun: function() {
            this.parentUI.closeMailLayer();
            null != currentScene.refresh && currentScene.refresh()
        }
    }),
    GameMailData = cc.Class.extend({
        mailList: null,
        ctor: function() {
            this.mailList = []
        },
        initialize: function(a) {
            this.mailList = a.List;
            currentScene && currentScene.refresh && currentScene.refresh()
        },
        resetMailList: function() {
            this.mailList = []
        }
    });
var SpecialGridInfo = cc.Class.extend({
    gridX: null,
    gridY: null,
    specialType: null,
    continuousDelete: !1,
    gridType: null,
    specialInfoList: null,
    ctor: function() {
        this.specialType = this.gridY = this.gridX = null;
        this.continuousDelete = !1;
        this.gridType = null;
        this.specialInfoList = []
    },
    createSpecialGrid: function(a, b, c, d) {
        this.gridX = a;
        this.gridY = b;
        this.specialType = c;
        this.gridType = d
    },
    runSpecialGrid: function(a) {
        this.continuousDelete && a.addScore(skillcontinuous);
        if (!(0 > this.gridX || this.gridX >= tileMapGridMaxX || 0 > this.gridY || this.gridY >=
                tileMapGridMaxY)) switch (a.gameLevelData.recordDeleteContinuousCount(), this.specialType) {
            case 1:
                this.deleteByLine(a);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 2:
                this.deleteByColumn(a);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 3:
                this.deleteByAround(a, 3, 1);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 5:
                this.deleteByGridType(a, this.gridType);
                break;
            case 6:
                this.deleteByAround(a, 5, 5);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 7:
                this.deleteByColumnAndLine(a);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 8:
                this.deleteByLeftLine(a);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 9:
                this.deleteByRightLine(a);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 10:
                this.deleteByUp(a);
                engine.gameSound.playEffect(soundres.gridspecial);
                break;
            case 11:
                this.deleteByDown(a), engine.gameSound.playEffect(soundres.gridspecial)
        }
    },
    operationDeleteGrid: function(a, b) {
        var c = {};
        if (a.gridType == emptyGrid) return c;
        var d = !1;
        if (0 != a.specialType &&
            !1 == a.isDespose) {
            var e = new SpecialGridInfo;
            e.continuousDelete = this.continuousDelete;
            if (5 == a.specialType) {
                var f = new DeleteChangeGrid;
                f.gamePlayFacade = b;
                f.runDeleteChangeGrid(a, a.specialType)
            } else if (a.gridType != laserGrid) e.createSpecialGrid(a.gridX, a.gridY, a.specialType);
            else if (3 <= a.powerNum) switch (a.powerNum = 0, a.playLaser(), a.direction) {
                case 12:
                    e.createSpecialGrid(a.gridX, a.gridY, 11, a.gridType);
                    break;
                case 14:
                    e.createSpecialGrid(a.gridX, a.gridY, 8, a.gridType);
                    break;
                case 16:
                    e.createSpecialGrid(a.gridX,
                        a.gridY, 9, a.gridType);
                    break;
                case 18:
                    e.createSpecialGrid(a.gridX, a.gridY, 10, a.gridType)
            }
        }
        null == a.iceSprite && (f = b.gridData.getSpecialGridByGridPoint(a.gridX, a.gridY), null != f && f.despose());
        a.isCanDelete() && (a.despose(), d = !0);
        a.hasCloud && a.clearCloud();
        a.gridType != wood2 && a.gridType != wood1 || a.desposeWord();
        a.gridType == walnutType && a.desposeWalnut();
        c.specialGridInfo = e;
        c.gridDespose = d;
        return c
    },
    deleteByGridType: function(a, b) {
        for (var c = 1, d = a.gridData.gridArr, e = [], f = 0; f < a.gridData.gridMaxX; f++)
            for (var g = 0; g <
                a.gridData.gridMaxY; g++) {
                var h = d[f][g];
                null != h && h.gridType == b && (h = this.operationDeleteGrid(h, a), null != h.specialGridInfo && e.push(h.specialGridInfo), !0 == h.gridDespose && c++)
            }
        a.addScore(c * skillcontinuous);
        a.addScoreEffect(this.gridX, this.gridY, c * skillcontinuous);
        for (c = 0; c < e.length; c++) e[c].runSpecialGrid(a)
    },
    deleteByAround: function(a, b, c) {
        var d = [],
            e = 0,
            f = !1;
        null != a.getGrass(this.gridX, this.gridY) && (f = !0);
        for (var g = 0; g < b; g++)
            for (var h = 0; h < 2 * g + 1; h++) {
                var k = a.gridData.getGridByGridPoint(this.gridX + h - g, this.gridY -
                    (b - 1) + g);
                f && a.addGrass(this.gridX + h - g, this.gridY - (b - 1) + g);
                null != k && (k = this.operationDeleteGrid(k, a), null != k.specialGridInfo && d.push(k.specialGridInfo), !0 == k.gridDespose && e++)
            }
        for (g = 1; g < b; g++)
            for (h = 2 * (b - g) - 1; 0 < h; h--) k = a.gridData.getGridByGridPoint(this.gridX - b + h + g, this.gridY + g), f && a.addGrass(this.gridX - b + h + g, this.gridY + g), null != k && (k = this.operationDeleteGrid(k, a), null != k.specialGridInfo && d.push(k.specialGridInfo), !0 == k.gridDespose && e++);
        b = 0;
        b = 1 >= a.gameLevelData.deleteContinuousCount ? skilbomb + skillcontinuous *
            e * c : skilbomb + skillcontinuous * e * c + specialskillcontinuous + skillcontinuous * (a.gameLevelData.deleteContinuousCount - 1);
        a.addScore(b);
        a.addScoreEffect(this.gridX, this.gridY, b);
        for (c = 0; c < d.length; c++) d[c].runSpecialGrid(a);
        d = skeletalAnimation["gridskin|bombeffect"];
        d.folderName = "pngdata/playeffect";
        c = new GameAnimation;
        e = a.gridData.getGridPointByScenePoint(this.gridX, this.gridY);
        c.x = e.x;
        c.y = e.y;
        c.playCount = 1;
        c.isRemoveFromComplete = !0;
        c.initialize(d);
        c.setFrameIntervalTime(17);
        a.gamePlayLayer.showShakeFun();
        a.gamePlayLayer.gameEffectLayer.addChild(c, 999)
    },
    deleteByLeftLine: function(a) {
        var b = this.deleteGetDeleteCount(2, a, this.gridX, this.gridY),
            c = 0,
            c = 1 >= a.gameLevelData.deleteContinuousCount ? deletebyLinecolumn + skillcontinuous * b : deletebyLinecolumn + skillcontinuous * b + specialskillcontinuous + skillcontinuous * (a.gameLevelData.deleteContinuousCount - 1);
        a.addScore(c);
        a.addScoreEffect(this.gridX, this.gridY, c)
    },
    deleteByRightLine: function(a) {
        var b = this.deleteGetDeleteCount(3, a, this.gridX, this.gridY),
            c = 0,
            c = 1 >= a.gameLevelData.deleteContinuousCount ?
            deletebyLinecolumn + skillcontinuous * b : deletebyLinecolumn + skillcontinuous * b + specialskillcontinuous + skillcontinuous * (a.gameLevelData.deleteContinuousCount - 1);
        a.addScore(c);
        a.addScoreEffect(this.gridX, this.gridY, c)
    },
    deleteByUp: function(a) {
        var b = this.deleteGetDeleteCount(0, a, this.gridX, this.gridY),
            c = 0,
            c = 1 >= a.gameLevelData.deleteContinuousCount ? deletebyLinecolumn + skillcontinuous * b : deletebyLinecolumn + skillcontinuous * b + specialskillcontinuous + skillcontinuous * (a.gameLevelData.deleteContinuousCount - 1);
        a.addScore(c);
        a.addScoreEffect(this.gridX, this.gridY, c)
    },
    deleteByDown: function(a) {
        var b = this.deleteGetDeleteCount(1, a, this.gridX, this.gridY),
            c = 0,
            c = 1 >= a.gameLevelData.deleteContinuousCount ? deletebyLinecolumn + skillcontinuous * b : deletebyLinecolumn + skillcontinuous * b + specialskillcontinuous + skillcontinuous * (a.gameLevelData.deleteContinuousCount - 1);
        a.addScore(c);
        a.addScoreEffect(this.gridX, this.gridY, c)
    },
    deleteGetDeleteCount: function(a, b, c, d) {
        var e = [{
                pot: cc.p(0, -3),
                rotation: 0,
                startI: this.gridY - 1,
                checkI: -1,
                endI: tileMapGridMaxY,
                handleI: -1
            }, {
                pot: cc.p(0, 3),
                rotation: 180,
                startI: d + 1,
                checkI: 1,
                endI: tileMapGridMaxY,
                handleI: 1
            }, {
                pot: cc.p(-3, 0),
                rotation: 270,
                startI: c - 1,
                checkI: -1,
                endI: 1,
                handleI: -1
            }, {
                pot: cc.p(3, 0),
                rotation: 90,
                startI: this.gridX + 1,
                checkI: 1,
                endI: tileMapGridMaxX,
                handleI: 1
            }],
            f = cc.p(c, d);
        b.gamePlayLayer.addEffectByGridPoint(f.x, f.y, res.gameplayeffect_json, "lasereffect", 30, 1).setRotation(e[a].rotation);
        var f = [],
            g = 0,
            h = !1;
        null != b.getGrass(c, d) && (h = !0);
        for (var k = b.gridData.gridArr, m = e[a].startI; e[a].checkI * m < e[a].endI; m += e[a].handleI) {
            !1 ==
                h && null != b.getGrass(c, m) && (h = !0);
            var n = 1 < a ? k[m][d] : k[c][m];
            h && (1 < a ? b.addGrass(m, d) : b.addGrass(c, m));
            if (null != n) {
                n.isLaserDelete = !0;
                if (n.gridType == walnutType) {
                    n.desposeWalnut();
                    break
                }
                if (n.gridType == wallGrid) {
                    cc.log("墙被消除了");
                    n.despose();
                    break
                }
                n.gridType == laserGrid && (3 > n.powerNum && (n.powerNum += 2), 3 <= n.powerNum && (n.powerNum = 3));
                n = this.operationDeleteGrid(n, b);
                null != n.specialGridInfo && f.push(n.specialGridInfo);
                !0 == n.gridDespose && g++
            }
        }
        for (a = 0; a < f.length; a++) f[a].runSpecialGrid(b);
        return g
    },
    deleteByLineGetDeleteCount: function(a, b, c) {
        a.gamePlayLayer.addlinecolumneffect(b, c, res.gameplayeffect_json, "linecolumneffect", 30, 2);
        var d = [],
            e = 0,
            f = !1,
            g = !1;
        null != a.getGrass(b, c) && (g = f = !0);
        var h = a.gridData.gridArr;
        for (b -= 1; 0 <= b; b--) {
            !1 == f && null != a.getGrass(b, c) && (f = !0);
            f && a.addGrass(b, c);
            var k = h[b][c];
            if (null != k) {
                if (k.gridType == walnutType) {
                    k.desposeWalnut();
                    break
                }
                if (k.gridType == wallGrid) break;
                k = this.operationDeleteGrid(k, a);
                null != k.specialGridInfo && d.push(k.specialGridInfo);
                !0 == k.gridDespose &&
                    e++
            }
        }
        for (b = this.gridX + 1; b < tileMapGridMaxX; b++)
            if (!1 == g && null != a.getGrass(b, c) && (g = !0), g && a.addGrass(b, c), k = h[b][c], null != k) {
                if (k.gridType == walnutType) {
                    k.desposeWalnut();
                    break
                }
                if (k.gridType == wallGrid) break;
                k = this.operationDeleteGrid(k, a);
                null != k.specialGridInfo && d.push(k.specialGridInfo);
                !0 == k.gridDespose && e++
            } for (c = 0; c < d.length; c++) d[c].runSpecialGrid(a);
        return e
    },
    deleteByLine: function(a) {
        var b = this.deleteByLineGetDeleteCount(a, this.gridX, this.gridY),
            c = 0,
            c = 1 >= a.gameLevelData.deleteContinuousCount ?
            deletebyLinecolumn + skillcontinuous * b : deletebyLinecolumn + skillcontinuous * b + specialskillcontinuous + skillcontinuous * (a.gameLevelData.deleteContinuousCount - 1);
        a.addScore(c);
        a.addScoreEffect(this.gridX, this.gridY, c)
    },
    deleteByColumnGetDeleteCount: function(a, b, c) {
        a.gamePlayLayer.addlinecolumneffect(b, c).setRotation(90);
        var d = [],
            e = 0,
            f = !1,
            g = !1;
        null != a.getGrass(b, c) && (g = f = !0);
        for (var h = a.gridData.gridArr, k = this.gridY - 1; 0 <= k; k--) {
            !1 == f && null != a.getGrass(b, k) && (f = !0);
            f && a.addGrass(b, k);
            var m = h[b][k];
            if (null !=
                m) {
                if (m.gridType == walnutType) {
                    m.desposeWalnut();
                    break
                }
                if (m.gridType == wallGrid) break;
                m = this.operationDeleteGrid(m, a);
                null != m.specialGridInfo && d.push(m.specialGridInfo);
                !0 == m.gridDespose && e++
            }
        }
        for (k = c + 1; k < tileMapGridMaxY; k++)
            if (!1 == g && null != a.getGrass(b, k) && (g = !0), g && a.addGrass(b, k), m = h[b][k], null != m) {
                if (m.gridType == walnutType) {
                    m.desposeWalnut();
                    break
                }
                if (m.gridType == wallGrid) break;
                m = this.operationDeleteGrid(m, a);
                null != m.specialGridInfo && d.push(m.specialGridInfo);
                !0 == m.gridDespose && e++
            } for (b = 0; b < d.length; b++) d[b].runSpecialGrid(a);
        return e
    },
    deleteByColumn: function(a) {
        var b = this.deleteByColumnGetDeleteCount(a, this.gridX, this.gridY),
            c = 0,
            c = 1 >= a.gameLevelData.deleteContinuousCount ? deletebyLinecolumn + skillcontinuous * b : deletebyLinecolumn + skillcontinuous * b + specialskillcontinuous + skillcontinuous * (a.gameLevelData.deleteContinuousCount - 1);
        a.addScore(c);
        a.addScoreEffect(this.gridX, this.gridY, c)
    },
    deleteByColumnAndLine: function(a) {
        for (var b = 0, c = 0; c < this.specialInfoList.length; c++) {
            var d = this.specialInfoList[c];
            0 > d.gridX || d.gridX >= tileMapGridMaxX ||
                0 > d.gridY || d.gridY >= tileMapGridMaxY || (1 == d.type && (b += this.deleteByLineGetDeleteCount(a, d.gridX, d.gridY)), 2 == d.type && (b += this.deleteByColumnGetDeleteCount(a, d.gridX, d.gridY)))
        }
        c = 0;
        c = 2 < this.specialInfoList.length ? skilbomb + skillcontinuous * b * 10 : deletebyLinecolumn + skillcontinuous * b * 10;
        a.addScore(c);
        a.addScoreEffect(this.gridX, this.gridY, c)
    }
});
var SameGridInfo = cc.Class.extend({
    lineGrids: null,
    columnGrids: null,
    ownGrid: null,
    checkGridStr: null,
    continuousDelete: null,
    ctor: function() {
        this.continuousDelete = !1;
        this.checkGridStr = ""
    },
    getSameGridsLength: function() {
        return this.lineGrids.length + this.columnGrids.length
    },
    getSameGridsLengthByOwn: function() {
        return null == this.ownGrid ? 0 : this.lineGrids.length + this.columnGrids.length + 1
    },
    checkGridCanDelete: function() {
        1 >= this.lineGrids.length && (this.lineGrids = []);
        1 >= this.columnGrids.length && (this.columnGrids = []);
        if (this.getSameGridsLengthByOwn() >= minDeleteCount) {
            for (var a = 0; a < this.lineGrids.length; a++) {
                var b = this.lineGrids[a];
                this.checkGridStr += b.gridID.toString() + "|";
                b.isRunMove() && (this.lineGrids = [])
            }
            for (a = 0; a < this.columnGrids.length; a++) b = this.columnGrids[a], this.checkGridStr += b.gridID.toString() + "|", b.isRunMove() && (this.columnGrids = []);
            this.checkGridStr += this.ownGrid.gridID.toString() + "|";
            this.ownGrid.isRunMove() && (this.lineGrids = [], this.columnGrids = [])
        }
    },
    operationDeleteGrid: function(a, b) {
        if (null == a.iceSprite &&
            0 != a.specialType && !1 == a.isDespose) {
            var c = new SpecialGridInfo;
            c.continuousDelete = this.continuousDelete;
            5 == a.specialType ? c.createSpecialGrid(a.gridX, a.gridY, a.specialType, a.frameIndex + 1) : c.createSpecialGrid(a.gridX, a.gridY, a.specialType, a.gridType)
        }
        if (null == a.iceSprite) {
            var d = b.gridData.getSpecialGridByGridPoint(a.gridX, a.gridY);
            null != d && d.despose()
        }(a.isCanDelete() || a.hasCloud) && a.despose();
        return c
    },
    deleteGrid: function(a, b) {
        var c = 0;
        a.addGas(this.ownGrid.gridX, this.ownGrid.gridY);
        c += skillcontinuous *
            a.gameLevelData.deleteContinuousCount;
        a.gameLevelData.recordDeleteContinuousCount();
        var d = !1;
        null != a.getGrass(this.ownGrid.gridX, this.ownGrid.gridY) && (d = !0);
        if (!1 == d) {
            for (var e = 0; e < this.lineGrids.length; e++) {
                var f = this.lineGrids[e];
                if (null != a.getGrass(f.gridX, f.gridY)) {
                    d = !0;
                    break
                }
            }
            if (!1 == d)
                for (e = 0; e < this.columnGrids.length; e++)
                    if (f = this.columnGrids[e], null != a.getGrass(f.gridX, f.gridY)) {
                        d = !0;
                        break
                    }
        }
        d && a.addGrass(this.ownGrid.gridX, this.ownGrid.gridY);
        for (var e = [], g = 0; g < this.lineGrids.length; g++) f =
            this.lineGrids[g], d && a.addGrass(f.gridX, f.gridY), f = this.operationDeleteGrid(f, a), null != f && e.push(f);
        for (g = 0; g < this.columnGrids.length; g++) f = this.columnGrids[g], d && a.addGrass(f.gridX, f.gridY), f = this.operationDeleteGrid(f, a), null != f && e.push(f);
        f = this.operationDeleteGrid(this.ownGrid, a);
        null != f && e.push(f);
        for (d = 0; d < e.length; d++) e[d].runSpecialGrid(a);
        if (2 <= this.lineGrids.length && 2 <= this.columnGrids.length) c += skillgridlinerow, 2 == this.lineGrids.length ? c += skillgrid3 : 3 == this.lineGrids.length ? c += skillgrid4 :
            4 <= this.lineGrids.length && 4 <= this.lineGrids.length && (c += skillgrid5 + skillgridadd5 * (this.lineGrids.length - 4)), 2 == this.columnGrids.length ? c += skillgrid3 : 3 == this.columnGrids.length ? c += skillgrid4 : 4 <= this.columnGrids.length && 4 <= this.columnGrids.length && (c += skillgrid5 + skillgridadd5 * (this.columnGrids.length - 4));
        else if (2 == this.lineGrids.length || 2 == this.columnGrids.length) c += skillgrid3;
        else if (3 == this.lineGrids.length || 3 == this.columnGrids.length) c += skillgrid4;
        else if (4 <= this.lineGrids.length || 4 <= this.columnGrids.length) 4 <=
            this.lineGrids.length && (c += skillgrid5 + skillgridadd5 * (this.lineGrids.length - 4)), 4 <= this.columnGrids.length && (c += skillgrid5 + skillgridadd5 * (this.columnGrids.length - 4));
        2 <= this.lineGrids.length && 2 <= this.columnGrids.length && 4 > this.lineGrids.length && 4 > this.columnGrids.length ? a.gridData.createSpecialGrid(this.ownGrid, 3, a, this.ownGrid.gridType, !0) : 3 >= selectLevel ? 3 <= this.lineGrids.length ? a.gridData.createSpecialGrid(this.ownGrid, 1, a, this.ownGrid.gridType, !0) : 3 <= this.columnGrids.length && a.gridData.createSpecialGrid(this.ownGrid,
            2, a, this.ownGrid.gridType, !0) : 3 == this.lineGrids.length ? a.gridData.createSpecialGrid(this.ownGrid, 1, a, this.ownGrid.gridType, !0) : 3 == this.columnGrids.length ? a.gridData.createSpecialGrid(this.ownGrid, 2, a, this.ownGrid.gridType, !0) : (4 <= this.lineGrids.length || 4 <= this.columnGrids.length) && a.gridData.createSpecialGrid(this.ownGrid, 4, a, 7, !0);
        a.addScore(c);
        a.addScoreEffect(this.ownGrid.gridX, this.ownGrid.gridY, c)
    },
    deleteGridByOwner: function(a) {
        var b = this.operationDeleteGrid(this.ownGrid, a);
        null != b && b.runSpecialGrid(a)
    }
});
var gridID = 0,
    createGridID = function() {
        return gridID++
    },
    GridData = TileMap.extend({
        specialGridArr: null,
        gamePlayFacade: null,
        isDeleteEmptyGrid: null,
        portalData: null,
        portalSccepterGridkey: null,
        portalAccepterList: null,
        tempGridArrForOnceReset: [],
        initialize: function(a) {
            this.portalAccepterList = [];
            this.isDeleteEmptyGrid = !1;
            this.portalData = {};
            this.portalSccepterGridkey = {};
            gridID = 0;
            this._super(a);
            this.specialGridArr = [];
            for (a = 0; a < this.gridMaxX; a++) {
                for (var b = [], c = 0; c < this.gridMaxY; c++) b.push(this.defaultGridValue);
                this.specialGridArr.push(b)
            }
        },
        deleteEmptyGrid: function() {
            if (!0 != this.isDeleteEmptyGrid) {
                this.isDeleteEmptyGrid = !0;
                for (var a = 0; a < this.gridMaxX; a++)
                    for (var b = 0; b < this.gridMaxY; b++) {
                        var c = this.gridArr[a][b];
                        null != c && c.gridType == emptyGrid && c.despose()
                    }
            }
        },
        addPortalData: function(a, b, c, d) {
            this.gamePlayFacade.addPortal(a, b, d);
            null == this.portalData[c] && (this.portalData[c] = {});
            1 == d ? this.portalData[c].sender = cc.p(a, b) : (this.portalSccepterGridkey[a.toString() + "|" + b.toString()] = c, this.portalData[c].accepter = cc.p(a,
                b))
        },
        isPortalAccepter: function(a, b) {
            return this.portalSccepterGridkey[a.toString() + "|" + b.toString()]
        },
        getSenderGridByPortalID: function(a) {
            return this.portalData[a].sender
        },
        setPortalAccepterList: function() {
            for (var a in this.portalData) {
                var b = this.portalData[a],
                    c = {};
                c.portalAccepterID = a;
                c.gridX = b.accepter.x;
                c.gridY = b.accepter.y;
                this.portalAccepterList.push(c)
            }
        },
        setSpecialGridInfo: function(a, b, c) {
            if (null != c) {
                if (c.isDespose) {
                    engine.gameTool.printLog("消除掉的元素");
                    return
                }
                c.gridX =
                    a;
                c.gridY = b;
                c.setzIndex()
            }
            this.specialGridArr[a][b] = c
        },
        getSpecialGridByGridPoint: function(a, b) {
            return 0 > a || 0 > b || a >= this.gridMaxX || b >= this.gridMaxY ? null : this.specialGridArr[a][b]
        },
        settingGridByAStar: function(a) {
            for (a = 0; a < this.specialGridArr.length; a++)
                for (var b = 0; b < this.specialGridArr[a].length; b++) {
                    var c = this.specialGridArr[a][b];
                    if (null != c) {
                        var d = this.getGridPointByScenePoint(a, b);
                        c.x = d.x;
                        c.y = d.y
                    }
                }
            this._super()
        },
        gridCanMove: function(a, b) {
            for (var c = b; c < this.gridArr[a].length; c++) {
                var d = this.gridArr[a][c];
                if (null == d || !1 == d.isFree()) return !1
            }
            return !0
        },
        createGridList: function(a) {
            for (var b = 0, c = 0; c < this.gridMaxX; c++)
                for (var d = 0; d < this.gridMaxY; d++) {
                    var e = a[d][c],
                        e = e.split("+");
                    if ("0" != e[0]) {
                        var f = !1,
                            g = e[0].indexOf("@"),
                            h = e[0].lastIndexOf("@");
                        if (g != h) {
                            cc.error("一个格子出现了2个云！！！");
                            return
                        } - 1 != g && (e[0] = e[0].replace("@", ""), f = !0);
                        var k = !1,
                            g = e[0].indexOf("#"),
                            h = e[0].lastIndexOf("#");
                        if (g != h) {
                            cc.error("一个格子出现了2个狗盆子！！！");
                            return
                        } - 1 != g && (e[0] = e[0].replace("#", ""), k = !0);
                        "9" == e[0] && b++;
                        "X" == e[0] ? (this.setGridInfo(c, d, createGrid(nullGrid, 0, c, d, this.gamePlayFacade, f, k)), this.gamePlayFacade.noGrass(c, d)) : "Q" == e[0] ? this.setGridInfo(c, d, createGrid(emptyGrid, 0, c, d, this.gamePlayFacade, f, k)) : null != e[1] ? this.setGridInfo(c, d, createGrid(parseInt(e[0]), parseInt(e[1]), c, d, this.gamePlayFacade, f, k)) : this.setGridInfo(c, d, createGrid(parseInt(e[0]), 0, c, d, this.gamePlayFacade, f, k));
                        void 0 != e[1] && -1 != [17, 18, 20, 21, 25, 26, 27].indexOf(parseInt(e[0])) &&
                            -1 != [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].indexOf(parseInt(e[1])) && cc.error("发现地图错误")
                    }
                }
            for (c = 0; c < this.gridMaxX; c++)
                for (d = 0; d < this.gridMaxY; d++) {
                    e = a[d][c];
                    e = e.split("+");
                    if ("0" == e[0])
                        if (f = Math.floor(100 * Math.random()) % gridTypeMax + 1, -1 != only5TypeGridLevelArr.indexOf(selectLevel) && (f = Math.floor(100 * Math.random()) % (gridTypeMax - 1) + 1), 2 <= this.getGridListByType(c, d, f).getSameGridsLength())
                            for (f = this.getGridAroundType(c, d), g = 1; g < gridTypeMax; g++) 0 > f.indexOf("|" + g.toString()) && (null != e[1] ?
                                this.setGridInfo(c, d, createGrid(g, parseInt(e[1]), c, d, this.gamePlayFacade)) : this.setGridInfo(c, d, createGrid(g, 0, c, d, this.gamePlayFacade)));
                        else null != e[1] ? this.setGridInfo(c, d, createGrid(f, parseInt(e[1]), c, d, this.gamePlayFacade)) : this.setGridInfo(c, d, createGrid(f, 0, c, d, this.gamePlayFacade));
                    null != e[3] && ("13" != e[3] && "14" != e[3] || this.setSpecialGridInfo(c, d, createGrid(parseInt(e[3]), 0, c, d, this.gamePlayFacade)), "12" == e[3] && this.gamePlayFacade.addGrass(c, d, !0));
                    null != e[2] && "5" == e[2] && this.gridArr[c][d].addIce();
                    null != e[4] && "1" == e[4] && this.gridArr[c][d].addGem();
                    null != e[5] && "0" != e[5] && (f = e[5].split("|"), 3 <= f.length ? this.gamePlayFacade.addTransfer(parseInt(f[0]), c, d, parseInt(f[1]), parseInt(f[2]), f[3]) : this.addPortalData(c, d, parseInt(f[0]), parseInt(f[1])));
                    "16" == e[6] && (this.gamePlayFacade.gameLevelData.waterLayerNum = 2, this.gridArr[c][d].addBlisters())
                }
            if (0 < b)
                for (this.gamePlayFacade.gameLevelData.createAddPetData(b), c = 0; c < this.gridMaxX; c++) a = this.gridArr[c][this.gridMaxY - 1], a.gridType != nullGrid && this.gamePlayFacade.addIntoPet(a.gridX,
                    a.gridY, this)
        },
        getGridAroundType: function(a, b) {
            var c = "";
            0 <= a - 1 && null != this.gridArr[a - 1][b] && (c += "|" + this.gridArr[a - 1][b].gridType.toString());
            a + 1 < this.gridMaxX && null != this.gridArr[a + 1][b] && (c += "|" + this.gridArr[a + 1][b].gridType.toString());
            0 <= b - 1 && null != this.gridArr[a][b - 1] && (c += "|" + this.gridArr[a][b - 1].gridType.toString());
            b + 1 < this.gridMaxY && null != this.gridArr[a][b + 1] && (c += "|" + this.gridArr[a][b + 1].gridType.toString());
            return c
        },
        getGridListByTypeBefore: function(a, b, c, d, e) {
            for (var f = [], g = [], h = [], k =
                    c - 1; 0 <= k; k--) {
                var m = this.getBeforGrid(k, d, a, b, c, d);
                if (null != m && checkIsSameType(m, e) && m.gridType != pigType && m.isFree() && m.gridType != walnutType && 0 == m.specialType) g.push(m);
                else break
            }
            for (k = c + 1; k < this.gridMaxX; k++)
                if (m = this.getBeforGrid(k, d, a, b, c, d), null != m && checkIsSameType(m, e) && m.gridType != pigType && m.isFree() && m.gridType != walnutType && 0 == m.specialType) g.push(m);
                else break;
            for (k = d + 1; k < this.gridMaxY; k++)
                if (m = this.getBeforGrid(c, k, a, b, c, d), null != m && checkIsSameType(m, e) && m.gridType != pigType && m.isFree() &&
                    m.gridType != walnutType && 0 == m.specialType) h.push(m);
                else break;
            for (k = d - 1; 0 <= k; k--)
                if (m = this.getBeforGrid(c, k, a, b, c, d), null != m && checkIsSameType(m, e) && m.gridType != pigType && m.isFree() && m.gridType != walnutType && 0 == m.specialType) h.push(m);
                else break;
            2 <= g.length && (f = f.concat(g));
            2 <= h.length && (f = f.concat(h));
            2 <= f.length && (a = this.gridArr[a][b], null != a && a.gridType == e && f.push(a));
            return f
        },
        getBeforGrid: function(a, b, c, d, e, f) {
            return a == c && b == d ? this.gridArr[e][f] : e == a && f == b ? this.gridArr[c][d] : this.gridArr[a][b]
        },
        getGridListByTypeByOwn: function(a, b, c, d) {
            d = this.gridArr[a][b];
            1 <= d.specialType && 3 >= d.specialType ? (a = new SameGridInfo, a.lineGrids = [], a.columnGrids = []) : a = this.getGridListByType(a, b, c);
            null != d && d.gridType == c && (a.ownGrid = d);
            return a
        },
        getGridListByType: function(a, b, c, d) {
            d = new SameGridInfo;
            for (var e = [], f = [], g = a - 1; 0 <= g; g--) {
                var h = this.gridArr[g][b];
                if (null != h && checkIsSameType(h, c) && 0 == h.specialType) e.push(h);
                else break
            }
            for (g = a + 1; g < this.gridMaxX; g++)
                if (h = this.gridArr[g][b], null != h && checkIsSameType(h, c) &&
                    0 == h.specialType) e.push(h);
                else break;
            for (g = b + 1; g < this.gridMaxY; g++)
                if (h = this.gridArr[a][g], null != h && checkIsSameType(h, c) && 0 == h.specialType) f.push(h);
                else break;
            for (b -= 1; 0 <= b; b--)
                if (g = this.gridArr[a][b], null != g && checkIsSameType(g, c) && 0 == g.specialType) f.push(g);
                else break;
            e.length < minDeleteCount - 1 && (e = []);
            f.length < minDeleteCount - 1 && (f = []);
            d.lineGrids = e;
            d.columnGrids = f;
            return d
        },
        isSameGrid: function(a, b) {
            if (null == a || null == b || a.gridX != b.gridX || a.gridY != b.gridY) return !1
        },
        randomGrid: function(a, b) {
            var c,
                d = 0;
            if (0 < this.gamePlayFacade.gameLevelData.isMustCreatePigCount) c = pigType, this.gamePlayFacade.gameLevelData.isMustCreatePigCount--;
            else if (0 < this.gamePlayFacade.gameLevelData.createChangeGrid) this.gamePlayFacade.gameLevelData.createChangeGrid--, c = changeGrid, d = 5;
            else if (2 == selectType) c = Math.floor(100 * Math.random()) % gridTypeMax + 1;
            else {
                c = engine.gameData.dataDic.leveldata[selectLevel].dropelement.split("|");
                var e = Math.floor(100 * Math.random()) % c.length;
                c = parseInt(c[e])
            }
            c = createGrid(c, d, a, b, this.gamePlayFacade);
            e = 100 * Math.random();
            !0 == this.gamePlayFacade.gameLevelData.isExistGold && 0 == d && 5 >= e && c.addGold();
            !0 == this.gamePlayFacade.gameLevelData.isExistTime && 0 == d && 95 <= e && (d = parseInt(e) % 2 + 1, c.addTime(d));
            this.gamePlayFacade.gamePlayLayer.addGrid(c);
            this.setGridInfo(a, b, c);
            c.setScenePointByGrid();
            return c
        },
        createSpecialGridDespose: function(a, b, c, d, e) {
            a.removeFromParent();
            this.createSpecialGrid(a, b, c, d, e, !0)
        },
        createSpecialGrid: function(a, b, c, d, e, f) {
            var g = a.gridX,
                h = a.gridY;
            e && a.despose();
            var k = createGrid(d, b, g,
                h, c);
            this.setGridInfo(g, h, k);
            k.setScenePointByGrid();
            !1 == e && (null != a.iceSprite && k.addIce(), null != a.blisters && k.addBlisters(), !0 == a.isGem && k.addGem(), !0 == a.isGold && k.addGold());
            c.gamePlayLayer.addGrid(k);
            f || k.runAction(cc.sequence(cc.callFunc(function() {
                k.scale = 0.01
            }), cc.delayTime(0.23), cc.scaleTo(0.15, 1, 1)));
            return k
        },
        createBottomGrid: function(a, b, c, d) {
            var e = a.gridX,
                f = a.gridY;
            a.despose();
            a = createGrid(d, b, e, f, c);
            this.setSpecialGridInfo(e, f, a);
            a.setScenePointByGrid();
            c.gamePlayLayer.addBottomGrid(a);
            return a
        },
        promptFindDelete: function() {
            for (var a, b = !1, c = 0; c < this.gridMaxX; c++)
                for (var d = 0; d < this.gridMaxY; d++) {
                    var e = this.gridArr[c][d];
                    if (null != e) {
                        if (4 == e.specialType || 5 == e.specialType) b = !0;
                        c + 1 < this.gridMaxX && (a = this.promptFindDeleteByGrid(e, this.gridArr[c + 1][d]));
                        if (null != a) return a;
                        d + 1 < this.gridMaxY && (a = this.promptFindDeleteByGrid(e, this.gridArr[c][d + 1]));
                        if (null != a) return a
                    }
                }
            null == a && !0 == b && (a = {
                isSpecialType: !0
            });
            return a
        },
        promptFindDeleteByGrid: function(a, b) {
            if (null == a || null == b || a.hasCloud || b.hasCloud ||
                !checkIdIsAnimal(a.gridType) && -1 != gridRuleArrayOb.noPromt.indexOf(a.gridType) || !checkIdIsAnimal(b.gridType) && -1 != gridRuleArrayOb.noPromt.indexOf(b.gridType) || null != a.iceSprite || null != b.iceSprite) return null;
            var c = !1;
            if (a.gridType == suctionType && checkIdIsAnimal(b.gridType) || b.gridType == suctionType && checkIdIsAnimal(a.gridType) || a.gridType == suctionType && b.gridType == suctionType) c = !0;
            1 <= b.specialType && 3 >= b.specialType && 1 <= a.specialType && 3 >= a.specialType && (c = !0);
            var d, e, f;
            1 <= a.specialType && 3 >= a.specialType ||
                1 <= b.specialType && 3 >= b.specialType ? e = !0 : (a.gridType != pigType && a.gridType != walnutType && (e = this.gamePlayFacade.gridData.getGridListByTypeCountBefore(a.gridX, a.gridY, b.gridX, b.gridY, a.gridType)), b.gridType != pigType && b.gridType != walnutType && (f = this.gamePlayFacade.gridData.getGridListByTypeCountBefore(b.gridX, b.gridY, a.gridX, a.gridY, b.gridType)));
            if (c || e || f) d = {}, d.nowGridX = a.gridX, d.nowGridY = a.gridY, d.toGridX = b.gridX, d.toGridY = b.gridY;
            return d
        },
        isInMapByGridPoint: function(a, b) {
            var c = this.getGridByGridPoint(a,
                b);
            return 0 > a || 0 > b || a >= this.gridMaxX || b >= this.gridMaxY || null != c && c.gridType == nullGrid ? !1 : !0
        },
        getGridListByTypeCountBefore: function(a, b, c, d, e) {
            for (var f = 0, g = 0, h = c - 1; 0 <= h; h--) {
                var k = this.getBeforGrid(h, d, a, b, c, d);
                if (null != k && checkIsSameType(k, e) && 0 == k.specialType) f++;
                else break
            }
            for (h = c + 1; h < this.gridMaxX; h++)
                if (k = this.getBeforGrid(h, d, a, b, c, d), null != k && checkIsSameType(k, e) && 0 == k.specialType) f++;
                else break;
            for (h = d + 1; h < this.gridMaxY; h++)
                if (k = this.getBeforGrid(c, h, a, b, c, d), null != k && checkIsSameType(k, e) &&
                    0 == k.specialType) g++;
                else break;
            for (h = d - 1; 0 <= h; h--)
                if (k = this.getBeforGrid(c, h, a, b, c, d), null != k && checkIsSameType(k, e) && 0 == k.specialType) g++;
                else break;
            if (2 <= g || 2 <= f) {
                if (a = this.gridArr[a][b], null != a && a.gridType == e) return !0
            } else return !1
        }
    }),
    createGridData = function() {
        var a = new GridData,
            b = {};
        b.offsetX = tileMapOffsetX;
        b.offsetY = tileMapOffsetY;
        b.gridWidth = tileMapGridWidth;
        b.gridHeight = tileMapGridHeight;
        b.gridMaxX = tileMapGridMaxX;
        b.gridMaxY = tileMapGridMaxY;
        b.defaultGridValue = null;
        a.initialize(b);
        return a
    },
    createPetSkinData = function() {
        createPetSkinDataBySkinID(1, 79);
        createPetSkinDataBySkinID(2, 79);
        createPetSkinDataBySkinID(3, 79);
        createPetSkinDataBySkinID(4, 79);
        createPetSkinDataBySkinID(5, 79);
        createPetSkinDataBySkinID(6, 79);
        createPetSkinDataBySkinID(violet, 79);
        createPetSkinDataBySkinID(7, 45);
        createPetSkinDataBySkinID(13, 1);
        createPetSkinDataBySkinID(14, 1);
        createPetSkinDataBySkinID(15, 6);
        createPetSkinDataBySkinID(9, 1);
        createPetSkinDataBySkinID(10, 1);
        createPetSkinDataBySkinID(11, 1);
        createPetSkinDataBySkinID(16,
            1);
        createPetSkinDataBySkinID(17, 15);
        createPetSkinDataBySkinID(21, 40);
        createPetSkinDataBySkinID(31, 79);
        createPetSkinDataBySkinID(32, 79);
        createPetSkinDataBySkinID(33, 79);
        createPetSkinDataBySkinID(34, 79);
        createPetSkinDataBySkinID(35, 79);
        createPetSkinDataBySkinID(36, 79);
        createEffectDataByName("blisters", 14);
        createEffectDataByName("waves", 18);
        createEffectDataByName("wavesup", 10);
        createEffectDataByName("wood2effect", 6);
        createEffectDataByName("wood1effect", 6);
        createEffectDataByName("ice1effect", 9);
        createEffectDataByName("ice2effect",
            9);
        createEffectDataByName("grass", 20);
        createEffectDataByName("gem", 7);
        createEffectDataByName("addiceeffect", 6);
        createEffectDataByName("grid7effect", 20);
        createEffectDataByName("changeitemeffect1", 13);
        createEffectDataByName("changeitemeffect2", 10);
        createEffectDataByName("gasboxeffect", 8);
        createEffectDataByName("walnuteffect", 12);
        createEffectDataByName("walleffect", 11);
        createEffectDataByName("cherryblossomseffect", 11);
        createEffectDataByName("cherryblossomsupeffect", 40);
        createEffectDataByName("egg1effect",
            43);
        createEffectDataByName("egg2effect", 43);
        createEffectDataByName("gridbroken", 7);
        createEffectDataByName("grid7upeffect", 10);
        createEffectDataByName("bombeffect", 10);
        createEffectDataByName("linebrokengrideffect", 13);
        createEffectDataByName("cloud0", 48)
    },
    createEffectDataByName = function(a, b) {
        if (null == skeletalAnimation["gridskin|" + a]) {
            skeletalAnimation["gridskin|" + a] = {};
            skeletalAnimation["gridskin|" + a].frameMaxIndex = b;
            skeletalAnimation["gridskin|" + a].framesBitmapList = [];
            for (var c = 1; c <= b; c++) {
                var d = a,
                    e = "000" + c.toString(),
                    d = d + e.substring(e.length - 3, e.length),
                    e = {};
                e.url = d;
                e.x = 0;
                e.y = 0;
                skeletalAnimation["gridskin|" + a].framesBitmapList.push(e)
            }
        }
    },
    createPetSkinDataBySkinID = function(a, b) {
        if (null == skeletalAnimation["gridskin|grid" + a]) {
            skeletalAnimation["gridskin|grid" + a] = {};
            skeletalAnimation["gridskin|grid" + a].frameMaxIndex = b;
            skeletalAnimation["gridskin|grid" + a].framesBitmapList = [];
            for (var c = 1; c <= b; c++) {
                var d = c;
                30 < a && 38 > a && 18 < c && 32 > c && (d -= 18);
                var e = "grid" + a + "png",
                    d = "000" + d.toString(),
                    e = e + d.substring(d.length -
                        4, d.length);
                checkIdIsAnimal(a) && (32 <= c && 47 >= c && (e = "rocket" + ("00" + (c - 31)).slice(-3)), 48 <= c && 63 >= c && (e = "rocket_line" + ("00" + (c - 47)).slice(-3)), 64 <= c && 79 >= c && (e = "bomb" + ("00" + (c - 63)).slice(-3)));
                d = {};
                d.url = e;
                d.x = 0;
                d.y = 0;
                skeletalAnimation["gridskin|grid" + a].framesBitmapList.push(d)
            }
        }
    };
var wingem = 11,
    winice = 9,
    winwood = 8,
    wingrass = 7,
    winpig = 10,
    winwater = 12,
    winwalnut = 20,
    GameLevelData = cc.Class.extend({
        step: null,
        score: null,
        targetScore: null,
        isCheckEnd: null,
        nowTime: null,
        maxTime: null,
        selectLevel: null,
        startCount: null,
        gold: null,
        gameGold: null,
        isPlayStartEffect: null,
        maxScore: null,
        victoryCondition: null,
        achievementCount: null,
        isExistGem: null,
        isExistGold: null,
        isExistTime: null,
        addPigList: null,
        isExistPig: null,
        isMustCreatePigCount: null,
        isTransfer: null,
        waterLayerNum: null,
        gameTiming: null,
        createChangeGrid: null,
        gasEffectiveTime: null,
        gasCount: null,
        deleteContinuousCount: null,
        isRecordDeleteContinuousCount: null,
        noWaterLine: null,
        step10Effect: null,
        step5Effect: null,
        isShowCommonAddStepLayer: null,
        gamePlayFacade: null,
        score1: null,
        score2: null,
        score3: null,
        petId: null,
        initialize: function() {
            this.noWaterLine = "";
            this.maxTime = 6E4;
            debugtest.timeModelTime && (this.maxTime = debugtest.timeModelTime);
            this.deleteContinuousCount = this.nowTime = 0;
            this.isRecordDeleteContinuousCount = !1;
            this.waterLayerNum = 0;
            this.isExistPig = this.isExistGem = !1;
            this.isMustCreatePigCount = 0;
            this.isTransfer = !1;
            this.achievementCount = this.startCount = 0;
            this.addPigList = [];
            this.victoryCondition = [];
            this.isPlayStartEffect = [0, 0, 0];
            this.gameGold = this.score = 0;
            this.isExistGold = !1;
            this.gasCount = this.createChangeGrid = 0;
            this.isGameTimeEnd = !1;
            this.playScoreEffectIndex = 0;
            this.isShowCommonAddStepLayer = this.step5Effect = this.step10Effect = !1;
            this.petId = 1;
            switch (selectType) {
                case 1:
                    var a = engine.gameData.dataDic.leveldata[selectLevel],
                        b = [],
                        c = [];
                    0 < a.count.toString().length && (b =
                        a.count.toString().split("|"));
                    0 < a.wintype.toString().length && (c = a.wintype.toString().split("|"));
                    for (var d = 0; d < c.length; d++) {
                        var e = {};
                        e.count = parseInt(b[d]);
                        e.maxcount = parseInt(b[d]);
                        e.winType = parseInt(c[d]);
                        e.winType == wingem && (this.isExistGem = !0);
                        e.winType == winpig && (this.isExistPig = !0, tileMapOffsetY = 164);
                        this.victoryCondition.push(e)
                    }!1 == this.isExistPig && (tileMapOffsetY = 150);
                    this.step = a.step;
                    this.targetScore = a.minscore;
                    this.selectLevel = selectLevel;
                    this.score1 = a.score1;
                    this.score2 = a.score2;
                    this.score3 =
                        a.score3;
                    this.maxScore = parseInt(this.score3 + 0.1 * this.score3);
                    this.isCheckEnd = 1;
                    this.petId = a.petid;
                    break;
                case 2:
                    tileMapOffsetY = 150, this.isExistTime = !0, this.isCheckEnd = 2, this.petId = "time"
            }
        },
        beginRecordDeleteContinuousCount: function() {
            this.isRecordDeleteContinuousCount = !0;
            this.deleteContinuousCount = 0
        },
        endRecordDeleteContinuousCount: function() {
            this.isRecordDeleteContinuousCount = !1;
            this.deleteContinuousCount = 0
        },
        recordDeleteContinuousCount: function() {
            !0 == this.isRecordDeleteContinuousCount && this.deleteContinuousCount++
        },
        beginGameTiming: function() {
            this.gasEffectiveTime = engineGameRunTime();
            this.gameTiming = engineGameRunTime()
        },
        addGas: function() {
            if (5 == this.gasCount) return !1;
            if (0 == this.gasCount || 2E3 > engineGameRunTime() - this.gasEffectiveTime) {
                this.gasCount += 1;
                if (5 == this.gasCount) {
                    this.createChangeGrid++;
                    var a = this.gamePlayFacade;
                    engineSetTimeOut(function() {
                        a.resetGas()
                    }, 1, null, 1)
                }
                this.gasEffectiveTime = engineGameRunTime();
                return !0
            }
            this.gasEffectiveTime = engineGameRunTime();
            return !1
        },
        resetGas: function() {
            this.gasEffectiveTime =
                engineGameRunTime();
            this.gasCount = 0
        },
        checkCleanGas: function() {
            2E3 < engineGameRunTime() - this.gasEffectiveTime && (this.gasCount = 0, this.gasEffectiveTime = engineGameRunTime(), this.gamePlayFacade.gamePlayLayer.refreshGasIcon())
        },
        updateTime: function() {
            this.nowTime = engineGameRunTime() - this.gameTiming;
            this.nowTime >= this.maxTime && this.gamePlayFacade.gameTimeEnd()
        },
        getGameTimeBySecond: function() {
            return this.nowTime >= this.maxTime ? 0 : this.maxTime / 1E3 - Math.floor(this.nowTime / 1E3)
        },
        setInitGrassCount: function(a) {
            if (0 <
                a)
                for (var b = 0; b < this.victoryCondition.length; b++) this.victoryCondition[b].winType == wingrass && (this.victoryCondition[b].count = this.victoryCondition[b].maxcount - a)
        },
        createAddPetData: function(a) {
            var b = this.getVictoryConditionCountByWinType(winpig);
            if (a < b)
                for (var c = 0; c < b - a; c++)
                    for (var d = 1 + parseInt(100 * Math.random()) % 3; 0 <= d; d--) 0 == d ? this.addPigList.push(1) : this.addPigList.push(0)
        },
        isCheckAddPig: function() {
            0 < this.addPigList.length && 1 == this.addPigList.shift() && this.isMustCreatePigCount++
        },
        updateVictoryCondition: function(a,
            b, c, d) {
            a = !1;
            var e = 0;
            checkIdIsAnimal(b) ? e = b : (b == iceType1 && (e = winice), b == wood1 && (e = winwood), b == grass && (e = wingrass), b == pigType && (e = winpig), b == walnutType && (e = winwalnut));
            !0 == this.addVictoryConditionByWinType(e) && (a = !0);
            !0 == c && !0 == this.addVictoryConditionByWinType(wingem) && (a = !0);
            !0 == d && !0 == this.addVictoryConditionByWinType(winwater) && (a = !0);
            return a
        },
        getVictoryConditionCountByWinType: function(a) {
            for (var b = 0; b < this.victoryCondition.length; b++) {
                var c = this.victoryCondition[b];
                if (c.winType == a) return c.count
            }
            return 0
        },
        addVictoryConditionByWinType: function(a) {
            for (var b = [31, 32, 33, 34, 35, 36, 37], c = 0; c < this.victoryCondition.length; c++) {
                var d = this.victoryCondition[c];
                if (d.winType == a || 38 == d.winType && -1 != b.indexOf(a)) return d.count -= 1, 0 > d.count && (d.count = 0), !0
            }
        },
        ctor: function() {
            this.score = 0
        },
        checkWin: function() {
            var a = 1;
            if (this.score >= this.targetScore)
                for (var b = 0; b < this.victoryCondition.length; b++) 0 < this.victoryCondition[b].count && (a = 0);
            else a = 0;
            0 >= this.step && 0 == a && (a = 2, EventMgr.emit(EVENTMGR_ID.MONSTER_FAIL));
            return a
        },
        saveData: function() {
            switch (selectType) {
                case 1:
                    var a = engine.gameData.dataDic.leveldata[selectLevel];
                    this.computeScore();
                    this.computeStartCount(a);
                    this.computeAchievementCount(a);
                    this.computeGold();
                    heroData.updateGold(this.gold);
                    heroData.setLevelStart(this.selectLevel, this.startCount);
                    heroData.setAchievementCount(this.selectLevel, this.achievementCount);
                    heroData.setLevelMaxScore(this.selectLevel, this.score);
                    break;
                case 2:
                    this.computeScore(), heroData.setGameTimeBestScore(this.score)
            }
            saveHeroData()
        },
        addScore: function(a) {
            this.score +=
                a;
            switch (selectType) {
                case 1:
                    this.score >= this.score3 && 0 == this.isPlayStartEffect[2] && (this.isPlayStartEffect = [1, 1, 1], this.gamePlayFacade.gamePlayLayer.addStartEffect(3)), this.score >= this.score2 && 0 == this.isPlayStartEffect[1] && (this.isPlayStartEffect = [1, 1, 0], this.gamePlayFacade.gamePlayLayer.addStartEffect(2)), this.score >= this.score1 && 0 == this.isPlayStartEffect[0] && (this.isPlayStartEffect = [1, 0, 0], this.gamePlayFacade.gamePlayLayer.addStartEffect(1))
            }
        },
        addGameGold: function(a) {
            this.gameGold += a
        },
        computeAchievementCount: function(a) {
            this.score >=
                a.achievementscore3 ? this.achievementCount = 3 : this.score >= a.achievementscore2 ? this.achievementCount = 2 : this.score >= a.achievementscore1 && (this.achievementCount = 1)
        },
        computeStartCount: function(a) {
            this.score >= a.score3 ? this.startCount = 3 : this.score >= a.score2 ? this.startCount = 2 : this.score >= a.score1 && (this.startCount = 1)
        },
        computeScore: function() {
            this.score = parseInt(1 * this.score)
        },
        computeGold: function() {
            heroData.getSelectePet();
            var a = 2 * (this.score / 2E5 + 0.5),
                b = engine.gameData.dataDic.leveldata[selectLevel],
                c = 0,
                d =
                0;
            switch (selectType) {
                case 1:
                    1 <= this.startCount && (c = b.gold1);
                    2 <= this.startCount && (c = b.gold2);
                    3 <= this.startCount && (c = b.gold3);
                    break;
                case 2:
                    d = this.gameGold
            }
            this.gold = parseInt(1 * (c + a + d))
        }
    }),
    getVictoryConditionData = function(a, b) {
        var c = engine.gameData.dataDic.leveldata[a],
            d = {};
        if (0 < c.wintype.toString().length) {
            for (var e = [], f = [], g = [], h = c.wintype.toString().split("|"), k = c.count.toString().split("|"), m = 0; m < h.length; m++) d = {}, d.winType = parseInt(h[m]), d.count = parseInt(k[m]), 6 >= parseInt(h[m]) ? e.push(d) : f.push(d),
                g.push(d);
            d.allCondition = g;
            d.general = e;
            d.special = f
        }
        d.minscore = c.minscore;
        return d
    },
    createlevelTimeData = function() {
        return ["00000000".split(""), "00000000".split(""), "00000000".split(""), "00000000".split(""), "00000000".split(""), "00000000".split(""), "00000000".split(""), "00000000".split("")]
    };
var getPetNewID = function() {
        var a = 1E4,
            b = "",
            c;
        for (c in heroData.petDic) parseInt(c) < a && (a = parseInt(c)), b += "*" + c.toString() + "*";
        for (; 0 <= b.indexOf("*" + a.toString() + "*");) a += 1;
        return a
    },
    PetData = cc.Class.extend({
        id: null,
        petid: null,
        petlevel: null,
        petlevelnum: null,
        getPetStart: function() {
            return parseInt(engine.gameData.dataDic.petdata[this.petid].petstar)
        },
        getPetNameIcon: function() {
            return engine.gameData.dataDic.petdata[this.petid].petnameicon.toString()
        },
        getPetSkinID: function() {
            return engine.gameData.dataDic.petdata[this.petid].petskinid.toString()
        },
        getPetIcon: function() {
            return engine.gameData.dataDic.petdata[this.petid].peticon.toString()
        },
        getPetNextLevelNum: function() {
            return engine.gameData.dataDic.petlevel[this.petlevel + 1].levelnum
        },
        getPetMaxLevel: function() {
            return parseInt(engine.gameData.dataDic.petdata[this.petid].maxlevel)
        },
        getPetAddGold: function() {
            var a = engine.gameData.dataDic.petdata[this.petid].addgold.split("|");
            return parseInt(a[0]) + parseInt(a[1]) * this.petlevel
        },
        getPetAddScore: function() {
            var a = engine.gameData.dataDic.petdata[this.petid].addscore.split("|");
            return parseInt(a[0]) + parseInt(a[1]) * this.petlevel
        },
        getPetExperience: function() {
            return parseInt(engine.gameData.dataDic.petdata[this.petid].experience)
        },
        getSkillProbability: function() {
            var a = this.getSkillID();
            return parseInt(engine.gameData.dataDic.petskilldata[a].probability)
        },
        getSkilltype: function() {
            var a = this.getSkillID();
            return parseInt(engine.gameData.dataDic.petskilldata[a].skilltype)
        },
        getSkillID: function() {
            return parseInt(engine.gameData.dataDic.petdata[this.petid].skillid)
        },
        upLevelByPetID: function(a,
            b) {
            heroData.upLevelByPetID(a, b)
        },
        upLevelByExperience: function(a) {
            0 >= a || (this.petlevelnum + a >= this.getPetNextLevelNum() ? (a = this.petlevelnum + a - this.getPetNextLevelNum(), this.petlevel < this.getPetMaxLevel() && (this.petlevel += 1, this.petlevelnum = 0, this.upLevelByExperience(a))) : this.petlevelnum += a)
        },
        getNeedUpPetExp: function(a, b) {
            var c = 0;
            if (this.petlevel == a) c = this.petlevelnum - b;
            else {
                for (var c = b, d = a; d < this.petlevel; d++) c += engine.gameData.dataDic.petlevel[d + 1].levelnum;
                c -= this.petlevelnum
            }
            0 >= c && (c = 0);
            return c
        },
        clone: function() {
            var a = new PetData;
            a.id = this.id;
            a.petlevel = this.petlevel;
            a.petlevelnum = this.petlevelnum;
            a.petid = this.petid;
            return a
        }
    }),
    buy1Probability = "1000|20|2001|18|3001|16|4001|12|5001|10|6001|4|1001|6|2002|5|3002|3|4002|3|5002|2|6002|1",
    buy2Probability = "1001|20|2002|18|3002|16|4002|12|5002|10|6002|4|1002|6|2003|5|3003|3|4003|3|5003|2|6003|1",
    buy3Probability = "1001|6|2002|5|3002|3|4002|3|5002|2|6002|1|1002|20|2003|18|3003|16|4003|12|5003|10|6003|4",
    buyPet = function(a) {
        var b;
        switch (a) {
            case 1:
                b = buy1Probability;
                break;
            case 2:
                b = buy2Probability;
                break;
            case 3:
                b = buy3Probability
        }
        a = 100 * Math.random();
        b = b.split("|");
        for (var c = 0, d = 0, e = 0; e < b.length - 1; e += 2) {
            if (a >= c && a < c + parseInt(b[e + 1])) {
                d = parseInt(b[e]);
                break
            }
            c += parseInt(b[e + 1])
        }
        100 == a && (d = parseInt(b[0]));
        0 == d && (d = parseInt(b[0]));
        need_step_load && (d = 1E3);
        return d
    };
var newbieGuideLayerUIMask = {
    "1_1": {}
};
newbieGuideLayerUIMask["1_1"].rectList = [cc.rect(0, 200, 640, 1E3), cc.rect(320, 0, 320, 200), cc.rect(0, 0, 25, 200), cc.rect(25, 0, 295, 30)];
newbieGuideLayerUIMask["1_1"].fingername = "clickfinger";
newbieGuideLayerUIMask["1_1"].fingerpoint = cc.p(190, 80);
newbieGuideLayerUIMask["1_2"] = {};
newbieGuideLayerUIMask["1_2"].rectList = [cc.rect(0, 495, 640, 800), cc.rect(0, 0, 640, 360), cc.rect(0, 360, 120, 135), cc.rect(235, 360, 500, 135)];
newbieGuideLayerUIMask["1_2"].fingername = "clickfinger";
newbieGuideLayerUIMask["1_2"].fingerpoint = cc.p(220, 380);
newbieGuideLayerUIMask["1_3"] = {};
newbieGuideLayerUIMask["1_3"].rectList = [cc.rect(0, 425, 640, 800), cc.rect(0, 0, 640, 295), cc.rect(0, 295, 170, 130), cc.rect(470, 295, 170, 130)];
newbieGuideLayerUIMask["1_3"].fingername = "clickfinger";
newbieGuideLayerUIMask["1_3"].fingerpoint = cc.p(340, 305);
newbieGuideLayerUIMask["2_1"] = {};
newbieGuideLayerUIMask["2_1"].rectList = [cc.rect(0, 120, 640, 1E3), cc.rect(0, 0, 640, 25), cc.rect(0, 25, 15, 95), cc.rect(120, 25, 640, 95), cc.rect(0, 1120, 640, 200)];
newbieGuideLayerUIMask["2_1"].fingername = "clickfinger";
newbieGuideLayerUIMask["2_1"].fingerpoint = cc.p(100, 50);
newbieGuideLayerUIMask["2_1"].talkY = 600;
newbieGuideLayerUIMask["3_1"] = {};
newbieGuideLayerUIMask["3_1"].rectList = [cc.rect(0, 450, 640, 900), cc.rect(0, 0, 640, 260), cc.rect(0, 260, 210, 190), cc.rect(440, 260, 210, 190)];
newbieGuideLayerUIMask["3_1"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_1"].fingerpoint = cc.p(340, 300);
newbieGuideLayerUIMask["3_1"].talk = [32];
newbieGuideLayerUIMask["3_1"].talkY = 600;
newbieGuideLayerUIMask["3_2"] = {};
newbieGuideLayerUIMask["3_2"].rectList = [cc.rect(0, 200, 640, 1E3), cc.rect(0, 0, 640, 35), cc.rect(0, 35, 15, 165), cc.rect(220, 35, 640, 165)];
newbieGuideLayerUIMask["3_2"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_2"].fingerpoint = cc.p(130, 80);
newbieGuideLayerUIMask["3_2"].talk = [33];
newbieGuideLayerUIMask["3_2"].talkY = 600;
newbieGuideLayerUIMask["3_3"] = {};
newbieGuideLayerUIMask["3_3"].rectList = [cc.rect(0, 380, 640, 1E3), cc.rect(0, 0, 640, 175), cc.rect(0, 175, 20, 205), cc.rect(230, 175, 640, 205)];
newbieGuideLayerUIMask["3_3"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_3"].fingerpoint = cc.p(150, 250);
newbieGuideLayerUIMask["3_3"].talk = [34];
newbieGuideLayerUIMask["3_3"].talkY = 600;
newbieGuideLayerUIMask["3_4"] = {};
newbieGuideLayerUIMask["3_4"].rectList = [cc.rect(0, 290, 640, 1E3), cc.rect(0, 0, 640, 150), cc.rect(0, 150, 165, 140), cc.rect(475, 150, 640, 140)];
newbieGuideLayerUIMask["3_4"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_4"].fingerpoint = cc.p(330, 180);
newbieGuideLayerUIMask["3_4"].talk = [35];
newbieGuideLayerUIMask["3_4"].talkY = 600;
newbieGuideLayerUIMask["3_5"] = {};
newbieGuideLayerUIMask["3_5"].rectList = [cc.rect(0, 0, 640, 885), cc.rect(0, 995, 640, 150), cc.rect(0, 885, 10, 110), cc.rect(125, 885, 640, 110)];
newbieGuideLayerUIMask["3_5"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_5"].fingerpoint = cc.p(90, 900);
newbieGuideLayerUIMask["3_5"].talk = [36];
newbieGuideLayerUIMask["3_5"].talkY = 600;
newbieGuideLayerUIMask["3_6"] = {};
newbieGuideLayerUIMask["3_6"].rectList = [cc.rect(0, 0, 640, 870), cc.rect(0, 1E3, 640, 150), cc.rect(0, 870, 520, 130)];
newbieGuideLayerUIMask["3_6"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_6"].fingerpoint = cc.p(600, 900);
newbieGuideLayerUIMask["3_6"].talk = [37];
newbieGuideLayerUIMask["3_6"].talkY = 600;
newbieGuideLayerUIMask["3_7"] = {};
newbieGuideLayerUIMask["3_7"].rectList = [cc.rect(0, 0, 640, 350), cc.rect(0, 350, 120, 786), cc.rect(120, 950, 640, 436), cc.rect(510, 350, 640, 600)];
newbieGuideLayerUIMask["3_7"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_7"].fingerpoint = cc.p(370, 500);
newbieGuideLayerUIMask["3_7"].talk = [39];
newbieGuideLayerUIMask["3_7"].talkY = 200;
newbieGuideLayerUIMask["3_8"] = {};
newbieGuideLayerUIMask["3_8"].rectList = [cc.rect(0, 0, 640, 35), cc.rect(0, 200, 640, 1E3), cc.rect(0, 35, 220, 165), cc.rect(430, 35, 640, 165)];
newbieGuideLayerUIMask["3_8"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_8"].fingerpoint = cc.p(370, 60);
newbieGuideLayerUIMask["3_8"].talk = [40];
newbieGuideLayerUIMask["3_8"].talkY = 600;
newbieGuideLayerUIMask["3_9"] = {};
newbieGuideLayerUIMask["3_9"].rectList = [cc.rect(0, 0, 640, 160), cc.rect(0, 360, 640, 800)];
newbieGuideLayerUIMask["3_9"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_9"].fingerpoint = cc.p(370, 220);
newbieGuideLayerUIMask["3_9"].talk = [41];
newbieGuideLayerUIMask["3_9"].talkY = 600;
newbieGuideLayerUIMask["3_10"] = {};
newbieGuideLayerUIMask["3_10"].rectList = [cc.rect(0, 160, 640, 800), cc.rect(0, 960, 640, 336), cc.rect(0, 0, 235, 160), cc.rect(405, 0, 640, 160)];
newbieGuideLayerUIMask["3_10"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_10"].fingerpoint = cc.p(350, 50);
newbieGuideLayerUIMask["3_10"].talk = [42];
newbieGuideLayerUIMask["3_10"].talkY = 600;
newbieGuideLayerUIMask["3_11"] = {};
newbieGuideLayerUIMask["3_11"].rectList = [cc.rect(0, 0, 640, 885), cc.rect(0, 995, 640, 150), cc.rect(0, 885, 10, 110), cc.rect(125, 885, 640, 110)];
newbieGuideLayerUIMask["3_11"].fingername = "clickfinger";
newbieGuideLayerUIMask["3_11"].fingerpoint = cc.p(90, 900);
newbieGuideLayerUIMask["3_11"].talkY = 600;
newbieGuideLayerUIMask["4_1"] = {};
newbieGuideLayerUIMask["4_1"].rectList = [cc.rect(0, 200, 640, 1E3), cc.rect(320, 0, 320, 200), cc.rect(0, 0, 25, 200), cc.rect(25, 0, 295, 30)];
newbieGuideLayerUIMask["4_1"].fingername = "clickfinger";
newbieGuideLayerUIMask["4_1"].fingerpoint = cc.p(190, 80);
newbieGuideLayerUIMask.level_1_1 = {};
newbieGuideLayerUIMask.level_1_1.rectList = [cc.rect(0, 0, 92, 608), cc.rect(0, 608, 92, 700), cc.rect(91.9, 605, 77, 700), cc.rect(168.9, 681, 640, 700), cc.rect(242, 0, 640, 681), cc.rect(91.9, 0, 77, 531), cc.rect(168.9, 0, 73, 455)];
newbieGuideLayerUIMask.level_1_1.fingername = "lrfinger";
newbieGuideLayerUIMask.level_1_1.fingerpoint = cc.p(150, 525);
newbieGuideLayerUIMask.level_1_1.talk = [1];
newbieGuideLayerUIMask.level_1_1.talkY = 200;
newbieGuideLayerUIMask.level_2_1 = {};
newbieGuideLayerUIMask.level_2_1.rectList = [cc.rect(0, 0, 640, 453), cc.rect(0, 604, 640, 600), cc.rect(0, 530, 169, 74), cc.rect(244, 530, 640, 74), cc.rect(320, 453, 640, 77), cc.rect(0, 453, 15, 77)];
newbieGuideLayerUIMask.level_2_1.fingername = "etfinger";
newbieGuideLayerUIMask.level_2_1.fingerpoint = cc.p(245, 530);
newbieGuideLayerUIMask.level_2_1.talk = [2];
newbieGuideLayerUIMask.level_2_1.talkY = 200;
newbieGuideLayerUIMask.level_2_2 = {};
newbieGuideLayerUIMask.level_2_2.rectList = [cc.rect(0, 0, 640, 379), cc.rect(0, 530, 640, 700), cc.rect(243, 379, 640, 151), cc.rect(0, 379, 170, 151)];
newbieGuideLayerUIMask.level_2_2.fingername = "etfinger";
newbieGuideLayerUIMask.level_2_2.fingerpoint = cc.p(240, 455);
newbieGuideLayerUIMask.level_2_2.talk = [3];
newbieGuideLayerUIMask.level_2_2.talkY = 200;
newbieGuideLayerUIMask.level_3_1 = {};
newbieGuideLayerUIMask.level_3_1.rectList = [cc.rect(0, 0, 640, 470), cc.rect(0, 470, 322, 224), cc.rect(0, 694, 640, 500), cc.rect(322, 470, 77, 152), cc.rect(469, 470, 200, 152), cc.rect(623, 622, 200, 72)];
newbieGuideLayerUIMask.level_3_1.fingername = "lrfinger";
newbieGuideLayerUIMask.level_3_1.fingerpoint = cc.p(385, 627);
newbieGuideLayerUIMask.level_3_1.talk = [8];
newbieGuideLayerUIMask.level_3_1.talkY = 200;
newbieGuideLayerUIMask.level_3_2 = {};
newbieGuideLayerUIMask.level_3_2.rectList = [cc.rect(0, 0, 640, 393), cc.rect(0, 547, 640, 850), cc.rect(0, 393, 398, 154), cc.rect(472, 393, 640, 154)];
newbieGuideLayerUIMask.level_3_2.fingername = "etfinger";
newbieGuideLayerUIMask.level_3_2.fingerpoint = cc.p(476, 470);
newbieGuideLayerUIMask.level_3_2.talk = [9];
newbieGuideLayerUIMask.level_3_2.talkY = 200;
newbieGuideLayerUIMask.level_4_1 = {};
newbieGuideLayerUIMask.level_4_1.rectList = [cc.rect(0, 0, 640, 315), cc.rect(0, 315, 396, 900), cc.rect(396, 695, 75, 600), cc.rect(471, 541, 640, 650), cc.rect(470, 315, 640, 152), cc.rect(548, 467, 640, 74)];
newbieGuideLayerUIMask.level_4_1.fingername = "rffinger";
newbieGuideLayerUIMask.level_4_1.fingerpoint = cc.p(535, 445);
newbieGuideLayerUIMask.level_4_1.talk = [13];
newbieGuideLayerUIMask.level_4_1.talkY = 150;
newbieGuideLayerUIMask.level_4_2 = {};
newbieGuideLayerUIMask.level_4_2.rectList = [cc.rect(0, 0, 640, 240), cc.rect(0, 240, 394, 950), cc.rect(394, 398, 640, 800), cc.rect(470, 240, 640, 158)];
newbieGuideLayerUIMask.level_4_2.fingername = "etfinger";
newbieGuideLayerUIMask.level_4_2.fingerpoint = cc.p(470, 300);
newbieGuideLayerUIMask.level_4_2.talk = [14];
newbieGuideLayerUIMask.level_4_2.talkY = 700;
for (var levelData = [
        ["XXXXXXXX".split(""), "X312443X".split(""), "X 1 34 32 33 31 2 X".split(" "), "X 4 31 3 1 4 2 X".split(" "), "X334131X".split(""), "X 34 4 2 2 1 31 X".split(" "), "X 4 32 34 31 31 34 X".split(" "), "XXXXXXXX".split("")],
        ["XXX43XXX".split(""), "XX2354XX".split(""), "X431534X".split(""), "33 3 2 3 1 3 2 31".split(" "), "33 5 1 2 5 2 1 31".split(" "), "X 33 4 4 2 3 31 X".split(" "), "X X 33 3 5 31 X X".split(" "), "X X X 33 31 X X X".split(" ")],
        ["X9X14X9X".split(""), "32545455".split(""), "25311532".split(""),
            "25414535".split(""), "44331213".split(""), "13225412".split(""), "33431321".split(""), "41324125".split("")
        ],
        ["9X9XX9X9".split(""), "51435143".split(""), "32334132".split(""), "35145411".split(""), "53142113".split(""), "14551143".split(""), "31452445".split(""), "51123454".split("")],
        ["X 1 32 3 4 5 1 X".split(" "), "X 11 11 11 11 11 11 X".split(" "), "X 11 11 11 11 11 11 X".split(" "), "X 11 11 3+1 4+3 11 11 X".split(" "), "X 11 11 11 11 11 11 X".split(" "), "X 11 11 11 11 11 11 X".split(" "), "X 11 11 11 11 11 11 X".split(" "),
            "X 1 32 3 4 5 1 X".split(" ")
        ],
        ["Q Q 11 11 11 11 Q Q".split(" "), "Q 11 11 11 11 11 11 Q".split(" "), "X 11+0+0+0+0+1|1 34+0+0+0+0+2|1 11+0+0+0+0+3|1 34+0+0+0+0+4|1 11+0+0+0+0+5|1 34+0+0+0+0+6|1 X".split(" "), "XXXXXXXX".split(""), "X 34+0+0+0+0+1|2 11+0+0+0+0+2|2 34+0+0+0+0+3|2 11+0+0+0+0+4|2 34+0+0+0+0+5|2 11+0+0+0+0+6|2 X".split(" "), "Q 10 10 10 10 10 10 Q".split(" "), "Q Q Q 7 4+2 Q Q Q".split(" "), "Q Q 11 11 11 11 Q Q".split(" ")],
        ["X X 31 31 32 32 X X".split(" "), "X X 11 11 11 11 X X".split(" "),
            "X 31 31 11 11 32 32 X".split(" "), "X 11 11 7 7 11 11 X".split(" "), "31 11 31 11 11 32 11 32".split(" "), "11 11 11+0+0+0+0+1|2|0|7 31+0+0+0+0+1|4|0|6 32+0+0+0+0+1|4|0|6 11+0+0+0+0+1|4|0|9 11 11".split(" "), "11 31 11+0+0+0+0+1|2|0|8 X X 11+0+0+0+0+1|8|0|2 32 11".split(" "), "31+0+0+0+0+1|4|1|6 11+0+0+0+0+1|4|0|6 31+0+0+0+0+1|4|0|13 X X 32+0+0+0+0+1|8|0|11 11+0+0+0+0+1|4|0|6 32+0+0+0+0+1|4|2|6".split(" ")
        ],
        ["X X X X 2+0+0+0+0+1|2|0|7 34+0+0+0+0+1|4|0|6 2+0+0+0+0+1|4|0|6 1+0+0+0+0+1|4|0|9".split(" "),
            "X X X X 35+0+0+0+0+1|2|0|8 10 10 34+0+0+0+0+1|8|0|2".split(" "), "X X 2+0+0+0+0+1|2|0|7 2+0+0+0+0+1|4|0|6 35+0+0+0+0+1|4|0|13 10 10 35+0+0+0+0+1|8|0|2".split(" "), "X X 34+0+0+0+0+1|2|0|8 10 10 34+0+0+0+0+1|6|0|17 35+0+0+0+0+1|6|0|4 3+0+0+0+0+1|8|0|3".split(" "), "1+0+0+0+0+1|2|0|7 1+0+0+0+0+1|4|0|6 3+0+0+0+0+1|4|0|13 7 4+3 35+0+0+0+0+1|8|0|2 X X".split(" "), "3+0+0+0+0+1|2|0|8 10 10 2+0+0+0+0+1|6|0|17 34+0+0+0+0+1|6|0|4 35+0+0+0+0+1|8|0|3 X X".split(" "), "32+0+0+0+0+1|2|0|8 10 10 3+0+0+0+0+1|8|0|2 X X X X".split(" "),
            "2+0+0+0+0+1|6|0|1 34+0+0+0+0+1|6|0|4 34+0+0+0+0+1|6|0|4 3+0+0+0+0+1|8|0|3 X X X X".split(" ")
        ],
        ["33XXXX21".split(""), "4 1+0+0+13 1+0+0+13 2+0+0+13 1+0+0+13 5+0+0+13 3+0+0+13 4".split(" "), "X 2+0+0+13 2+0+0+13 4+0+0+13 5+0+0+13 4+0+0+13 2+0+0+13 X".split(" "), "X 3+0+0+13 4+0+0+13 2+0+0+13 3+0+0+13 1+0+0+13 2+0+0+13 X".split(" "), "X 5+0+0+13 2+0+0+13 1+0+0+13 5+0+0+13 3+0+0+13 4+0+0+13 X".split(" "), "X 3+0+0+13 2+0+0+13 4+0+0+13 5+0+0+13 1+0+0+13 1+0+0+13 X".split(" "), "4 5+0+0+13 3+0+0+13 1+0+0+13 3+0+0+13 4+0+0+13 2+0+0+13 4".split(" "),
            "43XXXX22".split("")
        ],
        ["XXXXXXXX".split(""), "X251X525".split(""), "X 5 4+0+0+13 4+0+0+13 2 1+0+0+13 1+0+0+13 4".split(" "), "X 5 4+0+0+13 4+0+0+13 2 1+0+0+13 1+0+0+13 2".split(" "), "X X 2 2 3+0+0+14 2 2 X".split(" "), "X 3 5+0+0+13 5+0+0+13 2 3+0+0+13 3+0+0+13 5".split(" "), "X 1 5+0+0+13 5+0+0+13 2 3+0+0+13 3+0+0+13 2".split(" "), "X332X212".split("")],
        ["12323144".split(""), "5 1+0+0+13 1+0+0+13 5+0+0+13 1+0+0+13 4+0+0+13 3+0+0+13 5".split(" "), "5 2+0+0+13 11 11 11 11 4+0+0+13 1".split(" "), "4 3+0+0+13 11 Q+0+0+14 Q+0+0+14 11 1+0+0+13 3".split(" "),
            "3 5+0+0+13 11 Q+0+0+14 Q+0+0+14 11 4+0+0+13 1".split(" "), "5 5+0+0+13 11 11 11 11 1+0+0+13 2".split(" "), "3 4+0+0+13 4+0+0+13 3+0+0+13 2+0+0+13 5+0+0+13 5+0+0+13 3".split(" "), "34242345".split("")
        ],
        ["1+1 1+2 X 1+0+0+13 1+0+0+13 2+0+0+13 3+0+0+13 2+0+0+13".split(" "), "X X X 4+0+0+13 3+0+0+13 5+0+0+13 3 6+0+0+13".split(" "), "4+0+0+13 5 5+0+0+13 1+1+0+13 5+0+0+13 6+0+0+13 1 4+0+0+13".split(" "), "6+0+0+13 5 4+0+0+13 4+0+0+13 2+0+0+13 6+0+0+13 2 6+0+0+13".split(" "), "6+0+0+13 4 1+0+0+13 4+0+0+13 6+0+0+13 2+0+0+13 6 1+0+0+13".split(" "),
            "1+0+0+13 2 4+0+0+13 2+0+0+13 1+1+0+13 5+0+0+13 5 1+0+0+13".split(" "), "1+0+0+13 4 5+0+0+13 4+0+0+13 5+0+0+13 X X X".split(" "), "4+0+0+13 4+0+0+13 5+0+0+13 2+0+0+13 4+0+0+13 X 6+2 6+1".split(" ")
        ],
        ["XX4142XX".split(""), "X X 1 3+0+0+0+1 4+0+0+0+1 3 X X".split(" "), "X 2 1+0+0+0+0+1|2|0|7 3+0+0+0+1+1|4|0|6 3+0+0+0+1+1|4|0|6 1+0+0+0+0+1|4|0|9 3 X".split(" "), "4 2+0+0+0+1 4+0+0+0+1+1|2|0|8 11 11 3+0+0+0+1+1|8|0|2 1+0+0+0+1 2".split(" "), "2 3+0+0+0+1 5+0+0+0+1+1|2|0|8 11 11 5+0+0+0+1+1|8|0|2 3+0+0+0+1 3".split(" "),
            "X 4 1+0+0+0+1+1|6|0|1 5+0+0+0+1+1|6|0|4 5+0+0+0+1+1|6|0|4 2+0+0+0+1+1|8|0|3 2 X".split(" "), "X X 5 1+0+0+0+1 1+0+0+0+1 5 X X".split(" "), "XX1244XX".split("")
        ],
        ["X 1+0+0+0+1 2 3+0+0+0+1 3+0+0+0+1 2 1+0+0+0+1 X".split(" "), "4 2 3 2+0+0+0+1 1+0+0+0+1 1 4 3".split(" "), "4 3+0+0+0+1 5 2+0+0+0+1 1+0+0+0+1 4 4+0+0+0+1 3".split(" "), "X 4 5 5+0+0+0+1 2+0+0+0+1 5 2 X".split(" "), "X 1+0+0+0+1 2 2 3+0+0+0+1 1 3+0+0+0+1 X".split(" "), "3 3 4+0+0+0+1 2+0+0+0+1 4+0+0+0+1 3+0+0+0+1 2 4".split(" "), "2+0+0+0+1 3 3+0+0+0+1 4 3+0+0+0+1 2 3+0+0+0+1 2".split(" "),
            "X 2 4+0+0+0+1 4 2 1+0+0+0+1 1 X".split(" ")
        ],
        ["X 1+0+0+0+1 2+0+0+0+1 1+0+0+0+1 1+0+0+0+1 2+0+0+0+1 3+0+0+0+1 4+0+0+0+1".split(" "), "X 1+0+0+0+1 4+0+0+0+1 2+0+0+0+1 2+0+0+0+1 4+0+0+0+1 2+0+0+0+1 1+0+0+0+1".split(" "), "X 2+0+0+0+1 4+0+0+0+1 2+0+0+0+1 3+0+0+0+1 1+0+0+0+1 4+0+0+0+1 2+0+0+0+1".split(" "), "X 1+0+0+0+1 2+0+0+0+1 1+0+0+0+1 4+0+0+0+1 1+0+0+0+1 3+0+0+0+1 2+0+0+0+1".split(" "), "X 2+0+0+0+1 3+0+0+0+1 2+0+0+0+1 3+0+0+0+1 2+0+0+0+1 2+0+0+0+1 4+0+0+0+1".split(" "), "X 2+0+0+0+1 1+0+0+0+1 1+0+0+0+1 2+0+0+0+1 4+0+0+0+1 2+0+0+0+1 2+0+0+0+1".split(" "),
            "2+0+0+0+1 3+0+0+0+1 2+0+0+0+1 1+0+0+0+1 3+0+0+0+1 2+0+0+0+1 1+0+0+0+1 1+0+0+0+1".split(" "), "2+0+0+0+1 1+0+0+0+1 4+0+0+0+1 4+0+0+0+1 2+0+0+0+1 2+0+0+0+1 1+0+0+0+1 1+0+0+0+1".split(" ")
        ],
        ["123XX132".split(""), "4 1 1+0+0+0+0+0+16 4 3 3 1+0+0+0+0+0+16 4".split(" "), "X 3 11 11 1+0+0+0+0+0+16 11 3 X".split(" "), "X X 11 11 1+0+0+0+0+0+16 11 X X".split(" "), "X X 1+0+0+0+0+0+16 1+0+0+0+0+0+16 5+0+0+0+0+0+16 5+0+0+0+0+0+16 X X".split(" "), "X 4+0+0+0+0+0+16 11 5 1 11 3+0+0+0+0+0+16 X".split(" "), "2 5+0+0+0+0+0+16 2 1 4 4 5+0+0+0+0+0+16 3".split(" "),
            "534XX521".split("")
        ],
        ["XX32443X".split(""), "X X 11 11 11 11 11 X".split(" "), "X 1 11 11 11 11 11 3".split(" "), "X 11 3+0+0+0+0+0+16 3+0+0+0+0+0+16 11 3+0+0+0+0+0+16 3+0+0+0+0+0+16 11".split(" "), "X 11 11 11 11 11 11 11".split(" "), "X 11 1 1 5 1 1 11".split(" "), "X X 11 5 1+0+0+0+0+0+16 5 11 X".split(" "), "X X X 11 11 11 X X".split(" ")],
        ["1QXXXXXX".split(""), "3 21+21+0+13 Q X X X X X".split(" "), "1 21+21+0+13 Q 21+22+0+13 X X X X".split(" "), "1 21+21+0+13 Q 21+22+0+13 Q X X X".split(" "), "2 21+21+0+13 Q 21+22+0+13 Q Q+0+0+13 X X".split(" "),
            "2 21+21+0+13 Q 21+22+0+13 Q Q+0+0+13 Q X".split(" "), "4 21+21+0+13 Q 21+22+0+13 Q Q+0+0+13 Q Q".split(" "), "2 21+21+0+13 Q 21+22+0+13 Q Q+0+0+13 Q Q".split(" ")
        ],
        ["X 0+0+0+0+0+0+16 X 0+0+0+0+0+0+16 0+0+0+0+0+0+16 X 0+0+0+0+0+0+16 X".split(" "), "0+0+0+0+0+0+16 0 0+0+0+0+0+0+16 0 0 0+0+0+0+0+0+16 0 0+0+0+0+0+0+16".split(" "), "X 0+0+0+0+0+0+16 X 0+0+0+0+0+0+16 0+0+0+0+0+0+16 X 0 X".split(" "), "21+21 21+21 21+21 21+21 21+22 21+22 21+22 21+22".split(" "), "0 11 11 11 11 11 11 1".split(" "), "0+0+0+0+0+0+16 11 11 11 11 11 11 0+0+0+0+0+0+16".split(" "),
            "0+0+0+0+0+0+16 11 11 11 11 11 11 1+0+0+0+0+0+16".split(" "), "0 0 0 0+1 0+1 0 0 1".split(" ")
        ],
        ["X 34 2 34 34 0 34 X".split(" "), "34 2 X 2 2 X 2 34".split(" "), "2 X X 34 34 X X 2".split(" "), "34 2 34 2 2 34 2 34".split(" "), "34 2 34 2 2 34 2 34".split(" "), "2 X X 34 34 X X 2".split(" "), "34 2 X 2 2 X 2 34".split(" "), "X 34 2 34 34 0 34 X".split(" ")],
        ["1 2 3+0+0+12 4+0+0+12 5+0+0+12 1+0+0+12 5 5".split(" "), "2 3 1+0+0+12 2+0+0+12 5+0+0+12 5+0+0+12 3 3".split(" "), "5 1 1+0+0+12 5+0+0+12 1+0+0+12 5 1 2".split(" "),
            "5 5 3+0+0+12 X X 1+0+0+12 5 3".split(" "), "441XX324".split(""), "442XX435".split(""), "352XX125".split(""), "151XX254".split("")
        ],
        ["X101100X".split(""), "0+0+0+0+0+1|2|2|8 0 0 0 0 0 0 0+0+0+0+0+1|8|1|2".split(" "), "0+0+0+0+0+1|2|0|8 0 0 0 0 0 0 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+1|2|0|8 0 0+0+0+12 0 0 0+0+0+12 0 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+1|2|0|8 0+0+0+12 7 0+0+0+12 0+0+0+12 7 0+0+0+12 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+1|2|0|8 0 0+0+0+12 0 0 0+0+0+12 0 0+0+0+0+0+1|8|0|2".split(" "),
            "0+0+0+0+0+1|2|1|8 0 0 2 0 0 0 0+0+0+0+0+1|8|2|2".split(" "), "X020200X".split("")
        ],
        ["XX3241XX".split(""), "X 2+0+0+12+0+1|2|2|8 X 3+0+0+12+0+3|4|1|6 2+0+0+12+0+3|4|2|6 X 5+0+0+12+0+2|8|1|2 X".split(" "), "5 2+0+0+0+0+1|2|0|8 5 4 4 2 4+0+0+0+0+2|8|0|2 2".split(" "), "2 4+0+0+0+0+1|2|0|8 5 5 3 4 4+0+0+0+0+2|8|0|2 3".split(" "), "1 5+0+0+0+0+1|2|0|8 1 2 3 5 1+0+0+0+0+2|8|0|2 4".split(" "), "1 1+0+0+0+0+1|2|0|8 3 1 5 4 1+0+0+0+0+2|8|0|2 2".split(" "), "X 2+0+0+12+0+1|2|1|8 4 5 2 5 4+0+0+12+0+2|8|2|2 X".split(" "),
            "XX1413XX".split("")
        ],
        ["0 X 11+0+0+0+0+1|2 3 0 11+0+0+0+0+2|2 X 0".split(" "), "0 X 11 0 3 11 X 0".split(" "), "0 X 11 3 0 11 X 0".split(" "), "0 X 11 11 11 11 X 0".split(" "), "0 X 21+21 21+21 21+21 21+21 X 0".split(" "), "0 X 21+21 21+22+0+13 21+22+0+13 21+21 X 0".split(" "), "0 X 21+21 21+22+0+13 21+22+0+13 21+21 X 0".split(" "), "0+0+0+0+0+1|1 X 21+21 21+22+0+13 21+22+0+13 21+21 X 0+0+0+0+0+2|1".split(" ")],
        ["#1 #2 #2 #3 #3 #4 #4 #3".split(" "), "2 11 11 11 11 11 11 4".split(" "), "4 11 5+0+0+0+0+0+16 5+0+0+0+0+0+16 1+0+0+0+0+0+16 1+0+0+0+0+0+16 11 5".split(" "),
            "2 11 1+0+0+0+0+0+16 1+0+0+0+0+0+16 5+0+0+0+0+0+16 5+0+0+0+0+0+16 11 4".split(" "), "4 4 10 9 9 10 4 1".split(" "), "3 10 5 10 10 3 10 2".split(" "), "X351331X".split(""), "XX1994XX".split("")
        ],
        ["#11 #11 #11 #11 #11 #11 #11 #11".split(" "), "3 3 10 1+0+0+0+0+0+16 4+0+0+0+0+0+16 10 1 1".split(" "), "11 11 11 2+0+0+0+0+0+16 3+0+0+0+0+0+16 11 11 11".split(" "), "X X 11 2+0+0+0+0+0+16 2+0+0+0+0+0+16 11 X X".split(" "), "7 X 10 10 10 10 X 7".split(" "), "3 X 4 10 10 2 X 4".split(" "), "7X4352X7".split(""), "4X1995X1".split("")],
        ["3 3 4+0+0+12 1+0+0+12 2 3 1 4".split(" "), "322X311X".split(""), "4 2 3+0+0+12 3+0+0+12 4 1 2 2".split(" "), "134X442X".split(""), "1 4 3+0+0+12 3+0+0+12 2 3 4 3".split(" "), "432X243X".split(""), "2 1 3+0+0+12 3+0+0+12 4 2 3 4".split(" "), "1X1X434X".split("")],
        ["0+0+0+12 21+21 0 0 3 0 21+22 0+0+0+12".split(" "), "21+21 21+21 0 3 0 3 21+22 21+22".split(" "), "000XX000".split(""), "000XX000".split(""), "00000000".split(""), "00000000".split(""), "10 10 0 0 0 0 10 10".split(" "), "0+0+0+12 10 0 0 0 0 10 0+0+0+12".split(" ")],
        ["1+0+0+12 2+0+0+12 3 2 3 2 3+0+0+12 4+0+0+12".split(" "), "1+0+0+12 2+0+0+12 1 11 11 1 1+0+0+12 4+0+0+12".split(" "), "X 3+0+0+12 1 2 1 1 4+0+0+12 X".split(" "), "X X 10 10 10 10 X X".split(" "), "XQQQQQQX".split(""), "Q+0+0+12 Q Q 10 10 Q Q Q+0+0+12".split(" "), "Q+0+0+12 Q 10 10 10 10 Q Q+0+0+12".split(" "), "Q+0+0+12 Q Q Q Q Q Q Q+0+0+12".split(" ")],
        ["X X 7+0+0+0+0+1|1 X X X 7+0+0+0+0+2|1 X".split(" "), "XXXXXXXX".split(""), "X 11+0+0+13+0+1|2 4+0+0+13 1+0+0+13 4+0+0+13 1+0+0+13 11+0+0+13+0+2|2 X".split(" "),
            "X 10+0+0+13 3+0+0+13 2+0+0+13 3+0+0+13 3+0+0+13 10+0+0+13 X".split(" "), "X 11+0+0+13 4+0+0+13 5+0+0+13 3+0+0+13 4+0+0+13 11+0+0+13 X".split(" "), "X 10+0+0+13 5+0+0+13 2+0+0+13 5+0+0+13 3+0+0+13 10+0+0+13 X".split(" "), "11+0+0+13 10+0+0+13 10+0+0+13 10+0+0+13 10+0+0+13 10+0+0+13 10+0+0+13 11+0+0+13".split(" "), "11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13".split(" ")
        ],
        ["#1 #2 #3 #1 #4 #5 #5 #1".split(" "), "3 4 10 10 10 10 4 3".split(" "), "1 2 10 Q 7 10 3 1".split(" "),
            "4 1 10 3+3 10 10 1 3".split(" "), "4 2 10 10 10 10 X 3".split(" "), "1 4 3+0+0+0+0+0+16 1+0+0+0+0+0+16 2 3 3 2".split(" "), "4+0+0+0+0+0+16 3+0+0+0+0+0+16 2 1 1 2 1+0+0+0+0+0+16 1+0+0+0+0+0+16".split(" "), "31299211".split("")
        ],
        ["X X 1+0+0+0+0+0+16 1 2 2+0+0+0+0+0+16 X X".split(" "), "X X @3 3 1 @3 X X".split(" "), "X X 2 4 4 1 X #2".split(" "), "#2 X 4 4+0+0+0+0+0+16 1+0+0+0+0+0+16 2 X 2".split(" "), "2X3142X1".split(""), "4 X @2 4 2 @3 X 2".split(" "), "2X4243X1".split(""), "9 X 2+0+0+0+0+0+16 4 1 1+0+0+0+0+0+16 X 9".split(" ")],
        ["X X 21+21 1+0+0+0+1 2+0+0+0+1 21+22 X X".split(" "), "X 3 21+21 4+0+0+0+1 2+0+0+0+1 21+22 1 X".split(" "), "@5 3 21+21 3+0+0+0+1 1+0+0+0+1 21+22 4 @5".split(" "), "4 5 21+21 2+0+0+0+1 2+0+0+0+1 21+22 3 4".split(" "), "4 4 21+21 2+0+0+0+1 5+0+0+0+1 21+22 5 4".split(" "), "@2 1 21+21 3+0+0+0+1 4+0+0+0+1 21+22 2 @3".split(" "), "X 1 21+21 5+0+0+0+1 1+0+0+0+1 21+22 5 X".split(" "), "X X 21+21 4+0+0+0+1 2+0+0+0+1 21+22 X X".split(" ")],
        ["X 2+0+0+13 X 4+0+0+13 3+0+0+13 X 3+0+0+13 X".split(" "), "X X 2+0+0+13 3+0+0+13 3+0+0+13 4+0+0+13 X X".split(" "),
            "X 1+0+0+13 X 2+0+0+13 4+0+0+13 X 5+0+0+13 X".split(" "), "X X 5+0+0+13 1+0+0+13 1+0+0+13 3+0+0+13 X X".split(" "), "X @5+0+0+13 X 4+0+0+13 2+0+0+13 X @3+0+0+13 X".split(" "), "@4+0+0+13 1+0+0+13 1+0+0+13 4+0+0+13 1+0+0+13 4+0+0+13 @5+0+0+13 4+0+0+13".split(" "), "11+0+0+13 11+0+0+13 27 11+0+0+13 11+0+0+13 27 11+0+0+13 11+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" ")
        ],
        ["41X33221".split(""), "4 11 1+0+0+0+1 3 3+0+0+0+1+1|1 11 2 3".split(" "), "2 2+0+0+0+1 3 11 X 5+0+0+0+1 3 2".split(" "),
            "3 11 1+0+0+0+1+2|1 3 1+0+0+0+1+1|2 11 4 3".split(" "), "2 4+0+0+0+1 X 11 11 4+0+0+0+1 3 2".split(" "), "2 11 3+0+0+0+1+2|2 1 5+0+0+0+1+3|1 11 3 4".split(" "), "1 3+0+0+0+1 5 11 X 5+0+0+0+1 2 5".split(" "), "1 11 4 4+0+0+0+1 2+0+0+0+0+3|2 11 4 3".split(" ")
        ],
        ["11212XXX".split(""), "3 4+0+5+0+1 2+0+5+0+1 3+0+5+0+1 1 1 5 4".split(" "), "2 1+0+5+0+1 @4 5+0+5+0+1 3+0+5+0+1 3+0+5+0+1 5+0+5+0+1 3".split(" "), "2 5+0+5+0+1 3 2 5 @4 5+0+5+0+1 5".split(" "), "5 2+0+5+0+1 2 4 2 @1 1+0+5+0+1 5".split(" "), "3 5+0+5+0+1 @2 4+0+5+0+1 5+0+5+0+1 1+0+5+0+1 1+0+5+0+1 2".split(" "),
            "4 5+0+5+0+1 5+0+5+0+1 3+0+5+0+1 2 1 3 3".split(" "), "34535522".split("")
        ],
        ["#2+0+0+0+0+0+16 #4 #3 #2 #3 #1 #3 #1+0+0+0+0+0+16".split(" "), "11 0 10 0 0 10 0 11".split(" "), "00000000".split(""), "0+0+0+0+0+0+16 0 10 10 10 10 0 0+0+0+0+0+0+16".split(" "), "00000505".split(""), "11 0 11 0 0 11 5 11".split(" "), "00000000".split(""), "0 0+0+0+0+0+0+16 0 9 9 0 0+0+0+0+0+0+16 0".split(" ")],
        ["00020000".split(""), "02200000".split(""), "0 11 0 11 0 11 0 11".split(" "), "11 0 11 0 11 0 11 0".split(" "), "0 11 0 11 0 11 0 11".split(" "),
            "11 0 11 0 11 0 11 0".split(" "), "0+0+5+0+1+1|4|1|6 0+0+5+0+1+1|4|0|6 0+0+5+0+1+1|4|0|6 0+0+5+0+1+1|4|0|6 0+0+5+0+1+1|4|0|6 0+0+5+0+1+1|4|0|6 0+0+5+0+1+1|4|0|6 0+0+5+0+1+1|4|2|6".split(" "), "Q 0+0+5+0+1 Q Q Q Q 0+0+5+0+1 Q".split(" ")
        ],
        ["X 0+0+0+12 0 0 0 X X X".split(" "), "0+0+0+12 0 0 0 0 X X 0+0+0+0+0+1|2".split(" "), "0 0 0 0 0 10 10 10".split(" "), "5 5 0 0 10 10 Q Q".split(" "), "0 0 5 10 10 Q Q Q".split(" "), "0 0 X 10 Q Q Q Q".split(" "), "0+0+0+12+0+1|1 X X Q Q Q Q Q+0+0+12".split(" "), "X X X 27+0+0+12 Q Q Q+0+0+12 X".split(" ")],
        ["0+0+0+13+0+1|2 0+0+0+14+0+2|2 0+0+0+14+0+3|2 0+0+0+14+0+4|2 0+0+0+14+0+5|2 0+0+0+14+0+6|2 0+0+0+14+0+7|2 0+0+0+13+0+8|2".split(" "), "Q+0+0+13 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" "), "XXXXXXXX".split(""), "00000000".split(""), "00000000".split(""), "00000000".split(""), "21+21+0+0+0+1|1 21+21+0+0+0+2|1 21+21+0+0+0+3|1 21+21+0+0+0+4|1 21+21+0+0+0+5|1 21+21+0+0+0+6|1 21+21+0+0+0+7|1 21+21+0+0+0+8|1".split(" ")],
        ["00050900".split(""), "0 5 5 0 9 0 0 11".split(" "), "0 0 0 9 0 0 10 0".split(" "), "0 0 9 0 0 11 0 0".split(" "), "0 9 0 0 10 0 0 0".split(" "), "9 0 0 11 0 0 0 0".split(" "), "0 0 10 0 0 0 0 0".split(" "), "0 11 0 0 0 0 0 0".split(" ")],
        ["0+0+5+0+1 0+0+5+0+1 0+0+5+0+1 0+0+0+0+0+1|2 0+0+0+0+0+2|2 0+0+5+0+1 0+0+5+0+1 0+0+5+0+1".split(" "), "0+0+5+0+1 0+0+5+0+1 0+0+5+0+1 0 0 0+0+5+0+1 0+0+5+0+1 0+0+5+0+1".split(" "), "0+0+5+0+1 0+0+5+0+1 0+0+5+0+1 0 0 0+0+5+0+1 0+0+5+0+1 0+0+5+0+1".split(" "), "XXXXXXXX".split(""),
            "XXX00XXX".split(""), "XX0050XX".split(""), "X 27 5 5 0 0 27 X".split(" "), "X X 27 0+0+0+0+0+1|1 0+0+0+0+0+2|1 27 X X".split(" ")
        ],
        ["00005000".split(""), "00550000".split(""), "0 0 0+0+0+0+0+1|2|0|7 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|9 0 0".split(" "), "X X 0+0+0+0+0+1|2|0|8 0+0+0+12 0+0+0+12 0+0+0+0+0+1|8|0|2 X X".split(" "), "X 0 0+0+0+0+0+1|6|1|1 0+0+0+0+0+1|6|2|4 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|8|0|3 0 X".split(" "), "X000000X".split(""), "X000000X".split(""), "X000000X".split("")],
        ["XXX00XXX".split(""),
            "XX0000XX".split(""), "X000000X".split(""), "0 0 0 0+0+0+12 4+0+0+12 0 4 0".split(" "), "0 0 0 0+0+0+12 0+0+0+12 4 0 0".split(" "), "X000000X".split(""), "XX0000XX".split(""), "XXX00XXX".split("")
        ],
        ["0+0+0+0+0+1|2 0+0+0+0+0+2|2 10+0+0+13+0+3|2 0+0+0+13+0+4|2 0+0+0+13 10+0+0+13 0 0".split(" "), "0 0 10+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 0 0".split(" "), "5 0 10+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 0 0".split(" "), "0 5 10+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 0 0".split(" "), "5 0 10+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 0 0".split(" "),
            "0 0 10+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 0 0".split(" "), "0 0 10+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 0 0".split(" "), "0 0 10+0+0+13 0+0+0+13 0+0+0+13+0+1|1 10+0+0+13+0+2|1 0+0+0+0+0+3|1 0+0+0+0+0+4|1".split(" ")
        ],
        ["00000000".split(""), "0X5500X0".split(""), "0XX05XX0".split(""), "00X00X00".split(""), "00000000".split(""), "11+0+0+13 11 0+0+0+13 11 0+0+0+13 11 0+0+0+13 11".split(" "), "11 Q+0+0+13 11 Q+0+0+13 11 Q+0+0+13 11 Q+0+0+13".split(" "), "Q 11 Q+0+0+13 11 Q+0+0+13 11 Q+0+0+13 11".split(" ")],
        ["XXX00000".split(""),
            "X X 0 0 21+22 21+22 21+22 0".split(" "), "X 0 0+0+0+12 0 21+22 0+0+0+12 21+22 0".split(" "), "0 0 0 0 21+22 21+22 21+22 0".split(" "), "1 21+21 21+21 21+21 0 0 0 0".split(" "), "0 21+21 0+0+0+12 21+21 0 0+0+0+12 0 X".split(" "), "1 21+21 21+21 21+21 0 0 X X".split(" "), "10000XXX".split("")
        ],
        ["X 0 0+0+0+13 0+0+0+13 6+0+0+13 0+0+0+13 0 X".split(" "), "X 0 0+0+0+13 6+0+0+13 0+0+0+13 0+0+0+13 0 X".split(" "), "X 0 0+0+0+13 6+0+0+13 0+0+0+13 0+0+0+13 0 X".split(" "), "X X 27 0+0+0+14 0+0+0+14 27 X X".split(" "),
            "0+0+0+13 X 0+0+0+13 0+0+0+14 0+0+0+14 0+0+0+13 X 0+0+0+13".split(" "), "0+0+0+13 X 0+0+0+13 0+0+0+14 0+0+0+14 0+0+0+13 X 0+0+0+13".split(" "), "0+0+0+13 X 0+0+0+13 0+0+0+14 0+0+0+14 0+0+0+13 X 0+0+0+13".split(" "), "0+0+0+13 X 0+0+0+13 0+0+0+14 0+0+0+14 0+0+0+13 X 0+0+0+13".split(" ")
        ],
        ["0 X 0+0+0+0+0+1|2 X X X X X".split(" "), "0X200XXX".split(""), "0X00000X".split(""), "0 X 2 0 10+0+0+12 10+0+0+12 0 0".split(" "), "0+0+0+0+0+1|1 X 2 0 10+0+0+12 10+0+0+12 0 0".split(" "), "XX000000".split(""), "XXX00000".split(""),
            "XXXXX000".split("")
        ],
        ["0+0+0+13 0+0+0+13 0+0+0+13 X 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "2+0+0+13 0+0+0+14 0+0+0+13 X 0+0+0+13 0+0+0+14 0+0+0+14 0+0+0+13".split(" "), "0+0+0+13 2+0+0+14 0+0+0+13 X 0+0+0+13 0+0+0+13 0+0+0+13+0+3|1 0+0+0+13+0+4|1".split(" "), "2+0+0+13+0+1|1 0+0+0+13+0+2|1 0+0+0+13 X 0+3+0+13 X X X".split(" "), "X X X 0+3+0+13 X 0+0+0+13 0+0+0+13+0+3|2 0+0+0+13+0+4|2".split(" "), "0+0+0+13+0+1|2 0+0+0+13+0+2|2 0+0+0+13 0+0+0+13 X 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 0+0+0+14 0+0+0+14 0+0+0+13 X 0+0+0+13 0+0+0+14 0+0+0+13".split(" "),
            "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 X 0+0+0+13 0+0+0+13 0+0+0+13".split(" ")
        ],
        ["X 11 11 11 2 11 11 X".split(" "), "11 11 11 2 1 2 11 11".split(" "), "11 11 11 11 11 11 11 11".split(" "), "11 11 11 11 11 11 11 11".split(" "), "11 11 11 11 11 11 11 11".split(" "), "11 11 11 11 11 11 11 11".split(" "), "11 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11".split(" "), "X Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 X".split(" ")],
        ["0 X 9 0 11 9 X 0".split(" "), "0 11 0 0 11 0 0 0".split(" "),
            "0 0 11 0 11 0 0 0".split(" "), "X 11 11 11 11 0 0 X".split(" "), "X 0 0 11 11 11 11 X".split(" "), "0 0 0 11 0 11 0 0".split(" "), "0 0 0 11 0 4 11 0".split(" "), "X 0 0 11 4 0 4 X".split(" ")
        ],
        ["099XX990".split(""), "000XX000".split(""), "303XX000".split(""), "030XX000".split(""), "11 11 11 11 11 11 11 11".split(" "), "11 11 11 0 0 11 11 11".split(" "), "00000000".split(""), "00000000".split("")],
        ["11+0+0+13 11+0+0+13 0 0 0 0 11+0+0+13 11+0+0+13".split(" "), "11+0+0+13 11+0+0+13 0 0 3 0 11+0+0+13 11+0+0+13".split(" "),
            "11+0+0+13 11+0+0+13 0 0 0 0 11+0+0+13 11+0+0+13".split(" "), "11+0+0+13 11+0+0+13 11 0 3 11 11+0+0+13 11+0+0+13".split(" "), "11+0+0+13 0+0+0+13 0 0 3 0 0+0+0+13 11+0+0+13".split(" "), "11+0+0+13 10+0+0+13 0+0+0+13 10 10 0+0+0+13 10+0+0+13 11+0+0+13".split(" "), "0 10+0+0+13 10+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 10+0+0+13 0".split(" "), "X 0 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 0 X".split(" ")
        ],
        ["3 10 10 10 10 10 10 2+0+5".split(" "), "10 3+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 2+0+5+14 11".split(" "),
            "11 10+0+0+14 3+0+0+14 10+0+0+14 10+0+0+14 2+0+5+14 10+0+0+14 11".split(" "), "X 11+0+0+14 10+0+0+14 3+0+0+14 2+0+5+14 11+0+0+14 11+0+0+14 X".split(" "), "X 11+0+0+14 11+0+0+14 2+0+5+14 3+0+0+14 10+0+0+14 11+0+0+14 X".split(" "), "2+0+5 10+0+0+14 2+0+5+14 11+0+0+14 10+0+0+14 3+0+0+14 10+0+0+14 3".split(" "), "10 2+0+5+14 10+0+0+14 11+0+0+14 11+0+0+14 10+0+0+14 3+0+0+14 10".split(" "), "2+0+5 10 2+0+5 11 11 3 7 3".split(" ")
        ],
        ["X90XX09X".split(""), "030XX000".split(""), "030XX000".split(""), "3 0 11 11 11 11 0 0".split(" "),
            "0 0 11 0 0 11 0 0".split(" "), "11 11 11 11 11 11 11 11".split(" "), "11 0 11 0 0 11 0 11".split(" "), "11 11 11 X X 11 11 11".split(" ")
        ],
        ["00000XXX".split(""), "00000XXX".split(""), "02202XXX".split(""), "0+0+0+0+0+1|4|1|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 17+16+0+0+0+1|4|2|6 11 10+0+0+14 0+0+0+14".split(" "), "0+0+0+0+0+2|4|1|6 0+0+0+0+0+2|4|0|6 0+0+0+0+0+2|4|0|6 17+16+0+0+0+2|4|0|6 0+0+0+0+0+2|4|2|6 X 0+0+0+14 10+0+0+14".split(" "), "0+0+0+0+0+3|4|1|6 0+0+0+0+0+3|4|0|6 17+16+0+0+0+3|4|0|6 0+0+0+0+0+3|4|0|6 0+0+0+0+0+3|4|2|6 X 10+0+0+14 0+0+0+14".split(" "),
            "0+0+0+0+0+4|4|1|6 17+16+0+0+0+4|4|0|6 0+0+0+0+0+4|4|0|6 0+0+0+0+0+4|4|0|6 0+0+0+0+0+4|4|2|6 X 0+0+0+14 10+0+0+14".split(" "), "17+16+0+0+0+5|4|1|6 0+0+0+0+0+5|4|0|6 0+0+0+0+0+5|4|0|6 0+0+0+0+0+5|4|0|6 0+0+0+0+0+5|4|2|6 11 10+0+0+14 0+0+0+14".split(" ")
        ],
        ["XX0000XX".split(""), "X011010X".split(""), "0 0 17+16+0+12 18 18 17+12+0+12 0 0".split(" "), "0 0 18 Q+0+0+12 Q+0+0+12 18 0 0".split(" "), "0 0 18 Q+0+0+12 Q+0+0+12 18 0 0".split(" "), "0 0 17+18+0+12 18 18 17+14+0+12 0 0".split(" "), "X000000X".split(""),
            "XX0000XX".split("")
        ],
        ["X X 0+0+0+0+0+1|2 X X 0+0+0+0+0+2|2 X X".split(" "), "9X0000X9".split(""), "0X0000X0".split(""), "3X0000X3".split(""), "0X0000X0".split(""), "3X0000X3".split(""), "3+0+0+0+0+1|1 X 0 0 0 0 X 3+0+0+0+0+2|1".split(" "), "XX0000XX".split("")],
        ["00000000".split(""), "00440400".split(""), "0 0 10 10 10 10 10 0".split(" "), "0 10 10 10 10 10 10 0".split(" "), "0+0+5 0+0+5 0+0+5 0+0+5 0+0+5 0+0+5 0+0+5 0+0+5".split(" "), "Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" "),
            "Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" ")
        ],
        ["4 17+16+0+0+0+1|8|1|2 0 X 9 X 0 0".split(" "), "0 4+0+0+0+0+1|8|0|2 4 X 18 X 0 0+0+0+0+0+3|8|1|2".split(" "), "0 0+0+0+0+0+1|8|0|2 0 X 18 X 0 17+14+0+0+0+3|8|0|2".split(" "), "0 0+0+0+0+0+1|8|2|2 0 X 18 X 0 0+0+0+0+0+3|8|2|2".split(" "), "000XQX00".split(""), "0 17+16+0+0+0+2|8|1|2 0 X 18 X 0 17+14+0+0+0+4|8|1|2".split(" "), "0 0+0+0+0+0+2|8|0|2 0 X 18 X 0 0+0+0+0+0+4|8|0|2".split(" "),
            "0 0+0+0+0+0+2|8|2|2 0 X 18 X 0 0+0+0+0+0+4|8|2|2".split(" ")
        ],
        ["X 0+0+0+0+0+1|1 0 0 0 0 0 0".split(" "), "0+0+0+13+0+1|2 X 0+0+0+0+0+2|1 0 6 6 0 6".split(" "), "0+0+0+13 0+0+0+13+0+2|2 X 0+0+0+0+0+3|1 0 0 0 0".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13+0+3|2 X 0+0+0+0+0+4|1 0 0 0".split(" "), "0+0+0+13 2+0+0+13 0+0+0+13 0+0+0+13+0+4|2 X 0+0+0+0+0+5|1 0 0".split(" "), "0+0+0+13 2+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13+0+5|2 X 0+0+0+0+0+6|1 0".split(" "), "2+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13+0+6|2 X 0+0+0+0+0+7|1".split(" "),
            "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13+0+7|2 X".split(" ")
        ],
        ["0 6 0 6 11 0 10 X".split(" "), "0 0 6 11 0 10 X Q+0+0+14".split(" "), "0 0 11 0 10 X Q+0+0+14 18".split(" "), "0 11 0 10 X 17+16 Q+0+0+14 17+18".split(" "), "11 0 10 X Q+0+0+14 17+16 Q+0+0+14 Q+0+0+14".split(" "), "0 10 17+16 18 Q+0+0+14 17+18 Q+0+0+14 X".split(" "), "10 X 17+16 18 Q+0+0+14 Q+0+0+14 X X".split(" "), "XXXQQXXX".split("")],
        ["00500000".split(""), "55000000".split(""), "11 11 11 10 10 11 11 11".split(" "), "10 0+1 11 Q+0+0+14 Q+0+0+14 11 0+1 10".split(" "),
            "10 10 11 10 10 11 10 10".split(" "), "11 0+1 11 Q+0+0+14 Q+0+0+14 11 0+1 11".split(" "), "10 10 10 X X 10 10 10".split(" "), "10 0+1 11 Q+0+0+14 Q+0+0+14 11 0+1 10".split(" ")
        ],
        ["0000X000".split(""), "0 0+0+0+13 0+0+0+13 0 X 0 0+0+0+13 0".split(" "), "0 0+0+0+13 0+0+0+13 0 X 0+0+0+0+0+1|1 0+0+0+0+0+2|1 0+0+0+0+0+3|1".split(" "), "3033XXXX".split(""), "0 0 0 0 0 0+0+0+0+0+1|2 0+0+0+0+0+2|2 0+0+0+0+0+3|2".split(" "), "0 0+0+0+13 0+0+0+13 0 0 0+0+0+13 0+0+0+13 0".split(" "), "0 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0".split(" "),
            "0 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0".split(" ")
        ],
        ["4+1+0+0+0+1|1 0+0+0+0+0+2|1 0+0+0+0+0+3|1 0+0+0+0+0+4|1 0+0+0+0+0+5|1 0+0+0+0+0+6|1 0+0+0+0+0+7|1 0+0+0+0+0+8|1".split(" "), "XXXXXXXX".split(""), "0+0+0+13+0+1|2 0+0+0+13+0+2|2 0+0+0+13+0+3|2 0+0+0+13+0+4|2 0+0+0+13+0+5|2 0+0+0+13+0+6|2 0+0+0+13+0+7|2 1+1+0+13+0+8|2".split(" "), "2+1+0+13+0+9|1 0+0+0+13+0+10|1 0+0+0+13+0+11|1 0+0+0+13+0+12|1 0+0+0+13+0+13|1 0+0+0+13+0+14|1 0+0+0+13+0+15|1 0+0+0+13+0+16|1".split(" "), "XXXXXXXX".split(""),
            "0+0+0+13+0+9|2 0+0+0+13+0+10|2 0+0+0+13+0+11|2 0+0+0+13+0+12|2 0+0+0+13+0+13|2 0+0+0+13+0+14|2 0+0+0+13+0+15|2 0+0+0+13+0+16|2".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 3+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 3+0+0+13 3+0+0+13 0+0+0+13".split(" ")
        ],
        ["10+0+0+14 10+0+0+14 10+0+0+14 0+0+0+14 3+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 3+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 0+0+0+14 0+0+0+14 3+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14".split(" "),
            "10+0+0+14 11+0+0+14 0+0+0+14 27 0+0+0+14 0+0+0+14 11+0+0+14 10+0+0+14".split(" "), "10+0+0+14 11+0+0+14 0+0+0+14 0+0+0+14 27 0+0+0+14 11+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 0+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" ")
        ],
        ["0 5 17+16+0+0+0+1|8|1|2 0 18 0 0+0+0+14 10+0+0+14".split(" "),
            "5 0 0+0+0+0+0+1|8|0|2 18 0+0+0+14 18 10+0+0+14 0+0+0+14".split(" "), "0 5 0+0+0+0+0+1|8|0|2 0+0+0+14 18 10+0+0+14 0+0+0+14 10+0+0+14".split(" "), "0 0 17+16+0+0+0+1|8|0|2 18 0+0+0+14 18 10+0+0+14 0+0+0+14".split(" "), "0 0 0+0+0+0+0+1|8|0|2 0+0+0+14 18 10+0+0+14 0+0+0+14 10+0+0+14".split(" "), "0 0 0+0+0+0+0+1|8|0|2 18 0+0+0+14 18 10+0+0+14 0+0+0+14".split(" "), "0 0 17+16+0+0+0+1|8|0|2 0+0+0+14 18 10+0+0+14 0+0+0+14 10+0+0+14".split(" "), "0 0 0+0+0+0+0+1|8|2|2 18 0 18 10+0+0+14 0+0+0+14".split(" ")
        ],
        ["QQXQQXQQ".split(""), "Q Q X Q+0+0+13 Q+0+0+13 0 Q+0+0+13 Q+0+0+13".split(" "), "Q Q X Q+0+0+13 Q+0+0+13 0+0+0+0+0+1|1 0+0+0+13 0+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 0 Q+0+0+13 Q+0+0+13 X 0+0+0+13 0+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 0+0+0+0+0+2|1 0+0+0+13 0+0+0+13 0+0+0+0+0+1|2 0+0+0+13 0+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 X 0+0+0+13 0+0+0+13 0 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 5+0+0+13 0+0+0+0+0+2|2 0+0+0+13 0+0+0+13 X 0 0".split(" "), "5+0+0+13 0+0+0+13 5 0+0+0+13 0+0+0+13 X 0 0".split(" ")],
        ["0+0+0+0+0+1|1 0+0+0+0+0+2|1 0+0+0+13+0+3|1 0+0+0+13+0+4|1 0+0+0+13+0+5|1 0 X X".split(" "), "XXXXXX0X".split(""), "0+0+0+0+0+1|2 0+0+0+0+0+2|2 0+0+0+0+0+3|2 X X 0 0 0".split(" "), "003XX300".split(""), "330XX033".split(""), "0+0+0+13 0+0+0+13 0+0+0+13 X X 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+0+0+4|2 0+0+0+0+0+5|2 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0 0+0+0+13 0+0+0+13 0 0+3 0+0+0+13 0+0+0+13 0".split(" ")],
        ["000XX000".split(""), "00202000".split(""), "00020000".split(""),
            "X 0 0 27+0+0+12 27+0+0+12 0 0 X".split(" "), "X 0 10+0+0+12 0 0 10+0+0+12 0 X".split(" "), "00000000".split(""), "0 10+0+0+12 0 10+0+0+12 10+0+0+12 0 10+0+0+12 0".split(" "), "000XX000".split("")
        ],
        ["9X0000X9".split(""), "11 X 0 0 0 0 X 11".split(" "), "@2 0 2 2 0 2 0 @2".split(" "), "@3 0 0 0 0 0 0 @3".split(" "), "@3 0 0 0 0 0 0 @3".split(" "), "@2 0 0 0 0 0 0 @2".split(" "), "9X0000X9".split(""), "11 X 0 0 0 0 X 11".split(" ")],
        ["XXX99XXX".split(""), "XX0000XX".split(""), "X000000X".split(""), "17+12+0+0+0+1|4|1|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 17+12+0+0+0+1|4|2|6".split(" "),
            "00000000".split(""), "00000000".split(""), "00X00X00".split(""), "0XX00XX0".split("")
        ],
        ["0300X000".split(""), "0300X000".split(""), "3000X000".split(""), "0 0 0+0+0+0+0+1|1 0 X 0 0 0".split(" "), "XXXXX000".split(""), "X X 0+0+0+13 0+0+0+13 0+0+0+13+0+1|2 11 11 11".split(" "), "X X 0+0+0+13 0+0+0+13 0+0+0+13 11 11 11".split(" "), "X X 0+0+0+13 0+0+0+13 0+0+0+13 11 11 11".split(" ")],
        ["10+0+0+14 10+0+0+14 10+0+0+14 0 0 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 0 0 10+0+0+14 10+0+0+14 10+0+0+14".split(" "),
            "10+0+0+14 10+0+0+14 10+0+0+14 27 1 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 0+0+0+14 1 0 0+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 0+0+0+14 0 1 0+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 0 27 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 0 0 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 0 0 10+0+0+14 10+0+0+14 10+0+0+14".split(" ")
        ],
        ["000XX000".split(""), "050XX000".split(""),
            "00500000".split(""), "0 5 0 26 0 0 26 0".split(" "), "0 26 0 0 26 0 0 0".split(" "), "XXX00XXX".split(""), "0+0+0+14 0+0+0+14 0+0+0+14 X X 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 X X 0+0+0+14 0+0+0+14 0+0+0+14".split(" ")
        ],
        ["09099090".split(""), "26 10 5 10 10 0 10 26".split(" "), "X 10 5 10 10 0 10 X".split(" "), "26 10 0 10 10 0 10 26".split(" "), "X050000X".split(""), "26 0 0 0 0 0 0 26".split(" "), "00000000".split(""), "X0X00X0X".split("")],
        ["2+0+0+13 0+0+0+13 X 0+2 0+2 X X 0+1".split(" "),
            "0+0+0+13 2+0+0+13 X 0+2 0+2 X X 0+1".split(" "), "2+0+0+13 0+0+0+13 X 0+2+0+0+0+1|1 0+2+0+0+0+2|1 X X 0+1+0+0+0+3|1".split(" "), "0+0+0+13 0+0+0+13 X X X X X X".split(" "), "0+0+0+13 0+0+0+13 X X X X X X".split(" "), "XXXXXXXX".split(""), "0+0+0+13+0+1|2 0+0+0+13+0+2|2 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13+0+3|2".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" ")
        ],
        ["X00XX00X".split(""), "100XX000".split(""), "1 26 0 0 0 0 26 0".split(" "), "00000000".split(""),
            "10000000".split(""), "X000200X".split(""), "XX2200XX".split(""), "X X X 26 26 X X X".split(" ")
        ],
        ["20000000".split(""), "2 0 11 26 11 11 0 0".split(" "), "0 0 11 11 11 11 0 0".split(" "), "2 0 11 26 11 11 0 0".split(" "), "0 0 11 11 26 11 0 0".split(" "), "0 0 11 11 11 11 0 0".split(" "), "0 0 11 11 11 11 0 0".split(" "), "0 0 11 11 26 11 0 0".split(" ")],
        ["XXX00000".split(""), "0 0 0 X 10 0 0 0".split(" "), "0 0 26 X 26 11 0 0".split(" "), "0 0 0 X 0 11 0 2".split(" "), "0 0 0 X 0 11 0 0".split(" "), "0 0 26 X 26 11 0 2".split(" "),
            "0 0 0 X 10 0 0 2".split(" "), "XXX00000".split("")
        ],
        ["0 11 0 11 11 0 11 0".split(" "), "11 0 11 11 11 11 0 11".split(" "), "0 0 11 0+3 0+3 11 0 0".split(" "), "0 0 11 11 11 11 0 0".split(" "), "0 0 11 11 11 11 0 0".split(" "), "10 10 10 0+0+0+0+1 0+0+0+0+1 10 10 10".split(" "), "10 10 10 10 10 10 10 10".split(" "), "0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1".split(" ")],
        ["9 X 0+0+0+0+0+1|2 X 0 0 0 0".split(" "), "0X0X0000".split(""), "0X0X0000".split(""), "0X0X0000".split(""),
            "0 X 0 X 0 26 26 0".split(" "), "0X0X0000".split(""), "0+0+0+0+0+1|1 X 0 X 0 0 0 0".split(" "), "XX0X0000".split("")
        ],
        ["10 0 0 0 0 11 10 0".split(" "), "0 10 10 10 0+0+0+12 11 10 10".split(" "), "0 10 10 11 0+0+0+12 0 11 11".split(" "), "0 10 11 0 0+0+0+12 0+0+0+12 0+0+0+12 0".split(" "), "0 0+0+0+12 0+0+0+12 2+0+0+12 0 11 10 0".split(" "), "11 11 2 0+0+0+12 11 10 10 0".split(" "), "10 10 11 2+0+0+12 10 10 10 0".split(" "), "0 10 11 0 0 0 0 10".split(" ")],
        ["#Q #Q #Q #Q #Q #Q #Q #Q".split(" "), "QQQQQQQQ".split(""),
            "QQQQQQQQ".split(""), "0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16".split(" "), "00000000".split(""), "00202000".split(""), "00020000".split(""), "90909090".split("")
        ],
        ["XXX00XXX".split(""), "XX0200XX".split(""), "X020200X".split(""), "00000000".split(""), "11 11 11 11 11 11 11 11".split(" "), "11 11 11 11 11 11 11 11".split(" "), "10 10 10 10 10 10 10 10".split(" "), "20 20 20 20 20 20 20 20".split(" ")],
        ["#5+0+0+0+0+0+16 #1+0+0+0+0+0+16 #3+0+0+0+0+0+16 #4+0+0+0+0+0+16 #3+0+0+0+0+0+16 #1+0+0+0+0+0+16 #1+0+0+0+0+0+16 #2+0+0+0+0+0+16".split(" "),
            "20 20 20 0 0 20 20 20".split(" "), "31322415".split(""), "53234553".split(""), "10 11 11 3 1 11 11 10".split(" "), "3 10 10 10 10 10 10 3".split(" "), "2 11 11 3 1 11 11 3".split(" "), "91399449".split("")
        ],
        ["Q+0+0+13 Q+0+0+13 0+0+5+13 Q+0+0+13 Q+0+0+13 X Q Q".split(" "), "Q+0+0+13 Q+0+0+13 0+0+5+13 Q+0+0+13 Q+0+0+13 X Q Q".split(" "), "Q+0+0+13 Q+0+0+13 0+0+5+13 0+0+5+13 0+0+5+13 X Q Q".split(" "), "11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 X 11 11".split(" "), "11 11 X 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13".split(" "),
            "0 0 X 0+0+5+13 0+0+5+13 0+0+5+13 0+0+0+13 0+0+0+13".split(" "), "0 0 X 0+0+0+13 6+0+0+13 0+0+5+13 0+0+0+13 0+0+0+13".split(" "), "0 0 X 6+0+0+13 0+0+0+13 6+0+5+13 0+0+0+13 0+0+0+13".split(" ")
        ],
        ["1 3 1 1 X 3+0+0+0+0+5|2 2 1+0+0+0+0+7|2".split(" "), "3 1 3 3 X 20 20 20".split(" "), "2 2 3 3 X 20 20 20".split(" "), "2+0+0+0+0+1|1 2+0+0+0+0+2|1 4+0+0+0+0+3|1 2+0+0+0+0+4|1 X 1 2 3".split(" "), "XXXXXXXX".split(""), "3+0+0+0+0+1|2 4+0+0+0+0+2|2 3+0+0+0+0+3|2 4+0+0+0+0+4|2 X 20+0+0+0+0+6|2 20 20+0+0+0+0+8|2".split(" "),
            "1343X432".split(""), "1+0+0+0+0+5|1 3+0+0+0+0+6|1 2+0+0+0+0+7|1 2+0+0+0+0+8|1 X 20 20 20".split(" ")
        ],
        ["Q+0+0+13 Q+0+0+13 Q+0+0+13 11 0+0+5 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 Q+0+0+13 11 0+0+5 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" "), "Q+0+0+13 Q+0+0+13 Q+0+0+13 11 0+0+5 Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" "), "11 11 11 11 0+0+5 0+0+5 0+0+5 0+0+5".split(" "), "0+0+5 0+0+5 0+0+5 0+0+5 11 11 11 11".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+5 11 0+0+0+13 0+0+0+13 0+0+0+13".split(" "),
            "0+0+0+13 1+0+0+13 0+0+0+13 0+0+5 11 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "1+0+0+13 0+0+0+13 1+0+0+13 0+0+5 11 0+0+0+13 0+0+0+13 0+0+0+13".split(" ")
        ],
        ["XXX00XXX".split(""), "XX2000XX".split(""), "X202000X".split(""), "0 0 10 11 11 10 0 0".split(" "), "0 0 11 0+0+0+12 0+0+0+12 11 0 0".split(" "), "0 X 10 11 11 10 0 0".split(" "), "0X0000X0".split(""), "X X 0+0+0+12 0 0 0+0+0+12 X X".split(" ")],
        ["X X X 0 0+0+0+12 0 0 0".split(" "), "X X 0+0+0+12 0 0+0+0+12 0 0+0+0+12 0".split(" "), "X 0+0+0+12 0 0+0+0+12 0 0+0+0+12 0 0+0+0+12".split(" "),
            "0 11 0 0 0 0 0 0".split(" "), "0 11 0 0 0 0 0 11".split(" "), "0003000X".split(""), "000300XX".split(""), "00300XXX".split("")
        ],
        ["X X 0+0+0+12 0 0 0 0 X".split(" "), "X X 0+0+0+12 0 0 0 0 X".split(" "), "X 0+0+0+12 0 0 10 0 10 0".split(" "), "X 0 0 10 0 10 0 0".split(" "), "X 0 10 0 X 0 10 0".split(" "), "X 0 0 10 0 10 0 0".split(" "), "XX00000X".split(""), "XX01011X".split("")],
        ["0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 X X X".split(" "), "X X X 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "),
            "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 X X+ X+".split(" "), "X X X 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "2+0+0+14 27 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 27 0+0+0+14".split(" "), "2+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 2+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" ")
        ],
        ["23214213".split(""), "23413312".split(""),
            "34331131".split(""), "5+0+0+0+0+1|4|1|6 4+0+0+0+0+1|4|0|6 3+0+0+0+0+1|4|0|6 4+0+0+0+0+1|4|0|6 4+0+0+0+0+1|4|0|6 3+0+0+0+0+1|4|0|6 2+0+0+0+0+1|4|0|6 3+0+0+0+0+1|4|2|6".split(" "), "5+0+5 20 2+0+5 20 3+0+5 20 1+0+5 20".split(" "), "20 3+0+5 20 1+0+5 20 3+0+5 20 5+0+5".split(" "), "1+0+5 20 3+0+5 20 3+0+5 20 5+0+5 20".split(" "), "20 2+0+5 20 4+0+5 20 4+0+5 20 4+0+5".split(" ")
        ],
        ["0 0+0+5 0 0+0+5+13 11+0+0+13 0 11+0+0+13 0".split(" "), "0 0+0+5 0 11+0+0+13 0+0+5+13 0 11+0+0+13 0".split(" "), "0 0+0+5 0 0+0+5+13 11+0+0+13 0 11+0+0+13 X".split(" "),
            "X 0+0+5 0 11+0+0+13 0+0+5+13 0 11+0+0+13 0".split(" "), "0 11+0+0+13 0 0+0+5+13 11+0+0+13 1 0+0+5 X".split(" "), "X 11+0+0+13 0 11+0+0+13 0+0+5+13 1 0+0+5 0".split(" "), "0 11+0+0+13 0 0+0+5+13 11+0+0+13 0 0+0+5 X".split(" "), "X 11+0+0+13 0 11+0+0+13 0+0+5+13 1 0+0+5 0".split(" ")
        ],
        ["X0X0X0X0".split(""), "0X0X0X0X".split(""), "X0X0X0X0".split(""), "0X0X0X0X".split(""), "X0X0X0X0".split(""), "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14".split(" "),
            "0+0+0+14 0+0+0+14 6+0+0+14 6+0+0+14 0+0+0+14 6+0+0+14 0+0+0+14 0+0+0+14".split(" ")
        ],
        ["11 11 0+0+5 0 0 0+0+5 11 11".split(" "), "0+0+0+13 0+0+0+13 0+0+5 0 0 0+0+5 0+0+0+13 0+0+0+13".split(" "), "11 11 0+0+5 0 0 0+0+5 11 11".split(" "), "3+0+0+13 0+0+0+13 3+0+5 3 0 0+0+5 0+0+0+13 0+0+0+13".split(" "), "0+0+5 0+0+5 0+0+5 0 0 0+0+5 0+0+5 0+0+5".split(" "), "0+0+0+13 0+0+0+13 0+0+5 0+0+5 0+0+5 0+0+5 0+0+0+13 0+0+0+13".split(" "), "11 11 0+0+5 0+0+0+13 0+0+0+13 0+0+5 11 11".split(" "), "0+0+0+13 0+0+0+13 0+0+5 0+0+0+13 0+0+0+13 0+0+5 0+0+0+13 0+0+0+13".split(" ")],
        ["0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "10+0+0+14 6+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 10+0+0+14".split(" "), "10+0+0+14 0+0+0+14 27 0+0+0+14 0+0+0+14 27 0+0+0+14 10+0+0+14".split(" "), "10+0+0+14 6+0+0+14 0+0+0+14 X X 0+0+0+14 0+0+0+14 10+0+0+14".split(" "), "10+0+0+14 6+0+0+14 0+0+0+14 X X 0+0+0+14 0+0+0+14 10+0+0+14".split(" "), "10+0+0+14 0+0+0+14 27 0+0+0+14 0+0+0+14 27 0+0+0+14 10+0+0+14".split(" "), "10+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 10+0+0+14".split(" "),
            "10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" ")
        ],
        ["11 1 1 4 1 3 4 3".split(" "), "20 11 2 1 2 2 3 4".split(" "), "11 20 11 1 2 5 1 3".split(" "), "20 11 20 11 1 5 5 3".split(" "), "11 20 11 20 11 2 1 5".split(" "), "20 11 20 11 20 11 3 2".split(" "), "11 20 11 20 11 20 11 2".split(" "), "20 11 20 11 20 11 20 11".split(" ")],
        ["11 11 11 Q Q 11 11 11".split(" "), "11 11+0+0+13 11+0+0+13 Q+0+0+13 Q+0+0+13 11+0+0+13 11+0+0+13 11".split(" "), "11 11+0+0+14 11+0+0+14 Q+0+0+14 Q+0+0+14 11+0+0+14 11+0+0+14 11".split(" "),
            "0 0+0+5+13 0+0+0+13 Q+0+0+13 Q+0+0+13 0+0+0+13 0+0+5+13 0".split(" "), "0 0+0+5+14 0+0+0+14 Q+0+0+14 Q+0+0+14 0+0+0+14 0+0+5+14 0".split(" "), "11 11+0+0+13 11+0+0+13 0+0+0+13 1+0+0+13 11+0+0+13 11+0+0+13 11".split(" "), "11 11+0+0+14 11+0+0+14 1+0+5+14 0+0+5+14 11+0+0+14 11+0+0+14 11".split(" "), "11 11 11 1 0 11 11 11".split(" ")
        ],
        ["Q+0+0+13 Q+0+0+14 11 11 11 11 Q+0+0+13 Q+0+0+14".split(" "), "Q+0+0+14 Q+0+0+13 11 11 11 11 Q+0+0+14 Q+0+0+13".split(" "), "11 11 2+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 11 11".split(" "),
            "11 11 0+0+0+14 0+0+5+14 0+0+5+14 0+0+0+14 11 11".split(" "), "11 11 2+0+0+14 0+0+5+14 0+0+5+14 0+0+0+14 11 11".split(" "), "11 11 2+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 11 11".split(" "), "Q+0+0+13 Q+0+0+14 11 11 11 11 Q+0+0+13 Q+0+0+14".split(" "), "Q+0+0+14 Q+0+0+13 11 11 11 11 Q+0+0+14 Q+0+0+13".split(" ")
        ],
        ["Q+0+0+13 0+0+0+14 0 11 X 0 0+0+0+14 Q+0+0+13".split(" "), "Q+0+0+14 0+0+0+14 0 11+0+0+13 11+0+0+13 0 0+0+0+14 Q+0+0+14".split(" "), "Q+0+0+13 0+0+0+14 11 11+0+0+13 11+0+0+13 0 0+0+0+14 Q+0+0+13".split(" "),
            "Q+0+0+14 6+0+0+14 11 X 11 11 0+0+0+14 Q+0+0+14".split(" "), "Q+0+0+13 6+0+0+14 11 X 11 11 0+0+0+14 Q+0+0+13".split(" "), "Q+0+0+14 0+0+0+14 11 11+0+0+13 11+0+0+13 0 0+0+0+14 Q+0+0+14".split(" "), "Q+0+0+13 6+0+0+14 0 11+0+0+13 Q+0+0+13 0 0+0+0+14 Q+0+0+13".split(" "), "Q+0+0+14 0+0+0+14 0 11 X 0 0+0+0+14 Q+0+0+14".split(" ")
        ],
        ["34242323".split(""), "32415543".split(""), "X 1 21+21 21+21 21+22 21+22 0 X".split(" "), "X X 21+21 2+0+0+14 1+0+0+14 21+22 X X".split(" "), "X X 21+21 1+0+0+14 3+0+0+14 21+22 X X".split(" "),
            "X 21+23 21+21+0+14 21+21+0+14 21+22+0+14 21+22+0+14 21+23 X".split(" "), "1+0+0+14 21+23+0+14 21+23+0+14 21+23+0+14 21+23+0+14 21+23+0+14 21+23+0+14 1+0+0+14".split(" "), "5+0+0+14 3+0+0+14 3+0+0+14 2+0+0+14 3+0+0+14 1+0+0+14 1+0+0+14 3+0+0+14".split(" ")
        ],
        ["Q+0+0+13 Q+0+0+14 Q+0+0+13 11+0+0+14 0+0+0+13 0+0+5 Q Q".split(" "), "Q Q 0+0+5 0+0+5+13 11+0+0+14 Q+0+0+13 Q+0+0+14 Q+0+0+13".split(" "), "Q+0+0+14 Q+0+0+13 Q+0+0+14 11+0+0+13 0+0+5+13 0+0+5 Q Q".split(" "), "Q Q 0+0+5 0+0+5+13 11+0+0+14 Q+0+0+14 Q+0+0+13 Q+0+0+14".split(" "),
            "Q+0+0+13 Q+0+0+14 Q+0+0+13 11+0+0+13 0+0+5+13 0+0+5 Q Q".split(" "), "6 0 6+0+5 6+0+5+13 11+0+0+14 0+0+0+14 Q+0+0+13 Q+0+0+14".split(" "), "0+0+0+14 0+0+0+13 0+0+0+14 Q+0+0+13 0+0+5+13 0+0+5 0 0".split(" "), "0 0 0+0+5 0+0+5+13 11+0+0+14 0+0+0+13 0+0+0+14 0+0+0+13".split(" ")
        ],
        ["Q Q+0+0+13 Q+0+0+13 Q X Q+0+0+13 Q+0+0+13 Q".split(" "), "Q+0+0+13 Q+0+0+14 Q+0+0+13 Q Q Q+0+0+13 Q+0+0+14 Q+0+0+13".split(" "), "Q+0+0+13+0+1|1 Q+0+0+13+0+2|1 Q+0+0+13+0+3|1 Q X Q+0+0+13 Q+0+0+13 Q+0+0+13".split(" "), "X X X X Q Q+0+0+0+0+4|1 Q+0+0+0+0+5|1 Q+0+0+0+0+6|1".split(" "),
            "0+0+0+0+0+1|2 0+0+0+0+0+2|2 0+0+0+0+0+3|2 0 X X X X".split(" "), "0+0+0+13 0+0+0+14 0+0+0+13 X 0 0+0+0+13+0+4|2 0+0+0+14+0+5|2 0+0+0+13+0+6|2".split(" "), "0+0+0+14 0+0+0+13 0+0+0+14 0 0 0+0+0+14 0+0+0+13 0+0+0+14".split(" "), "0 0+0+0+14 0+0+0+13 X 2 0+0+0+13 2+0+0+14 2".split(" ")
        ],
        ["X X 0 5+0+0+14 5+0+0+14 0 X X".split(" "), "X X 5 0+0+0+14 0+0+0+14 5 X X".split(" "), "11 11 4 4 0 4 11 11".split(" "), "0+0+5+14 0+0+5+14 11 0+0+5 0+0+5 11 0+0+5+14 0+0+5+14".split(" "), "0+0+5+14 0+0+5+14 11 0+0+5 0+0+5 11 0+0+5+14 0+0+5+14".split(" "),
            "11 11 0 11 11 0 11 11".split(" "), "X X 11 0+0+5+14 0+0+5+14 11 X X".split(" "), "X X 11 0+0+5+14 0+0+5+14 11 X X".split(" ")
        ],
        ["XX9090XX".split(""), "11+0+0+0+0+1|2 10+0+0+0+0+2|2 0 9 0 9 10+0+0+0+0+3|2 11+0+0+0+0+4|2".split(" "), "11 10+0+0+0+0+5|1 0 0 0 0 10 11".split(" "), "10 X 4 4 0 4 11+0+0+0+0+6|1 10".split(" "), "11 11+0+0+0+0+5|2 0 0 0 0 X 11".split(" "), "10 10 5 5 0 5 10+0+0+0+0+6|2 10".split(" "), "11 11 0+0+0+0+0+1|1 0+0+0+0+0+2|1 0+0+0+0+0+3|1 0+0+0+0+0+4|1 11 11".split(" "), "10 10 X X X X 10 10".split(" ")],
        ["00505500".split(""), "11 11 11 11 11 11 11 11".split(" "), "QQQQQQQQ".split(""), "QQQQQQQQ".split(""), "QQQQQQQQ".split(""), "10 10 10 10 10 10 10 10".split(" "), "10 10 10 10 10 10 10 10".split(" "), "10 10 10 10 10 10 10 10".split(" ")],
        ["X X 0+0+5 0+0+5 0+0+5 Q+0+0+14 Q X".split(" "), "Q Q+0+0+13 Q+0+0+13 Q+0+0+14 Q+0+0+14 Q+0+0+13 Q+0+0+13 X".split(" "), "Q+0+0+14 Q+0+0+13 Q+0+0+13 Q+0+0+14 Q+0+0+14 Q+0+0+13 Q+0+0+13 0+0+5".split(" "), "0+0+5 Q+0+0+14 Q+0+0+14 0+0+5+13 0+0+5+13 Q+0+0+14 Q+0+0+14 0+0+5".split(" "),
            "0+0+5 Q+0+0+14 Q+0+0+14 0+0+5+13 0+0+5+13 Q+0+0+14 Q+0+0+14 0+0+5".split(" "), "0+0+5 Q+0+0+13 Q+0+0+13 Q+0+0+14 Q+0+0+14 Q+0+0+13 Q+0+0+13 Q+0+0+14".split(" "), "X 0+0+0+13 0+0+0+13 6+0+0+14 0+0+0+14 6+0+0+13 6+0+0+13 0".split(" "), "X 0 0+0+0+14 0+0+5 0+0+5 0+0+5 X X".split(" ")
        ],
        ["X X 0+0+0+14+0+1|1 0+0+0+14+0+2|1 0+0+0+14+0+3|1 0+0+0+14+0+4|1 X X".split(" "), "XXXXXXXX".split(""), "0+0+0+0+0+1|2 X 0+0+0+0+0+2|2 X X 0+0+0+0+0+3|2 X 0+0+0+0+0+4|2".split(" "), "00000000".split(""), "00030000".split(""),
            "00003000".split(""), "00030000".split(""), "00000000".split("")
        ],
        ["11 10 10 10 11 10 10 11".split(" "), "10 10 10 11 10 11 10 10".split(" "), "Q 10 10 10 11 10 10 Q".split(" "), "Q Q 10 Q Q 10 Q Q".split(" "), "QQQ00QQQ".split(""), "Q Q 0 0+3 0+2 0 Q Q".split(" "), "X000000X".split(""), "0+2 X 2 2 0 2 X 0+2".split(" ")],
        ["0 0 X 0 0 7+4 0 0".split(" "), "0+0+0+14 0 X 0 0 0 0 0".split(" "), "0+0+0+14 0 X 0 0 0 0 0".split(" "), "0+0+0+14 0 X 0 0 0 0 0".split(" "), "0+0+0+14 0 X 0 0 0+0+0+0+0+1|1 0 0".split(" "),
            "0+0+0+14 0 X X X X X X".split(" "), "0+0+0+14 X 0 1 1 0 1 0".split(" "), "0+0+0+14 0+0+0+0+0+1|2 0 0 0 0 0 0".split(" ")
        ],
        ["11 11 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 11 11".split(" "), "11 11 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 11 11".split(" "), "11 11 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 11 11".split(" "), "0 11 2+0+0+14 0+0+0+14 0+0+0+14 2+0+0+14 11 X".split(" "), "0 11 0+0+0+14 2+0+0+14 2+0+0+14 0+0+0+14 11 X".split(" "), "0 11 0+0+5+14 0+0+5+14 0+0+5+14 0+0+5+14 11 X".split(" "), "0 11 0+0+5+14 0+0+5+14 0+0+5+14 0+0+5+14 11 X".split(" "),
            "0 11 0+0+5+14 0+0+5+14 0+0+5+14 0+0+5+14 11 X".split(" ")
        ],
        ["XQQXXXXX".split(""), "X Q+0+0+14 Q+0+0+14 X X X X X".split(" "), "X Q+0+0+14 Q+0+0+14 X X X X X".split(" "), "X Q+0+0+14 Q+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 X".split(" "), "X Q+0+0+14 Q+0+0+14 0 0 0 0 0+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 0 0 0 0+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 0 0 0+0+5 0+0+0+14".split(" "), "11 11+0+0+14 11+0+0+14 11+0+0+14 1 1 0 1".split(" ")],
        ["11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13".split(" "),
            "11+0+0+13 Q+0+0+14 11 Q+0+0+14 Q+0+0+14 11 Q+0+0+14 11+0+0+13".split(" "), "11+0+0+13 11 Q+0+0+14 11 Q+0+0+14 Q+0+0+14 11 11+0+0+13".split(" "), "11+0+0+13 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 11 Q+0+0+14 11+0+0+13".split(" "), "11+0+0+13 Q+0+0+14 11 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 11+0+0+13".split(" "), "11+0+0+13 11 Q+0+0+14 Q+0+0+14 11 Q+0+0+14 11 11+0+0+13".split(" "), "11+0+0+13 Q+0+0+14 11 Q+0+0+14 5+0+0+14 11 Q+0+0+14 11+0+0+13".split(" "), "11+0+0+13 11+0+0+13 0+0+0+13 5+2+0+13 0+0+0+13 5+2+0+13 11+0+0+13 11+0+0+13".split(" ")
        ],
        ["00000000".split(""), "50550000".split(""), "10 0+0+5+0+0+0+16 0 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0 0+0+5+0+0+0+16 10".split(" "), "0 10 0 10 10 0 10 0".split(" "), "0 10 0 10 10 0 10 0".split(" "), "10 0+0+5+0+0+0+16 0 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0 0+0+5+0+0+0+16 10".split(" "), "00000000".split(""), "00000000".split("")],
        ["10000000".split(""), "00000000".split(""), "10000000".split(""), "1 10 10 10 10 10 10 0".split(" "), "0 10 0+0+5+0+0+0+16 10 10 0+0+5+0+0+0+16 10 0".split(" "), "0 10 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16 0+0+5+0+0+0+16 10 0".split(" "),
            "0 10 0+0+5+0+0+0+16 10 10 0+0+5+0+0+0+16 10 0".split(" "), "0 10 10 10 10 10 10 0".split(" ")
        ],
        ["10 0 0 0 0 10 10 10".split(" "), "5 10 10 10 0 10 10 10".split(" "), "0 10 10 10 0 10 10 10".split(" "), "5 10 10 10 0 0 0 0".split(" "), "5 0 0 0 10 10 10 0".split(" "), "10 10 10 0 10 10 10 0".split(" "), "10 10 10 0 10 10 10 0".split(" "), "10 10 10 0 0 0 0 10".split(" ")],
        ["QQQQQQQQ".split(""), "Q Q Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q Q".split(" "), "Q Q+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 Q+0+0+14 Q".split(" "),
            "Q Q+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 Q+0+0+14 Q".split(" "), "Q Q+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 Q+0+0+14 Q".split(" "), "Q Q+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 Q+0+0+14 Q".split(" "), "0 0 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0 0".split(" "), "00220200".split("")
        ],
        ["XX2313XX".split(""), "X 4 3 2+0+5+14 2+0+5+14 3 1 X".split(" "), "3+0+0+13 5 3 5+0+5+14 4+0+5+14 1 1 2+0+0+13".split(" "), "26 5+0+5+14 4+0+5+14 2+0+5+14 2+0+5+14 4+0+5+14 5+0+5+14 26".split(" "), "26 2+0+5+14 4+0+5+14 4+0+5+14 3+0+5+14 2+0+5+14 3+0+5+14 26".split(" "),
            "11+0+0+13 2 1 25+0+5+14 25+0+5+14 1 2 11+0+0+13".split(" "), "X 3 4 25+0+5+14 25+0+5+14 4 3 X".split(" "), "X X 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 X X".split(" ")
        ],
        ["XXX00XXX".split(""), "XX5055XX".split(""), "X 0 10 10 10 10 0 X".split(" "), "10 10 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 10 10".split(" "), "10 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 10".split(" "), "X Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 X".split(" "), "X X Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 X X".split(" "),
            "X X X Q+0+0+14 Q+0+0+14 X X X".split(" ")
        ],
        ["X X 0 5 11 0 0 0".split(" "), "0 0 0 5 10 0 0 0".split(" "), "0 0 5 0 11 0 0 X".split(" "), "X 11 11 11 11 11 11 X".split(" "), "X 10 10 10 10 10 10 10".split(" "), "0+0+0+12 0+0+0+12 0+0+0+12 11 Q 11 Q 11".split(" "), "0+0+0+12 0 0+0+0+12 10 11 11 10 X".split(" "), "0+0+0+12 0+0+0+12 0+0+0+12 11 Q 11 X X".split(" ")],
        ["0+0+0+0+0+1|4|1|9 X 0+0+0+0+0+1|2|0|7 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|9 X 0+0+0+0+0+1|2|2|7".split(" "), "0+0+0+0+0+1|8|0|11 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|13 10 10 0+0+0+0+0+1|8|0|11 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|13".split(" "),
            "0 10 10 10 10 10 10 0".split(" "), "1 10 10 10 10 10 10 0".split(" "), "0 1 1 10 10 0 0 0".split(" "), "0 3 0 10 10 0 0 0".split(" "), "0 0 3 10 10 0 0 0".split(" "), "X 0+0+0+12 3+0+0+12 10 10 0+0+0+12 0+0+0+12 X".split(" ")
        ],
        ["X 0 0+0+0+14 0 0 0+0+0+14 0 X".split(" "), "0 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0".split(" "), "6 0 21+21+0+14 21+21+0+14 21+21+0+14 21+21+0+14 0 0".split(" "), "0 6 21+22+0+14 21+24+0+14 21+24+0+14 21+23+0+14 0 0".split(" "), "6 0 21+22+0+14 21+24+0+14 21+24+0+14 21+23+0+14 0 0".split(" "),
            "0 0 21+22+0+14 21+22+0+14 21+23+0+14 21+23+0+14 0 0".split(" "), "0 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0".split(" "), "X 0 0+0+0+14 0 0 0+0+0+14 0 X".split(" ")
        ],
        ["0+0+5+0+1 X 0 0 0 0 X 0+0+0+0+1".split(" "), "0+0+0+0+1 X 0 2 0 0 X 0+0+5+0+1".split(" "), "0+0+5+0+1 X 0 0 2 2 X 0+0+0+0+1".split(" "), "0+0+0+0+1 X 11 11 11 11 X 0+0+5+0+1".split(" "), "0+0+5+0+1 X 10 10 10 10 X 0+0+0+0+1".split(" "), "0+0+0+0+1 X Q Q Q Q X 0+0+5+0+1".split(" "), "0+0+5+0+1 X Q Q Q Q X 0+0+0+0+1".split(" "),
            "0+0+0+0+1 X X Q Q X X 0+0+5+0+1".split(" ")
        ],
        ["X404400X".split(""), "0 11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 0".split(" "), "0 0+0+0+14 11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 11+0+0+14 0".split(" "), "0 11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 0".split(" "), "0 20+0+0+14 11+0+0+14 20+0+0+14 11+0+0+14 20+0+0+14 11+0+0+14 0".split(" "), "0 11+0+0+14 20+0+0+14 11+0+0+14 20+0+0+14 11+0+0+14 20+0+0+14 0".split(" "), "0 20+0+0+14 11+0+0+14 20+0+0+14 11+0+0+14 20+0+0+14 11+0+0+14 0".split(" "),
            "X000000X".split("")
        ],
        ["00040000".split(""), "00404000".split(""), "0 17+12+0+0+0+1|4|1|6 10+0+0+0+0+1|4|0|6 10+0+0+0+0+1|4|0|6 10+0+0+0+0+1|4|0|6 17+12+0+0+0+1|4|0|6 10+0+0+0+0+1|4|2|6 0".split(" "), "0 0 10 0 10 0 10 0".split(" "), "00999900".split(""), "0 0 18 18 18 18 0 0".split(" "), "0 0 18 18 18 18 0 0".split(" "), "0 0 18 18 18 18 0 0".split(" ")],
        ["10+0+0+14 10+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 0+0+0+14 2+0+0+14 0+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14".split(" "),
            "10+0+0+14 10+0+0+14 0+0+0+14 0+0+0+14 2+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 0+0+0+14 2+0+0+14 0+0+0+14 0+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" ")
        ],
        ["X000000X".split(""), "0+0+0+14 0+0+0+14 0 5 5 0 0+0+0+14 0+0+0+14".split(" "), "10+0+0+14 11+0+0+14 0 0 0 5 11+0+0+14 10+0+0+14".split(" "), "10+0+0+14 11+0+0+14 27 0 0 0 11+0+0+14 10+0+0+14".split(" "), "10+0+0+14 11+0+0+14 0 0 0 27 11+0+0+14 10+0+0+14".split(" "), "10+0+0+14 11+0+0+14 0 0 0 0 11+0+0+14 10+0+0+14".split(" "), "0+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 0+0+0+14".split(" "), "X 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 X".split(" ")],
        ["X 0 0 18 0 0 0 X".split(" "),
            "0 0 0 10 0 0 0 0".split(" "), "0 0 3 18 0 0 0 0".split(" "), "3 3 0 17+18+0+12 10 10 10 10".split(" "), "10 10 10 10 17+12+0+12 0 0 0".split(" "), "0 0 0 0 18 0 0 0".split(" "), "0 0 0 0 10 0 0 0".split(" "), "X 0 0 0 18 0 0 X".split(" ")
        ],
        ["0 1 0 0+0+0+14 0+0+0+14 0 0 0".split(" "), "1 0 1 0+0+0+14 0+0+0+14 0 0 0".split(" "), "0 0 0+0+5+14 0+0+5+14 0+0+5+14 0+0+5+14 0 0".split(" "), "0 0+0+0+14 0+0+5+14 X X 0+0+5+14 0+0+0+14 0".split(" "), "0 0+0+0+14 0+0+0+14 X X 0+0+5+14 0+0+0+14 0".split(" "), "0 0 0+0+5+14 0+0+5+14 0+0+5+14 0+0+5+14 0 0".split(" "),
            "0 0+0+5 0 0+0+5+14 0+0+5+14 0 0+0+5 0".split(" "), "0+0+5 0 0 0+0+0+14 0+0+0+14 0 0 0+0+5".split(" ")
        ],
        ["1 11 2 2 1 4 4 2".split(" "), "2 11 X X X 11 11 11".split(" "), "2 11 0 0 0 0 X 2".split(" "), "3 X 0 0+0+0+12 0+0+0+12 0 X 2".split(" "), "2 X 0 27+0+0+12 0+0+0+12 0 X 3".split(" "), "3 X 0 0 0 0 11 1".split(" "), "11 11 11 X X X 11 3".split(" "), "2 3 5 5 2 5 11 3".split(" ")],
        ["00000000".split(""), "00550500".split(""), "X 0+0+0+0+0+2|4|1|6 17+12+0+0+0+2|4|0|6 0+0+0+12+0+2|4|0|6 0+0+0+12+0+2|4|0|6 17+12+0+0+0+2|4|0|6 0+0+0+0+0+2|4|2|6 X".split(" "),
            "XX0000XX".split(""), "X X 18+0+0+0+0+1|4|1|6 18+0+0+0+0+1|4|0|6 18+0+0+0+0+1|4|0|6 18+0+0+0+0+1|4|2|6 X X".split(" "), "XQQQQQQX".split(""), "Q Q 10 10 10 10 Q Q".split(" "), "Q Q 10 10 10 10 Q Q".split(" ")
        ],
        ["X 10+0+0+14+0+1|2 20+0+0+14+0+2|2 10+0+0+14+0+3|2 20+0+0+14+0+4|2 10+0+0+14+0+5|2 20+0+0+14+0+6|2 X".split(" "), "X 20+0+0+14 10+0+0+14 20+0+0+14 10+0+0+14 20+0+0+14 10+0+0+14 X".split(" "), "X 10+0+0+14 20+0+0+14 10+0+0+14 20+0+0+14 10+0+0+14 20+0+0+14 X".split(" "), "XXXXXXXX".split(""), "00005000".split(""),
            "00050000".split(""), "00005000".split(""), "0 0+0+0+0+0+1|1 0+0+0+0+0+2|1 0+0+0+0+0+3|1 5+0+0+0+0+4|1 0+0+0+0+0+5|1 0+0+0+0+0+6|1 0".split(" ")
        ],
        ["XXX0050X".split(""), "XX00505X".split(""), "X000000X".split(""), "0 0 10 10 10 0 0 X".split(" "), "0 0 10 0 10 0 0 0".split(" "), "0 0 10 10 10 0 X 0+1+5+12".split(" "), "0 0 0 0 0 X X 0+3+5+12".split(" "), "0000XXX0".split("")],
        ["0 0 0 0 0+0+5+13 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "0 0 0 0 0+0+0+13 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "0 0 0 0 0+0+5+13 10+0+0+14 10+0+0+14 10+0+0+14".split(" "),
            "0 0 0 0 0+0+0+13 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "0 0 0 0 0+0+5+13 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "0 0 0 0 0+0+0+13 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "0 0 0 0 0+0+5+13 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "0 0 0 0 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" ")
        ],
        ["00000000".split(""), "01101000".split(""), "11+0+0+0+0+1|4|1|6 17+12+0+0+0+1|4|0|6 11+0+0+0+0+1|4|0|6 11+0+0+0+0+1|4|0|6 17+12+0+0+0+1|4|0|6 11+0+0+0+0+1|4|0|6 11+0+0+0+0+1|4|0|6 17+12+0+0+0+1|4|2|6".split(" "),
            "0X0XX0X0".split(""), "00000000".split(""), "00000000".split(""), "20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14".split(" "), "20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14 20+0+0+14".split(" ")
        ],
        ["0 X X 10 10 X X 0".split(" "), "0 0 X 10 10 X 0 0".split(" "), "27 3 0 X X 0 0 27".split(" "), "00300000".split(""), "0 0 3 27 0 0 0 0".split(" "), "XX0000XX".split(""), "10 10 0 0 0 0 10 10".split(" "), "10 10 X 0 0 X 10 10".split(" ")],
        ["00009000".split(""),
            "17+16 0 0+0+5 0+0+5 0+0+5 0+0+5 0 0".split(" "), "3 0+0+5 0 0 0 0 0+0+5 0".split(" "), "3 0+0+5 0 0 0 0 0+0+5 0".split(" "), "0 0+0+5 0 0 0 0 0+0+5 0".split(" "), "3 0+0+5 0 0 0 0 0+0+5 0".split(" "), "0 0 0+0+5 0+0+5 0+0+5 0+0+5 0 17+14".split(" "), "00000000".split("")
        ],
        ["X Q Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q X".split(" "), "Q Q Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q 0".split(" "), "Q Q Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q 0".split(" "), "Q Q Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q 0".split(" "), "Q 2+0+0+0+0+0+16 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 0+0+0+0+0+0+16 0".split(" "),
            "Q 0 2+0+0+14 Q+0+0+14 Q+0+0+14 0+0+0+14 0 0".split(" "), "Q 2 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0 0".split(" "), "X 0+0+0+0+0+0+16 0+0+0+0+0+0+16 0+0+0+0+0+0+16 0+0+0+0+0+0+16 0+0+0+0+0+0+16 0+0+0+0+0+0+16 X".split(" ")
        ],
        ["0 0 0 Q+0+0+14 Q+0+0+14 0 0 0".split(" "), "2 0+0+0+0+0+1|8|1|2 0 18+0+0+14 18+0+0+14 0+0+0+0+0+2|8|1|2 0 0".split(" "), "0 17+16+0+0+0+1|8|0|2 0 18+0+0+14 18+0+0+14 0+0+0+0+0+2|8|0|2 0 0".split(" "), "2 0+0+0+0+0+1|8|0|2 0 18+0+0+14 18+0+0+14 17+14+0+0+0+2|8|0|2 0 0".split(" "),
            "2 0+0+0+0+0+1|8|0|2 0 18+0+0+14 18+0+0+14 0+0+0+0+0+2|8|0|2 0 0".split(" "), "0 17+16+0+0+0+1|8|0|2 0 18+0+0+14 18+0+0+14 0+0+0+0+0+2|8|0|2 0 0".split(" "), "0 0+0+0+0+0+1|8|0|2 0 18+0+0+14 18+0+0+14 17+14+0+0+0+2|8|0|2 0 0".split(" "), "0 0+0+0+0+0+1|8|2|2 0 18+0+0+14 18+0+0+14 0+0+0+0+0+2|8|2|2 0 0".split(" ")
        ],
        ["X 0+0+0+0+0+1|2 0+0+0+0+0+2|2 X X 0+1 0+2 0+1".split(" "), "0+0+0+13 11+0+0+14 0+0+0+14 0+0+0+13 X 0 0 11".split(" "), "11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 X 0 0 11".split(" "), "0+0+0+14 11+0+0+14 0+0+0+14 11+0+0+14 X 0 2 11".split(" "),
            "11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 X 0 0 11".split(" "), "0+0+0+14 11+0+0+14 0+0+0+14 11+0+0+14 X 0 2 11".split(" "), "11+0+0+14 0+0+0+14 11+0+0+14 0+0+0+14 X 0 2 11".split(" "), "0+0+0+13 0+0+0+14 11+0+0+14 0+0+0+13 X 0+2+0+0+0+1|1 0+1+0+0+0+2|1 X".split(" ")
        ],
        ["00000000".split(""), "00000000".split(""), "00330300".split(""), "X000000X".split(""), "0+0+0+14 26 0 0 0 0 26 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0 0 0 0 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 26 X X 26 0+0+0+14 0+0+0+14".split(" "),
            "0+2+0+14 0+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 0+0+0+14 0+2+0+14".split(" ")
        ],
        ["XXX00XXX".split(""), "X 20+0+0+0+0+1|1 X 0 0 X 20+0+0+0+0+2|1 X".split(" "), "X X X 0 11+0+0+14 X X X".split(" "), "0 11+0+0+14+0+1|2 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 11+0+0+14+0+2|2 0".split(" "), "1 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0".split(" "), "0 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 11+0+0+14 0".split(" "), "1 11+0+0+14 0+0+0+14 11+0+0+14 X X X X".split(" "), "1000XXXX".split("")],
        ["0 0 10 26 10 0 0 0".split(" "), "X 0 26 20 20 0 0 0".split(" "), "4 0 10 26 10 0 0 X".split(" "), "0 4 20 20 26 0 0 0".split(" "), "4 0 10 26 10 0 0 0".split(" "), "X 0 26 20 20 0 0 0".split(" "), "0 0 10 26 10 0 0 X".split(" "), "0 0 20 20 26 0 0 0".split(" ")],
        ["10 0 10 0 10 0 10 0".split(" "), "0 10 0 10 0 10 0 10".split(" "), "10 0 10 0 10 0 10 0".split(" "), "0 10 0 10 0 10 0 10".split(" "), "00000000".split(""), "00404400".split(""), "00000000".split(""), "17+18+0+12 0 0 0 0 0 0 17+18+0+12".split(" ")],
        ["12345245".split(""), "X443553X".split(""), "QX3323XQ".split(""), "Q 10 X 10 10 X 10 Q".split(" "), "Q+0+0+14 Q+0+0+14 10 Q+0+0+14 Q+0+0+14 10 Q+0+0+14 Q+0+0+14".split(" "), "Q+0+0+14 Q+0+0+14 Q Q+0+0+14 Q+0+0+14 Q Q+0+0+14 Q+0+0+14".split(" "), "Q+0+0+14 Q+0+0+14 Q X X Q Q+0+0+14 Q+0+0+14".split(" "), "QQQXXQQQ".split("")],
        ["11 11 X #Q #Q X 10 11".split(" "), "QQX99X0Q".split(""), "QQXXXX0X".split(""), "Q Q 10 Q Q 10 X #Q".split(" "), "X X X 10 10 X X Q".split(" "), "#Q X 1+0+0+0+0+0+16 2 3 3+0+0+0+0+0+16 X Q".split(" "),
            "9 X 2+0+0+0+0+0+16 3 4 4+0+0+0+0+0+16 X 9".split(" "), "Q X 1+0+0+0+0+0+16 2 3 1+0+0+0+0+0+16 X X".split(" ")
        ],
        ["X X 1+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 X X".split(" "), "X 1+0+0+13 0+0+0+13 1+0+0+14 0+0+0+14 0+0+0+13 0+0+0+13 X".split(" "), "10 10 10 @3 @1 10 10 10".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 @2+0+0+14 @3+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 @3+0+0+14 @4+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "10 10 10 @3 @2 10 10 10".split(" "), "X 0+0+0+13 0+0+0+13 0+0+0+14 0+0+0+14 0+0+0+13 0+0+0+13 X".split(" "),
            "X X 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 X X".split(" ")
        ],
        ["12331525".split(""), "54414235".split(""), "5 3 X 4+0+0+14 4+0+0+14 X 4 3".split(" "), "3 X @3+0+0+14 @2+0+0+14 @2+0+0+14 @3+0+0+14 X 2".split(" "), "X 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 X".split(" "), "@1+0+0+14 @4+0+0+14 @1+0+0+14 @4+0+0+14 @1+0+0+14 @4+0+0+14 @1+0+0+14 @4+0+0+14".split(" "), "X 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 X".split(" "), "X X @3+0+0+14 @3+0+0+14 @3+0+0+14 @3+0+0+14 X X".split(" ")],
        ["#1 #2 #1 #2 #3 #3 #4 #3".split(" "), "24343242".split(""), "2 5 10 5 5 10 3 5".split(" "), "4 10 @2+0+0+0+0+0+16 10 10 @2+0+0+0+0+0+16 10 4".split(" "), "5 10 @4+0+0+0+0+0+16 @4+0+0+0+0+0+16 @2+0+0+0+0+0+16 @3+0+0+0+0+0+16 10 1".split(" "), "3 10 @3+0+0+0+0+0+16 @2+0+0+0+0+0+16 @3+0+0+0+0+0+16 @4+0+0+0+0+0+16 10 1".split(" "), "2 2 10 9 9 10 2 4".split(" "), "2 1 3 10 10 3 1 4".split(" ")],
        ["2+0+0+12 3 X 1 1 5 2 5".split(" "), "1+0+0+12 4 X 3 1 4 3 10".split(" "), "X X 1 1 3 5 1 10".split(" "), "10 10 2 5 3 4 3 10".split(" "),
            "10 10 5 5 4 3 2 10".split(" "), "10 10 2 2 4 1 3 10".split(" "), "10 10 2 3 1 2 X 10".split(" "), "10 10 5+0+0+12 1 3 5 X 5+0+0+12".split(" ")
        ],
        ["0+0+0+0+0+1|1 0+0+0+0+0+2|1 0+0+0+0+0+3|1 0+0+0+0+0+4|1 0+0+0+0+0+5|1 0+0+0+0+0+6|1 0+0+0+0+0+7|1 0+0+0+0+0+8|1".split(" "), "XXXXXXXX".split(""), "0+0+0+0+0+1|2 X X X X X X 0+0+0+0+0+8|2".split(" "), "0+0+0+14 0+0+0+0+0+2|2 X X X X 0+0+0+0+0+7|2 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+0+0+3|2 X X 0+0+0+0+0+6|2 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14+0+4|2 0+0+0+14+0+5|2 0+0+0+14 0+0+0+14 0+0+0+14".split(" "),
            "0 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0".split(" "), "1 1 0+0+0+14 1+0+0+14 0+0+0+14 0+0+0+14 0 0".split(" ")
        ],
        ["10+0+0+14 1+0+0+14 10+0+0+14 0 0 10+0+0+14 3+0+0+14 10+0+0+14".split(" "), "1+0+0+14 10+0+0+14 X 0 0 X 10+0+0+14 3+0+0+14".split(" "), "1+0+0+14 X 0 0 0 0 X 3+0+0+14".split(" "), "X002202X".split(""), "X 0 27 0 0 27 0 X".split(" "), "5+0+0+14 X 0 0 0 0 X 4+0+0+14".split(" "), "5+0+0+14 10+0+0+14 X 0 0 X 10+0+0+14 4+0+0+14".split(" "), "10+0+0+14 5+0+0+14 10+0+0+14 X X 10+0+0+14 4+0+0+14 10+0+0+14".split(" ")],
        ["22020000".split(""), "0 10 10 0 0 10 10 0".split(" "), "0 10 10 0 0 10 10 0".split(" "), "0 0 0 0+0+0+12 0+0+0+12 0 0 0".split(" "), "0 0 0 0+0+0+12 0+0+0+12 0 0 0".split(" "), "0 10 10 0 0 10 10 0".split(" "), "0 10 10 0 0 10 10 0".split(" "), "00000000".split("")],
        ["11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13 11+0+0+13".split(" "), "11+0+0+13 Q+0+0+14 11 Q+0+0+14 Q+0+0+14 11 Q+0+0+14 11+0+0+13".split(" "), "11+0+0+13 11 Q+0+0+14 11 Q+0+0+14 Q+0+0+14 11 11+0+0+13".split(" "), "11+0+0+13 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 11 Q+0+0+14 11+0+0+13".split(" "),
            "11+0+0+13 Q+0+0+14 11 Q+0+0+14 Q+0+0+14 Q+0+0+14 Q+0+0+14 11+0+0+13".split(" "), "11+0+0+13 11 Q+0+0+14 Q+0+0+14 11 Q+0+0+14 11 11+0+0+13".split(" "), "11+0+0+13 Q+0+0+14 11 Q+0+0+14 2+0+0+14 11 Q+0+0+14 11+0+0+13".split(" "), "11+0+0+13 11+0+0+13 1+0+0+13 1+2+0+13 2+0+0+13 1+2+0+13 11+0+0+13 11+0+0+13".split(" ")
        ],
        ["00030000".split(""), "03300000".split(""), "00000000".split(""), "10 0 10 10+0+0+0+0+1|1 10+0+0+0+0+2|1 10 0 10".split(" "), "10 10 X X X X 10 10".split(" "), "0+0+0+0+1 0+0+0+0+1 Q Q+0+0+0+0+1|2 Q+0+0+0+0+2|2 Q 0+0+0+0+1 0+0+0+0+1".split(" "),
            "0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1".split(" "), "0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1 0+0+0+0+1".split(" ")
        ],
        ["9Q9Q9Q9Q".split(""), "0Q0Q0Q0Q".split(""), "00220200".split(""), "0 0 0 0 0 0 0 27".split(" "), "10 10 10 10 10 10 10 10".split(" "), "QXQXQXQX".split(""), "QXQXQXQX".split(""), "X 0+1 X 0+1 X 0+1 X 0+1".split(" ")],
        ["00022020".split(""), "00000000".split(""), "0 0+2+5+12 0 0+0+5+12 0+0+5+12 0 0+2+5+12 0".split(" "), "0 10 10 10 10 10 10 0".split(" "),
            "10 10 0+0+0+13 0+1+0+13 0+2+0+13 0+0+0+13 10 10".split(" "), "0+0+0+13 10 10 10 10 10 10 0+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" ")
        ],
        ["0 9 0 17+14 17+16 0 9 0".split(" "), "00220200".split(""), "00000000".split(""), "X 11 11 0 0 11 11 X".split(" "), "00000000".split(""), "00000000".split(""), "0 11 0 11 11 0 11 0".split(" "), "18 18 18 17+14 17+16 18 18 18".split(" ")],
        ["00500000".split(""), "05000000".split(""), "0 5 0+0+5+12 0+0+5 0+0+5 0+0+5+12 0 0".split(" "), "0 0 0+0+5 10 10 0+0+5 0 0".split(" "), "0 0 0+0+5 10 10 0+0+5 0 0".split(" "), "0 0 0+0+5+12 0+0+5 0+0+5 0+0+5+12 0 0".split(" "), "00000000".split(""), "00000000".split("")],
        ["10 10 10 10 10 10 0 0".split(" "), "10 10 10 10 10 10 0 0".split(" "), "10 10 10 10 10 10 X 0".split(" "), "10 10 10 10 10 10 0 0".split(" "), "10 10 10 10 10 10 0 0".split(" "), "10 10 10 10 10 0 0 0".split(" "), "10 10 10 10 10 5+2 5+2 0".split(" "),
            "10 10 10 10 10 0 0 0".split(" ")
        ],
        ["09090909".split(""), "66060000".split(""), "11 11 11 11 11 11 11 11".split(" "), "QQQQQQQQ".split(""), "QQQQQQQQ".split(""), "QQQQQQQQ".split(""), "11 11 11 11 11 11 11 11".split(" "), "11 Q 11 Q 11 Q 11 Q".split(" ")],
        ["XX005000".split(""), "XX0X0550".split(""), "XX000000".split(""), "XX000000".split(""), "X X 0+3+5+14 X 0 0 0 0".split(" "), "X X 0+0+5+14 X 0 0 0 0".split(" "), "XXQX0000".split(""), "0+2+5 0+3+5 Q X 0+0+5+14 0+0+5+14 0+0+5+14 0+0+5+14".split(" ")],
        ["05099000".split(""),
            "50000000".split(""), "05000000".split(""), "0 0 0 18 18 0 0 17+14".split(" "), "17+16 0 0 18 18 0 0 0".split(" "), "0 0 0 18 18 0 0 17+14".split(" "), "17+16 0 0 18 18 0 0 0".split(" "), "00000000".split("")
        ],
        ["XXX0000X".split(""), "XXX0000X".split(""), "XX04000X".split(""), "X X 0 4 0 0 0 26".split(" "), "XX004000".split(""), "XX000000".split(""), "XX000000".split(""), "XX000000".split("")],
        ["0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 5+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "),
            "0+0+0+14 0+0+0+14 5+0+0+14 5+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+5+14 0+0+5+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+5+14 0+0+5+14".split(" "), "X X 10+0+0+13 10+0+0+13 10+0+0+13 10+0+0+13 X X".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" ")
        ],
        ["0+0+5 0 0 0 0 0 0 0".split(" "),
            "0 0 0 0 0 0 0 0+0+5".split(" "), "0+0+5 0 X 2+2+5 X 0 0 0".split(" "), "0 0 2+2+5 3+1+0+12 2+2+5 0 5 0+0+5".split(" "), "0+0+5 0 X 2+2+5 X 0 0 0".split(" "), "0 0 0 0 0 0 5 0+0+5".split(" "), "0+0+5 0 0 0 0 0 5 0".split(" "), "0 0 0 0 0 0 0 0+0+5".split(" ")
        ],
        ["09090XXX".split(""), "0 0 3 0 0 X 11+0+0+0+0+1|2 11+0+0+0+0+2|2".split(" "), "03030XQQ".split(""), "0 0 0 0 0 X 11 11".split(" "), "0 0 0 0 0 X 11 11".split(" "), "00000XQQ".split(""), "X 9+0+0+0+0+1|1 X 9+0+0+0+0+2|1 X X Q Q".split(" "), "XXXXXXQQ".split("")],
        ["6+0+0+0+1 1+0+0+0+0+2|8|1|2 X X X X 1+0+0+0+0+1|8|1|2 10".split(" "), "10 1+0+0+0+0+2|8|0|2 2 2 1 2 1+0+0+0+0+1|8|0|2 6+0+0+0+1".split(" "), "6+0+0+0+1 3+0+0+0+0+2|8|0|2 3 4 2 3 3+0+0+0+0+1|8|0|2 10".split(" "), "10 5+0+0+0+0+2|8|0|2 4 3 2 1 1+0+0+0+0+1|8|0|2 6+0+0+0+1".split(" "), "6+0+0+0+1 1+0+0+0+0+2|8|0|2 4 3 1 5 1+0+0+0+0+1|8|0|2 10".split(" "), "10 3+0+0+0+0+2|8|0|2 1 2 4 3 2+0+0+0+0+1|8|0|2 6+0+0+0+1".split(" "), "6+0+0+0+1 5+0+0+0+0+2|8|0|2 2 3 4 5 4+0+0+0+0+1|8|0|2 10".split(" "), "10 1+0+0+0+0+2|8|2|2 X X X X 1+0+0+0+0+1|8|2|2 6+0+0+0+1".split(" ")],
        ["0+0+0+0+0+2|2|0|7 0+0+0+0+0+2|4|0|6 0+0+0+0+0+2|4|0|9 1 0 1+0+0+0+0+1|2|0|7 1+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|9".split(" "), "0+0+0+0+0+2|2|0|8 X 0+0+0+0+0+2|8|0|2 11 0+0+5+12 0+0+0+0+0+1|2|0|8 0 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+2|2|0|8 0 0+0+0+0+0+2|8|0|2 0+0+5+12 11 0+0+0+0+0+1|2|0|8 X 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+2|2|0|8 X 0+0+0+0+0+2|8|0|2 11 0+0+5+12 0+0+0+0+0+1|2|0|8 0 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+2|2|0|8 0 0+0+0+0+0+2|8|0|2 0+0+5+12 11 0+0+0+0+0+1|2|0|8 X 0+0+0+0+0+1|8|0|2".split(" "),
            "0+0+0+0+0+2|2|0|8 X 0+0+0+0+0+2|8|0|2 11 0+0+5+12 0+0+0+0+0+1|2|0|8 0 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+2|2|0|8 0 0+0+0+0+0+2|8|0|2 0+0+5+12 11 0+0+0+0+0+1|2|0|8 X 0+0+0+0+0+1|8|0|2".split(" "), "0+0+0+0+0+2|6|0|1 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|8|0|3 0 0 0+0+0+0+0+1|6|0|1 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|8|0|3".split(" ")
        ],
        ["02000000".split(""), "00000000".split(""), "0 2 0 0 27 0 0 0".split(" "), "0200XXXX".split(""), "000XX999".split(""), "XXXXX000".split(""), "0+0+0+0+0+3|2 0+0+0+0+0+2|2 0+0+0+0+0+1|2 X X 0+0+0+0+0+1|1 0+0+0+0+0+2|1 0+0+0+0+0+3|1".split(" "),
            "000XXXXX".split("")
        ],
        ["2+0+0+13 2+0+0+13 0+0+0+13 2+0+0+13 0+0+0+13 @3+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13+0+3|1 0+0+0+13+0+4|1 @1+0+0+13+0+5|1 0+0+0+13+0+6|1 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13+0+1|1 0+0+0+13+0+2|1 X X X X 0+0+0+13 0+0+0+13".split(" "), "X X X 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13+0+1|2 0+0+0+13+0+2|2 X X X X 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13+0+3|2 10+0+0+13+0+4|2 @3+0+0+13+0+5|2 10+0+0+13+0+6|2 0+0+0+13 0+0+0+13".split(" "),
            "0+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 @1+0+0+13 10+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 10+0+0+13 @1+0+0+13 10+0+0+13 0+0+0+13 0+0+0+13".split(" ")
        ],
        ["0 0 0 0+0+0+0+0+2|2|0|7 0+0+0+0+0+2|4|0|6 0+0+0+0+0+2|4|0|6 0+0+0+0+0+2|4|0|6 0+0+0+0+0+2|4|0|9".split(" "), "0 0 3 0+0+0+0+0+2|2|0|8 X 0+0+0+12 X 0+0+0+0+0+2|8|0|2".split(" "), "0 3 0 0+0+0+0+0+2|6|0|1 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|8|0|3".split(" "), "0 3 0+0+5 0+0+5 0+0+5 0 0 0".split(" "),
            "0 0+0+5 0 0+0+5 0 0+0+5 0 0".split(" "), "0+0+0+0+0+1|2|0|7 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|9 0 0 0".split(" "), "0+0+0+0+0+1|2|0|8 X 0+0+0+12 X 0+0+0+0+0+1|8|0|2 0 0 0".split(" "), "0+0+0+0+0+1|6|0|1 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|8|0|3 0 0 0".split(" ")
        ],
        ["00505500".split(""), "00000000".split(""), "0 0 10 10 10 10 0 0".split(" "), "0 0 10 Q+0+0+14 Q+0+0+14 10 0 0".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 Q+0+0+14 Q+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "),
            "10+0+0+14 10+0+0+14 10+0+0+14 Q+0+0+14 Q+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "X 10+0+0+14 10+0+0+14 Q+0+0+14 Q+0+0+14 10+0+0+14 10+0+0+14 X".split(" "), "X X 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14 X X".split(" ")
        ],
        ["0003000X".split(""), "0 0 3 0 3 0 X 11".split(" "), "0 0 0 0 0 X 11 Q".split(" "), "0+1 0 0 0 X 11 Q Q".split(" "), "0 0 0 0 X Q 11 Q".split(" "), "0 0 0 0 X Q Q 11".split(" "), "10 10 10 0 X X Q Q".split(" "), "10 Q+0+0+12 10 10 X X X Q".split(" ")],
        ["10 10 10 10 10 10 10 10".split(" "),
            "QQQQQQQQ".split(""), "0+0+0+0+0+0+16 21+23 21+22 0+0+0+0+0+0+16 0+0+0+0+0+0+16 21+22 21+21 0+0+0+0+0+0+16".split(" "), "21+23 21+23 21+22 21+22 21+22 21+22 21+21 21+21".split(" "), "21+23 0+0+0+0+0+0+16 0 0 0 0 0+0+0+0+0+0+16 21+21".split(" "), "21+23 21+23 0 0 0 0 21+21 21+21".split(" "), "0+0+0+0+0+0+16 21+23 0 0 0 0 21+21 0+0+0+0+0+0+16".split(" "), "21+23 21+23 1 0 1 1 21+21 21+21".split(" ")
        ],
        ["X X X 10 10 9 9 9".split(" "), "Q Q Q 10 10 0 0 0".split(" "), "Q Q Q 10 10 2 0 0".split(" "), "Q Q Q 10 10 0 2 0".split(" "),
            "Q Q Q 10 10 2 0 0".split(" "), "Q Q Q 10 10 0 0 0".split(" "), "Q Q Q 10 10 0 0 0".split(" "), "Q Q Q 10 10 X X X".split(" ")
        ],
        ["11+0+0+14 4+0+0+14 4+0+0+14 0+0+0+14 4+0+0+14 0+0+0+14 0+0+0+14 11+0+0+14".split(" "), "11+0+0+14 11+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14 11+0+0+14 11+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 0+0+0+14 0+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 0+0+0+14 0+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 0 0 11+0+0+14 11+0+0+14 11+0+0+14".split(" "),
            "11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14".split(" "), "11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14 11+0+0+14".split(" ")
        ],
        ["X0XXXX0X".split(""), "000XX000".split(""), "5 10 0 10 10 0 10 0".split(" "), "0 0 0+0+0+12 10 10 0+0+0+12 0 0".split(" "), "5 0+0+0+12 10 10 10 10 0+0+0+12 0".split(" "), "5 10 10 27+0+0+12 27+0+0+12 10 10 0".split(" "), "0 10 0 0 0 0 10 0".split(" "),
            "X000000X".split("")
        ],
        ["X X X 0+0+0+0+0+1|6|2|4 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|6|0|4 9+0+0+0+0+1|6|1|4".split(" "), "X X 0+0+0+0+0+2|6|2|4 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|6|0|4 9+0+0+0+0+2|6|1|4 0".split(" "), "X 0+0+0+0+0+3|6|2|4 0+0+0+0+0+3|6|0|4 0+0+0+0+0+3|6|0|4 0+0+0+0+0+3|6|0|4 9+0+0+0+0+3|6|1|4 0 0".split(" "), "5+0+0+0+0+4|6|2|4 5+0+0+0+0+4|6|0|4 0+0+0+0+0+4|6|0|4 5+0+0+0+0+4|6|0|4 9+0+0+0+0+4|6|1|4 0 0 0".split(" "), "10 10 10 X 0 0 0 0".split(" "), "QQQX000X".split(""),
            "Q 10 10 X 0 0 X X".split(" "), "10 10 10 10 X X X X".split(" ")
        ],
        ["00000000".split(""), "0 0 26 0 0 0 26 0".split(" "), "00005000".split(""), "XX0505XX".split(""), "1 X 10 0 0 10 X 1".split(" "), "2 X 10 0 0 10 X 2".split(" "), "3 X 10 0 0 10 X 3".split(" "), "10 X 10 0 0 10 X 10".split(" ")],
        ["00000000".split(""), "0 2 21+23 21+23 21+23 21+23 0 0".split(" "), "2 0 21+23 21+24 21+24 21+23 0 0".split(" "), "0 2 21+23 21+24 21+24 21+23 0 0".split(" "), "0 0 21+23 21+23 21+23 21+23 0 0".split(" "), "21+21 21+21 21+21 X X 21+22 21+22 21+22".split(" "),
            "0 0 21+21 X X 21+22 0 0".split(" "), "0+0+0+12 0+0+0+12 21+21 X X 21+22 0+0+0+12 0+0+0+12".split(" ")
        ],
        ["XX0001XX".split(""), "X000101X".split(""), "0000X000".split(""), "00000000".split(""), "10 10 10 10 0+0+0+12 0+0+0+12 0+0+0+12 0+0+0+12".split(" "), "21+21 21+21 21+21 X 21+22 21+22 21+22 21+22".split(" "), "X 21+23 21+23 21+23 21+23 21+23 21+23 X".split(" "), "X X 21+24 21+24 21+24 21+24 X X".split(" ")],
        ["0 10 0+0+0+12+0+1|8|1|2 0+0+0+12+0+2|8|1|2 0+0+0+0+0+2|2|2|8 0+0+0+0+0+1|2|2|8 10 0".split(" "),
            "10 10 0+0+0+0+0+1|8|0|2 0+0+0+0+0+2|8|0|2 0+0+0+0+0+2|2|0|8 0+0+0+0+0+1|2|0|8 10 10".split(" "), "2+0+0+0+0+1|6|0|17 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|8|0|3 0+0+0+0+0+2|8|0|2 0+0+0+0+0+2|2|0|8 0+0+0+0+0+1|6|0|1 0+0+0+0+0+1|6|0|4 0+0+0+0+0+1|2|0|19".split(" "), "2+0+0+0+0+1|8|0|2 0+0+0+0+0+2|6|0|17 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|8|0|3 0+0+0+0+0+2|6|0|1 0+0+0+0+0+2|6|0|4 0+0+0+0+0+2|2|0|19 0+0+0+0+0+1|2|0|8".split(" "), "0+0+0+0+0+1|8|0|2 0+0+0+0+0+2|8|0|11 0+0+0+0+0+2|4|0|6 0+0+0+0+0+2|4|0|9 0+0+0+0+0+2|2|0|7 0+0+0+0+0+2|4|0|6 0+0+0+0+0+2|4|0|13 0+0+0+0+0+1|2|0|8".split(" "),
            "2+0+0+0+0+1|8|0|11 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|9 0+0+0+0+0+2|8|0|2 0+0+0+0+0+2|2|0|8 0+0+0+0+0+1|2|0|7 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|13".split(" "), "10 10 0+0+0+0+0+1|8|0|2 0+0+0+0+0+2|8|0|11 0+0+0+0+0+2|4|0|13 0+0+0+0+0+1|2|0|8 10 10".split(" "), "0 10 0+0+0+0+0+1|8|0|11 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|6 0+0+0+0+0+1|4|0|13 10 0".split(" ")
        ],
        ["600X0000".split(""), "0+0+0+14 0+0+0+14 0 X 0 0 0+0+0+14 0+0+0+14".split(" "), "6+0+0+14 0 0 X 0 0 0 0+0+0+14".split(" "), "6+0+0+14 0+0+0+14 0 X 0 0 0+0+0+14 0".split(" "),
            "0 0+0+0+14 0+0+0+14 X 0+0+0+14 0+0+0+14 0+0+0+14 0+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 X 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 X 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" "), "10+0+0+14 10+0+0+14 10+0+0+14 X 10+0+0+14 10+0+0+14 10+0+0+14 10+0+0+14".split(" ")
        ],
        ["XX90090X".split(""), "X00000XX".split(""), "44040XXX".split(""), "X00000XX".split(""), "XX00000X".split(""), "X X X 0+0+5 0+0+5 0+0+5 0 0".split(" "), "X X 0+0+5 0+0+5 0+0+5 0+0+5 0 X".split(" "),
            "X 0+0+5 0+0+5 0+0+5 0+0+5 0+0+5 X X".split(" ")
        ],
        ["X000000X".split(""), "X 31 1 5 0 0 0 X".split(" "), "10 5 4 31 5 0 0 10".split(" "), "0 10 0 3 0 0 10 0".split(" "), "X 0 10 10 10 10 0 X".split(" "), "10 10 0+0+5 10 10 0+0+5 10 10".split(" "), "10 0+0+5 10 10 10 10 0+0+5 10".split(" "), "0+0+5 10 10 10 10 10 10 0+0+5".split(" ")]
    ], i = levelData.length; 200 >= i; i++) levelData.push(["0 0 0 0+0+0+13 0+0+0+13 0 0 0".split(" "), "0 0 0 0+0+0+13 0+0+0+13 0 0 0".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13".split(" "),
    "0+0+0+13 0+0+0+13 0+0+0+13 0 0 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "0+0+0+13 0+0+0+13 0+0+0+13 0 0 0+0+0+13 0+0+0+13 0+0+0+13".split(" "), "X 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 X".split(" "), "X X 0+0+0+13 0+0+0+13 0+0+0+13 0+0+0+13 X X".split(" "), "X X X 0+0+0+13 0+0+0+13 X X X".split(" ")
]);
var achievementData, achievementCommon = 1,
    achievementStart = 2,
    achievementStandardBestScore = 3,
    achievementCommonBestScore = 4,
    achievementTreeHeight = 5,
    initAchievementData = function() {
        null == achievementData && (achievementData = {});
        var a = engine.gameData.dataDic.achievementdata,
            b;
        for (b in a) {
            var c = a[b];
            null == achievementData[c.type] && (achievementData[c.type] = {});
            achievementData[c.type][c.level] = c
        }
    },
    getAchievementData = function(a, b) {
        return achievementData[a][b]
    },
    isExistgetAchievement = function() {
        var a = {};
        a.achievementCommonCount =
            heroData.getAchievementCommonCount();
        a.levelStartCount = heroData.getLevelStartCount();
        a.standardBestScore = heroData.getGameTimeBestScore();
        a.commonBestScore = heroData.getCommonBestScore();
        a.treeHeight = heroData.getTreeHight();
        for (var b = heroData.getShowAchievementOrder(), c = 0; c < b.length; c++) {
            var d = heroData.getAchievementByType(parseInt(b[c]));
            if (null != d && !0 == heroData.getIsOKAchievementByInfo(d.type, d.level, a)) return !0
        }
        return !1
    },
    getAchievementPro = function(a) {
        var b = 0;
        switch (a) {
            case achievementCommon:
                b = heroData.gameUserData.achievementCommon;
                break;
            case achievementStart:
                b = heroData.gameUserData.achievementStart;
                break;
            case achievementStandardBestScore:
                b = heroData.gameUserData.achievementStandardBestScore;
                break;
            case achievementCommonBestScore:
                b = heroData.gameUserData.achievementCommonBestScore;
                break;
            case achievementTreeHeight:
                b = heroData.gameUserData.achievementTreeHeight
        }
        return b
    };
var GameTargetData = cc.Class.extend({
    robotArr: [],
    targetArr: [],
    initialize: function() {
        this.targetArr = [];
        var a = 0;
        cc.log("好友可显示数量", a);
        var b = heroData.gameUserData.robot;
        if (7 > a) {
            for (var c = 0, d = heroData.gameUserData.maxLevelStart, e = 0; e < d.length && 0 != d[e]; e++);
            for (d = e + 2; d < maxLevel && 7 > a;)
                if (d += ~~(2 + 2 * Math.random()), void 0 == this.targetArr[d]) {
                    e = b[c];
                    if (void 0 == e) {
                        cc.log("发现机器人数量缺失");
                        break
                    }
                    this.targetArr[d] = {
                        nickname: e.nickname,
                        image: e.image,
                        maxLevelNum: d,
                        allStarNum: ~~(d * (1 + 2 * Math.random()))
                    };
                    a++;
                    c++
                }
        }
    },
    checkPassLevelNeedShowUp: function() {
        return this.targetArr[selectLevel - 1]
    },
    getRandomForTimeUpRank: function(a) {
        var b = heroData.gameUserData.robot[~~(Math.random() * heroData.gameUserData.robot.length)];
        return {
            baseScore: a,
            enemyScore: ~~(a * (0.9 + 0.1 * Math.random())),
            nickname: b.nickname,
            image: b.image
        }
    },
    getFirst: function() {
        for (var a = 0; a < this.targetArr.length; a++)
            if (void 0 != this.targetArr[a]) return this.targetArr[a];
        cc.error("没有找到一个可超越的数据")
    }
});
var GameWorldRankData = cc.Class.extend({
    friendList: null,
    selfData: null,
    ctor: function() {
        this.friendList = []
    },
    initialize: function(a) {
        this.friendList = [];
        this.updateHeroInfo();
        if (debugtest.rankSelfOutOf20) {
            var b = [],
                c = [];
            for (a = 0; 120 > a; a++) b.push(1), c.push(3);
            for (a = 0; 20 > a; a++) this.friendList.push({
                nickname: "dou" + a,
                image: "https://fb-s-d-a.akamaihd.net/h-ak-fbx/v/t1.0-1/p320x320/24131500_889798657851941_1372837406836141609_n.jpg?oh=ed5b223b3690d182d3fa533108c5ac93&oe=5AB4557C&__gda__=1523177196_1b37aa2716ae1692cef393d4f1b796b8",
                playerid: "900" + a,
                maxLevel: b,
                allStarNum: 360,
                daymaxscore: 99999
            })
        } else {
            this.friendList = a.List;
            for (a = 0; a < this.friendList.length; a++)
                if (b = this.friendList[a], null == b) this.friendList.splice(a, 1), a--;
                else
                    for (c = this.friendList[a].allStarNum = 0; c < b.maxLevel.length; c++) this.friendList[a].allStarNum += b.maxLevel[c];
            currentScene && currentScene.refresh && currentScene.refresh()
        }
    },
    updateHeroInfo: function() {
        for (var a = heroData.gameUserData.maxLevelStart.concat(), b = 0, c = heroData.gameUserData.maxLevelStart.length - 1; 0 <= c; c--)
            if (0 !=
                heroData.gameUserData.maxLevelStart[c]) {
                b = c;
                break
            } a.splice(b + 1, heroData.gameUserData.maxLevelStart.length - b);
        for (b = c = 0; b < heroData.gameUserData.maxLevelStart.length; b++) c += heroData.gameUserData.maxLevelStart[b];
        this.selfData = {
            nickname: heroData.pname,
            image: heroData.image,
            playerid: heroData.playerid,
            maxLevel: a,
            allStarNum: c,
            daymaxscore: heroData.gameUserData.daymaxscore
        };
        a = !1;
        for (c = 0; c < this.friendList.length; c++)
            if (this.friendList[c].playerid == heroData.playerid) {
                a = !0;
                this.friendList[c] = this.selfData;
                break
            } a ||
            this.friendList.push(this.selfData)
    },
    sortAdventureModel: function() {
        var a = this.friendList.concat();
        a.sort(function(a, c) {
            return c.maxLevel.length - a.maxLevel.length
        });
        20 < a.length && (a.length = 20);
        return a = this.checkNeedRobot(a)
    },
    sortStarNum: function() {
        var a = this.friendList.concat();
        a.sort(function(a, c) {
            return c.allStarNum - a.allStarNum
        });
        20 < a.length && (a.length = 20);
        return a = this.checkNeedRobot(a)
    },
    sortDayMaxScore: function() {
        var a = this.friendList.concat();
        a.sort(function(a, c) {
            return c.daymaxscore - a.daymaxscore
        });
        20 < a.length && (a.length = 20);
        return a = this.checkNeedRobot(a)
    },
    checkNeedRobot: function(a) {
        for (var b = !1, c = 0; c < a.length; c++)
            if (a[c].playerid == heroData.playerid) {
                b = !0;
                break
            } if (!b) {
            b = ~~(25 * (121 - this.selfData.maxLevel.length) + 15 * Math.random());
            this.selfData.rank = b;
            for (var d = heroData.gameUserData.robot.slice(), c = d.length, e, f; c;) f = Math.floor(Math.random() * c--), e = d[c], d[c] = d[f], d[f] = e;
            for (c = 0; 8 > c; c++) 3 == c ? a.push(this.selfData) : (e = c, 3 < c && (e = c - 1), a.push({
                rank: b + c - 3,
                nickname: d[e].nickname,
                image: d[e].image,
                playerid: "1900" +
                    e,
                maxLevel: this.selfData.maxLevel,
                allStarNum: this.selfData.allStarNum - ~~(c / 4),
                daymaxscore: Math.max(0, this.selfData.daymaxscore - 7 * (c - 3))
            }))
        }
        return a
    }
});
var MissionData = cc.Class.extend({
    dataStr: "1,Invite friend,1,1,1,2,3,10,Invite,2,Request from friends,1,1,1,3,4,8,Request,3,Send friend,1,1,1,3,2,8,Send,4,Collecting diamonds,45,2,10,4,6,9,Collect,5,Challenge classic mode,1,2,10,5,1,7,Play,6,Consume live,3,2,10,1,1,8,Play,7,Remove wolf,65,2,10,1,1,2,Collect,8,Remove fox,65,2,10,1,1,1,Collect,9,Remove rabbit,65,2,10,1,1,4,Collect,10,Remove boar,65,2,10,1,1,6,Collect,11,Remove bear,65,2,10,1,1,5,Collect,12,Remove lion,65,2,10,1,1,3,Collect,13,Ask friends for help,1,2,30,6,5,11,Share",
    missionDic: {},
    todayMissionArr: [],
    detailOpenHandle: null,
    missionCountDic: {},
    finishMissionArr: [],
    ctor: function() {
        function a(a, b) {
            var c = a.replace(/\ +/g, ""),
                c = c.replace(/[ ]/g, ""),
                c = c.replace(/[\r\n]/g, "");
            return b ? parseFloat(c) : parseInt(c)
        }
        for (var b = this.dataStr.split(","), c = ~~(b.length / 9), d = 0; d < c; d++) this.missionDic[a(b[9 * d])] = {
            id: a(b[9 * d]),
            missonname: b[9 * d + 1],
            neednum: a(b[9 * d + 2]),
            rewardtype: a(b[9 * d + 3]),
            rewardnum: a(b[9 * d + 4]),
            openid: a(b[9 * d + 5]),
            openicon: a(b[9 * d + 6]),
            missionicon: a(b[9 * d + 7]),
            iconString: b[9 *
                d + 8]
        }
    },
    readyMissionData: function() {
        var a = new Date,
            b = a.getDate();
        a.setTime(1E3 * heroData.gameUserData.createtime);
        a = a.getDate();
        //b != a || debugtest.skepTomorrow ? 0 == this.todayMissionArr.length && (b = [1, 2, 3, 13], b = myGameTool.shuffleArray(b), b.shift(), 0.5 < Math.random() && b.shift(), 0.5 < Math.random() && b.shift(), debugtest.mustAppearShareInvite && (b = [1, 13]), a = [7, 8, 9, 10, 11, 12], a = myGameTool.shuffleArray(a), a.length = 2, b = b.concat(a), a = [4, 5, 6], a = myGameTool.shuffleArray(a), a.length = 5 - b.length, b = b.concat(a), this.todayMissionArr =
        //    b = myGameTool.shuffleArray(b)) : 0 == this.todayMissionArr.length && (this.todayMissionArr = [3, 4, 6, 7, 8]);
        
        if(b == a){
           0 == this.todayMissionArr.length && (
                a = [5, 6, 7, 8, 9, 10, 11, 12],
                a = myGameTool.shuffleArray(a),
                a.length = 5, 
                this.todayMissionArr = a = myGameTool.shuffleArray(a)
            )
        }


        cc.warn("任务列表：", this.todayMissionArr)
    },
    getDataById: function(a) {
        return this.missionDic[a]
    },
    recordData: function(a, b) {
        10 > heroData.getMaxOpenLevel() - 1 || (this.missionCountDic["ele" + a] = this.missionCountDic["ele" + a] || 0, this.missionCountDic["ele" + a] += b, EventMgr.emit(EVENTMGR_ID.MISSION_UPDATE_VALUE))
    },
    getFinishNumByMissionId: function(a) {
        if (debugtest.setMissionAllComplete) return 999;
        var b = {
            1: 9,
            2: 8,
            3: 7,
            4: 10,
            5: 11,
            6: 12,
            7: 3,
            8: 1,
            9: 4,
            10: 6,
            11: 2,
            12: 5,
            13: 13
        };
        if (b[a]) return this.missionCountDic["ele" + b[a]] = this.missionCountDic["ele" + b[a]] || 0, this.missionCountDic["ele" + b[a]];
        cc.error("未有数据");
        return 0
    }
});
var GridItemAction = cc.Class.extend({
        itemID: null,
        isComplete: null,
        gamePlayFacade: null,
        itemGridBaeckLayerTag: 999,
        itemGridTopBaeckLayerTag: 998,
        ctor: function() {
            this.isComplete = !1
        },
        run: function(a) {},
        doItem: function() {
            this.gamePlayFacade.gamePlayControl.refreshPromptTime();
            this.gamePlayFacade.gamePlayControl.refreshResetGridTime();
            this.addSelectIcon()
        },
        undo: function() {
            engine.gameSound.playEffect(soundres.undoitem);
            this.removeAllSelectIcon();
            this.gamePlayFacade.gamePlayControl.useItemControl.cleanItem()
        },
        addGridBaeckLayerBottom: function() {
            var a = new cc.DrawNode;
            a.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            a.tag = this.itemGridBaeckLayerTag;
            this.gamePlayFacade.gamePlayLayer.gameGridLayer.addChild(a, -1)
        },
        addGridBaeckLayerTop: function() {
            var a = new cc.DrawNode;
            a.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 200), 0, cc.color(0, 0, 0, 10));
            a.tag = this.itemGridTopBaeckLayerTag;
            this.gamePlayFacade.gamePlayLayer.gameGridLayer.addChild(a, 999999);
            return a
        },
        removeGridBaeckLayerTop: function() {
            null !=
                this.gamePlayFacade.gamePlayLayer.gameGridLayer.getChildByTag(this.itemGridTopBaeckLayerTag) && this.gamePlayFacade.gamePlayLayer.gameGridLayer.removeChildByTag(this.itemGridTopBaeckLayerTag)
        },
        removeGridBaeckLayerBottom: function() {
            null != this.gamePlayFacade.gamePlayLayer.gameGridLayer.getChildByTag(this.itemGridBaeckLayerTag) && this.gamePlayFacade.gamePlayLayer.gameGridLayer.removeChildByTag(this.itemGridBaeckLayerTag)
        },
        isEnd: function() {
            this.isComplete = !0;
            heroData.userItem(this.itemID);
            2 != selectType &&
                this.gamePlayFacade.gamePlayLayer.refreshItem();
            this.gamePlayFacade.gamePlayControl.useItemControl.cleanItem()
        },
        removeAllSelectIcon: function() {
            var a = this.gamePlayFacade.gamePlayLayer.gameMainUILayer;
            null != a.btnItem1.selectuseitem && (a.btnItem1.removeChild(a.btnItem1.selectuseitem), a.btnItem1.selectuseitem = null);
            null != a.btnItem3.selectuseitem && (a.btnItem3.removeChild(a.btnItem3.selectuseitem), a.btnItem3.selectuseitem = null);
            null != a.btnItem4.selectuseitem && (a.btnItem4.removeChild(a.btnItem4.selectuseitem),
                a.btnItem4.selectuseitem = null)
        },
        addSelectIcon: function() {
            2 != selectType && this.removeAllSelectIcon();
            var a = this.gamePlayFacade.gamePlayLayer.gameMainUILayer,
                b = new cc.Sprite;
            b.setSpriteFrame("item/selectuseitem.png");
            b.x = 50;
            b.y = 77;
            switch (this.itemID) {
                case 1006:
                    a.btnItem1.selectuseitem = b;
                    a.btnItem1.addChild(b);
                    break;
                case 1008:
                    a.btnItem3.selectuseitem = b;
                    a.btnItem3.addChild(b);
                    break;
                case 1009:
                    a.btnItem4.selectuseitem = b, a.btnItem4.addChild(b)
            }
        }
    }),
    GridElementItemAction = GridItemAction.extend({
        isPlayEffect: null,
        ctor: function() {
            this.isPlayEffect = !1;
            this._super()
        },
        doItem: function() {
            this.addGridBaeckLayerBottom();
            this._super()
        },
        run: function(a) {
            if (!0 != this.isPlayEffect) {
                var b = this,
                    c = this.gamePlayFacade.gridData.getGridByScenePoint(a.x, a.y);
                null != c && -1 == gridRuleArrayOb.noDestroyByItem.indexOf(c.gridType) ? (this.isPlayEffect = !0, a = createGameAnimation(res.gameplayeffect_json, "magicwand", 40), a.x = c.x, a.y = c.y, a.isRemoveFromComplete = !0, a.playCount = 1, a.frameFun = function(a) {
                    if (14 == a && !1 == b.isComplete) {
                        var e = b.gamePlayFacade.gridData;
                        b.gamePlayFacade.gameLevelData.beginRecordDeleteContinuousCount();
                        if (c.gridType == suctionType) {
                            if (a = [], !1 == c.isDespose) {
                                var f = e.getGridByGridPoint(c.gridX + 1, c.gridY);
                                b.isCanSuctionGrid(f) && a.push(f);
                                f = e.getGridByGridPoint(c.gridX - 1, c.gridY);
                                b.isCanSuctionGrid(f) && a.push(f);
                                f = e.getGridByGridPoint(c.gridX, c.gridY + 1);
                                b.isCanSuctionGrid(f) && a.push(f);
                                f = e.getGridByGridPoint(c.gridX, c.gridY - 1);
                                b.isCanSuctionGrid(f) && a.push(f);
                                if (0 == a.length)
                                    for (f = 0; f < e.gridMaxX; f++)
                                        for (var g = e.gridMaxY - 1; 0 <= g; g--) {
                                            var h =
                                                e.gridArr[f][g];
                                            null == h || h.gridX == c.gridX && h.gridY == c.gridY || b.isCanSuctionGrid(h) && a.push(h)
                                        }
                                0 <= a.length ? (e = parseInt(100 * Math.random()) % a.length, f = new SuctionGrid, f.gamePlayFacade = b.gamePlayFacade, f.initMoveDeleteGrid(c, a[e], !1)) : c.despose()
                            }
                        } else null == c.iceSprite && (b.gamePlayFacade.addScore(skillcontinuous), 0 == c.specialType && b.gamePlayFacade.addScoreEffect(c.gridX, c.gridY, skillcontinuous)), a = new SameGridInfo, a.ownGrid = c, a.deleteGridByOwner(b.gamePlayFacade), b.gamePlayFacade.gamePlayControl.createGrid();
                        b.isEnd()
                    }
                }, this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(a)) : this.undo()
            }
        },
        isCanSuctionGrid: function(a) {
            return null == a || !1 != a.isDespose || !checkIdIsAnimal(a.gridType) && 15 != a.gridType ? !1 : !0
        },
        undo: function() {
            this.removeGridBaeckLayerBottom();
            this._super()
        },
        isEnd: function() {
            this.removeAllSelectIcon();
            this.removeGridBaeckLayerBottom();
            this._super()
        }
    }),
    GridAddStepItemAction = GridItemAction.extend({
        doItem: function() {
            this.gamePlayFacade.gamePlayControl.isAddStepEffect = !0;
            this.createFlyStart(0)
        },
        createFlyStart: function(a) {
            if (!0 != this.gamePlayFacade.isDespose) {
                var b = this,
                    c = new cc.Sprite;
                c.x = 200;
                c.y = 100;
                c.setScale(1.4 - 0.2 * a);
                c.setOpacity(parseInt(306 - 51 * a));
                c.setSpriteFrame("gameplaylayer/start.png");
                1 == a && (c.isRefresh = !0);
                var d = cc.callFunc(function() {
                        c.removeFromParent();
                        if (!0 == c.isRefresh) {
                            var a = createGameAnimation(res.gameplayeffect_json, "refreshvictoryconditioneffect", 30);
                            a.playCount = 1;
                            a.x = 60;
                            a.y = 870;
                            b.gamePlayFacade.gamePlayControl.isAddStepEffect = !1;
                            a = b.gamePlayFacade;
                            a.addStep(3);
                            5 <
                                a.gameLevelData.step && EventMgr.emit(EVENTMGR_ID.MONSTER_RESET_WAIT);
                            b.isEnd()
                        }
                    }),
                    e = cc.moveTo(0.5, addStepActionEndPo);
                c.runAction(cc.sequence(e, d));
                this.gamePlayFacade.gamePlayLayer.gameMainUILayer.addChild(c);
                a += 1;
                4 >= a && engineSetTimeOut(function() {
                    b.createFlyStart(a)
                }, 0.05, null, 1)
            }
        }
    }),
    GridChangeItemAction = GridItemAction.extend({
        lastGrid: null,
        selecte1Tag: 901,
        isPlayEffect: null,
        ctor: function() {
            this.isPlayEffect = !1;
            this._super()
        },
        doItem: function() {
            this.addGridBaeckLayerBottom();
            this._super()
        },
        run: function(a) {
            if (!0 !=
                this.isPlayEffect) {
                var b = this,
                    c = this.gamePlayFacade.gridData.getGridByScenePoint(a.x, a.y);
                if (null != c && null == c.iceSprite && -1 == gridRuleArrayOb.noChange.indexOf(c.gridType))
                    if (null == this.lastGrid) this.lastGrid = c, a = createGameAnimation(res.gameplayeffect_json, "selectedgrid", 40), a.x = c.x, a.y = c.y, a.tag = this.selecte1Tag, this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(a);
                    else {
                        if (!1 == this.gamePlayFacade.gridData.isSameGrid(this.lastGrid, c)) {
                            this.gamePlayFacade.gameLevelData.recordDeleteContinuousCount();
                            this.isPlayEffect = !0;
                            this.removeSelectedgridEffect();
                            var d = this.lastGrid;
                            a = cc.callFunc(function() {
                                c.stopAllActions();
                                d.stopAllActions();
                                c.removeFromParent();
                                d.removeFromParent()
                            });
                            c.runAction(cc.sequence(cc.fadeOut(0.2), a));
                            d.runAction(cc.fadeOut(0.2));
                            var e = this.gamePlayFacade.gridData.createSpecialGrid(d, c.specialType, this.gamePlayFacade, c.gridType, !1);
                            e.setOpacity(0);
                            var f = this.gamePlayFacade.gridData.createSpecialGrid(c, d.specialType, this.gamePlayFacade, d.gridType, !1);
                            f.setOpacity(0);
                            var g = skeletalAnimation["gridskin|changeitemeffect1"];
                            g.folderName = "pngdata/gridskin";
                            a = new GameAnimation;
                            a.initialize(g);
                            a.isRemoveFromComplete = !0;
                            a.playCount = 1;
                            a.setFrameIntervalTime(30);
                            a.x = d.x;
                            a.y = d.y;
                            this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(a);
                            a = new GameAnimation;
                            a.initialize(g);
                            a.isRemoveFromComplete = !0;
                            a.playCount = 1;
                            a.setFrameIntervalTime(30);
                            a.x = c.x;
                            a.y = c.y;
                            this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(a);
                            a.frameCompleteFun = function() {
                                skeletalAnimation["gridskin|changeitemeffect2"].folderName = "pngdata/gridskin";
                                e.runAction(cc.fadeIn(0.2));
                                f.runAction(cc.fadeIn(0.2));
                                var a = new GameAnimation;
                                a.initialize(g);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.setFrameIntervalTime(30);
                                a.x = e.x;
                                a.y = e.y;
                                b.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(a);
                                a = new GameAnimation;
                                a.initialize(g);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.setFrameIntervalTime(30);
                                a.x = f.x;
                                a.y = f.y;
                                b.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(a);
                                a.frameCompleteFun = function() {
                                    b.isEnd()
                                }
                            }
                        }
                    }
                else this.undo()
            }
        },
        removeSelectedgridEffect: function() {
            null !=
                this.gamePlayFacade.gamePlayLayer.gameEffectLayer.getChildByTag(this.selecte1Tag) && this.gamePlayFacade.gamePlayLayer.gameEffectLayer.removeChildByTag(this.selecte1Tag)
        },
        undo: function() {
            this.removeSelectedgridEffect();
            this.removeGridBaeckLayerBottom();
            this._super()
        },
        isEnd: function() {
            this.removeAllSelectIcon();
            this.removeGridBaeckLayerBottom();
            var a = new DeleteGrid;
            a.gamePlayFacade = this.gamePlayFacade;
            a.runDeleteGrid(this.gamePlayFacade.gridData);
            this._super()
        }
    }),
    SpecialGridItemAction = GridItemAction.extend({
        selectGrid: null,
        doItem: function() {
            this.addGridBaeckLayerBottom();
            this._super()
        },
        run: function(a) {
            if (null != this.selectGrid) this.undo();
            else {
                var b = this.gamePlayFacade.gridData.getGridByScenePoint(a.x, a.y);
                this.selectGrid = b;
                if (null != b && checkIdIsAnimal(b.gridType) && 0 == b.specialType) {
                    var c = this.addGridBaeckLayerTop(),
                        d = new cc.Sprite;
                    d.setSpriteFrame("gameplaylayer/specialline.png");
                    d.x = b.x;
                    d.y = b.y;
                    c.addChild(d);
                    var e = new cc.Sprite;
                    e.setSpriteFrame("gameplaylayer/specialline.png");
                    e.x = b.x;
                    e.y = b.y;
                    c.addChild(e);
                    a = skeletalAnimation["gridskin|grid" +
                        b.gridType.toString()];
                    a.folderName = "pngdata/gridskin";
                    var f = new GameAnimation;
                    f.initialize(a);
                    f.setFrameIntervalTime(20);
                    f.fromFrameIndexToPlayFrameIndex(0, 19);
                    f.x = b.x;
                    f.y = b.y;
                    c.addChild(f);
                    f = new GameAnimation;
                    f.initialize(a);
                    f.setFrameIntervalTime(13);
                    f.fromFrameIndexToPlayFrameIndex(47, 62);
                    f.x = b.x;
                    f.y = b.y;
                    f.self = this;
                    c.addChild(f);
                    engine.gameEvent.createMouseUp(f, this.changeLineGrid, buttonScalingType, cc.rect(-50, -50, 100, 100));
                    var g = new GameAnimation;
                    g.initialize(a);
                    g.setFrameIntervalTime(10);
                    g.fromFrameIndexToPlayFrameIndex(31,
                        46);
                    g.x = b.x;
                    g.y = b.y;
                    g.self = this;
                    c.addChild(g);
                    engine.gameEvent.createMouseUp(g, this.changeColumnGrid, buttonScalingType, cc.rect(-50, -50, 100, 100));
                    0 == b.gridX ? 0 == b.gridY ? (f.x += 120, f.y = f.y, g.x = g.x, g.y -= 120, d.x += 60, e.y -= 60, e.setRotation(90)) : b.gridY == tileMapGridMaxY - 1 ? (f.x += 120, f.y = f.y, g.x = g.x, g.y += 120, d.x += 60, e.y += 60, e.setRotation(90)) : (f.x += 76, f.y += 76, g.x += 76, g.y -= 76, d.x += 38, d.y += 38, d.setRotation(-45), e.x += 38, e.y -= 38, e.setRotation(45)) : b.gridX == tileMapGridMaxX - 1 ? 0 == b.gridY ? (f.x -= 120, f.y = f.y, g.x = g.x,
                        g.y -= 120, d.x -= 60, e.y -= 60, e.setRotation(90)) : b.gridY == tileMapGridMaxY - 1 ? (f.x -= 120, f.y = f.y, g.x = g.x, g.y += 120, d.x -= 60, e.y += 60, e.setRotation(90)) : (f.x -= 76, f.y += 76, g.x -= 76, g.y -= 76, d.x -= 38, d.y += 38, d.setRotation(45), e.x -= 38, e.y -= 38, e.setRotation(-45)) : 0 == b.gridY ? (f.x -= 76, f.y -= 76, g.x += 76, g.y -= 76, d.x += 38, d.y -= 38, e.x -= 38, e.y -= 38, d.setRotation(45), e.setRotation(-45)) : (f.x -= 76, f.y += 76, g.x += 76, g.y += 76, d.x += 38, d.y += 38, e.x -= 38, e.y += 38, d.setRotation(-45), e.setRotation(45))
                } else this.undo()
            }
        },
        changeLineGrid: function() {
            this.self.gamePlayFacade.gridData.createSpecialGrid(this.self.selectGrid,
                1, this.self.gamePlayFacade, this.self.selectGrid.gridType, !1);
            this.self.selectGrid.removeFromParent();
            this.self.isEnd()
        },
        changeColumnGrid: function() {
            this.self.gamePlayFacade.gridData.createSpecialGrid(this.self.selectGrid, 2, this.self.gamePlayFacade, this.self.selectGrid.gridType, !1);
            this.self.selectGrid.removeFromParent();
            this.self.isEnd()
        },
        undo: function() {
            this.removeGridBaeckLayerTop();
            this.removeGridBaeckLayerBottom();
            this._super()
        },
        isEnd: function() {
            this.removeAllSelectIcon();
            this.removeGridBaeckLayerTop();
            this.removeGridBaeckLayerBottom();
            this._super()
        }
    }),
    ResetGridItemAction = GridItemAction.extend({
        doItem: function() {
            var a = new ResetGrid;
            a.gamePlayFacade = this.gamePlayFacade;
            a.reset();
            this.isEnd()
        }
    }),
    GridElementItemByDoubleClickAction = GridItemAction.extend({
        isPlayEffect: null,
        ctor: function() {
            this.isPlayEffect = !1;
            this._super()
        },
        doItem: function() {
            this._super()
        },
        run: function(a) {
            if (!0 != this.isPlayEffect)
                if (a = this.gamePlayFacade.gridData.getGridByScenePoint(a.x, a.y), null != a && -1 != gridRuleArrayOb.doubleClickDestroy.indexOf(a.specialType)) {
                    if (this.isPlayEffect = !0, !1 == this.isComplete) {
                        var b = this.gamePlayFacade.gridData;
                        this.gamePlayFacade.gameLevelData.beginRecordDeleteContinuousCount();
                        if (a.gridType == suctionType) {
                            var c = [];
                            if (!1 == a.isDespose) {
                                var d = b.getGridByGridPoint(a.gridX + 1, a.gridY);
                                this.isCanSuctionGrid(d) && c.push(d);
                                d = b.getGridByGridPoint(a.gridX - 1, a.gridY);
                                this.isCanSuctionGrid(d) && c.push(d);
                                d = b.getGridByGridPoint(a.gridX, a.gridY + 1);
                                this.isCanSuctionGrid(d) && c.push(d);
                                d = b.getGridByGridPoint(a.gridX, a.gridY - 1);
                                this.isCanSuctionGrid(d) && c.push(d);
                                if (0 == c.length)
                                    for (d = 0; d < b.gridMaxX; d++)
                                        for (var e = b.gridMaxY - 1; 0 <= e; e--) {
                                            var f = b.gridArr[d][e];
                                            null == f || f.gridX == a.gridX && f.gridY == a.gridY || this.isCanSuctionGrid(f) && c.push(f)
                                        }
                                0 <= c.length ? (b = parseInt(100 * Math.random()) % c.length, d = new SuctionGrid, d.gamePlayFacade = this.gamePlayFacade, d.initMoveDeleteGrid(a, c[b], !1)) : a.despose()
                            }
                        } else null == a.iceSprite && (this.gamePlayFacade.addScore(skillcontinuous), 0 == a.specialType && this.gamePlayFacade.addScoreEffect(a.gridX, a.gridY, skillcontinuous)), c = new SameGridInfo,
                            c.ownGrid = a, c.deleteGridByOwner(this.gamePlayFacade), this.gamePlayFacade.gamePlayControl.createGrid();
                        this.isEnd();
                        this.gamePlayFacade.useStep()
                    }
                } else this.undo()
        },
        isCanSuctionGrid: function(a) {
            return null == a || !1 != a.isDespose || !checkIdIsAnimal(a.gridType) && 15 != a.gridType ? !1 : !0
        },
        undo: function() {
            this.removeGridBaeckLayerBottom();
            this._super()
        },
        isEnd: function() {
            2 != selectType && this.removeAllSelectIcon();
            this.removeGridBaeckLayerBottom();
            this._super()
        }
    });
var GridAction = cc.Class.extend({
        gridList: null,
        count: null,
        gamePlayFacade: null,
        ctor: function() {
            this.gridList = []
        },
        setCount: function() {
            this.count = this.gridList.length
        },
        complete: function() {},
        moveGridBySpeed: function(a, b, c, d) {
            a || cc.error("出现一个移动错误，屏蔽了");
            var e = this,
                f = new MoveAction;
            f.createMoveAction(a, b, c, function() {
                e.complete()
            }, d);
            this.gamePlayFacade.gamePlayControl.addMoveList(f)
        },
        moveGridByTime: function(a, b, c, d) {
            var e = this,
                f = new MoveAction;
            f.createMoveActionByTime(a, b, c, function() {
                e.complete()
            }, d);
            this.gamePlayFacade.gamePlayControl.addMoveList(f)
        }
    }),
    CreateGridDown = GridAction.extend({
        initCreateGridDown: function(a) {
            this.gamePlayFacade.gamePlayControl.isNowCreateGrid || this.gamePlayFacade.gamePlayControl.isSuctionGrid || (this.gamePlayFacade.gamePlayControl.isNowCreateGrid = !0, this.runCreateGridDown(a, 14))
        },
        runCreateGridDown: function(a, b) {
            null == b && (b = -1);
            this.gridList = [];
            for (var c = !1, d = this.gamePlayFacade.gameLevelData.waterLayerNum, e = a.portalAccepterList,
                    f = 0; f < e.length; f++) {
                var g = e[f],
                    h = new PortalAction;
                h.gamePlayFacade = this.gamePlayFacade;
                h.runPortal(a, g.portalAccepterID, g.gridX, g.gridY)
            }
            e = a.gridArr;
            for (f = a.gridMaxY - 1 - d; 0 <= f; f--)
                for (g = 0; g < a.gridMaxX; g++)
                    if (null == e[g][f]) {
                        var h = a.isPortalAccepter(g, f),
                            k = !1,
                            m = !1,
                            n = a.getGridByGridPoint(g, f - 1),
                            p = a.getGridByGridPoint(g - 1, f - 1),
                            r = a.getGridByGridPoint(g + 1, f - 1),
                            s = a.getGridByGridPoint(g, f + 1);
                        if (null != s && s.gridType == nullGrid || f + 1 >= a.gridMaxY) null != p && p.gridType == pigType && (m = !0), null != r && r.gridType == pigType &&
                            (m = !0);
                        if (null != n)
                            if (!0 == n.isCanDown() && null == h) {
                                n.isFree() && (n.isPlayElastic = !0, a.setGridInfo(n.gridX, n.gridY, null), a.setGridInfo(g, f, n), n.isDown = !0, this.gridList.push(n), this.moveGridByTime(n, a.getGridPointByScenePoint(g, f), gridNodeDownTime, b));
                                continue
                            } else k = !0;
                        else if (null == h)
                            if (0 == f) {
                                c = !0;
                                s = a.randomGrid(g, f);
                                this.gridList.push(s);
                                s.y += 80;
                                s.isDown = !0;
                                s.isPlayElastic = !0;
                                this.moveGridByTime(s, cc.p(s.x, s.y - 80), gridNodeDownTime, b);
                                continue
                            } else if (!1 == m) {
                            for (var m = k = !1, u = f - 1; 0 <= u; u--) s = a.getGridByGridPoint(g,
                                u), null != s && !1 == m && (m = !0, k = s.isCanDown() ? !0 : !1), 0 == u && !1 == m && (k = !0);
                            if (k) continue;
                            else k = !0
                        } else k = !0;
                        if (k)
                            if ((null != s && s.gridType == nullGrid || f + 1 >= a.gridMaxY) && null != r && r.gridType == pigType && (p = a.getGridByGridPoint(g + 1, f - 1), r = a.getGridByGridPoint(g - 1, f - 1)), null != p && null == h && !0 == p.isCanDown()) p.isFree() && (p.isPlayElastic = !0, a.setGridInfo(p.gridX, p.gridY, null), a.setGridInfo(g, f, p), p.isDown = !0, this.gridList.push(p), this.moveGridByTime(p, a.getGridPointByScenePoint(g, f), gridNodeDownTime, b));
                            else if (null !=
                            r && null == h && !0 == r.isCanDown()) r.isFree() && (r.isPlayElastic = !0, a.setGridInfo(r.gridX, r.gridY, null), a.setGridInfo(g, f, r), r.isDown = !0, this.gridList.push(r), this.moveGridByTime(r, a.getGridPointByScenePoint(g, f), gridNodeDownTime, b));
                        else {
                            if (null == r || null == p || null == n)
                                if (a.isInMapByGridPoint(g, f - 1) || a.isInMapByGridPoint(g + 1, f - 1) || a.isInMapByGridPoint(g - 1, f - 1)) continue;
                            null == h && (h = !1, (null == r || null != r && r.gridType == nullGrid) && (null == p || null != p && p.gridType == nullGrid) && (null == n || null != n && n.gridType == nullGrid) &&
                                (h = !0), h && (c = !0, s = a.randomGrid(g, f), this.gridList.push(s), s.y += 80, s.isDown = !0, s.isPlayElastic = !0, this.moveGridByTime(s, cc.p(s.x, s.y - 80), gridNodeDownTime, b)))
                        }
                    } else e[g][f].elastic();
            for (g = 0; g < a.gridMaxX; g++)
                for (f = a.gridMaxY; f > a.gridMaxY - 1 - d; f--)
                    if (null == e[g][f]) {
                        h = a.isPortalAccepter(g, f);
                        s = null;
                        k = !1;
                        n = a.getGridByGridPoint(g, f + 1);
                        if (null != n)
                            if (!0 == n.isCanDown() && null == h) {
                                n.isFree() && (a.setGridInfo(n.gridX, n.gridY, null), a.setGridInfo(g, f, n), n.isDown = !0, this.gridList.push(n), this.moveGridByTime(n, a.getGridPointByScenePoint(g,
                                    f), gridNodeDownTime, b));
                                continue
                            } else k = !0;
                        if (k)
                            if (n = a.getGridByGridPoint(g - 1, f + 1), null != n && null == h && !0 == n.isCanDown()) n.isFree() && (a.setGridInfo(n.gridX, n.gridY, null), a.setGridInfo(g, f, n), n.isDown = !0, this.gridList.push(n), this.moveGridByTime(n, a.getGridPointByScenePoint(g, f), gridNodeDownTime, b));
                            else {
                                if (null == s && (n = a.getGridByGridPoint(g + 1, f + 1), null != n && null == h && !0 == n.isCanDown())) {
                                    n.isFree() && (a.setGridInfo(n.gridX, n.gridY, null), a.setGridInfo(g, f, n), n.isDown = !0, this.gridList.push(n), this.moveGridByTime(n,
                                        a.getGridPointByScenePoint(g, f), gridNodeDownTime, b));
                                    continue
                                }
                                null == s && (c = !0, null == h && a.randomGrid(g, f))
                            }
                        else f == a.gridMaxY - 1 && (n = a.randomGrid(g, f), this.gridList.push(n), n.y -= 80, n.isDown = !0, this.moveGridByTime(n, cc.p(n.x, n.y + 80), gridNodeDownTime, b))
                    } this.setCount();
            0 == this.count && (c ? this.runCreateGridDown(a) : (this.gamePlayFacade.gamePlayControl.isNowCreateGrid = !1, c = new DeleteGrid, c.gamePlayFacade = this.gamePlayFacade, c.runDeleteGrid(a)))
        },
        complete: function() {
            this.count--;
            if (0 == this.count) {
                for (var a =
                        this.gamePlayFacade.gridData, b = 0; b < a.gridMaxX; b++)
                    for (var c = 0; c < a.gridMaxY; c++) {
                        var d = a.getGridByGridPoint(b, c);
                        if (null != d && (d.gridType == pigType || d.gridType == timingbone)) {
                            var e = -1 != Global.dogPenStr.indexOf("g" + d.gridX + "|" + d.gridY);
                            "" == Global.dogPenStr && d.gridY == tileMapGridMaxY - 1 && d.despose();
                            "" != Global.dogPenStr && e && d.despose()
                        }
                    }
                for (b = 0; b < this.gridList.length; b++) this.gridList[b].isDown = !1;
                this.runCreateGridDown(this.gamePlayFacade.gridData)
            }
        }
    }),
    checkNeedChangeArr = [],
    DeleteGrid = GridAction.extend({
        isRunTransfer: null,
        runDeleteGrid: function(a) {
            for (var b = 0; b < a.gridMaxX; b++)
                for (var c = a.gridMaxY - 1; 0 <= c; c--) {
                    var d = a.gridArr[b][c];
                    null != d && !1 != d.isCanDelete() && (d.isLaserDelete = !1, d = a.getGridListByTypeByOwn(d.gridX, d.gridY, d.gridType), d.checkGridCanDelete(), d.getSameGridsLengthByOwn() >= minDeleteCount && this.gridList.push(d))
                }
            this.gridList.sort(function(a, b) {
                return b.getSameGridsLengthByOwn() - a.getSameGridsLengthByOwn()
            });
            if (0 < this.gridList.length) {
                for (a = 0; a < this.gridList.length; a++) b = this.gridList[a], null != b.ownGrid &&
                    !1 == b.ownGrid.isDespose && b.deleteGrid(this.gamePlayFacade);
                this.gamePlayFacade.gamePlayControl.createGrid()
            } else {
                var e = !1,
                    f = !1;
                checkNeedChangeArr = [];
                for (b = 0; b < a.gridMaxX; b++)
                    for (c = a.gridMaxY - 1; 0 <= c; c--)
                        if (d = a.gridArr[b][c], null != d) {
                            if ((d.gridType == colorEgg || d.gridType == superColorEgg) && 3 <= d.eggPower) {
                                f = !0;
                                d.eggPower = -1;
                                d.playEggMC(d.gridType == superColorEgg, 1);
                                this.gamePlayFacade.gamePlayControl.isAddEgg = !0;
                                var g = d.gridType == colorEgg ? new EggNewRandomGrid : new EggNewSuperRandomGrid;
                                g.gamePlayFacade = this.gamePlayFacade;
                                g.runDeleteGrid(d)
                            }
                            d.gridType == laserGrid && 3 <= d.powerNum && (e = !0, d.powerNum = 0, d.playLaser(), g = new LaserDeleteGrid, g.gamePlayFacade = this.gamePlayFacade, g.runDeleteGrid(d))
                        } if (f || e) {
                    var h = this;
                    engineSetTimeOut(function() {
                        h.gamePlayFacade.gamePlayControl.createGrid()
                    }, e ? 0.2 : 1.6, null, 1)
                }
                if (!f && !e) switch (selectType) {
                    case 1:
                        switch (this.gamePlayFacade.checkWinFun()) {
                            case 0:
                                b = this.gamePlayFacade.gameLevelData.deleteContinuousCount;
                                3 <= b && 4 >= b && (this.gamePlayFacade.gamePlayLayer.addEffectByScenePoint(320, 600,
                                    res.gameplayeffect_json, "good", 30, 2), engine.gameSound.playEffect(soundres.good));
                                5 <= b && 6 >= b && (this.gamePlayFacade.gamePlayLayer.addEffectByScenePoint(320, 600, res.gameplayeffect_json, "cool", 30, 2), engine.gameSound.playEffect(soundres.cool));
                                7 <= b && (this.gamePlayFacade.gamePlayLayer.addEffectByScenePoint(320, 600, res.gameplayeffect_json, "great", 30, 2), engine.gameSound.playEffect(soundres.great));
                                this.gamePlayFacade.gameLevelData.endRecordDeleteContinuousCount();
                                for (b = 0; b < a.gridMaxX; b++)
                                    for (c = a.gridMaxY -
                                        1; 0 <= c; c--) d = a.gridArr[b][c], null == d || d.gridType != colorEgg && d.gridType != superColorEgg || -1 != d.eggPower || (d.eggPower = 0, d.playEggMC(d.gridType == superColorEgg, 3));
                                this.gamePlayFacade.gamePlayControl.isAddEgg = !1;
                                !0 == this.gamePlayFacade.gamePlayControl.isUseStep && (currentScene.addNewbieGuideLayer(), this.gamePlayFacade.runTransfer(), this.gamePlayFacade.gamePlayControl.isUseStep = !1, a = new CloudMoveAction, a.gamePlayFacade = this.gamePlayFacade, a.run());
                                break;
                            case 1:
                                this.gamePlayFacade.gamePlayControl.endPrompt();
                                !1 == this.gamePlayFacade.gamePlayControl.isGameEnd ? (this.showCompleteEffect(), EventMgr.emit(EVENTMGR_ID.MONSTER_WIN)) : (this.gamePlayFacade.gamePlayControl.isGameEnd = !0, b = new SpecialGridEndDelete, b.gamePlayFacade = this.gamePlayFacade, b.runDeleteGrid(a));
                                break;
                            case 2:
                                this.gamePlayFacade.gamePlayControl.endPrompt(), this.gamePlayFacade.gamePlayControl.isGameEnd = !0, this.gamePlayFacade.gamePlayControl.isAddEgg = !1, this.gamePlayFacade.addLoseUI()
                        }
                        break;
                    case 2:
                        !0 == this.gamePlayFacade.gamePlayControl.isGameEnd ?
                            (this.gamePlayFacade.gamePlayControl.endPrompt(), !0 == this.gamePlayFacade.gamePlayControl.isPlayEndEffect ? (this.gamePlayFacade.gamePlayControl.isGameEnd = !0, b = new SpecialGridEndDelete, b.gamePlayFacade = this.gamePlayFacade, b.runDeleteGrid(this.gamePlayFacade.gridData)) : this.showCompleteEffect()) : !0 == this.gamePlayFacade.gamePlayControl.isUseStep && (this.gamePlayFacade.gamePlayControl.isUseStep = !1)
                }
            }
        },
        showCompleteEffect: function() {
            if (!this.gamePlayFacade.gamePlayControl.isPlayEndEffect) {
                this.gamePlayFacade.gamePlayControl.isPlayEndEffect = !0;
                var a = this,
                    b = new cc.DrawNode;
                b.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
                a.gamePlayFacade.gamePlayLayer.addChild(b);
                var c = createGameAnimation(res.gameplayeffect_json, "wineffect1", 20);
                c.isRemoveFromComplete = !0;
                c.playCount = 1;
                c.x = 320;
                c.y = 568;
                a.gamePlayFacade.gamePlayLayer.addChild(c);
                c.frameFun = function(c) {
                    0 == c && (c = createGameAnimation(res.gameplayeffect_json, "wineffect2", 20), c.isRemoveFromComplete = !0, c.playCount = 1, c.x = 320, c.y = 568, a.gamePlayFacade.gamePlayLayer.addChild(c),
                        c.frameFun = function(c) {
                            0 == c && (c = createGameAnimation(res.gameplayeffect_json, "wineffect3", 20), c.isRemoveFromComplete = !0, c.playCount = 1, c.x = 320, c.y = 568, a.gamePlayFacade.gamePlayLayer.addChild(c), c.frameCompleteFun = function() {
                                b.removeFromParent();
                                a.gamePlayFacade.gamePlayControl.isGameEnd = !0;
                                var c = new SpecialGridEndDelete;
                                c.gamePlayFacade = a.gamePlayFacade;
                                c.runDeleteGrid(a.gamePlayFacade.gridData)
                            })
                        })
                }
            }
        }
    }),
    CheckGameEndAction = GridAction.extend({
        isRunTransfer: null,
        runDeleteGrid: function() {
            if (1 == this.gamePlayFacade.checkWinFun())
                if (this.gamePlayFacade.gamePlayControl.endPrompt(),
                    !1 == this.gamePlayFacade.gamePlayControl.isGameEnd) this.showCompleteEffect(), EventMgr.emit(EVENTMGR_ID.MONSTER_WIN);
                else {
                    this.gamePlayFacade.gamePlayControl.isGameEnd = !0;
                    var a = new SpecialGridEndDelete;
                    a.gamePlayFacade = this.gamePlayFacade;
                    a.runDeleteGrid(this.gamePlayFacade.gridData)
                }
        },
        showCompleteEffect: function() {
            if (!this.gamePlayFacade.gamePlayControl.isPlayEndEffect) {
                this.gamePlayFacade.gamePlayControl.isPlayEndEffect = !0;
                var a = this,
                    b = new cc.DrawNode;
                b.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh),
                    cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
                a.gamePlayFacade.gamePlayLayer.addChild(b);
                var c = createGameAnimation(res.gameplayeffect_json, "wineffect1", 20);
                c.isRemoveFromComplete = !0;
                c.playCount = 1;
                c.x = 320;
                c.y = 568;
                a.gamePlayFacade.gamePlayLayer.addChild(c);
                c.frameFun = function(c) {
                    0 == c && (c = createGameAnimation(res.gameplayeffect_json, "wineffect2", 20), c.isRemoveFromComplete = !0, c.playCount = 1, c.x = 320, c.y = 568, a.gamePlayFacade.gamePlayLayer.addChild(c), c.frameFun = function(c) {
                        0 == c && (c = createGameAnimation(res.gameplayeffect_json,
                            "wineffect3", 20), c.isRemoveFromComplete = !0, c.playCount = 1, c.x = 320, c.y = 568, a.gamePlayFacade.gamePlayLayer.addChild(c), c.frameCompleteFun = function() {
                            b.removeFromParent();
                            a.gamePlayFacade.gamePlayControl.isGameEnd = !0;
                            var c = new SpecialGridEndDelete;
                            c.gamePlayFacade = a.gamePlayFacade;
                            c.runDeleteGrid(a.gamePlayFacade.gridData)
                        })
                    })
                }
            }
        }
    }),
    PetCreateSkill = GridAction.extend({
        gridX: null,
        gridY: null,
        runpetCreateSkill: function() {
            var a = this,
                b = this.gamePlayFacade.gamePlayControl.petSkillControl.randGridPoint();
            this.gridX =
                b.x;
            this.gridY = b.y;
            b = this.gamePlayFacade.gridData.getGridByGridPoint(this.gridX, this.gridY);
            if (null != b && !0 == b.isFree() && !1 == b.isDespose && checkIdIsAnimal(b.gridType) && 0 == b.specialType && null == b.iceSprite) switch (this.gamePlayFacade.gamePlayControl.isPlayPetSkill = !0, b = function() {
                !0 != a.gamePlayFacade.isDespose && a.flyFallEffect()
            }, selectType) {
                case 1:
                    this.gamePlayFacade.gamePlayControl.petSkillControl.playPetSkillAction(b);
                    break;
                case 2:
                    this.gamePlayFacade.gamePlayControl.petSkillControl.playPetSkillAction(b),
                        this.modifyDataByPetSkill()
            }
        },
        modifyDataByPetSkill: function() {
            if (!0 != this.gamePlayFacade.isDespose) switch (this.gamePlayFacade.gamePlayControl.petSkillControl.modifyDataByPetSkill(this.gridX, this.gridY), this.gamePlayFacade.gamePlayControl.isPlayPetSkill = !1, selectType) {
                case 1:
                    !0 == this.gamePlayFacade.gameLevelData.isTransfer ? this.gamePlayFacade.runTransfer() : this.gamePlayFacade.gamePlayControl.createGrid()
            }
        },
        flyFallEffect: function() {
            var a = this.gamePlayFacade.gridData.getGridPointByScenePoint(this.gridX,
                    this.gridY),
                b = new cc.Sprite;
            b.x = 320;
            b.y = 900;
            b.setAnchorPoint(cc.p(0.75, 0.5));
            b.setScale(3);
            b.setSpriteFrame("gameplaylayer/falleffect.png");
            b.setRotation(180 - engine.gameTool.getAngle(a, cc.p(b.x, b.y)));
            b.runAction(cc.scaleTo(0.3, 6));
            var c = this,
                d = 40;
            switch (selectType) {
                case 1:
                    d = 40;
                    break;
                case 2:
                    d = 60
            }
            var e = new MoveAction;
            e.createMoveAction(b, a, d, function() {
                b.stopAllActions();
                b.setScale(7);
                b.opacity = 100;
                b.runAction(cc.fadeOut(0.5));
                b.removeFromParent();
                var d = skeletalAnimation["gridskin|petattackeffect"];
                d.folderName = "pngdata/gridskin";
                var e = new GameAnimation;
                e.initialize(d);
                e.setFrameIntervalTime(55);
                e.playCount = 1;
                e.x = a.x;
                e.y = a.y;
                e.isRemoveFromComplete = !0;
                c.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(e);
                e.frameFun = function(a) {
                    if (6 == a) {
                        switch (selectType) {
                            case 1:
                                c.modifyDataByPetSkill()
                        }
                        c.gamePlayFacade.gamePlayControl.refreshResetGridTime();
                        e.frameFun = null
                    }
                }
            }, null);
            this.gamePlayFacade.gamePlayControl.addMoveList(e);
            this.gamePlayFacade.gamePlayLayer.addChild(b)
        }
    }),
    PortalAction = GridAction.extend({
        fromPoint: null,
        toPoint: null,
        gamePlayFacade: null,
        runPortal: function(a, b, c, d) {
            if (null == a.gridArr[c][d] && (b = a.getSenderGridByPortalID(b), b = a.getGridByGridPoint(b.x, b.y), null != b && b.isFree() && b.isCanDown())) {
                var e = b.copyPNG();
                e.setAnchorPoint(cc.p(0.5, 0));
                e.runAction(cc.scaleTo(0.1, 0));
                e.x = b.x;
                e.y = b.y - 50;
                this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(e);
                b.setVisible(!0);
                a.setGridInfo(b.gridX, b.gridY, null);
                a.setGridInfo(c, d, b);
                b.setScenePointByGrid();
                b.setOpacity(0.1);
                b.runAction(cc.fadeIn(0.5))
            }
        }
    }),
    SpecialGridEndDelete =
    GridAction.extend({
        suctionGridList: null,
        specialGridList: null,
        checkCloud: !1,
        runDeleteGrid: function(a) {
            this.cloudList = [];
            this.suctionGridList = [];
            this.specialGridList = [];
            for (var b = 0; b < a.gridMaxX; b++)
                for (var c = a.gridMaxY - 1; 0 <= c; c--) {
                    var d = a.gridArr[b][c];
                    null != d && d.hasCloud && !this.checkCloud && this.cloudList.push(d);
                    null != d && 0 < d.specialType && (4 == d.specialType ? this.suctionGridList.push(d) : -1 == gridRuleArrayOb.endCheckNoPushSpecial.indexOf(d.gridType) && this.specialGridList.push(d))
                }
            if (0 < this.cloudList.length &&
                !this.checkCloud) {
                this.checkCloud = !0;
                for (var e = 0; e < this.cloudList.length; e++) this.cloudList[e].clearCloud();
                var f = this;
                this.cloudList = [];
                engineSetTimeOut(function() {
                    f.runDeleteGrid(a)
                }, 0.3)
            } else {
                if (0 < this.suctionGridList.length) {
                    var e = [],
                        g = this.suctionGridList[0];
                    if (!1 == g.isDespose) {
                        d = a.getGridByGridPoint(g.gridX + 1, g.gridY);
                        this.isCanSuctionGrid(d) && e.push(d);
                        d = a.getGridByGridPoint(g.gridX - 1, g.gridY);
                        this.isCanSuctionGrid(d) && e.push(d);
                        d = a.getGridByGridPoint(g.gridX, g.gridY + 1);
                        this.isCanSuctionGrid(d) &&
                            e.push(d);
                        d = a.getGridByGridPoint(g.gridX, g.gridY - 1);
                        this.isCanSuctionGrid(d) && e.push(d);
                        if (0 == e.length)
                            for (b = 0; b < a.gridMaxX; b++)
                                for (c = a.gridMaxY - 1; 0 <= c; c--) d = a.gridArr[b][c], null == d || d.gridX == g.gridX && d.gridY == g.gridY || this.isCanSuctionGrid(d) && e.push(d);
                        0 <= e.length ? (d = parseInt(100 * Math.random()) % e.length, b = new SuctionGrid, b.gamePlayFacade = this.gamePlayFacade, b.initMoveDeleteGrid(g, e[d], !1)) : g.despose()
                    } else this.runDeleteGrid(a)
                } else if (0 < this.specialGridList.length) {
                    for (e = 0; e < this.specialGridList.length; e++) d =
                        this.specialGridList[e], d.gridType == changeGrid && (d.frameIndex > d.playFrameIndex && (d.frameIndex = d.playFrameIndex), d.gotoAndStop(d.frameIndex), d.gridType = d.frameIndex + 1), g = new SameGridInfo, g.ownGrid = d, g.deleteGridByOwner(this.gamePlayFacade);
                    this.gamePlayFacade.gamePlayControl.createGrid()
                }
                if (0 >= this.suctionGridList.length && 0 >= this.specialGridList.length && 0 >= this.cloudList.length) switch (selectType) {
                    case 1:
                        !1 == this.gamePlayFacade.gamePlayControl.isFallEffect ? (this.gamePlayFacade.gamePlayControl.isFallEffect = !0, (new FallEffectAction).initFall(this.gamePlayFacade)) : this.gamePlayFacade.addWinUI();
                        break;
                    case 2:
                        !1 == this.gamePlayFacade.gamePlayControl.isFallEffect && (this.gamePlayFacade.gamePlayControl.isFallEffect = !0, this.gamePlayFacade.addWinUI())
                }
            }
        },
        isCanSuctionGrid: function(a) {
            return null == a || !1 != a.isDespose || !checkIdIsAnimal(a.gridType) && 15 != a.gridType ? !1 : !0
        }
    }),
    MoveAndBackGrid = GridAction.extend({
        initMoveAndBackGrid: function(a, b) {
            engine.gameSound.playEffect(soundres.gridmove);
            this.gamePlayFacade.gamePlayControl.isMoveGrid = !0;
            a.isMove = !0;
            b.isMove = !0;
            this.moveAndBack(a, b.getPosition());
            this.moveAndBack(b, a.getPosition());
            this.gridList.push(a);
            this.gridList.push(b);
            this.setCount()
        },
        moveAndBack: function(a, b) {
            var c = this,
                d = a.getPosition(),
                e = new MoveAction;
            e.createMoveAction(a, b, gridNodeMoveTime, function() {
                var b = new MoveAction;
                b.createMoveAction(a, d, gridNodeMoveTime, function() {
                    c.complete()
                });
                c.gamePlayFacade.gamePlayControl.addMoveList(b)
            });
            this.gamePlayFacade.gamePlayControl.addMoveList(e)
        },
        complete: function() {
            this.count--;
            if (0 == this.count) {
                for (var a = 0; a < this.gridList.length; a++) this.gridList[a].isMove = !1;
                this.gamePlayFacade.gamePlayControl.isMoveGrid = !1;
                this.gamePlayFacade.gamePlayControl.createGrid()
            }
        }
    }),
    MoveDeleteGrid = GridAction.extend({
        deleteGrid: null,
        changeGrid: null,
        selectGrid: null,
        initMoveDeleteGrid: function(a, b, c) {
            engine.gameSound.playEffect(soundres.gridmove);
            this.gamePlayFacade.gamePlayControl.isMoveGrid = !0;
            this.settGirdMove(a, b, c)
        },
        settGirdMove: function(a, b, c) {
            this.deleteGrid = a;
            this.changeGrid = b;
            this.selectGrid =
                c;
            this.changeGrid.isMove = !0;
            this.selectGrid.isMove = !0;
            for (a = 0; a < this.deleteGrid.length; a++) this.deleteGrid[a].isDelete = !0;
            this.gridList.push(b);
            this.gridList.push(c);
            a = cc.p(this.selectGrid.gridX, this.selectGrid.gridY);
            var d = cc.p(this.changeGrid.gridX, this.changeGrid.gridY);
            this.gamePlayFacade.gridData.setGridInfo(a.x, a.y, b);
            this.gamePlayFacade.gridData.setGridInfo(d.x, d.y, c);
            this.setCount();
            this.moveGridBySpeed(b, c.getPosition(), gridNodeMoveTime);
            this.moveGridBySpeed(c, b.getPosition(), gridNodeMoveTime)
        },
        complete: function() {
            this.count--;
            if (0 == this.count) {
                for (var a = 0; a < this.deleteGrid.length; a++) this.deleteGrid[a].isDelete = !1;
                this.selectGrid.isMove = !1;
                this.changeGrid.isMove = !1;
                a = [];
                if (!1 == this.selectGrid.isDespose) {
                    var b = this.gamePlayFacade.gridData.getGridListByTypeByOwn(this.selectGrid.gridX, this.selectGrid.gridY, this.selectGrid.gridType);
                    b.checkGridCanDelete();
                    b.getSameGridsLengthByOwn() >= minDeleteCount && a.push(b)
                }!1 == this.changeGrid.isDespose && (b = this.gamePlayFacade.gridData.getGridListByTypeByOwn(this.changeGrid.gridX,
                    this.changeGrid.gridY, this.changeGrid.gridType), b.checkGridCanDelete(), b.getSameGridsLengthByOwn() >= minDeleteCount && a.push(b));
                if (0 < a.length)
                    for (b = 0; b < a.length; b++) a[b].deleteGrid(this.gamePlayFacade);
                this.gamePlayFacade.gamePlayControl.isMoveGrid = !1;
                this.gamePlayFacade.gamePlayControl.createGrid()
            }
        }
    }),
    MoveDeleteSpecialGrid = GridAction.extend({
        deleteGrid: null,
        changeGrid: null,
        selectGrid: null,
        initMoveDeleteGrid: function(a, b) {
            engine.gameSound.playEffect(soundres.gridmove);
            this.gamePlayFacade.gamePlayControl.isMoveGrid = !0;
            this.settGirdMove(a, b)
        },
        settGirdMove: function(a, b) {
            this.deleteGrid = 1 <= a.specialType && 3 >= a.specialType ? a : b;
            this.changeGrid = a;
            this.selectGrid = b;
            this.changeGrid.isMove = !0;
            this.selectGrid.isMove = !0;
            for (var c = 0; c < this.deleteGrid.length; c++) this.deleteGrid[c].isDelete = !0;
            this.gridList.push(a);
            this.gridList.push(b);
            var c = cc.p(this.selectGrid.gridX, this.selectGrid.gridY),
                d = cc.p(this.changeGrid.gridX, this.changeGrid.gridY);
            this.gamePlayFacade.gridData.setGridInfo(c.x, c.y, a);
            this.gamePlayFacade.gridData.setGridInfo(d.x,
                d.y, b);
            this.setCount();
            this.moveGridBySpeed(a, b.getPosition(), gridNodeMoveTime);
            this.moveGridBySpeed(b, a.getPosition(), gridNodeMoveTime)
        },
        complete: function() {
            this.count--;
            if (0 == this.count) {
                for (var a = 0; a < this.deleteGrid.length; a++) this.deleteGrid[a].isDelete = !1;
                this.selectGrid.isMove = !1;
                this.changeGrid.isMove = !1;
                this.gamePlayFacade.gamePlayControl.isMoveGrid = !1;
                a = new SameGridInfo;
                a.ownGrid = this.deleteGrid;
                a.deleteGridByOwner(this.gamePlayFacade);
                this.gamePlayFacade.gamePlayControl.createGrid()
            }
        }
    }),
    SuctionGrid = GridAction.extend({
        changeGrid: null,
        selectGrid: null,
        suctionGridX: null,
        suctionGridY: null,
        suctionType: null,
        suctionGrid: null,
        toGrid: null,
        step: null,
        gridChangeList: null,
        deleteGridList: null,
        isMoveGrid: null,
        addScore: null,
        initMoveDeleteGrid: function(a, b, c) {
            this.gamePlayFacade.gameLevelData.recordDeleteContinuousCount();
            this.addScore = 0;
            this.isMoveGrid = c;
            this.gamePlayFacade.gamePlayControl.isSuctionGrid = !0;
            this.selectGrid = a;
            this.changeGrid = b;
            this.copyGridList = [];
            this.gridChangeList = [];
            this.deleteGridList = [];
            this.setManageSuctionType();
            this.step = 1;
            !1 == this.isMoveGrid ? this.complete() : (engine.gameSound.playEffect(soundres.gridmove), this.settGirdMove(a, b))
        },
        setManageSuctionType: function() {
            if (this.selectGrid.gridType == suctionType && this.changeGrid.gridType == suctionType) this.suctionType = 5, this.suctionGrid = this.selectGrid, this.toGrid = this.changeGrid;
            else {
                this.selectGrid.gridType == suctionType && (this.suctionGrid = this.selectGrid, this.toGrid = this.changeGrid);
                this.changeGrid.gridType == suctionType && (this.suctionGrid =
                    this.changeGrid, this.toGrid = this.selectGrid);
                0 == this.toGrid.specialType && (this.suctionType = 1);
                if (1 == this.toGrid.specialType || 2 == this.toGrid.specialType) this.suctionType = 2;
                3 == this.toGrid.specialType && (this.suctionType = 3);
                5 == this.toGrid.specialType && (this.suctionType = 4)
            }
            this.suctionGridX = this.toGrid.gridX;
            this.suctionGridY = this.toGrid.gridY
        },
        settGirdMove: function(a, b) {
            this.selectGrid = a;
            this.selectGrid.isMove = !0;
            this.changeGrid = b;
            this.changeGrid.isMove = !0;
            this.gridList.push(b);
            this.gridList.push(a);
            var c = cc.p(this.selectGrid.gridX, this.selectGrid.gridY),
                d = cc.p(this.changeGrid.gridX, this.changeGrid.gridY);
            this.gamePlayFacade.gridData.setGridInfo(c.x, c.y, b);
            this.gamePlayFacade.gridData.setGridInfo(d.x, d.y, a);
            this.setCount();
            this.moveGridBySpeed(b, a.getPosition(), gridNodeMoveTime);
            this.moveGridBySpeed(a, b.getPosition(), gridNodeMoveTime)
        },
        complete: function() {
            this.count--;
            var a = this;
            if (0 >= this.count) switch (this.step) {
                case 1:
                    this.suctionGrid.playSuctionEffect();
                    engineSetTimeOut(function() {
                            a.createSuctionEffect()
                        },
                        0.6, null, 1);
                    break;
                case 2:
                    a.suctionGrid.playEndSuctionEffect(), engineSetTimeOut(function() {
                        a.endSuction()
                    }, 0.3, null, 1)
            }
        },
        createSuctionEffect: function() {
            if (!0 != this.gamePlayFacade.isDespose) {
                var a = !1;
                null != this.gamePlayFacade.getGrass(this.suctionGridX, this.suctionGridY) && (a = !0);
                var b = 0,
                    c = 0;
                switch (this.suctionType) {
                    case 1:
                    case 4:
                        4 == this.suctionType ? (b = this.toGrid.frameIndex, 5 < b && (cc.log("GridAction1465:" + b), b = 1), this.toGrid.gotoAndStop(b), b += 1, this.gamePlayFacade.gridData.createSpecialGrid(this.toGrid,
                            0, this.gamePlayFacade, b, !1), this.toGrid.isDespose = !0, this.toGrid.removeFromParent()) : b = this.toGrid.gridType;
                        for (var d = this.gamePlayFacade.gridData, e = 0; e < d.gridMaxX; e++)
                            for (var f = d.gridMaxY - 1; 0 <= f; f--) {
                                var g = d.gridArr[e][f];
                                if (null != g && checkIsSameType(g, b)) {
                                    a && this.gamePlayFacade.addGrass(e, f);
                                    c++;
                                    if (0 == g.specialType) {
                                        var h = g.copyPNG();
                                        null != h && (this.count++, h.x = g.x, h.y = g.y, h.runAction(cc.repeatForever(cc.rotateBy(0.01, 20))), h.runAction(cc.scaleTo(0.9, 0.9)), this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(h),
                                            this.suctionMoveGridBySpeed(h, this.suctionGrid.getPosition(), 17))
                                    }
                                    h = new SameGridInfo;
                                    h.ownGrid = g;
                                    h.deleteGridByOwner(this.gamePlayFacade)
                                }
                            }
                        0 == this.count && this.endSuction();
                        b = 1 >= this.gamePlayFacade.gameLevelData.deleteContinuousCount ? skillsuction + skillcontinuous * c : skillsuction + skillcontinuous * c + specialskillcontinuous + skillcontinuous * (this.gamePlayFacade.gameLevelData.deleteContinuousCount - 1);
                        break;
                    case 2:
                    case 3:
                        b = this.toGrid.gridType;
                        d = this.gamePlayFacade.gridData;
                        for (e = 0; e < d.gridMaxX; e++)
                            for (f = d.gridMaxY -
                                1; 0 <= f; f--) g = d.gridArr[e][f], null != g && checkIsSameType(g, b) && (a && this.gamePlayFacade.addGrass(e, f), this.gridChangeList.push(g));
                        this.changeGridEffect();
                        b = 1 >= this.gamePlayFacade.gameLevelData.deleteContinuousCount ? skillsuction : skillsuction + specialskillcontinuous + skillcontinuous * (this.gamePlayFacade.gameLevelData.deleteContinuousCount - 1);
                        break;
                    case 5:
                        this.toGrid.despose();
                        d = this.gamePlayFacade.gridData;
                        for (f = d.gridMaxY - 1; 0 <= f; f--)
                            for (e = 0; e < d.gridMaxX; e++) g = d.gridArr[e][f], null != g && g.gridType != suctionType &&
                                (this.deleteGridList.push(g), c++);
                        b = 1 >= this.gamePlayFacade.gameLevelData.deleteContinuousCount ? skillsuction + skillcontinuous * c : skillsuction + skillcontinuous * c + specialskillcontinuous + skillcontinuous * (this.gamePlayFacade.gameLevelData.deleteContinuousCount - 1);
                        b *= 4;
                        this.deleteGrid()
                }
                this.addScore = b;
                this.step = 2
            }
        },
        changeGridEffect: function() {
            if (!0 != this.gamePlayFacade.isDespose) {
                var a = this;
                if (0 < this.gridChangeList.length) {
                    var b = this.gridChangeList.pop(),
                        c;
                    if (null != b && !1 == b.isDespose)
                        if (0 == b.specialType) 3 ==
                            this.suctionType && (c = this.gamePlayFacade.gridData.createSpecialGrid(b, 3, this.gamePlayFacade, b.gridType, !1, !0)), 2 == this.suctionType && (c = 50 < 100 * Math.random() ? this.gamePlayFacade.gridData.createSpecialGrid(b, 1, this.gamePlayFacade, b.gridType, !1, !0) : this.gamePlayFacade.gridData.createSpecialGrid(b, 2, this.gamePlayFacade, b.gridType, !1, !0)), this.deleteGridList.push(c), b.removeFromParent();
                        else {
                            this.deleteGridList.push(b);
                            this.changeGridEffect();
                            return
                        } engineSetTimeOut(function() {
                            a.changeGridEffect()
                        }, 0.2,
                        null, 1)
                } else {
                    for (b = 0; b < this.deleteGridList.length; b++) c = new SameGridInfo, c.ownGrid = this.deleteGridList[b], c.deleteGridByOwner(this.gamePlayFacade);
                    this.complete()
                }
            }
        },
        deleteGrid: function() {
            if (!0 != this.gamePlayFacade.isDespose) {
                var a = this;
                if (0 < this.deleteGridList.length) {
                    var b = this.deleteGridList.pop();
                    if (!0 != b.isDespose) {
                        var c = new SameGridInfo;
                        c.ownGrid = b;
                        c.deleteGridByOwner(this.gamePlayFacade);
                        engineSetTimeOut(function() {
                            a.deleteGrid()
                        }, 0.01, null, 1)
                    } else this.deleteGrid()
                } else this.complete()
            }
        },
        suctionMoveGridBySpeed: function(a, b, c, d) {
            var e = this,
                f = new MoveAction;
            f.createMoveAction(a, b, c, function() {
                engine.gameSound.playEffect(soundres.gridword);
                a.removeFromParent();
                e.complete()
            }, d);
            this.gamePlayFacade.gamePlayControl.addMoveList(f)
        },
        endSuction: function() {
            if (!0 != this.gamePlayFacade.isDespose) {
                this.gamePlayFacade.addScore(this.addScore);
                this.gamePlayFacade.addScoreEffect(this.suctionGridX, this.suctionGridY, this.addScore);
                if (suctionType == this.selectGrid.gridType) {
                    var a = this.gamePlayFacade.gridData.getSpecialGridByGridPoint(this.selectGrid.gridX,
                        this.selectGrid.gridY);
                    null != a && a.despose();
                    this.selectGrid.despose()
                }
                suctionType == this.changeGrid.gridType && (a = this.gamePlayFacade.gridData.getSpecialGridByGridPoint(this.changeGrid.gridX, this.changeGrid.gridY), null != a && a.despose(), this.changeGrid.despose());
                this.gamePlayFacade.gamePlayControl.isSuctionGrid = !1;
                this.gamePlayFacade.gamePlayControl.createGrid()
            }
        }
    }),
    ResetGrid = GridAction.extend({
        reset: function() {
            var a = this;
            if (!0 != this.gamePlayFacade.gamePlayControl.isResetGrid) {
                this.gamePlayFacade.gamePlayControl.isResetGrid = !0;
                var b = createGameAnimation(res.gameplayeffect_json, "resetgrid", 30);
                b.isRemoveFromComplete = !0;
                b.playCount = 1;
                createMaskLayer(b);
                b.x = 320;
                b.y = 600;
                b.maskLayer.x = -320;
                b.maskLayer.y = -600;
                this.gamePlayFacade.gamePlayLayer.addChild(b);
                b.frameCompleteFun = function() {
                    a.runReset()
                }
            }
        },
        runReset: function() {
            function a() {
                var c = b.slice();
                for (this.gridList = []; 0 < c.length;) {
                    var d = c.shift();
                    if (0 < c.length) {
                        var e = Math.floor(100 * Math.random()) % c.length,
                            f = c[e];
                        c.splice(e, 1);
                        var e = cc.p(d.gridX, d.gridY),
                            g = cc.p(f.gridX, f.gridY);
                        this.gamePlayFacade.gridData.setGridInfo(g.x, g.y, d);
                        this.gamePlayFacade.gridData.setGridInfo(e.x, e.y, f);
                        this.gridList.push(d);
                        this.gridList.push(f)
                    } else this.gridList.push(d)
                }
                null == this.gamePlayFacade.gridData.promptFindDelete() ? a.bind(this)() : b = []
            }
            for (var b = [], c = this.gamePlayFacade.gridData, d = [0, 0, 0, 0, 0, 0, 0], e = 0; e < c.gridMaxX; e++)
                for (var f = c.gridMaxY - 1; 0 <= f; f--) {
                    var g = c.gridArr[e][f];
                    null != g && g.isReset() && (b.push(g), checkIdIsAnimal(g.gridType) && (g = g.gridType - 1, 24 == g && (g = 6), d[g] += 1))
                }
            e = !0;
            for (f = 0; f <
                d.length; f++) 3 <= d[f] && (e = !1);
            if (!0 == e)
                for (d = 0; 3 > d; d++) e = b[d], b[d] = this.gamePlayFacade.gridData.createSpecialGrid(e, 0, this.gamePlayFacade, 1, !1), e.removeFromParent();
            a.bind(this)();
            this.setCount();
            this.gamePlayFacade.gamePlayControl.refreshPromptTime();
            for (d = 0; d < this.gridList.length; d++) e = this.gridList[d], this.moveGridByTime(e, c.getGridPointByScenePoint(e.gridX, e.gridY), 20, -1)
        },
        complete: function() {
            this.count--;
            if (0 == this.count) {
                for (var a = 0; a < this.gridList.length; a++);
                this.gamePlayFacade.gamePlayControl.isResetGrid = !1;
                a = new DeleteGrid;
                a.gamePlayFacade = this.gamePlayFacade;
                a.runDeleteGrid(this.gamePlayFacade.gridData)
            }
        }
    }),
    SpecialGridDoubleDelete = GridAction.extend({
        initMoveDeleteGrid: function(a, b) {
            this.gamePlayFacade.gamePlayControl.isSpecialGridDoubleDelete = !0;
            this.settGirdMove(a, b)
        },
        settGirdMove: function(a, b) {
            this.selectGrid = a;
            this.selectGrid.isMove = !0;
            this.selectGrid.isDelete = !0;
            this.changeGrid = b;
            this.changeGrid.isMove = !0;
            this.changeGrid.isDelete = !0;
            this.gridList.push(b);
            this.gridList.push(a);
            var c = cc.p(this.selectGrid.gridX,
                    this.selectGrid.gridY),
                d = cc.p(this.changeGrid.gridX, this.changeGrid.gridY);
            this.gamePlayFacade.gridData.setGridInfo(c.x, c.y, b);
            this.gamePlayFacade.gridData.setGridInfo(d.x, d.y, a);
            this.setCount();
            this.moveGridBySpeed(b, a.getPosition(), gridNodeMoveTime);
            this.moveGridBySpeed(a, b.getPosition(), gridNodeMoveTime)
        },
        complete: function() {
            this.count--;
            if (0 == this.count) {
                var a = [];
                if (this.selectGrid.specialType == this.changeGrid.specialType)
                    if (1 == this.changeGrid.specialType) {
                        var b = new SpecialGridInfo,
                            c = {};
                        c.gridX =
                            this.selectGrid.gridX;
                        c.gridY = this.selectGrid.gridY;
                        c.type = 2;
                        var d = {};
                        d.gridX = this.changeGrid.gridX;
                        d.gridY = this.changeGrid.gridY;
                        d.type = 1;
                        b.createSpecialGrid(this.selectGrid.gridX, this.selectGrid.gridY, 7, this.selectGrid.gridType);
                        b.specialInfoList.push(c);
                        b.specialInfoList.push(d);
                        a.push(b)
                    } else 2 == this.changeGrid.specialType ? (b = new SpecialGridInfo, c = {}, c.gridX = this.selectGrid.gridX, c.gridY = this.selectGrid.gridY, c.type = 1, d = {}, d.gridX = this.changeGrid.gridX, d.gridY = this.changeGrid.gridY, d.type = 2, b.createSpecialGrid(this.selectGrid.gridX,
                        this.selectGrid.gridY, 7, this.selectGrid.gridType), b.specialInfoList.push(c), b.specialInfoList.push(d), a.push(b)) : 3 == this.changeGrid.specialType && (b = new SpecialGridInfo, b.createSpecialGrid(this.selectGrid.gridX, this.selectGrid.gridY, 6, this.selectGrid.gridType), a.push(b));
                else {
                    2 == this.changeGrid.specialType && 1 == this.selectGrid.specialType && (b = new SpecialGridInfo, c = {}, c.gridX = this.selectGrid.gridX, c.gridY = this.selectGrid.gridY, c.type = 1, d = {}, d.gridX = this.changeGrid.gridX, d.gridY = this.changeGrid.gridY,
                        d.type = 2, b.createSpecialGrid(this.selectGrid.gridX, this.selectGrid.gridY, 7, this.selectGrid.gridType), b.specialInfoList.push(c), b.specialInfoList.push(d), a.push(b));
                    1 == this.changeGrid.specialType && 2 == this.selectGrid.specialType && (b = new SpecialGridInfo, c = {}, c.gridX = this.selectGrid.gridX, c.gridY = this.selectGrid.gridY, c.type = 2, d = {}, d.gridX = this.changeGrid.gridX, d.gridY = this.changeGrid.gridY, d.type = 1, b.createSpecialGrid(this.selectGrid.gridX, this.selectGrid.gridY, 7, this.selectGrid.gridType), b.specialInfoList.push(c),
                        b.specialInfoList.push(d), a.push(b));
                    if (3 == this.changeGrid.specialType) {
                        b = new SpecialGridInfo;
                        c = {};
                        c.gridX = this.changeGrid.gridX + 1;
                        c.gridY = this.changeGrid.gridY;
                        c.type = 2;
                        d = {};
                        d.gridX = this.changeGrid.gridX;
                        d.gridY = this.changeGrid.gridY;
                        d.type = 2;
                        var e = {};
                        e.gridX = this.changeGrid.gridX - 1;
                        e.gridY = this.changeGrid.gridY;
                        e.type = 2;
                        var f = {};
                        f.gridX = this.changeGrid.gridX;
                        f.gridY = this.changeGrid.gridY + 1;
                        f.type = 1;
                        var g = {};
                        g.gridX = this.changeGrid.gridX;
                        g.gridY = this.changeGrid.gridY;
                        g.type = 1;
                        var h = {};
                        h.gridX = this.changeGrid.gridX;
                        h.gridY = this.changeGrid.gridY - 1;
                        h.type = 1;
                        b.createSpecialGrid(this.selectGrid.gridX, this.selectGrid.gridY, 7, this.selectGrid.gridType);
                        b.specialInfoList.push(c);
                        b.specialInfoList.push(d);
                        b.specialInfoList.push(e);
                        b.specialInfoList.push(f);
                        b.specialInfoList.push(g);
                        b.specialInfoList.push(h);
                        a.push(b)
                    }
                    3 == this.selectGrid.specialType && (b = new SpecialGridInfo, c = {}, c.gridX = this.selectGrid.gridX + 1, c.gridY = this.selectGrid.gridY, c.type = 2, d = {}, d.gridX = this.selectGrid.gridX, d.gridY = this.selectGrid.gridY, d.type =
                        2, e = {}, e.gridX = this.selectGrid.gridX - 1, e.gridY = this.selectGrid.gridY, e.type = 2, f = {}, f.gridX = this.selectGrid.gridX, f.gridY = this.selectGrid.gridY + 1, f.type = 1, g = {}, g.gridX = this.selectGrid.gridX, g.gridY = this.selectGrid.gridY, g.type = 1, h = {}, h.gridX = this.selectGrid.gridX, h.gridY = this.selectGrid.gridY - 1, h.type = 1, b.createSpecialGrid(this.selectGrid.gridX, this.selectGrid.gridY, 7, this.selectGrid.gridType), b.specialInfoList.push(c), b.specialInfoList.push(d), b.specialInfoList.push(e), b.specialInfoList.push(f), b.specialInfoList.push(g),
                        b.specialInfoList.push(h), a.push(b))
                }
                for (b = 0; b < a.length; b++) a[b].runSpecialGrid(this.gamePlayFacade);
                a = new SameGridInfo;
                a.ownGrid = this.selectGrid;
                a.deleteGridByOwner(this.gamePlayFacade);
                a = new SameGridInfo;
                a.ownGrid = this.changeGrid;
                a.deleteGridByOwner(this.gamePlayFacade);
                this.gamePlayFacade.gamePlayControl.isSpecialGridDoubleDelete = !1;
                this.gamePlayFacade.gamePlayControl.createGrid()
            }
        }
    }),
    TransferAction = GridAction.extend({
        runTransfer: function(a) {
            this.gamePlayFacade.gamePlayControl.isRunTransferAction = !0;
            for (var b in a) {
                var c = a[b];
                if (null != c.top) {
                    var d = this.gamePlayFacade.gridData.getGridByGridPoint(c.end.x, c.end.y);
                    this.topMove(c.top, c.end);
                    this.gamePlayFacade.gridData.setGridInfo(c.top.x, c.top.y, d);
                    var e = this.gamePlayFacade.getTransferInfoByGridInfo(c.top.x, c.top.y),
                        e = this.getGridPointByDir(c.top.x, c.top.y, e),
                        e = this.gamePlayFacade.gridData.getGridPointByScenePoint(e.x, e.y);
                    d.x = e.x;
                    d.y = e.y;
                    this.moveGridBySpeed(d, this.gamePlayFacade.gridData.getGridPointByScenePoint(c.top.x, c.top.y), gridNodeMoveTime)
                } else
                    for (b in d = {}, this.cycleMove(d, c.cycle), d) e = d[b], c = e.movePoint, e = e.grid, this.gamePlayFacade.gridData.setGridInfo(c.x, c.y, e), e && (this.gridList.push(e), this.moveGridBySpeed(e, this.gamePlayFacade.gridData.getGridPointByScenePoint(c.x, c.y), gridNodeMoveTime))
            }
            this.setCount()
        },
        cycleMove: function(a, b) {
            var c = this.gamePlayFacade.getTransferInfoByGridInfo(b.x, b.y),
                c = this.getGridPointByDir(b.x, b.y, c),
                d = this.gamePlayFacade.gridData.getGridByGridPoint(c.x, c.y),
                e = c.x.toString() + "|" + c.y.toString();
            if (null == a[e]) {
                var f = {};
                f.grid = d;
                f.movePoint = b;
                a[e] = f;
                this.cycleMove(a, c)
            }
        },
        topMove: function(a, b) {
            var c = this.gamePlayFacade.getTransferInfoByGridInfo(b.x, b.y),
                c = this.getGridPointByDir(b.x, b.y, c);
            if (b.x != a.x || b.y != a.y) {
                var d = this.gamePlayFacade.gridData.getGridByGridPoint(c.x, c.y);
                d && (this.gamePlayFacade.gridData.setGridInfo(b.x, b.y, d), this.gridList.push(d), this.moveGridBySpeed(d, this.gamePlayFacade.gridData.getGridPointByScenePoint(b.x, b.y), gridNodeMoveTime), this.topMove(a, c))
            }
        },
        getGridPointByDir: function(a, b, c) {
            switch (c) {
                case 8:
                    b -=
                        1;
                    break;
                case 2:
                    b += 1;
                    break;
                case 6:
                    a += 1;
                    break;
                case 4:
                    a -= 1
            }
            return cc.p(a, b)
        },
        complete: function() {
            this.count--;
            if (0 == this.count) {
                this.gamePlayFacade.gamePlayControl.isRunTransferAction = !1;
                this.gamePlayFacade.gamePlayControl.createGrid();
                var a = new DeleteGrid;
                a.gamePlayFacade = this.gamePlayFacade;
                a.runDeleteGrid(this.gamePlayFacade.gridData)
            }
        }
    }),
    FallEffectAction = GridAction.extend({
        fallGrid: null,
        gamePlayFacade: null,
        isEndComplete: null,
        initFall: function(a) {
            this.gamePlayFacade = a;
            engine.gameSound.playEffect(soundres.showtime);
            this.addGridEndEffect()
        },
        flyEffect: function() {
            if (!0 != this.gamePlayFacade.isDespose) {
                this.fallGrid = [];
                this.count = 0;
                for (var a = this.gamePlayFacade.gridData.gridArr, b = 0; b < tileMapGridMaxX; b++)
                    for (var c = 0; c < tileMapGridMaxY; c++) {
                        var d = a[b][c];
                        null != d && checkIdIsAnimal(d.gridType) && this.fallGrid.push(d)
                    }
                0 >= this.gamePlayFacade.gameLevelData.step || 0 >= this.fallGrid.length ? this.complete() : this.runDeleteGrid()
            }
        },
        addGridEndEffect: function() {
            for (var a = this, b = this.gamePlayFacade.gridData.gridArr, c = !1, d = 4; 1 <= d; d--)
                for (var e =
                        4 - d; e <= 4 + d - 1; e++)
                    if (e == 4 - d || e == 4 + d - 1)
                        for (var f = 4 - d; f <= 4 + d - 1; f++) {
                            var g = b[f][e];
                            if (null != g && nullGrid != g.gridType) {
                                var h = createGameAnimation(res.gameplayeffect_json, "endgrideffect", 15);
                                h.isRemoveFromComplete = !0;
                                h.playCount = 1;
                                h.fromFrameIndexToPlayFrameIndex(15 - 3 * (d - 1), 32);
                                g.addChild(h);
                                !1 == c && (c = !0, h.frameCompleteFun = function() {
                                    a.flyEffect()
                                })
                            }
                        } else g = b[4 - d][e], null != g && nullGrid != g.gridType && (h = createGameAnimation(res.gameplayeffect_json, "endgrideffect", 15), h.isRemoveFromComplete = !0, h.playCount = 1, h.fromFrameIndexToPlayFrameIndex(15 -
                            3 * (d - 1), 32), g.addChild(h), !1 == c && (c = !0, h.frameCompleteFun = function() {
                            a.flyEffect()
                        })), g = b[4 + d - 1][e], null != g && nullGrid != g.gridType && (h = createGameAnimation(res.gameplayeffect_json, "endgrideffect", 15), h.isRemoveFromComplete = !0, h.playCount = 1, h.fromFrameIndexToPlayFrameIndex(15 - 3 * (d - 1), 32), g.addChild(h), !1 == c && (c = !0, h.frameCompleteFun = function() {
                            a.flyEffect()
                        }))
        },
        complete: function() {
            this.gamePlayFacade.gamePlayControl.createGrid()
        },
        runDeleteGrid: function() {
            if (!0 != this.gamePlayFacade.isDespose) {
                var a = this;
                0 < this.fallGrid.length && (this.count++, this.flyFallEffect(this.getDeleteGrid()));
                !0 == this.gamePlayFacade.fallUseStep() && 0 < this.fallGrid.length ? engineSetTimeOut(function() {
                    a.runDeleteGrid()
                }, 0.2, null, 1) : (this.gamePlayFacade.gamePlayLayer.setStepNum(0), this.isEndComplete = !0)
            }
        },
        flyFallEffect: function(a) {
            if (cc._renderType === cc.game.RENDER_TYPE_WEBGL) {
                var b = new cc.Node;
                b.setCascadeOpacityEnabled(!0);
                b.setAnchorPoint(cc.p(0.5, 0));
                b.setPosition(cc.p(48, 1080));
                var c = new cc.ParticleSystem(res.gameEndFlyEffect1);
                c.x = 0;
                c.y = 0;
                c.setAutoRemoveOnFinish(!0);
                b.addChild(c, 4);
                c = new cc.ParticleSystem(res.gameEndFlyEffect2);
                c.x = 0;
                c.y = 0;
                c.setAutoRemoveOnFinish(!0);
                b.addChild(c, 4);
                var d = this,
                    c = cc.moveTo(0.4, cc.p(a.x, a.y)),
                    c = cc.sequence(c, cc.callFunc(function(c, e) {
                        a.clickGrid();
                        b.stopAllActions();
                        b.opacity = 100;
                        b.runAction(cc.fadeOut(0.5));
                        var f = cc.delayTime(0.4),
                            m = cc.callFunc(function() {
                                d.moveComplete(a);
                                b.removeFromParent()
                            });
                        a.runAction(cc.sequence(f, m))
                    }, this));
                b.runAction(c);
                this.gamePlayFacade.gamePlayLayer.addChild(b)
            } else {
                var e =
                    new cc.Sprite;
                e.x = 320;
                e.y = 900;
                e.setAnchorPoint(cc.p(0.75, 0.5));
                e.setScale(3);
                e.setSpriteFrame("gameplaylayer/falleffect.png");
                e.setRotation(180 - engine.gameTool.getAngle(cc.p(a.x, a.y), cc.p(e.x, e.y)));
                e.runAction(cc.scaleTo(0.3, 6));
                var f = this,
                    c = new MoveAction;
                c.createMoveAction(e, cc.p(a.x, a.y), 40, function() {
                    a.clickGrid();
                    e.stopAllActions();
                    e.setScale(7);
                    e.opacity = 100;
                    e.runAction(cc.fadeOut(0.5));
                    var b = cc.delayTime(0.4),
                        c = cc.callFunc(function() {
                            f.moveComplete(a)
                        });
                    a.runAction(cc.sequence(b, c))
                }, null);
                this.gamePlayFacade.gamePlayLayer.addChild(e);
                this.gamePlayFacade.gamePlayControl.addMoveList(c)
            }
        },
        hengOrShu: 0,
        moveComplete: function(a) {
            this.gamePlayFacade.gridData.createSpecialGrid(a, this.hengOrShu++ % 2 ? 1 : 2, this.gamePlayFacade, a.gridType, !0);
            this.gamePlayFacade.addScore(fallgridscore);
            this.gamePlayFacade.addScoreEffect(a.gridX, a.gridY, fallgridscore);
            this.count--;
            !0 == this.isEndComplete && 0 >= this.count && this.complete()
        },
        getDeleteGrid: function() {
            var a;
            if (1 < this.fallGrid.length) {
                var b = parseInt(100 * Math.random()) %
                    (this.fallGrid.length - 1);
                a = this.fallGrid[b];
                this.fallGrid.splice(b, 1)
            } else a = this.fallGrid[0], this.fallGrid = [];
            return a
        }
    }),
    DeleteChangeGrid = GridAction.extend({
        runDeleteChangeGrid: function(a) {
            this.gamePlayFacade.gameLevelData.recordDeleteContinuousCount();
            var b = new SameGridInfo;
            b.ownGrid = a;
            b.deleteGridByOwner(this.gamePlayFacade);
            this.gamePlayFacade.gamePlayControl.createGrid()
        }
    }),
    MoveAction = cc.Class.extend({
        node: null,
        speedPoint: null,
        isEnd: null,
        fun: null,
        speed: null,
        movePoint: null,
        delayTime: null,
        createMoveAction: function(a,
            b, c, d, e) {
            this.delayTime = e;
            this.node = a;
            this.isEnd = !1;
            this.fun = d;
            this.speed = c;
            this.movePoint = b;
            a = engine.gameTool.getAngle(this.node.getPosition(), b);
            this.speedPoint = engine.gameTool.beginPointTodistance(cc.p(0, 0), a, this.speed)
        },
        createMoveActionByTime: function(a, b, c, d, e) {
            this.delayTime = e;
            this.node = a;
            this.isEnd = !1;
            this.fun = d;
            this.movePoint = b;
            this.speed = cc.pDistance(this.node.getPosition(), b) / c + 2.7;
            a = engine.gameTool.getAngle(this.node.getPosition(), b);
            this.speedPoint = engine.gameTool.beginPointTodistance(cc.p(0,
                0), a, this.speed);
            this.run()
        },
        update: function() {
            this.run()
        },
        run: function() {
            this.delayTime--;
            0 < this.delayTime || (!0 == this.node.isDespose ? (this.isEnd = !0, this.fun()) : cc.pDistance(this.node.getPosition(), this.movePoint) <= this.speed ? (this.node.x = this.movePoint.x, this.node.y = this.movePoint.y, this.isEnd = !0, this.fun()) : (this.node.x += this.speedPoint.x, this.node.y += this.speedPoint.y))
        }
    }),
    LaserDeleteGrid = GridAction.extend({
        isRunTransfer: null,
        runDeleteGrid: function(a) {
            var b = new SpecialGridInfo;
            switch (a.direction) {
                case 12:
                    b.createSpecialGrid(a.gridX,
                        a.gridY, 11, a.gridType);
                    break;
                case 14:
                    b.createSpecialGrid(a.gridX, a.gridY, 8, a.gridType);
                    break;
                case 16:
                    b.createSpecialGrid(a.gridX, a.gridY, 9, a.gridType);
                    break;
                case 18:
                    b.createSpecialGrid(a.gridX, a.gridY, 10, a.gridType)
            }
            b.runSpecialGrid(this.gamePlayFacade)
        }
    }),
    CherryBlossomsGrid = GridAction.extend({
        isRunTransfer: null,
        runDeleteGrid: function(a) {
            for (var b = this.gamePlayFacade.gridData, c = [], d = 0; d < b.gridMaxX; d++)
                for (var e = b.gridMaxY - 1; 0 <= e; e--) {
                    var f = b.gridArr[d][e];
                    null != f && f.gridType == cherryBlossomsGrid &&
                        f.cherryBlossomsType == a.cherryBlossomsType && (f.isYinghuaDestroyByOther = !0, f.cherryBlossomsGridCount = 4, f.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(f.x, f.y, "pngdata/gridskin", "gridskin|cherryblossomseffect", 17), c.push(f))
                }
            c.forEach(function(a) {
                a.upLevelcherryBlossoms(4)
            });
            c = [];
            this.gamePlayFacade.gamePlayControl.createGrid()
        }
    }),
    EggNewRandomGrid = GridAction.extend({
        isRunTransfer: null,
        runDeleteGrid: function(a) {
            for (var b = this.gamePlayFacade.gridData, c = [], d, e = 0; e < b.gridMaxX; e++)
                for (var f = 0; f < b.gridMaxY; f++) d =
                    b.gridArr[e][f], null != d && checkIdIsAnimal(d.gridType) && null == d.iceSprite && 0 == d.specialType && d.gridType != violet && c.push(d);
            (function(a) {
                for (var b = a.length, c, d; b;) c = Math.floor(Math.random() * b--), d = a[c], a[c] = a[b], a[b] = d;
                return a
            })(c);
            var g = [];
            for (d = 0; d < Math.min(4, c.length); d++) e = c[d], -1 == checkNeedChangeArr.indexOf(e) && (g.push(e), checkNeedChangeArr.push(e));
            var h = this;
            engineSetTimeOut(function() {
                for (var c = !0, d = [], e = 0; e < g.length; e++) {
                    var f = g[e],
                        r = new cc.Sprite;
                    r.setSpriteFrame("pngdata/gridskin/grid25png0001.png");
                    r.setAnchorPoint(cc.p(0.5, 0));
                    r.x = a.x;
                    r.y = a.y - 60;
                    h.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(r);
                    d.push(r);
                    r.runAction(cc.sequence(cc.moveTo(0.3, cc.p(f.getPosition().x, f.getPosition().y - 60)), cc.delayTime(0.1), cc.callFunc(function(a) {
                        c && (c = !1, d.forEach(function(a) {
                            a.removeFromParent()
                        }), g.forEach(function(a) {
                            b.createSpecialGridDespose(a, 0, h.gamePlayFacade, violet, !1)
                        }))
                    })))
                }
                a.playEggMC(!1, 2)
            }, 0.5, null, 1)
        }
    }),
    EggNewSuperRandomGrid = GridAction.extend({
        isRunTransfer: null,
        runDeleteGrid: function(a) {
            function b(a) {
                for (var b =
                        a.length, c, d; b;) c = Math.floor(Math.random() * b--), d = a[c], a[c] = a[b], a[b] = d;
                return a
            }
            var c = this,
                d = [];
            engineSetTimeOut(function() {
                for (var e = c.gamePlayFacade.gridData, f = [], g = 0; g < e.gridMaxX; g++)
                    for (var h = 0; h < e.gridMaxY; h++) {
                        var k = e.gridArr[g][h];
                        null != k && checkIdIsAnimal(k.gridType) && null == k.iceSprite && 0 == k.specialType && f.push(k)
                    }
                b(f);
                for (var m = !0, n = [], g = 0; g < Math.min(2, f.length); g++) {
                    h = 0.5 < Math.random() ? 1 : 2;
                    k = e.createSpecialGrid(f[g], h, c.gamePlayFacade, violet, !0);
                    k.visible = !1;
                    d.push(k);
                    var p = new cc.Sprite;
                    p.setSpriteFrame(1 == h ? "pngdata/gridskin/rocket_line001.png" : "pngdata/gridskin/rocket001.png");
                    p.setAnchorPoint(cc.p(0.5, 0));
                    p.x = a.x;
                    p.y = a.y - 60;
                    c.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(p);
                    n.push(p);
                    p.runAction(cc.sequence(cc.moveTo(0.3, cc.p(k.getPosition().x, k.getPosition().y - 60)), cc.delayTime(0.1), cc.callFunc(function(a) {
                        m && (m = !1, n.forEach(function(a) {
                            a.removeFromParent()
                        }), d.forEach(function(a) {
                            a.visible = !0
                        }))
                    })))
                }
                a.playEggMC(!0, 2)
            }, 0.5, null, 1);
            engineSetTimeOut(function() {
                for (var a =
                        0; a < d.length; a++) {
                    var b = d[a],
                        g = new SameGridInfo;
                    g.ownGrid = b;
                    g.deleteGridByOwner(c.gamePlayFacade)
                }
            }, 1.4, null, 1)
        }
    });
var CloudMoveAction = GridAction.extend({
    movecount: 0,
    moveEndArr: [],
    run: function() {
        this.moveEndArr = [];
        this.movecount = 0;
        this.gamePlayFacade.gamePlayControl.isRunTransferAction = !0;
        for (var a = this.gamePlayFacade.gridData, b = [], c = [], d = 0; d < a.gridMaxX; d++)
            for (var e = a.gridMaxY - 1; 0 <= e; e--) {
                var f = a.gridArr[d][e];
                null != f && checkIdIsAnimal(f.gridType) && !f.hasCloud && c.push(f);
                null != f && f.hasCloud && b.push(f)
            }
        a = [cc.p(-1, 0), cc.p(1, 0), cc.p(0, -1), cc.p(0, 1)];
        for (d = 0; d < b.length; d++) {
            var e = b[d],
                g = a.slice();
            for (myGameTool.shuffleArray(g); 0 <
                g.length;) {
                var f = g.shift(),
                    h = cc.pAdd(f, cc.p(e.gridX, e.gridY));
                if (this.gamePlayFacade.gridData.gridArr[h.x] && this.gamePlayFacade.gridData.gridArr[h.x][h.y] && -1 != c.indexOf(this.gamePlayFacade.gridData.gridArr[h.x][h.y])) {
                    g = this.gamePlayFacade.gridData.gridArr[h.x][h.y];
                    c.splice(c.indexOf(g), 1);
                    this.moveEndArr.push(g);
                    this.movecount++;
                    e.moveCloud(f, this.complete.bind(this));
                    break
                }
            }
        }
        0 == this.movecount && (this.gamePlayFacade.gamePlayControl.isRunTransferAction = !1)
    },
    complete: function() {
        this.movecount--;
        if (0 ==
            this.movecount) {
            for (var a = 0; a < this.moveEndArr.length; a++) this.moveEndArr[a].addCloud();
            this.gamePlayFacade.gamePlayControl.isRunTransferAction = !1;
            this.gamePlayFacade.gamePlayControl.createGrid();
            a = new DeleteGrid;
            a.gamePlayFacade = this.gamePlayFacade;
            a.runDeleteGrid(this.gamePlayFacade.gridData)
        }
    }
});
var PetSkillControl = cc.Class.extend({
        skillProbability: null,
        skillType: null,
        gamePlayFacade: null,
        initialize: function() {
            var a = heroData.getSelectePet();
            this.skillProbability = a.getSkillProbability();
            this.skillType = a.getSkilltype()
        },
        randomSkill: function() {
            var a = 100 * Math.random();
            return this.skillProbability >= a ? !0 : !1
        },
        randGridPoint: function() {
            var a = this.gamePlayFacade.gamePlayControl.modifyDataArr,
                b = parseInt(Math.random() * a.length);
            b > a.length - 1 && (b = a.length - 1);
            return a[b]
        },
        playPetSkillAction: function(a) {
            a()
        },
        modifyDataByPetSkill: function(a, b) {
            var c = this.gamePlayFacade.gridData.gridArr[a][b],
                d;
            switch (1005 == this.skillType ? parseInt(100 * Math.random()) % 4 + 1001 : this.skillType) {
                case 1001:
                    d = this.gamePlayFacade.gridData.createSpecialGrid(c, 4, this.gamePlayFacade, suctionType, !0);
                    break;
                case 1002:
                    d = 50 < 100 * Math.random() ? this.gamePlayFacade.gridData.createSpecialGrid(c, 1, this.gamePlayFacade, c.gridType, !0) : this.gamePlayFacade.gridData.createSpecialGrid(c, 2, this.gamePlayFacade, c.gridType, !0);
                    break;
                case 1003:
                    d = this.gamePlayFacade.gridData.createSpecialGrid(c,
                        3, this.gamePlayFacade, c.gridType, !0);
                    break;
                case 1004:
                    d = this.gamePlayFacade.gridData.createSpecialGrid(c, 5, this.gamePlayFacade, changeGrid, !0)
            }
            null != d && (d.setScale(0.3), d.runAction(cc.scaleTo(0.2, 1)));
            c.removeFromParent()
        }
    }),
    UseItemControl = cc.Class.extend({
        useItemAction: null,
        ctor: function() {
            this.nowUseSelectItem = null
        },
        modifyDataByItem: function(a) {
            for (var b = a.gridData, c = b.gridArr, d = [], e = 0; e < b.gridMaxX; e++)
                for (var f = 0; f < b.gridMaxY; f++) {
                    var g = c[e][f];
                    null != g && checkIdIsAnimal(g.gridType) && null == g.iceSprite &&
                        0 == g.specialType && d.push(g)
                }
            for (e = 0; e < heroData.gameBeginUseItem.length; e++) {
                b = parseInt(Math.random() * d.length);
                c = d[b];
                f = heroData.gameBeginUseItem[e];
                switch (f) {
                    case 999:
                        a.addTime(30);
                        break;
                    case 1E3:
                        a.addStep(3);
                        break;
                    case 1001:
                        null != c && checkIdIsAnimal(c.gridType) && null == c.iceSprite && 0 == c.specialType && a.gridData.createSpecialGrid(c, 4, a, suctionType, !1);
                        break;
                    case 1002:
                        null != c && checkIdIsAnimal(c.gridType) && null == c.iceSprite && 0 == c.specialType && (50 < 100 * Math.random() ? a.gridData.createSpecialGrid(c, 1, a, c.gridType,
                            !1) : a.gridData.createSpecialGrid(c, 2, a, c.gridType, !1));
                        break;
                    case 1003:
                        null != c && checkIdIsAnimal(c.gridType) && null == c.iceSprite && 0 == c.specialType && a.gridData.createSpecialGrid(c, 3, a, c.gridType, !1);
                        break;
                    case 1004:
                        null != c && checkIdIsAnimal(c.gridType) && null == c.iceSprite && 0 == c.specialType && a.gridData.createSpecialGrid(c, 5, a, changeGrid, !1)
                }
                1E3 != f && 999 != f && (c.removeFromParent(), d.splice(b, 1))
            }
            heroData.gameBeginUseItem = []
        },
        selectItem: function(a) {
            if (!1 == this.isFree()) this.useItemAction.undo();
            else switch (a) {
                case 1006:
                    this.useItemAction =
                        new GridElementItemAction;
                    this.useItemAction.itemID = a;
                    this.useItemAction.gamePlayFacade = this.gamePlayFacade;
                    this.useItemAction.doItem();
                    break;
                case 1007:
                    var b = new GridAddStepItemAction;
                    b.gamePlayFacade = this.gamePlayFacade;
                    b.itemID = a;
                    b.doItem();
                    break;
                case 1008:
                    this.useItemAction = new GridChangeItemAction;
                    this.useItemAction.itemID = a;
                    this.useItemAction.gamePlayFacade = this.gamePlayFacade;
                    this.useItemAction.doItem();
                    break;
                case 1009:
                    this.useItemAction = new SpecialGridItemAction;
                    this.useItemAction.itemID = a;
                    this.useItemAction.gamePlayFacade = this.gamePlayFacade;
                    this.useItemAction.doItem();
                    break;
                case 1010:
                    b = new ResetGridItemAction, b.gamePlayFacade = this.gamePlayFacade, b.itemID = a, b.doItem()
            }
        },
        runItem: function(a) {
            this.useItemAction.run(a)
        },
        isFree: function() {
            return null == this.useItemAction ? !0 : !1
        },
        cleanItem: function() {
            this.useItemAction = null
        }
    }),
    GamePlayControl = cc.Class.extend({
        selectGrid: null,
        mouseDown: null,
        gamePlayFacade: null,
        isNowCreateGrid: !1,
        moveList: [],
        isMoveGrid: !1,
        isSuctionGrid: !1,
        isDeleteGrid: !1,
        isResetGrid: null,
        isSpecialGridDoubleDelete: !1,
        isRunTransferAction: !1,
        isShowClickEffect: null,
        isFallEffect: !1,
        isGameEnd: !1,
        useItemControl: null,
        petSkillControl: null,
        isUseStep: null,
        modifyDataArr: null,
        isPlayPetSkill: null,
        promptTime: null,
        isResetGridTime: null,
        isEndPrompt: null,
        isPlayEndEffect: null,
        isAddStepEffect: null,
        isAddEgg: null,
        ctor: function() {
            this.moveList = [];
            this.gamePlayFacade = this.mouseDown = this.selectGrid = null;
            this.isDeleteGrid = this.isSuctionGrid = this.isMoveGrid = this.isNowCreateGrid = !1;
            this.isResetGrid = null;
            this.isLockUseItem =
                this.isRunTransferAction = this.isSpecialGridDoubleDelete = !1;
            this.isShowClickEffect = null;
            this.isUseStep = this.isGameEnd = this.isFallEffect = !1;
            this.useItemControl = null;
            this.isPlayPetSkill = !1;
            this.modifyDataArr = [];
            this.isAddStepEffect = this.isPlayEndEffect = !1;
            this.promptTime = engineGameRunTime() + 1E7;
            this.isResetGridTime = engineGameRunTime() + 1E7;
            this.isEndPrompt = !1
        },
        refreshPromptTime: function() {
            this.promptTime = engineGameRunTime() + gamePromptTime;
            this.gamePlayFacade.gamePlayLayer.promptEffect.setVisible(!1)
        },
        refreshResetGridTime: function() {
            this.isResetGridTime = engineGameRunTime()
        },
        restGrid: function() {
            var a = engineGameRunTime();
            !0 == this.isGameFree() && !0 == this.useItemControl.isFree() && !1 == this.gamePlayFacade.gamePlayControl.isGameEnd && !1 == this.gamePlayFacade.gamePlayControl.isPlayEndEffect && 1E3 < a - this.isResetGridTime && (this.isResetGridTime = engineGameRunTime() + 1E7, null == this.gamePlayFacade.gridData.promptFindDelete() && (a = new ResetGrid, a.gamePlayFacade = this.gamePlayFacade, a.reset()))
        },
        showPrompt: function() {
            if (!0 !=
                this.isEndPrompt && !0 != this.gamePlayFacade.gamePlayLayer.promptEffect.visible && null == currentScene.newbieGuideLayer) {
                var a = engineGameRunTime();
                !0 == this.isGameFree() && !0 == this.useItemControl.isFree() && a - this.promptTime > gamePromptTime && (a = this.gamePlayFacade.gridData.promptFindDelete(), null == a ? (a = new ResetGrid, a.gamePlayFacade = this.gamePlayFacade, a.reset()) : !0 != a.isSpecialType && this.gamePlayFacade.gamePlayLayer.showPromptEffect(a.nowGridX, a.nowGridY, a.toGridX, a.toGridY))
            }
        },
        endPrompt: function() {
            this.isEndPrompt = !0;
            this.gamePlayFacade.gamePlayLayer.promptEffect.setVisible(!1)
        },
        initialize: function() {
            this.useItemControl = new UseItemControl;
            this.useItemControl.gamePlayFacade = this.gamePlayFacade
        },
        modifyDataByItem: function(a) {
            for (var b = this.gamePlayFacade.gridData.gridArr, c = 0; c < this.gamePlayFacade.gridData.gridMaxX; c++)
                for (var d = 0; d < this.gamePlayFacade.gridData.gridMaxY; d++)
                    if (b[c][d].gridType != nullGrid) {
                        var e = cc.p(c, d);
                        this.modifyDataArr.push(e)
                    } this.useItemControl.modifyDataByItem(a)
        },
        update: function(a) {
            for (a =
                this.moveList.length - 1; 0 <= a; a--) this.moveList[a].update(), !0 == this.moveList[a].isEnd && this.moveList.splice(a, 1);
            this.showPrompt();
            this.restGrid()
        },
        addMoveList: function(a) {
            this.moveList.push(a)
        },
        addStep: function(a) {
            this.gamePlayFacade.addStep(a)
        },
        isGameFree: function() {
            var a = !0;
            !0 == this.isNowCreateGrid && (a = !1);
            !0 == this.isSuctionGrid && (a = !1);
            !0 == this.isMoveGrid && (a = !1);
            !0 == this.isSuctionGrid && (a = !1);
            !0 == this.isResetGrid && (a = !1);
            !0 == this.isSpecialGridDoubleDelete && (a = !1);
            !0 == this.isRunTransferAction &&
                (a = !1);
            !0 == this.isFallEffect && (a = !1);
            !0 == this.isGameEnd && (a = !1);
            !0 == this.isPlayPetSkill && (a = !1);
            !0 == this.isAddStepEffect && (a = !1);
            !0 == this.isAddEgg && (a = !1);
            return a
        },
        selectGridByPoint: function(a) {
            !1 == this.useItemControl.isFree() ? (this.useItemControl.runItem(a), this.selectGrid = null) : (this.selectGrid = this.gamePlayFacade.gridData.getGridByScenePoint(a.x, a.y), null != this.selectGrid && (this.isShowClickEffect = !0, !1 == this.isSelectGridCanMove(this.selectGrid) && (this.selectGrid = null)));
            this.mouseDown = a
        },
        isSelectGridCanMove: function(a) {
            var b = !0;
            switch (selectType) {
                case 1:
                    a.hasCloud && (b = !1);
                    !1 == this.isGameFree() && (b = !1);
                    !0 != this.useItemControl.isFree() && (b = !1); - 1 != gridRuleArrayOb.selectCanMove.indexOf(a.gridType) && (b = !1);
                    null != a.iceSprite && (b = !1);
                    a.gridType == nullGrid && (b = !1);
                    a.gridType == emptyGrid && (b = !1);
                    break;
                case 2:
                    !0 == this.isGameEnd && (b = !1);
                    !0 == this.isSuctionGrid && (b = !1);
                    !0 == this.isResetGrid && (b = !1);
                    if (a.gridType == wood2 || a.gridType == wood1) b = !1;
                    null != a.iceSprite && (b = !1);
                    a.gridType == nullGrid && (b = !1);
                    a.gridType == emptyGrid && (b = !1);
                    !1 == this.gamePlayFacade.gridData.gridCanMove(a.gridX,
                        a.gridY) && (b = !1)
            }
            return b
        },
        sceneMouseUp: function(a) {
            !0 == this.isShowClickEffect && (a = this.gamePlayFacade.gridData.getGridByScenePoint(a.x, a.y), null != a && a.clickGrid())
        },
        changeGridByPoint: function(a) {
            if (null != this.selectGrid) {
                var b = this.gamePlayFacade.gridData.getGridByScenePoint(a.x, a.y);
                if (!1 == this.gamePlayFacade.gridData.isSameGrid(b, this.selectGrid)) {
                    var c = b = 0;
                    Math.abs(this.selectGrid.x - a.x) >= Math.abs(this.selectGrid.y - a.y) ? b = 0 > this.selectGrid.x - a.x ? 1 : -1 : c = 0 > this.selectGrid.y - a.y ? -1 : 1;
                    currentScene.newbieGuideLayer &&
                        2 == selectLevel && 1 == heroData.newbieGamePlayGuideStep && (b = 0, c = 1);
                    currentScene.newbieGuideLayer && 3 == selectLevel && 1 == heroData.newbieGamePlayGuideStep && (b = 1, c = 0);
                    currentScene.newbieGuideLayer && 4 == selectLevel && 1 == heroData.newbieGamePlayGuideStep && (b = -1, c = 0);
                    a = this.gamePlayFacade.gridData.getGridByGridPoint(this.selectGrid.gridX + b, this.selectGrid.gridY + c);
                    null != a && (!1 == this.isSelectGridCanMove(a) || this.selectGrid.gridType == suctionType && a.gridType == walnutType) && (a = null);
                    if (null != a) {
                        this.isShowClickEffect = !1;
                        b = 1;
                        if (this.selectGrid.gridType == suctionType || a.gridType == suctionType) b = 2;
                        else if (1 <= this.selectGrid.specialType && 3 >= this.selectGrid.specialType || 1 <= a.specialType && 3 >= a.specialType) b = 4;
                        1 <= this.selectGrid.specialType && 3 >= this.selectGrid.specialType && 1 <= a.specialType && 3 >= a.specialType && (b = 3);
                        switch (b) {
                            case 1:
                                this.commonGridcontrol(a);
                                break;
                            case 2:
                                this.selectGrid.gridType != pigType && a.gridType != pigType && this.selectGrid.gridType != timingbone && a.gridType != timingbone && (currentScene.removeNewbieGuideLayer(),
                                    this.gamePlayFacade.useStep(), this.suctionGridcontrol(this.selectGrid, a));
                                break;
                            case 3:
                                currentScene.removeNewbieGuideLayer();
                                this.gamePlayFacade.useStep();
                                this.specialGridDoubleDeleteControl(this.selectGrid, a);
                                break;
                            case 4:
                                currentScene.removeNewbieGuideLayer(), this.gamePlayFacade.useStep(), b = new MoveDeleteSpecialGrid, b.gamePlayFacade = this.gamePlayFacade, b.initMoveDeleteGrid(a, this.selectGrid)
                        }
                    }
                    this.selectGrid = null
                }
            }
        },
        commonGridcontrol: function(a) {
            var b = this.computeGridDeleteBefore(a, this.selectGrid);
            if (0 >= b.length) b = new MoveAndBackGrid, b.gamePlayFacade = this.gamePlayFacade, b.initMoveAndBackGrid(a, this.selectGrid);
            else {
                currentScene.removeNewbieGuideLayer();
                this.gamePlayFacade.useStep();
                var c = new MoveDeleteGrid;
                c.gamePlayFacade = this.gamePlayFacade;
                c.initMoveDeleteGrid(b, a, this.selectGrid)
            }
        },
        suctionGridcontrol: function(a, b) {
            var c = new SuctionGrid;
            c.gamePlayFacade = this.gamePlayFacade;
            c.initMoveDeleteGrid(a, b, !0)
        },
        specialGridDoubleDeleteControl: function(a, b) {
            var c = new SpecialGridDoubleDelete;
            c.gamePlayFacade =
                this.gamePlayFacade;
            c.initMoveDeleteGrid(a, b)
        },
        computeGridDeleteBefore: function(a, b) {
            var c = [],
                d = [];
            0 == b.specialType && (d = this.gamePlayFacade.gridData.getGridListByTypeBefore(b.gridX, b.gridY, a.gridX, a.gridY, b.gridType));
            var e = [];
            0 == a.specialType && (e = this.gamePlayFacade.gridData.getGridListByTypeBefore(a.gridX, a.gridY, b.gridX, b.gridY, a.gridType));
            3 <= d.length && (c = c.concat(d));
            3 <= e.length && (c = c.concat(e));
            return c
        },
        createGrid: function() {
            var a = new CreateGridDown;
            a.gamePlayFacade = this.gamePlayFacade;
            a.initCreateGridDown(this.gamePlayFacade.gridData);
            for (a = 0; a < this.gamePlayFacade.gridData.gridMaxX; a++)
                for (var b = this.gamePlayFacade.gridData.gridMaxY - 1; 0 <= b; b--);
        }
    });
var transitionGamePlayScene = function() {
        var a = StepLoad.getLoadResByLevel(heroData.gameUserData.reachMaxLevel);
        transitions(GamePlayScene, a, LoadScene, function() {
            StepLoad.handleAfterLoad(heroData.gameUserData.reachMaxLevel)
        })
    },
    transitionGameLevelScene = function() {
        var a = g_resources;
        if (StepRes.enterGameLoad) var b = StepLoad.getLoadResByLevel(heroData.gameUserData.reachMaxLevel),
            a = a.concat(b);
        transitions(GameLevelScene, a, gameSDK.getFirstLoadScene(), function() {
            cc.spriteFrameCache.addSpriteFrames(res.petskinplist1_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gridskinplist1_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gridskinplist2_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gridskinplist3_plist);
            cc.spriteFrameCache.addSpriteFrames(res.scaleplist_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gameplayeffect1_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gameplayeffect2_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gameplayeffect3_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gameplayeffect4_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gameplaylayer1_plist);
            cc.spriteFrameCache.addSpriteFrames(res.gameplaylayer2_plist);
            cc.spriteFrameCache.addSpriteFrames(res.publicimg1_plist);
            cc.spriteFrameCache.addSpriteFrames(res.csi1_plist);
            cc.spriteFrameCache.addSpriteFrames(res.csi2_plist);
            multipleAnimation(res.gameplayeffect_json, res.gameplayeffect_json);
            multipleAnimation(res.uieffect_json, res.uieffect_json);
            multipleAnimation(res.noviceeffect_json, res.noviceeffect_json);
            multipleAnimation(res.awardbox_json, res.awardbox_json);
            multipleAnimation(res.pet1_json, res.pet1_json);
            multipleAnimation(res.pettime_json, res.pettime_json);
            createPetSkinData();
            StepRes.enterGameLoad && StepLoad.handleAfterLoad(heroData.gameUserData.reachMaxLevel);
            StepRes.enterGameLoad = !1;
            engine.gameData.createJsonData();
            initAchievementData();
            var a = engine.gameData.dataDic.itemdata,
                b;
            for (b in a) a[b].itemname = wrapStr(a[b].itemname);
            var a = engine.gameData.dataDic.noviceguide,
                e;
            for (e in a) a[e].content = wrapStr(a[e].content);
            e = engine.gameData.dataDic.language;
            for (var f in e) e[f].content = wrapStr(e[f].content)
        })
    },
    wrapStr = function(a) {
        return a = a.replace("\\n", "\n")
    },
    StepRes = {
        enterGameLoad: !0,
        pet4_json: "res/pngdata/pet4/pet4.json",
        gridskinplist4_plist: "res/imglist/gridskin4.plist",
        gridskinplist4_png: "res/imglist/gridskin4.png",
        pet5_json: "res/pngdata/pet5/pet5.json",
        later_load_1_plist: "res/imglist/gridskin_later_load_1.plist",
        later_load_1_png: "res/imglist/gridskin_later_load_1.png",
        pet6_json: "res/pngdata/pet6/pet6.json",
        pet2_json: "res/pngdata/pet2/pet2.json",
        later_load_2_plist: "res/imglist/gridskin_later_load_2.plist",
        later_load_2_png: "res/imglist/gridskin_later_load_2.png",
        pet3_json: "res/pngdata/pet3/pet3.json",
        gridskin_noneed_png: "res/imglist/gridskin_noneed.png",
        gridskin_noneed_plist: "res/imglist/gridskin_noneed.plist",
        later_load_3_png: "res/imglist/gridskin_later_load_3.png",
        later_load_3_plist: "res/imglist/gridskin_later_load_3.plist",
        ui_later_load_1_png: "res/imglist/ui_later_load_1.png",
        ui_later_load_1_plist: "res/imglist/ui_later_load_1.plist",
        signLayer: "res/signlayer.json",
        daymisson: "res/daymisson.json",
        mission_gift_json: "res/pngdata/missiongift/missiongift.json"
    },
    StepLoad = {
        handledOb: {},
        resHandleOb: {
            40: {
                res: [StepRes.later_load_3_plist, StepRes.later_load_3_png],
                handle: function() {
                    cc.spriteFrameCache.addSpriteFrames(StepRes.later_load_3_plist)
                }
            },
            32: {
                res: [StepRes.gridskin_noneed_png, StepRes.gridskin_noneed_plist],
                handle: function() {
                    cc.spriteFrameCache.addSpriteFrames(StepRes.gridskin_noneed_plist)
                }
            },
            21: {
                res: [StepRes.pet6_json],
                handle: function() {
                    multipleAnimation(StepRes.pet6_json, StepRes.pet6_json)
                }
            },
            13: {
                res: [StepRes.pet3_json],
                handle: function() {
                    multipleAnimation(StepRes.pet3_json,
                        StepRes.pet3_json)
                }
            },
            10: {
                res: [StepRes.later_load_2_plist, StepRes.later_load_2_png],
                handle: function() {
                    cc.spriteFrameCache.addSpriteFrames(StepRes.later_load_2_plist)
                }
            },
            9: {
                res: [StepRes.pet2_json, StepRes.mission_gift_json, StepRes.daymisson],
                handle: function() {
                    multipleAnimation(StepRes.pet2_json, StepRes.pet2_json);
                    multipleAnimation(StepRes.mission_gift_json, StepRes.mission_gift_json)
                }
            },
            7: {
                res: [StepRes.ui_later_load_1_png, StepRes.ui_later_load_1_plist, StepRes.signLayer],
                handle: function() {
                    cc.spriteFrameCache.addSpriteFrames(StepRes.ui_later_load_1_plist)
                }
            },
            6: {
                res: [StepRes.pet6_json],
                handle: function() {
                    multipleAnimation(StepRes.pet6_json, StepRes.pet6_json)
                }
            },
            5: {
                res: [StepRes.pet5_json, StepRes.later_load_1_plist, StepRes.later_load_1_png],
                handle: function() {
                    multipleAnimation(StepRes.pet5_json, StepRes.pet5_json);
                    cc.spriteFrameCache.addSpriteFrames(StepRes.later_load_1_plist)
                }
            },
            4: {
                res: [StepRes.gridskinplist4_plist, StepRes.gridskinplist4_png],
                handle: function() {
                    cc.spriteFrameCache.addSpriteFrames(StepRes.gridskinplist4_plist)
                }
            },
            3: {
                res: [StepRes.pet4_json],
                handle: function() {
                    multipleAnimation(StepRes.pet4_json,
                        StepRes.pet4_json)
                }
            }
        },
        getLoadResByLevel: function(a) {
            a += 1;
            debugtest.forceLoadAll && (a = 120);
            var b = [],
                c;
            for (c in StepLoad.resHandleOb) a >= c && (b = b.concat(StepLoad.resHandleOb[c].res));
            return b
        },
        handleAfterLoad: function(a) {
            a += 1;
            debugtest.forceLoadAll && (a = 120);
            for (var b in StepLoad.resHandleOb) a >= b && (StepLoad.resHandleOb[b].handle(), delete StepLoad.resHandleOb[b])
        }
    },
    HideLoad = {
        treeLoadOver: !1,
        tree_plist: "res/imglist/treeeffect.plist",
        tree_png: "res/imglist/treeeffect.png",
        tree_effect_json: "res/pngdata/tree/tree.json",
        step_over_json: "res/pngdata/stepoveralert/stepoveralert.json",
        loadTree: function(a, b) {
            b = b || 0;
            if (!(3 <= b)) {
                var c = this;
                setTimeout(function() {
                    cc.loader.load([HideLoad.tree_png, HideLoad.tree_plist, HideLoad.tree_effect_json, HideLoad.step_over_json], function(a) {}, function(d) {
                        null == d ? (cc.spriteFrameCache.addSpriteFrames(HideLoad.tree_plist), multipleAnimation(HideLoad.tree_effect_json, HideLoad.tree_effect_json), multipleAnimation(HideLoad.step_over_json, HideLoad.step_over_json), HideLoad.treeLoadOver = !0, debugtest.stopHideLoad ||
                            HideLoad.loadLastSource(), a && a()) : c.loadTree(a, ++b)
                    })
                }, 2E3)
            }
        },
        hideLoadArr: ["res/uibglayer/bj1.png", "res/uibglayer/bj2.png", "res/pngdata/gameendflyeffect/a_5.png", "res/pngdata/gameendflyeffect/toumingxx_0.png", StepRes.pet4_json, StepRes.gridskinplist4_plist, StepRes.gridskinplist4_png, StepRes.pet5_json, StepRes.later_load_1_plist, StepRes.later_load_1_png, StepRes.pet6_json, StepRes.ui_later_load_1_png, StepRes.ui_later_load_1_plist, StepRes.pet2_json, StepRes.later_load_2_plist, StepRes.later_load_2_png, StepRes.pet3_json,
            StepRes.later_load_3_plist, StepRes.later_load_3_png
        ],
        loadLastSource: function() {
            var a = [this.hideLoadArr.shift()];
            cc.loader.load(a, function() {}, function() {
                setTimeout(function() {
                    0 < HideLoad.hideLoadArr.length && HideLoad.loadLastSource()
                }, 100)
            })
        }
    };
var createPetStart = function(a, b, c, d, e, f) {
        for (var g = [], h = 0; h < a; h++) {
            var k = new cc.Sprite;
            k.setSpriteFrame("pet/petstart.png");
            k.setScale(f);
            d.addChild(k);
            g.push(k)
        }
        a = {};
        a.spArr = g;
        a.spWidth = b;
        a.p = c;
        a.settingType = centerSetting;
        engine.gameTool.gameSpSettingFun(a);
        g.sort(function(a, b) {
            return a.x > b.x ? 1 : -1
        });
        for (h = 0; h < g.length; h++) g[h].setTag(e + h)
    },
    showStart = function(a, b, c) {
        var d = cc.scaleTo(0.1, 0.3),
            e = cc.scaleTo(0.1, 1.1),
            f = cc.scaleTo(0.2, 1),
            d = cc.sequence(d, e, f);
        null != a.getChildByTag(c + 2) && (e = cc.delayTime(0.6),
            f = a.getChildByTag(c + 2), null != b ? (f.runAction(cc.sequence(e, d.clone(), b)), b = null) : f.runAction(cc.sequence(e, d.clone())));
        null != a.getChildByTag(c + 1) && (e = cc.delayTime(0.3), f = a.getChildByTag(c + 1), null != b ? (f.runAction(cc.sequence(e, d.clone(), b)), b = null) : f.runAction(cc.sequence(e, d.clone())));
        null != a.getChildByTag(c) && (f = a.getChildByTag(c), null != b ? f.runAction(cc.sequence(d.clone(), b)) : f.runAction(d.clone()))
    },
    showUIFadeIn = function(a, b, c) {
        if (null != a) {
            var d;
            null != b && 0 != b && (d = cc.delayTime(b));
            b = cc.scaleTo(0.15,
                1);
            var e = cc.fadeIn(0.15);
            b = cc.spawn(b, e);
            var e = cc.moveTo(0.2, cc.p(a.x, a.y - 3)),
                f = cc.moveTo(0.2, cc.p(a.x, a.y + 3));
            null != c ? null != d ? a.runAction(cc.sequence(d, b, e, f, c)) : a.runAction(cc.sequence(b, e, f, c)) : null != d ? a.runAction(cc.sequence(d, b, e, f)) : a.runAction(cc.sequence(b, e, f))
        }
    },
    showUIFadeOut = function(a, b, c) {
        if (null != a) {
            var d;
            null != b && 0 != b && (d = cc.delayTime(b));
            b = cc.fadeOut(0.3);
            var e = cc.moveTo(0.3, cc.p(a.x, a.y + 10));
            b = cc.spawn(b, e);
            null != c ? null != d ? a.runAction(cc.sequence(d, b, c)) : a.runAction(cc.sequence(b,
                c)) : null != d ? a.runAction(cc.sequence(d, b)) : a.runAction(cc.sequence(b))
        }
    },
    inSceneByRight = function(a, b, c, d) {
        if (null != a) {
            a.setVisible(!0);
            var e;
            0 != b && (e = cc.delayTime(b));
            b = cc.moveTo(0.15, cc.p(d - 20, a.y));
            d = cc.moveTo(0.15, cc.p(d, a.y));
            null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
        }
    },
    inSceneByLeft = function(a, b, c, d) {
        if (null != a) {
            a.setVisible(!0);
            var e;
            0 != b && (e = cc.delayTime(b));
            b = cc.moveTo(0.2, cc.p(d + 20,
                a.y));
            d = cc.moveTo(0.2, cc.p(d, a.y));
            null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
        }
    },
    outSceneByRight = function(a, b, c, d) {
        if (null != a) {
            a.setVisible(!0);
            var e;
            0 != b && (e = cc.delayTime(b));
            b = cc.moveTo(0.1, cc.p(a.x - 20, a.y));
            d = cc.moveTo(0.1, cc.p(d, a.y));
            null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
        }
    },
    outSceneByLeft = function(a, b, c, d) {
        if (null != a) {
            a.setVisible(!0);
            var e;
            0 != b && (e = cc.delayTime(b));
            b = cc.moveTo(0.2, cc.p(a.x + 20, a.y));
            d = cc.moveTo(0.2, cc.p(d, a.y));
            null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
        }
    },
    inSceneByTop = function(a, b, c, d) {
        if (null != a) {
            a.setVisible(!0);
            var e;
            0 != b && (e = cc.delayTime(b));
            b = cc.moveTo(0.2, cc.p(a.x, d - 20));
            var f = cc.moveTo(0.2, cc.p(a.x, d + 10));
            d = cc.moveTo(0.2, cc.p(a.x, d));
            null !=
                e ? null != c ? a.runAction(cc.sequence(e, b, f, d, c)) : a.runAction(cc.sequence(e, b, f, d)) : null != c ? a.runAction(cc.sequence(b, f, d, c)) : a.runAction(cc.sequence(b, f, d))
        }
    },
    inSceneByBottom = function(a, b, c, d) {
        if (null != a) {
            a.setVisible(!0);
            var e;
            0 != b && (e = cc.delayTime(b));
            b = cc.moveTo(0.2, cc.p(a.x, d + 20));
            var f = cc.moveTo(0.2, cc.p(a.x, d - 10));
            d = cc.moveTo(0.2, cc.p(a.x, d));
            null != e ? null != c ? a.runAction(cc.sequence(e, b, f, d, c)) : a.runAction(cc.sequence(e, b, f, d)) : null != c ? a.runAction(cc.sequence(b, f, d, c)) : a.runAction(cc.sequence(b,
                f, d))
        }
    },
    outSceneByBottom = function(a, b, c, d) {
        if (null != a) {
            a.setVisible(!0);
            var e;
            0 != b && (e = cc.delayTime(b));
            b = cc.moveTo(0.2, cc.p(a.x, a.y + 20));
            d = cc.moveTo(0.2, cc.p(a.x, d));
            null != e ? null != c ? a.runAction(cc.sequence(e, b, d)) : a.runAction(cc.sequence(e, b, d, c)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
        }
    },
    inSceneByScale = function(a, b, c) {
        if (null != a) {
            a.setScaleY(0);
            var d;
            0 != b && (d = cc.delayTime(b));
            b = cc.scaleTo(0.1, 1, 1.3);
            var e = cc.scaleTo(0.1, 1, 0.9),
                f = cc.scaleTo(0.1, 1, 1);
            null != d ? null != c ?
                a.runAction(cc.sequence(d, b, e, f, c)) : a.runAction(cc.sequence(d, b, e, f)) : null != c ? a.runAction(cc.sequence(b, e, f, c)) : a.runAction(cc.sequence(b, e, f))
        }
    },
    growthTextNum = function(a, b, c, d, e) {
        a.setString(b.toString());
        a.nowNum = b;
        a.scheduleUpdate();
        var f = parseInt((c - b) / d);
        1 > f && (f = 1);
        a.update = function() {
            a.nowNum += f;
            a.nowNum >= c && (a.unscheduleUpdate(), a.nowNum = c, null != e && e());
            a.setString(a.nowNum.toString())
        }
    },
    removeUIByTag = function(a, b) {
        null != a.getChildByTag(b) && a.removeChildByTag(b)
    };
var PxinAppSdkStrengthshopLayer = cc.Layer.extend({
        mainUI: null,
        gamePlayFacade: null,
        btnClose: null,
        parentUI: null,
        initialize: function() {
            this.mainUI = engine.gameCocosStudio.loadCSS(res.pxinappsdkstrengthshoplayer, !1);
            this.mainUI.x = 320;
            this.mainUI.y = 528;
            this.mainUI.setAnchorPoint(cc.p(0.5, 0.5));
            this.addChild(this.mainUI);
            this.mainUI.setScale(0.5);
            this.mainUI.setOpacity(0.5);
            var a = cc.scaleTo(0.1, 1.1),
                b = cc.scaleTo(0.1, 1),
                c = cc.fadeIn(0.2),
                a = cc.sequence(a, b),
                c = cc.spawn(a, c);
            this.mainUI.runAction(c);
            c = new cc.Sprite;
            c.setSpriteFrame("publicimg/4.png");
            c.x = 68;
            c.y = 950;
            this.btnClose = c;
            this.addChild(this.btnClose);
            engine.gameEvent.createMouseUp(this.btnClose, this.close, buttonScalingType);
            c = getRefillAllLivesGemPrice();
            a = getUnlimitedLivesPrice();
            this.mainUI.iteminfo1.txtcurrency_df.setString(engine.gameData.dataDic.language[122].content);
            this.mainUI.iteminfo1.btnbuy.isGem = !0;
            this.mainUI.iteminfo1.btnbuy.txtprice_df.setVisible(!1);
            this.mainUI.iteminfo1.btnbuy.txtgem_df.setString(c);
            this.mainUI.iteminfo2.txtcurrency_df.setString(engine.gameData.dataDic.language[123].content +
                (addTimeShowUnlimitedLives / 6E4).toString() + engine.gameData.dataDic.language[128].content);
            a = getUnlimitedLivesPrice();
            this.mainUI.iteminfo2.btnbuy.txtprice_df.setString(a.toString());
            !1 == isShowBuyRefillAllLivesShop() ? this.mainUI.iteminfo1.setVisible(!1) : engine.gameEvent.createMouseUp(this.mainUI.iteminfo1.btnbuy, this.paymentAllLives, buttonScalingType);
            !1 == isShowBuyUnlimiteLivesShop() ? this.mainUI.iteminfo2.setVisible(!1) : (!1 == this.mainUI.iteminfo1.visible && (this.mainUI.iteminfo2.y += 100), engine.gameEvent.createMouseUp(this.mainUI.iteminfo2.btnbuy,
                this.paymentUnlimitedLives, buttonScalingType))
        },
        close: function(a, b) {
            closePxinAppSdkStrengthshopLayer()
        },
        paymentAllLives: function(a, b) {
            if (!0 == this.isGem) {
                var c = getRefillAllLivesGemPrice();
                heroData.getGem() < c ? addBuyGemUI() : heroData.getGem() >= c && (heroData.updateGem(-c), heroData.addStrength(iniStrengthCount), saveHeroData(), currentScene.refresh(), closePxinAppSdkStrengthshopLayer())
            }
        },
        paymentUnlimitedLives: function(a, b) {
            var c = getUnlimitedLivesPrice();
            heroData.getGem() < c ? addBuyGemUI() : heroData.getGem() >=
                c && (heroData.updateGem(-c), heroData.addUesStrengthTime(addTimeShowUnlimitedLives), saveHeroData(), currentScene.refresh(), closePxinAppSdkStrengthshopLayer())
        }
    }),
    getRefillAllLivesGemPrice = function() {
        return 100
    },
    getUnlimitedLivesPrice = function() {
        return 500
    },
    isShowBuyRefillAllLivesShop = function() {
        return !1 == isExistStrength || heroData.getStrength() >= iniStrengthCount || !0 == heroData.isUnlimiteLives() ? !1 : !0
    },
    isShowBuyUnlimiteLivesShop = function() {
        return !1 == isExistStrength || !1 == isShowUnlimitedLives || !0 == heroData.isUnlimiteLives() ?
            !1 : !0
    },
    addPxinAppSdkStrengthshopLayer = function() {
        null == currentScene.pxinAppSdkStrengthshopLayer && (currentScene.pxinAppSdkStrengthshopLayer = new PxinAppSdkStrengthshopLayer, currentScene.pxinAppSdkStrengthshopLayer.parentUI = currentScene, createMaskLayer(currentScene.pxinAppSdkStrengthshopLayer), currentScene.addChild(currentScene.pxinAppSdkStrengthshopLayer, maxZindex), currentScene.pxinAppSdkStrengthshopLayer.initialize())
    },
    closePxinAppSdkStrengthshopLayer = function() {
        null != currentScene.pxinAppSdkStrengthshopLayer &&
            (currentScene.pxinAppSdkStrengthshopLayer.removeFromParent(), currentScene.pxinAppSdkStrengthshopLayer = null)
    },
    addCNStrengthShopLayer = function() {
        null == currentScene.cnStrengthShopLayer && (currentScene.cnStrengthShopLayer = new CNStrengthShopLayer, currentScene.cnStrengthShopLayer.parentUI = currentScene, createMaskLayer(currentScene.cnStrengthShopLayer), currentScene.addChild(currentScene.cnStrengthShopLayer, maxZindex - 1E4))
    },
    closeCNStrengthShopLayer = function() {
        null != currentScene.cnStrengthShopLayer && (currentScene.cnStrengthShopLayer.removeFromParent(),
            currentScene.cnStrengthShopLayer = null)
    },
    CNStrengthShopLayer = cc.Layer.extend({
        ctor: function() {
            this._super()
        },
        onEnter: function() {
            this._super();
            this.initialize()
        },
        initialize: function() {
            this.mainUI = engine.gameCocosStudio.loadCSS(res.strengthlayer, !1);
            this.mainUI.show_diamond.visible = !1;
            this.mainUI.info_txt.setString("Add 2 lifes");
            this.addChild(this.mainUI);
            engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.close, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.btn_ad, this.seeAdGet.bind(this),
                buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.btn_invite, this.invite.bind(this), buttonScalingType)
        },
        seeAdGet: function() {
            if (3 > heroData.gameUserData.powerByView) {
                var a = this;
                gameSDK.showRewardVideoAd(rewardedVideoID3, function() {
                    a.close();
                    var b = new cc.Sprite("#gameselectlayer/t2.png");
                    currentScene.addChild(b, 99999);
                    b.setPosition(310, 680);
                    b.runAction(cc.sequence(cc.moveTo(1, 455, 1100), cc.fadeOut(0.2), cc.callFunc(function() {
                        heroData.buyStrength(2);
                        heroData.gameUserData.powerByView++;
                        heroData.watchNum +=
                            1;
                        saveHeroData();
                        b.removeFromParent()
                    })))
                })
            } else cc.log("每天只能领取3次"), this.addChild(new PlayADFailLayer(228), 999999)
        },
        invite: function() {
            if (3 > heroData.gameUserData.powerByView) {
                var a = this;
                gameSDK.sendFaceBookFriend(function() {
                    gameSDK.logEvent("liveinvite", 1, {
                        liveinvite: "liveinvite"
                    });
                    a.close();
                    var b = new cc.Sprite("#gameselectlayer/t2.png");
                    currentScene.addChild(b, 99999);
                    b.setPosition(310, 680);
                    b.runAction(cc.sequence(cc.moveTo(1, 455, 1100), cc.fadeOut(0.2), cc.callFunc(function() {
                        myGameTool.logEvent("get2StrInvite");
                        heroData.buyStrength(2);
                        heroData.gameUserData.powerByView++;
                        heroData.watchNum += 1;
                        saveHeroData();
                        b.removeFromParent()
                    })))
                })
            } else cc.log("每天只能领取3次"), this.addChild(new PlayADFailLayer(228), 999999)
        },
        close: function(a, b) {
            closeCNStrengthShopLayer()
        }
    }),
    ADaddDiamondLayer = cc.Layer.extend({
        ctor: function() {
            this._super()
        },
        onEnter: function() {
            this._super();
            this.initialize()
        },
        initialize: function() {
            this.mainUI = engine.gameCocosStudio.loadCSS(res.diamondayer, !1);
            this.mainUI.info_txt.setString("Add 50 diamonds");
            this.addChild(this.mainUI);
            engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.close, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.btn_ad, this.seeAdGet.bind(this), buttonScalingType)
        },
        seeAdGet: function() {
            3 > heroData.gameUserData.dayDiamond ? gameSDK.showRewardVideoAd(rewardedVideoID5, function() {
                heroData.updateGem(50);
                heroData.gameUserData.dayDiamond++;
                currentScene.refresh();
                heroData.watchNum += 1;
                saveHeroData()
            }) : this.addChild(new PlayADFailLayer(228), 999999)
        },
        close: function(a, b) {
            closeCNStrengthShopLayer()
        }
    });
var NoviceLayer = cc.Layer.extend({
    waterList: null,
    onEnter: function() {
        this._super()
    },
    init: function(a) {
        this.waterList = [];
        this.waterList[0] = [];
        this.waterList[1] = [];
        cc.log("播放动画", a);
        this["createNovice" + a]();
        this.setPosition(17, 275)
    },
    createNovice18: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice18", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            35 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice17: function() {
        var a =
            createGameAnimation(res.noviceeffect_json, "novice17", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        a.updateCheck = function() {};
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice15: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice15", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 == a.frameIndex && b.createGridDispose(a);
            37 == a.frameIndex && b.createGridLaserEffect(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice14: function() {
        var a = createGameAnimation(res.noviceeffect_json,
            "novice14", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice13: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice13", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice12: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice12", 55);
        a.x = 300;
        a.y =
            400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice11: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice11", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice10: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice10", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b =
            this;
        a.updateCheck = function() {
            40 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice9: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice9", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            37 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice8: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice8", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 ==
                a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice7: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice7", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice6: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice6", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            41 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice5: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice5", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            43 == a.frameIndex && b.createGridLinecolumneffect(a);
            43 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice4: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice4", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            35 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice3: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice3", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.updateCheck = function() {
            50 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice2: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice2", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.update = function() {
            51 == a.frameIndex && b.createGridDispose(a);
            112 == a.frameIndex && b.createGridLinecolumneffect(a);
            112 == a.frameIndex && b.createGridDispose(a);
            a.playFrame()
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    createNovice1: function() {
        var a = createGameAnimation(res.noviceeffect_json, "novice1", 55);
        a.x = 300;
        a.y = 400;
        a.playCount = -1;
        var b = this;
        a.update = function() {
            a.playFrame();
            45 == a.frameIndex && b.createGridDispose(a)
        };
        this.addInitEffect(a);
        this.addChild(a)
    },
    addInitEffect: function(a) {
        for (var b = a.frameBitmapList, c = 0; c < b.length; c++) {
            var d = b[c],
                e = d.url.split("/"),
                e = e[e.length - 1];
            if (-1 != e.indexOf("grid") && -1 == e.indexOf("grideffect1") &&
                -1 == e.indexOf("gridrow") && -1 == e.indexOf("gridall") && -1 == e.indexOf("gridgem3")) {
                var f = e.split(".")[0],
                    g = f.substring(4, f.length);
                (f = skeletalAnimation["gridskin|grid" + g.toString()]) || cc.error("data");
                f.folderName = "pngdata/gridskin";
                var h = new GameAnimation;
                this.createGridUpate(h, a);
                h.initialize(f);
                h.setFrameIntervalTime(20);
                h.gotoAndStop(0);
                7 == g && (f = skeletalAnimation["gridskin|grid7effect"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f), g.oop = 1, g.fromFrameIndexToPlayFrameIndex(0,
                    9), this.createMCVisible(g, a, d), g.setFrameIntervalTime(17), h.addChild(g, -1), h.zIndex = 9999);
                d.addChild(h)
            } - 1 < e.indexOf("finger") && d.setSpriteFrame("pngdata/gameplayeffect/finger.png"); - 1 < e.indexOf("gridrow") && (f = e.split(".")[0], g = f.substring(7, f.length), f = skeletalAnimation["gridskin|grid" + g.toString()], f.folderName = "pngdata/gridskin", h = new GameAnimation, this.createMCVisible(h, a, d), h.initialize(f), h.setFrameIntervalTime(13), h.fromFrameIndexToPlayFrameIndex(47, 62), d.addChild(h)); - 1 < e.indexOf("gridall") &&
                (f = e.split(".")[0], g = f.substring(7, f.length), f = skeletalAnimation["gridskin|grid" + g.toString()], f.folderName = "pngdata/gridskin", h = new GameAnimation, this.createGridUpate(h, a), h.initialize(f), h.setFrameIntervalTime(15), h.fromFrameIndexToPlayFrameIndex(63, 78), d.addChild(h)); - 1 < e.indexOf("iceicon") && (e.split("."), g = "13", f = skeletalAnimation["gridskin|grid" + g.toString()], f.folderName = "pngdata/gridskin", h = new GameAnimation, this.createGridUpate(h, a), h.initialize(f), d.addChild(h)); - 1 < e.indexOf("grassicon") &&
                (f = skeletalAnimation["gridskin|grass"], f.folderName = "pngdata/gridskin", h = new GameAnimation, h.initialize(f), h.setFrameIntervalTime(50), h.playCount = 1, this.createGridUpate(h, a), d.addChild(h)); - 1 < e.indexOf("sakuraicon") && (f = new cc.Sprite("#pngdata/gridskin/cherryblossomsupeffect028.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("sakuraeffect") && (f = new cc.Sprite("#pngdata/gridskin/cherryblossomsupeffect040.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("colourseggicon") &&
                (f = new cc.Sprite("#pngdata/gridskin/egg1effect007.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("colourseggeffect") && (f = new cc.Sprite("#pngdata/gridskin/egg1effect018.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("goldeggicon") && (f = new cc.Sprite("#pngdata/gridskin/egg2effect007.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("goldeggeffect") && (f = new cc.Sprite("#pngdata/gridskin/egg2effect018.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("novicewater") &&
                (f = new cc.Sprite("#gameplaylayer/water.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("snowicon") && (f = new cc.Sprite("#pngdata/gridskin/iceaddgrid.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("blistersicon") && (f = new cc.Sprite("#pngdata/gridskin/blisters.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("lasergun") && (f = new cc.Sprite("#pngdata/gridskin/grid17png0013.png"), f.scaleY = -1, this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("novicewall") && (f =
                new cc.Sprite("#pngdata/gridskin/grid18png0001.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("novicedogpen") && (f = new cc.Sprite("#gameplaylayer/dogpen.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("novicecloud") && (f = new cc.Sprite("#pngdata/gridcloud/cloud0001.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("noviceclouddisapear") && (f = new cc.Sprite("#pngdata/gridcloud/cloud0037.png"), this.createSpriteUpate(f, a), d.addChild(f)); - 1 < e.indexOf("watericon") && (f =
                skeletalAnimation["gridskin|waves"], f.folderName = "pngdata/gridskin", h = new GameAnimation, 1 == this.waterList[0].length % 2 && h.setScaleX(-1), h.initialize(f), this.createGridUpate(h, a), h.setFrameIntervalTime(20), d.addChild(h), this.waterList[0].push(h)); - 1 < e.indexOf("gridgem3") && (f = e.split(".")[0], g = f.substring(7, f.length), f = skeletalAnimation["gridskin|grid" + g.toString()], f.folderName = "pngdata/gridskin", h = new GameAnimation, this.createGridUpate(h, a), h.initialize(f), h.setFrameIntervalTime(20), h.gotoAndStop(0),
                d.addChild(h), f = skeletalAnimation["gridskin|gem"], f.folderName = "pngdata/gridskin", g = new GameAnimation, this.createMCVisible(g, a, d), g.initialize(f), g.setFrameIntervalTime(17), g.x = 0, g.y = 25, h.addChild(g)); - 1 < e.indexOf("gem") && (f = skeletalAnimation["gridskin|gem"], f.folderName = "pngdata/gridskin", g = new GameAnimation, this.createMCVisible(g, a, d), g.initialize(f), g.setFrameIntervalTime(17), g.x = 0, g.y = 25, d.addChild(g))
        }
    },
    createSpriteUpate: function(a, b) {
        a.scheduleUpdate();
        a.update = function(c) {
            b.frameIndex < a.parent.imgeData.length &&
                (a.opacity = a.parent.imgeData[b.frameIndex].opacity)
        }
    },
    createGridUpate: function(a, b) {
        a.update = function(c) {
            b.frameIndex < a.parent.imgeData.length && (a.animationSprite.opacity = a.parent.imgeData[b.frameIndex].opacity);
            a.playFrame()
        }
    },
    createGridDispose: function(a) {
        for (var b = a.frameBitmapList, c = 0; c < b.length; c++) {
            var d = b[c],
                e = d.url.split("/"),
                e = e[e.length - 1];
            if (-1 < e.indexOf("grideffect1")) {
                var f = skeletalAnimation["gridskin|gridbroken"];
                f.folderName = "pngdata/playeffect";
                var g = new GameAnimation;
                g.initialize(f);
                g.isRemoveFromComplete = !0;
                g.playCount = 1;
                g.setPosition(d.getPosition());
                a.addChild(g);
                0 == d.opacity && g.setVisible(!1);
                this.createMCVisible(g, a, null)
            } - 1 < e.indexOf("iceeffect") && (f = skeletalAnimation["gridskin|ice1effect"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f), g.isRemoveFromComplete = !0, g.playCount = 1, this.createMCVisible(g, a, null), d.addChild(g)); - 1 < e.indexOf("snoweffect") && (f = skeletalAnimation["gridskin|addiceeffect"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f),
                g.isRemoveFromComplete = !0, g.playCount = 1, this.createMCVisible(g, a, null), d.addChild(g)); - 1 < e.indexOf("grasseffect") && (f = skeletalAnimation["gridskin|grass"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f), g.isRemoveFromComplete = !0, g.playCount = 1, this.createMCVisible(g, a, null), d.addChild(g)); - 1 < e.indexOf("sakuraicon") && (f = skeletalAnimation["gridskin|cherryblossomsupeffect"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f), g.isRemoveFromComplete = !0, g.playCount = 1, g.fromFrameIndexToPlayFrameIndex(28,
                39), this.createMCVisible(g, a, null), d.addChild(g)); - 1 < e.indexOf("colourseggeffect") && (f = skeletalAnimation["gridskin|egg1effect"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f), g.isRemoveFromComplete = !0, g.playCount = 1, g.fromFrameIndexToPlayFrameIndex(7, 18), this.createMCVisible(g, a, null), d.addChild(g)); - 1 < e.indexOf("goldeggeffect") && (f = skeletalAnimation["gridskin|egg2effect"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f), g.isRemoveFromComplete = !0, g.playCount =
                1, g.fromFrameIndexToPlayFrameIndex(7, 18), this.createMCVisible(g, a, null), d.addChild(g)); - 1 < e.indexOf("blisterseffect") && (f = skeletalAnimation["gridskin|blisters"], f.folderName = "pngdata/gridskin", g = new GameAnimation, g.initialize(f), g.playCount = 1, g.isRemoveFromComplete = !0, this.createMCVisible(g, a, null), d.addChild(g)); - 1 < e.indexOf("watericon") && (f = new cc.Sprite("#gameplaylayer/water.png"), this.createSpriteUpate(f, a), d.addChild(f), this.waterList[1].push(f));
            if (-1 < e.indexOf("watereffect")) {
                f = skeletalAnimation["gridskin|wavesup"];
                f.folderName = "pngdata/gridskin";
                g = new GameAnimation;
                g.initialize(f);
                g.playCount = 1;
                g.isRemoveFromComplete = !0;
                g.y = -15;
                var h = this;
                g.frameCompleteFun = function() {
                    for (var a = 0; a < h.waterList[1].length; a++) h.waterList[1][a].removeFromParent();
                    h.waterList[1] = []
                };
                this.createMCVisible(g, a, null);
                d.addChild(g)
            }
        }
    },
    createMCVisible: function(a, b, c) {
        null == c && (c = a.parent);
        a.update = function(d) {
            a.playFrame();
            null != c && b.frameIndex < b.frameMaxIndex && (0 == c.opacity ? a.setVisible(!1) : a.setVisible(!0))
        }
    },
    createGridLaserEffect: function(a) {
        var b =
            createGameAnimation(res.gameplayeffect_json, "lasereffect", 30);
        b.isRemoveFromComplete = !0;
        b.playCount = 1;
        b.x = a.x;
        b.y = a.y - 20;
        this.addChild(b)
    },
    createGridLinecolumneffect: function(a) {
        for (var b = a.frameBitmapList, c = 0; c < b.length; c++) {
            var d = b[c],
                e = d.url.split("/"),
                e = e[e.length - 1];
            if (-1 < e.indexOf("roweffect")) {
                var f = createGameAnimation(res.gameplayeffect_json, "rainbow", 30);
                f.setPosition(d.getPosition());
                f.isRemoveFromComplete = !0;
                f.playCount = 1;
                cc._renderType == cc.game.RENDER_TYPE_WEBGL && f.setBlendFunc(cc.ONE,
                    cc.ONE);
                a.addChild(f, 100);
                this.createMCVisible(f, a, null)
            } - 1 < e.indexOf("columneffect") && (f = createGameAnimation(res.gameplayeffect_json, "rainbow", 30), f.setPosition(d.getPosition()), f.isRemoveFromComplete = !0, f.playCount = 1, f.setBlendFunc(cc.ONE, cc.ONE), a.addChild(f, 100), f.setRotation(90), this.createMCVisible(f, a, null))
        }
    }
});
var newbieGuideLayerGameSelectType = 1,
    newbieGuideLayerGameLevelSceneType = 2,
    newbieLevelDetailsLayer1Type = 3,
    newbieSelectUseItemLayer1Type = 4,
    newbieCommonLevelPlayGameType = 5,
    newbieGamePetLayerType = 6,
    newbieIncubationPetLayerType = 7,
    newbieIncubationPetLayerCloseType = 8,
    newbieIncubationPetLayerCloseBackPetLayerType = 9,
    newbiePetLayerOpenSelectPetType = 10,
    newbieSelectPetType = 11,
    newbieOpenUpPetLayerType = 12,
    newbieSelectePetCardLayerType = 13,
    newbieUseSelectePetCardLayerType = 14,
    newbieBackTOMainUIType = 15,
    newbiePetUpTOMainUIType =
    16,
    newbieGuideLayerGameSelectType2 = 17,
    NewbieGuideLayer = cc.Layer.extend({
        talkIndex: null,
        talkList: null,
        talkValue: null,
        isClick: null,
        isClickTalkShowNewbieGuideLayer: null,
        createNewbieGuideLayer: function(a) {
            var b = heroData.getNewbieGuide().toString() + "_" + heroData.newbieUIGuideStep.toString(),
                c = newbieGuideLayerUIMask[b];
            if (null == c) return null;
            this.isClick = !1;
            this.talkList = [];
            this.talkIndex = 0;
            this.isClickTalkShowNewbieGuideLayer = !1;
            switch (a.uiType) {
                case newbieGuideLayerGameSelectType2:
                    if ("4_1" == b) return this.addFinger(c),
                        this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieGuideLayerGameSelectType:
                    if ("1_1" == b || "3_1" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieGuideLayerGameLevelSceneType:
                    if ("1_2" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieLevelDetailsLayer1Type:
                    if ("1_3" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieBackTOMainUIType:
                    if ("2_1" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c),
                        this;
                    break;
                case newbieGamePetLayerType:
                    if ("3_2" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieIncubationPetLayerType:
                    if ("3_3" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieIncubationPetLayerCloseType:
                    if ("3_4" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieIncubationPetLayerCloseBackPetLayerType:
                    if ("3_5" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbiePetLayerOpenSelectPetType:
                    if ("3_6" ==
                        b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieSelectPetType:
                    if ("3_7" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieOpenUpPetLayerType:
                    if ("3_8" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieSelectePetCardLayerType:
                    if ("3_9" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this;
                    break;
                case newbieUseSelectePetCardLayerType:
                    if ("3_10" == b) return this.addFinger(c), this.createMask(c),
                        this.addTalk(c), this;
                    break;
                case newbiePetUpTOMainUIType:
                    if ("3_11" == b) return this.addFinger(c), this.createMask(c), this.addTalk(c), this
            }
        },
        createMask: function(a) {
            this.isClickTalkShowNewbieGuideLayer = a.isClickTalkShowNewbieGuideLayer;
            if (!0 == a.isClick) {
                for (var b = 0; b < a.rectList.length; b++) {
                    var c = a.rectList[b],
                        d = new cc.DrawNode;
                    d.drawRect(cc.p(0, 0), cc.p(c.width, c.height), cc.color(0, 0, 0, 90), 0, cc.color(0, 0, 0, 0));
                    var e = new cc.Sprite;
                    e.addChild(d);
                    e.x = c.x;
                    e.y = c.y;
                    this.addChild(e)
                }
                if (null != a.transparentRectList)
                    for (b =
                        0; b < a.transparentRectList.length; b++) c = a.transparentRectList[b], d = new cc.DrawNode, d.drawRect(cc.p(0, 0), cc.p(c.width, c.height), cc.color(0, 0, 0, 1), 0, cc.color(0, 0, 0, 0)), e = new cc.Sprite, e.addChild(d), e.x = c.x, e.y = c.y, this.addChild(e);
                this.isClick = !0;
                var f = this;
                engine.gameEvent.createMouseUp(this, function() {
                    f.showTalk()
                }, null, cc.rect(0, 0, gameWidth, gameHeigh))
            } else this.isClick = !1, createMaskRectLayer(this, a.rectList, a.transparentRectList)
        },
        createGamePlayerNewbieGuideLayer: function(a, b) {
            var c = newbieGuideLayerUIMask["level_" +
                a.toString() + "_" + b.toString()];
            if (null == c) return null;
            this.talkList = [];
            this.talkIndex = 0;
            this.createMask(c);
            this.addFinger(c);
            this.addTalk(c);
            return this
        },
        addFinger: function(a) {
            if (null != a.fingername) {
                var b = createGameAnimation(res.gameplayeffect_json, a.fingername, 30);
                b.x = a.fingerpoint.x;
                b.y = a.fingerpoint.y;
                this.addChild(b)
            }
        },
        addTalk: function(a) {
            if (null != a.talk) {
                this.talkList = a.talk;
                var b = new cc.Sprite;
                b.setSpriteFrame("gameplaylayer/newbieguidelayer.png");
                this.addChild(b);
                b.x = 420;
                b.y = a.talkY;
                this.talkValue =
                    new cc.LabelTTF("", defaultTxt, 24, cc.size(350, 205));
                this.talkValue.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
                this.talkValue.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
                this.talkValue.x = 220;
                this.talkValue.y = 126;
                this.talkValue.setColor(cc.color(120, 51, 58));
                b.addChild(this.talkValue);
                b = createGameAnimation(res.pettime_json, "pettime_2", 24);
                b.y = a.talkY - 60;
                b.x = 140;
                this.addChild(b);
                this.showTalk();
                if (1 < this.talkList.length) {
                    var c = this;
                    engine.gameEvent.createMouseDown(this, function() {
                            c.showTalk()
                        },
                        null, cc.rect(0, 0, gameWidth, gameHeigh))
                }
            }
        },
        showTalk: function() {
            this.talkIndex > this.talkList.length - 1 ? (cc.eventManager.removeListener(this.uiListener), currentScene.removeNewbieGuideLayer(), this.isClickTalkShowNewbieGuideLayer && currentScene.addNewbieGuideLayer()) : (this.talkValue.setString(engine.gameData.dataDic.noviceguide[this.talkList[this.talkIndex]].content.toString()), this.talkIndex++)
        }
    });
var GameWaterLayer = cc.Layer.extend({
    waterLayerNum: 0,
    toWaterLayerNum: 0,
    waterList: null,
    isWavesUp: null,
    gridData: null,
    initWaterLayerByCount: function(a, b, c) {
        if (0 != a) {
            this.isWavesUp = !1;
            this.gridData = b;
            this.waterList = [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ];
            for (var d = 0; d < tileMapGridMaxY; d++)
                for (var e = !1, f = 0; f < tileMapGridMaxX; f++) {
                    if (b.gridArr[f][d].gridType != nullGrid) {
                        var g = new cc.Sprite;
                        g.setSpriteFrame("gameplaylayer/water.png");
                        e = b.getGridPointByScenePoint(f, d);
                        g.x = e.x;
                        g.y = e.y;
                        g.setVisible(!1);
                        this.addChild(g);
                        this.waterList[d].push(g);
                        e = !0
                    } else this.waterList[d].push(null);
                    !1 == e && (c.noWaterLine = "*" + (d + 1).toString() + "*")
                }
            for (f = 0; f < tileMapGridMaxX; f++) d = skeletalAnimation["gridskin|waves"], d.folderName = "pngdata/gridskin", c = new GameAnimation, e = b.getGridPointByScenePoint(f, 9), c.x = e.x, 0 == f % 2 && c.setScaleX(-1), c.initialize(d), c.setFrameIntervalTime(20), c.setVisible(!1), this.addChild(c), this.waterList[8].push(c);
            for (f = 0; f < tileMapGridMaxX; f++) {
                d = skeletalAnimation["gridskin|wavesup"];
                d.folderName = "pngdata/gridskin";
                c = new GameAnimation;
                e = b.getGridPointByScenePoint(f, 9);
                c.x = e.x;
                c.playCount = 1;
                c.setCascadeColorEnabled(!0);
                c.setCascadeOpacityEnabled(!0);
                var h = this;
                f == tileMapGridMaxX - 1 && (c.frameCompleteFun = function() {
                    h.checkWavesUp()
                });
                c.initialize(d);
                c.gotoAndStop(0);
                c.setFrameIntervalTime(30);
                c.opacity = 0;
                this.addChild(c);
                this.waterList[9].push(c)
            }
            for (f = tileMapGridMaxY; f >= tileMapGridMaxY - a; f--)
                if (f == tileMapGridMaxY - a)
                    for (d = this.waterList[f], g = 0; g < d.length; g++) c = this.waterList[8][g], null != d[g] ? (e = b.getGridPointByScenePoint(0,
                        f), c.y = e.y, c.setVisible(!0)) : c.setVisible(!1);
                else
                    for (d = this.waterList[f], g = 0; g < d.length; g++) null != d[g] && d[g].setVisible(!0);
            this.waterLayerNum = a
        }
    },
    wavesUp: function(a) {
        a > this.waterLayerNum && (this.toWaterLayerNum = a);
        this.runWavesUp()
    },
    checkWavesUp: function() {
        if (this.waterLayerNum < this.toWaterLayerNum) this.beginWavesUp();
        else {
            this.isWavesUp = !1;
            for (var a = this.waterList[9], b = this.waterList[8], c = this.waterList[tileMapGridMaxY - this.waterLayerNum], d = 0; d < c.length; d++)
                if (a[d].gotoAndStop(0), a[d].opacity =
                    0, null != c[d]) {
                    var e = this.gridData.getGridPointByScenePoint(0, tileMapGridMaxY - this.waterLayerNum);
                    b[d].y = e.y;
                    b[d].setVisible(!0);
                    b[d].setFrameIntervalTime(20);
                    b[d].gotoAndPlay(1)
                } else b[d].setVisible(!1)
        }
    },
    beginWavesUp: function() {
        if (this.waterLayerNum < this.toWaterLayerNum) {
            this.isWavesUp = !0;
            this.waterLayerNum++;
            for (var a = this.waterList[tileMapGridMaxY - this.waterLayerNum], b = 0; b < a.length; b++) {
                this.waterList[8][b].setVisible(!1);
                var c = this.waterList[9][b],
                    d = this.waterList[tileMapGridMaxY - this.waterLayerNum +
                        1];
                null != d[b] && d[b].setVisible(!0);
                null != a[b] ? (d = this.gridData.getGridPointByScenePoint(0, tileMapGridMaxY - this.waterLayerNum), c.y = d.y, c.opacity = 255) : c.opacity = 0;
                c.gotoAndPlay(0)
            }
        }
    },
    runWavesUp: function() {
        !0 != this.isWavesUp && this.beginWavesUp()
    }
});
var AchievementLayer = cc.Layer.extend({
    achievementSpriteList: null,
    isPlayEffect: null,
    isReceiveEffect: null,
    isCreateNewAchievement: null,
    parentUI: null,
    ctor: function() {
        this.isPlayEffect = !1;
        this.achievementSpriteList = [];
        this._super()
    },
    onEnter: function() {
        this._super();
        var a = this;
        this.mainUI = engine.gameCocosStudio.loadCSS(res_open_load.achievementlayer);
        this.addChild(this.mainUI);
        this.isAddPage = !0;
        this.mainUI.pageinfo.x = 960;
        var b = cc.callFunc(function() {
            a.isAddPage = !1
        });
        inSceneByRight(this.mainUI.pageinfo,
            0, b, 320);
        engine.gameEvent.createMouseDown(this.mainUI.btnClose, this.closeFun, buttonScalingType)
    },
    initialize: function() {
        var a = this,
            b = this.refresh(),
            c = cc.callFunc(function() {
                a.isPlayEffect = !1
            }),
            d = heroData.getShowAchievementOrder();
        this.isPlayEffect = !0;
        0 == d.length && (this.isPlayEffect = !1);
        for (var e = 0, f = 0; f < d.length; f++) {
            var g = heroData.getAchievementByType(parseInt(d[f]));
            if (null != g) {
                var h = new AchievementSprite;
                h.initialize(g, b);
                h.y = 588 - 120 * e;
                h.x = 320;
                this.mainUI.pageinfo.addChild(h);
                this.achievementSpriteList.push(h);
                e++
            }
        }
        for (b = 0; b < this.achievementSpriteList.length; b++) h = this.achievementSpriteList[b], b == this.achievementSpriteList.length - 1 ? inSceneByScale(h, 0.1 * b + 0.5, c) : inSceneByScale(h, 0.1 * b + 0.5, null)
    },
    refresh: function() {
        var a = {};
        a.achievementCommonCount = heroData.getAchievementCommonCount();
        a.levelStartCount = heroData.getLevelStartCount();
        a.standardBestScore = heroData.getGameTimeBestScore();
        a.commonBestScore = heroData.getCommonBestScore();
        a.treeHeight = heroData.getTreeHight();
        return a
    },
    isCanClick: function() {
        return !0 ==
            this.isAddPage || !0 == this.isPlayEffect || !0 == this.isReceiveEffect || !0 == this.isCreateNewAchievement ? !1 : !0
    },
    closeFun: function(a, b) {
        if (!1 != this.parent.parent.isCanClick()) {
            var c = this.parent.parent;
            c.isAddPage = !0;
            var d = cc.callFunc(function() {
                c.isAddPage = !1;
                null != c.parentUI && c.parentUI.removeAchievementLayer()
            });
            outSceneByRight(c.mainUI.pageinfo, 0, d, 960);
            outSceneByLeft(c.mainUI.btnClose, 0, null, -200)
        }
    },
    addRemoveAchievementSprite: function(a, b, c) {
        this.isCreateNewAchievement = !0;
        var d = {};
        d.achievementCommonCount =
            heroData.getAchievementCommonCount();
        d.levelStartCount = heroData.getLevelStartCount();
        d.standardBestScore = heroData.getGameTimeBestScore();
        d.commonBestScore = heroData.getCommonBestScore();
        d.treeHeight = heroData.getTreeHight();
        for (var e = [], f = !0, g = [], h = this.achievementSpriteList.length - 1; 0 <= h; h--) {
            var k = this.achievementSpriteList[h];
            k.achievementType == b && !0 == heroData.getIsOKAchievementByInfo(k.achievementType, k.achievementLevel, d) && (g.push(k), e.push(k.achievementType), this.achievementSpriteList.splice(h,
                1), heroData.receiveAchievementByInfo(a, d, b))
        }
        for (a = 0; a < g.length; a++)
            if (k = g[a], k.stopAllActions(), !0 == f) {
                var m = this,
                    f = cc.callFunc(function() {
                        k.removeFromParent();
                        m.moveAchievementSprite(e, d);
                        c && c()
                    });
                outSceneByLeft(k, 0, f, k.x - 640);
                f = !1
            } else outSceneByLeft(k, 0, null, k.x - 640);
        0 == e.length && (this.isCreateNewAchievement = !1)
    },
    alignmentAddSprite: function(a, b) {
        var c = !0,
            d = this,
            e = cc.callFunc(function() {
                d.isCreateNewAchievement = !1
            }),
            f = !1;
        if (0 < a.length)
            for (var g = a.length - 1; 0 <= g; g--) {
                var h = heroData.getAchievementByType(a[g]);
                if (null != h) {
                    var k = new AchievementSprite;
                    k.initialize(h, b);
                    k.y = 588 - 120 * this.achievementSpriteList.length;
                    k.x = 320;
                    this.mainUI.pageinfo.addChild(k);
                    this.achievementSpriteList.push(k);
                    f = !0;
                    c ? (inSceneByScale(k, 0, e), c = !1) : inSceneByScale(k, 0)
                }
            }!1 == f && (this.isCreateNewAchievement = !1)
    },
    moveAchievementSprite: function(a, b) {
        for (var c = this, d = cc.callFunc(function() {
                c.alignmentAddSprite(a, b)
            }), e = !0, f = 0; f < this.achievementSpriteList.length; f++) {
            var g = this.achievementSpriteList[f];
            g.stopAllActions();
            var h = cc.moveTo(0.2,
                cc.p(320, 588 - 120 * f));
            !0 == e ? (g.runAction(cc.sequence(h, d)), e = !1) : g.runAction(h)
        }
        0 == this.achievementSpriteList.length && this.alignmentAddSprite(a, b)
    }
});
var obj = {},
    GamePlayBottomLayer = cc.Layer.extend({
        grridBottomLayer: null,
        grassLayer: null,
        transferLayer: null,
        topzIndex: 100,
        bottomzIndex: 10,
        gridData: null,
        initialize: function() {
            var a = new cc.Layer,
                b = new cc.Sprite("res/uibglayer/bj1.png");
            b.y = 570;
            b.setAnchorPoint(cc.p(0, 0));
            a.addChild(b);
            b = new cc.Sprite("res/uibglayer/bj2.png");
            b.setAnchorPoint(cc.p(0, 0));
            a.addChild(b);
            a.bake();
            this.addChild(a);
            this.createCloud("cloud1", -20, 980);
            this.createCloud("cloud2", 400, 950);
            this.transferLayer = new TransferLayer;
            this.transferLayer.initialize();
            this.addChild(this.transferLayer, this.topzIndex);
            this.grassLayer = new GrassLayer;
            this.grassLayer.initialize();
            this.addChild(this.grassLayer, this.topzIndex)
        },
        createCloud: function(a, b, c) {
            var d = this,
                e = new cc.Sprite;
            e.setAnchorPoint(cc.p(0, 0));
            e.setSpriteFrame("gameplaylayer/" + a + ".png");
            e.x = b;
            e.y = c;
            b = cc.moveTo((500 - e.x) / 100 * 40, cc.p(500, 960));
            c = cc.moveTo(200, cc.p(1E3, 960));
            var f = cc.callFunc(function() {
                    var b = 30 * Math.random(),
                        c = 20 * Math.random();
                    "cloud1" == a ? d.createCloud(a, -283 - c, 950 + b) : d.createCloud(a, -283 -
                        c, 920 + b)
                }),
                g = cc.callFunc(function() {
                    e.removeFromParent()
                });
            this.addChild(e);
            e.runAction(cc.sequence(b, f, c, g))
        },
        addIntoPet: function(a, b, c) {
            "" == Global.dogPenStr && (a = c.getGridPointByScenePoint(a, b), a.y -= 60, b = new cc.Sprite, b.x = a.x, b.y = a.y, b.setSpriteFrame("gameplaylayer/intopig.png"), this.addChild(b, this.topzIndex))
        },
        creatGridBottom: function(a) {
            this.gridData = a;
            this.grridBottomLayer = new cc.Layer;
            a = a.gridArr;
            for (var b = 0; b < a.length; b++)
                for (var c = 0; c < a[b].length; c++) null != a[b][c] && a[b][c].gridType != nullGrid &&
                    (this.createGridBg({
                        row: b,
                        col: c,
                        x: a[b][c].x,
                        y: a[b][c].y
                    }), this.createBorder(b, c), this.createCorner(b, c));
            this.addChild(this.grridBottomLayer);
            this.grridBottomLayer.bake()
        },
        createGridBg: function(a) {
            var b = a.row,
                c = a.col,
                d = new cc.Sprite("#gameplaylayer/block.png");
            d.attr({
                x: a.x,
                y: a.y
            });
            d.gridData = {
                r: b,
                c: c
            };
            this.grridBottomLayer.addChild(d)
        },
        createBorder: function(a, b) {
            var c = this.gridData.gridArr[a][b],
                d = this.gridData.gridArr[a][b].x,
                e = this.gridData.gridArr[a][b].y,
                d = [
                    [cc.p(0, -1), cc.p(d, e + 38.5), 0],
                    [cc.p(0,
                        1), cc.p(d, e - 38.5), 0],
                    [cc.p(-1, 0), cc.p(d - 38.5, e), 90],
                    [cc.p(1, 0), cc.p(d + 38.5, e), 90]
                ];
            if ("0" !== c)
                for (c = 0; c < d.length; c++) e = cc.pAdd(d[c][0], cc.p(a, b)), this.checkGridIsEmpty(e.x, e.y) && this.createBorderSp("#gameplaylayer/border.png", {
                    x: d[c][1].x,
                    y: d[c][1].y,
                    rotation: d[c][2]
                })
        },
        checkGridIsEmpty: function(a, b) {
            var c = this.gridData.getGridByGridPoint(a, b);
            return !c || c.gridType == nullGrid
        },
        createBorderSp: function(a, b) {
            var c = new cc.Sprite(a);
            c.attr({
                x: b.x,
                y: b.y
            });
            this.grridBottomLayer.addChild(c, 1);
            c.rotation = b.rotation;
            return c
        },
        createCorner: function(a, b) {
            for (var c = this.gridData.gridArr[a][b].x, d = this.gridData.gridArr[a][b].y, c = [
                    [cc.p(-1, -1), cc.p(c - 38.5, d + 38.5), -90],
                    [cc.p(1, -1), cc.p(c + 38.5, d + 38.5), 0],
                    [cc.p(-1, 1), cc.p(c - 38.5, d - 38.5), 180],
                    [cc.p(1, 1), cc.p(c + 38.5, d - 38.5), 90]
                ], d = 0; d < c.length; d++) {
                var e = c[d][0],
                    f = cc.pAdd(cc.p(e.x, 0), cc.p(a, b)),
                    g = cc.pAdd(cc.p(0, e.y), cc.p(a, b));
                !this.checkGridIsEmpty(a, b) && this.checkGridIsEmpty(f.x, f.y) && this.checkGridIsEmpty(g.x, g.y) && this.checkGridIsEmpty(e.x, e.y) && (e = c[d][1], this.createBorderSp("#gameplaylayer/corner2.png", {
                    x: e.x,
                    y: e.y,
                    rotation: c[d][2]
                }))
            }
        },
        addGrass: function(a, b) {
            return this.grassLayer.addGrass(a, b)
        },
        getGrass: function(a, b) {
            return this.grassLayer.getGrass(a, b)
        },
        noGrass: function(a, b) {
            this.grassLayer.noGrass(a, b)
        },
        addTransfer: function(a, b, c, d, e, f) {
            this.transferLayer.addTransfer(a, b, c, d, e, f)
        },
        addPortal: function(a, b, c) {
            this.transferLayer.addPortal(a, b, c)
        },
        runTransfer: function(a) {
            this.transferLayer.runTransfer(a)
        },
        getTransferInfoByGridInfo: function(a, b) {
            return this.transferLayer.getTransferInfoByGridInfo(a,
                b)
        }
    }),
    GrassLayer = cc.Layer.extend({
        tileMap: null,
        grassCount: null,
        initialize: function() {
            this.tileMap = new TileMap;
            var a = {};
            a.offsetX = tileMapOffsetX;
            a.offsetY = tileMapOffsetY;
            a.gridWidth = tileMapGridWidth;
            a.gridHeight = tileMapGridHeight;
            a.gridMaxX = tileMapGridMaxX;
            a.gridMaxY = tileMapGridMaxY;
            a.defaultGridValue = null;
            this.grassCount = 0;
            this.tileMap.initialize(a)
        },
        addGrass: function(a, b) {
            if (0 > a || 0 > b || a >= this.tileMap.gridMaxX || b >= this.tileMap.gridMaxY) return !1;
            if (null == this.tileMap.getGridByGridPoint(a, b)) {
                this.grassCount++;
                var c = skeletalAnimation["gridskin|grass"];
                c.folderName = "pngdata/gridskin";
                var d = new GameAnimation;
                d.initialize(c);
                d.setFrameIntervalTime(50);
                c = this.tileMap.getGridPointByScenePoint(a, b);
                d.x = c.x;
                d.y = c.y;
                d.playCount = 1;
                this.tileMap.setGridInfo(a, b, d);
                this.addChild(d);
                return !0
            }
            return !1
        },
        getGrass: function(a, b) {
            var c = this.tileMap.getGridByGridPoint(a, b);
            return "X" == c ? null : c
        },
        noGrass: function(a, b) {
            this.tileMap.setGridInfo(a, b, "X")
        }
    }),
    TransferLayer = cc.Layer.extend({
        tileMap: null,
        transferDic: null,
        initialize: function() {
            this.tileMap =
                new TileMap;
            var a = {};
            a.offsetX = tileMapOffsetX;
            a.offsetY = tileMapOffsetY;
            a.gridWidth = tileMapGridWidth;
            a.gridHeight = tileMapGridHeight;
            a.gridMaxX = tileMapGridMaxX;
            a.gridMaxY = tileMapGridMaxY;
            a.defaultGridValue = null;
            this.tileMap.initialize(a)
        },
        addPortal: function(a, b, c) {
            var d = createGameAnimation(res.gameplayeffect_json, "portal", 55);
            a = this.tileMap.getGridPointByScenePoint(a, b);
            1 == c ? (d.x = a.x + 3, d.y = a.y - 38, d.setRotation(-90)) : (d.x = a.x - 3, d.y = a.y + 38, d.setRotation(90));
            this.addChild(d)
        },
        addTransfer: function(a, b,
            c, d, e, f) {
            null == this.transferDic && (this.transferDic = {});
            null == this.transferDic[a] && (this.transferDic[a] = {}, this.transferDic[a].top = null);
            a = this.transferDic[a];
            1 == e && (a.top = cc.p(b, c));
            2 == e && (a.end = cc.p(b, c));
            a.cycle = cc.p(b, c);
            null == this.tileMap.getGridByGridPoint(b, c) && (e = new cc.Sprite, e.setSpriteFrame("gameplaylayer/conveyor" + f.toString() + ".png"), f = this.tileMap.getGridPointByScenePoint(b, c), e.x = f.x, e.y = f.y, this.tileMap.setGridInfo(b, c, e), this.addChild(e));
            this.tileMap.setGridInfo(b, c, d)
        },
        runTransfer: function(a) {
            if (null !=
                this.transferDic) {
                var b = new TransferAction;
                b.gamePlayFacade = a;
                b.runTransfer(this.transferDic)
            }
        },
        getTransferInfoByGridInfo: function(a, b) {
            return this.tileMap.getGridByGridPoint(a, b)
        }
    });
var PetPageLayer = cc.Layer.extend({
        pageUITag: 100,
        mainUILayer: null,
        isOpen: null,
        isClose: null,
        pageUI: null,
        initialize: function() {
            this.mainUILayer = engine.gameCocosStudio.loadCSS(res.petpagelayer);
            this.addChild(this.mainUILayer);
            this.mainUILayer.bgpn.setVisible(!1);
            this.isClose = this.isOpen = !1;
            this.mainUILayer.petbg.btnopenpage.self = this;
            engine.gameEvent.createMouseUp(this.mainUILayer.petbg.btnopenpage, this.openPageFun);
            this.mainUILayer.btnclosepage.self = this;
            engine.gameEvent.createMouseUp(this.mainUILayer.btnclosepage,
                this.closePageFun)
        },
        openPageFun: function(a, b) {
            if (!0 != this.self.isOpen && !0 != this.self.isClose) {
                this.self.isOpen = !0;
                currentScene.removeNewbieGuideLayer();
                currentScene.addNewbieGuideLayer(newbieSelectPetType);
                this.self.refresh();
                var c = cc.pDistance(cc.p(this.self.x, this.self.y), cc.p(-700, this.self.y)),
                    c = cc.moveTo(c / 1500, cc.p(-700, this.self.y)),
                    d = cc.moveTo(0.2, cc.p(-680, this.self.y)),
                    e = cc.callFunc(function() {
                        this.isOpen = !1
                    }, this.self),
                    c = cc.sequence(c, d, e);
                this.self.runAction(c);
                this.self.mainUILayer.bgpn.setVisible(!0)
            }
        },
        closePageFun: function(a, b) {
            this.self.closePage()
        },
        closePage: function() {
            if (!0 != this.isOpen && !0 != this.isClose) {
                this.isClose = !0;
                this.stopAllActions();
                var a = cc.pDistance(cc.p(this.x, this.y), cc.p(0, this.y)),
                    a = cc.moveTo(a / 1500, cc.p(0, this.y)),
                    b = cc.callFunc(function() {
                        this.isClose = !1;
                        null != this.getChildByTag(this.pageUITag) && (this.removeChildByTag(this.pageUITag), currentScene.addNewbieGuideLayer(newbieOpenUpPetLayerType))
                    }, this),
                    a = cc.sequence(a, b);
                this.runAction(a);
                this.pageUI.hiddenNoCheckedPage();
                this.mainUILayer.bgpn.setVisible(!1)
            }
        },
        refresh: function() {
            null != this.getChildByTag(this.pageUITag) && this.removeChildByTag(this.pageUITag);
            var a = [],
                b = new cc.Layer,
                c = 0,
                d = this,
                e;
            for (e in heroData.petDic) e != heroData.getSelectePet().id && (a.push(heroData.petDic[e]), c++);
            e = {};
            e.ui = b;
            e.pageMax = c;
            e.pageWidth = 640;
            e.turnPageState = landscapePage;
            e.clickRect = cc.rect(640, 0, 40 + 640 * e.pageMax, 895);
            e.pageIconList = [];
            e.pageEffect = 1;
            e.pageList = [];
            e.pageItemCount = 1;
            e.setPageInfo = function(c) {
                b.removeAllChildren();
                0 < a.length && createSelectPetSprite(c, a[c], d, b,
                    d.selectPetFun);
                0 <= c - 1 && createSelectPetSprite(c - 1, a[c - 1], d, b, d.selectPetFun);
                c + 1 <= a.length - 1 && createSelectPetSprite(c + 1, a[c + 1], d, b, d.selectPetFun)
            };
            this.pageUI = createPageLayer(e);
            this.pageUI.tag = this.pageUITag;
            this.addChild(this.pageUI);
            this.pageUI.hiddenNoCheckedPage = function() {
                b.removeAllChildren();
                0 < a.length && createSelectPetSprite(this.pageIndex, a[this.pageIndex], d, b, d.selectPetFun)
            }
        },
        selectPetByID: function(a) {
            heroData.selectPetByID(a);
            currentScene.removeNewbieGuideLayer();
            null != currentScene &&
                null != currentScene.refresh && currentScene.refresh();
            this.closePage()
        },
        selectPetFun: function(a, b) {
            !0 == this.self.pageUI.isMove ? cc.log("不能选择宠物") : this.self.selectPetByID(this.petObj.id)
        }
    }),
    createSelectPetSprite = function(a, b, c, d, e) {
        var f = new SelectPetSprite;
        f.x = 680 + 640 * a;
        f.petObj = b;
        f.isSwallowTouches = !1;
        f.self = c;
        d.addChild(f);
        f.initialize();
        engine.gameEvent.createMouseUp(f, e, null, cc.rect(30, 430, 400, 400))
    };
var petEggSkinDown = 1,
    petEggSkinFree = 2,
    petEggSkinShaking = 3,
    petOutEggSkin = 4,
    petEggTransitionSkin = 5,
    eggState = 1,
    petState = 2,
    IncubationPetLayer = cc.Layer.extend({
        layerType: null,
        petEgg: null,
        parentUI: null,
        petStart1Tag: 104,
        petStart2Tag: 105,
        petStart3Tag: 106,
        petSkinSpriteTag: 107,
        petbackgroundlightTag: 108,
        petlightTag: 109,
        btnbuy1: null,
        btnbuy2: null,
        btnbuy3: null,
        incubationpetbtn: null,
        mainUI: null,
        pageState: null,
        isShowEffect: null,
        clickAdBtn: !1,
        ctor: function() {
            this.pageState = eggState;
            this.isShowEffect = !1;
            this.layerType =
                incubationPetLayerType;
            this._super()
        },
        onEnter: function() {
            this._super();
            this.clickAdBtn = !1;
            this.mainUI = engine.gameCocosStudio.loadCSS(res.incubationpetlayer);
            this.addChild(this.mainUI);
            this.mainUI.btnSet.setVisible(!1);
            this.mainUI.petinfo.setScale(0.1);
            this.mainUI.petinfo.opacity = 0;
            engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.closeFun, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.petok, this.closeFun, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.btnSet, this.setFun,
                buttonScalingType)
        },
        setFun: function(a, b) {
            if (!1 != this.parent.parent.isCanClick() && null != currentScene) {
                var c = new SetLayer;
                createMaskLayer(c);
                currentScene.addChild(c, 999999)
            }
        },
        closeFun: function(a, b) {
            var c = this.parent.parent;
            if (!1 != c.isCanClick()) {
                c.parent.removeNewbieGuideLayer();
                switch (c.pageState) {
                    case petState:
                        c.isShowEffect = !0;
                        c.pageState = eggState;
                        outSceneByBottom(c.mainUI.petok, 0, null, -100);
                        showUIFadeOut(c.mainUI.petinfo);
                        showUIFadeOut(c.getChildByTag(c.petStart1Tag));
                        showUIFadeOut(c.getChildByTag(c.petStart2Tag));
                        showUIFadeOut(c.getChildByTag(c.petStart3Tag));
                        null != c.getChildByTag(c.petSkinSpriteTag) && c.getChildByTag(c.petSkinSpriteTag).setPetSkin(petskinjumpout);
                        if (null != c.getChildByTag(c.petbackgroundlightTag)) {
                            var d = c.getChildByTag(c.petbackgroundlightTag),
                                e = cc.fadeOut(0.2);
                            d.runAction(e)
                        }
                        c.scheduleOnce(function() {
                            c.eggInSceneAddMC();
                            c.petEgg.steFrameComplete(function() {
                                c.parent.addNewbieGuideLayer(newbieIncubationPetLayerCloseBackPetLayerType);
                                c.petEggPlayFree();
                                c.isShowEffect = !1
                            })
                        }, 1);
                        break;
                    case eggState:
                        c.parentUI.switchoverPage(petLayerType)
                }
                this.unscheduleAllCallbacks()
            }
        },
        eggInSceneRemoveMC: function() {},
        eggInSceneAddMC: function() {
            this.eggInSceneRemoveMC();
            var a = this;
            this.mainUI.petinfo.setScale(0.1);
            this.mainUI.petinfo.opacity = 0;
            this.mainUI.petinfo.x = 320;
            this.mainUI.petinfo.y = 420;
            if (null == this.getChildByTag(this.petlightTag)) {
                var b = createGameAnimation(res.uieffect_json, "petlight", 30);
                b.tag = this.petlightTag;
                b.x = 328;
                b.y = 1100;
                this.addChild(b)
            }
            null == this.petEgg && (this.petEgg = createGameAnimation(res.uieffect_json, "egg", 40), this.petEgg.playCount = 1, this.petEgg.x = 328, this.petEgg.y =
                550, this.addChild(this.petEgg));
            this.petEggPlay(petEggSkinDown);
            if (null == this.incubationpetbtn) {
                this.incubationpetbtn = createGameAnimation(res.uieffect_json, "incubationpetbtn", 30);
                this.incubationpetbtn.playCount = 1;
                this.incubationpetbtn.x = 328;
                this.incubationpetbtn.y = 300;
                this.addChild(this.incubationpetbtn);
                var c = this.incubationpetbtn.getBitmapByUrlName("btnbuy1.png"),
                    d = this.incubationpetbtn.getBitmapByUrlName("btnbuy2.png"),
                    b = this.incubationpetbtn.getBitmapByUrlName("btnbuy3.png");
                this.oldSpriteFrame =
                    c.getSpriteFrame();
                var e = new GameArtWord("pet", 30, 24);
                e.alignmentType = artWordLeft;
                e.setString(petGold1.toString());
                e.setScale(0.8);
                e.x = 85;
                e.y = 40;
                c.addChild(e);
                c.butxt = e;
                this.flushBtnStatus();
                c = new GameArtWord("pet", 30, 24);
                c.alignmentType = artWordLeft;
                c.setString(petGem1.toString());
                c.x = 113;
                c.y = 58;
                d.addChild(c);
                d.butxt = c;
                d = new GameArtWord("pet", 30, 24);
                d.alignmentType = artWordLeft;
                d.setString(petGem2.toString());
                d.x = 113;
                d.y = 55;
                b.addChild(d);
                b.butxt = d;
                this.incubationpetbtn.steFrameComplete(function() {
                    a.btnbuy1 =
                        this.getBitmapByUrlName("btnbuy1.png");
                    a.btnbuy2 = this.getBitmapByUrlName("btnbuy2.png");
                    a.btnbuy3 = this.getBitmapByUrlName("btnbuy3.png");
                    var b = createGameAnimation(res.uieffect_json, "btnbuy1effect", 30);
                    b.x = 100;
                    b.y = 120;
                    a.btnbuy1.effect = b;
                    a.btnbuy1.addChild(b);
                    b = createGameAnimation(res.uieffect_json, "btnbuy2effect", 30);
                    b.x = 100;
                    b.y = 130;
                    a.btnbuy2.effect = b;
                    a.btnbuy2.addChild(b);
                    b = createGameAnimation(res.uieffect_json, "btnbuy3effect", 30);
                    b.x = 110;
                    b.y = 150;
                    a.btnbuy3.effect = b;
                    a.btnbuy3.addChild(b);
                    engine.gameEvent.createMouseUp(a.btnbuy1,
                        a.btn_show_ad.bind(a), buttonScalingType);
                    a.flushBtnStatus();
                    engine.gameEvent.createMouseUp(a.btnbuy2, a.btnbuyFun, buttonScalingType);
                    a.btnbuy2.type = 2;
                    a.btnbuy2.gold = 0;
                    a.btnbuy2.gem = petGem1;
                    engine.gameEvent.createMouseUp(a.btnbuy3, a.btnbuyFun, buttonScalingType);
                    a.btnbuy3.type = 3;
                    a.btnbuy3.gold = 0;
                    a.btnbuy3.gem = petGem2
                })
            }
        },
        oldSpriteFrame: null,
        flushBtnStatus: function() {
            var a = this.incubationpetbtn.getBitmapByUrlName("btnbuy1.png");
            3 > heroData.gameUserData.dayPet ? (a.setSpriteFrame("facebook_ad/ptdan.png"),
                a.butxt.setString("")) : (a.setSpriteFrame(this.oldSpriteFrame), a.butxt.setString(petGold1.toString()))
        },
        inScene: function(a) {
            var b = this;
            this.isShowEffect = !0;
            this.eggInSceneAddMC();
            this.mainUI.btnSet.setVisible(!0);
            this.mainUI.btnSet.x += 120;
            inSceneByRight(this.mainUI.btnSet, 0.4, null, this.mainUI.btnSet.x - 120);
            this.petEgg.steFrameComplete(function() {
                b.petEggPlayFree();
                b.isShowEffect = !1;
                b.parent.addNewbieGuideLayer(newbieIncubationPetLayerType);
                currentScene.switchoverCompletePage()
            })
        },
        outScene: function(a) {
            var b =
                this;
            this.isShowEffect = !0;
            a = cc.callFunc(function() {
                null != b.parent && (b.parentUI.nowSelectLayer.setVisible(!0), b.parentUI.nowSelectLayer.inScene(b.layerType))
            }, this);
            outSceneByRight(this.mainUI.btnSet, 0, a, 700);
            a = cc.fadeOut(0.2);
            null != this.btnbuy1 && (this.btnbuy1.runAction(a.clone()), this.btnbuy2.runAction(a.clone()), this.btnbuy3.runAction(a.clone()), this.btnbuy1.effect.runAction(a.clone()), this.btnbuy2.effect.runAction(a.clone()), this.btnbuy3.effect.runAction(a.clone()), this.btnbuy1.butxt.setCascadeOpacityEnabled(!0),
                this.btnbuy2.butxt.setCascadeOpacityEnabled(!0), this.btnbuy3.butxt.setCascadeOpacityEnabled(!0), this.btnbuy1.butxt.contentSprite.setCascadeOpacityEnabled(!0), this.btnbuy2.butxt.contentSprite.setCascadeOpacityEnabled(!0), this.btnbuy3.butxt.contentSprite.setCascadeOpacityEnabled(!0), this.btnbuy1.butxt.runAction(a.clone()), this.btnbuy2.butxt.runAction(a.clone()), this.btnbuy3.butxt.runAction(a.clone()));
            null != this.getChildByTag(this.petlightTag) && this.getChildByTag(this.petlightTag).runAction(a.clone());
            this.petEggPlay(petEggTransitionSkin)
        },
        refresh: function() {},
        petEggPlay: function(a) {
            if (null != this.petEgg) switch (a) {
                case petEggSkinDown:
                    this.parentUI.uiBgLayer.pillowPlay(pillowPetEggSkinDown);
                    this.petEgg.fromFrameIndexToPlayFrameIndex(0, 22);
                    var b = this;
                    this.petEgg.steFrameComplete(function() {
                        b.petEggPlayFree()
                    });
                    break;
                case petEggSkinFree:
                    this.parentUI.uiBgLayer.pillowPlay(pillowPetEggSkinFree);
                    this.petEgg.fromFrameIndexToPlayFrameIndex(23, 41);
                    b = this;
                    this.petEgg.steFrameComplete(function() {
                        b.petEggPlayFree()
                    });
                    break;
                case petEggSkinShaking:
                    this.parentUI.uiBgLayer.pillowPlay(pillowPetEggSkinShaking);
                    this.petEgg.fromFrameIndexToPlayFrameIndex(42, 67);
                    b = this;
                    this.petEgg.steFrameComplete(function() {
                        b.petEggPlayFree()
                    });
                    break;
                case petOutEggSkin:
                    this.petEgg.gotoAndStop(68);
                    break;
                case petEggTransitionSkin:
                    this.petEgg.fromFrameIndexToPlayFrameIndex(70, 82), b = this, this.petEgg.steFrameComplete(function() {
                        b.removeFromParent();
                        currentScene.switchoverCompletePage()
                    })
            }
        },
        petEggPlayFree: function() {
            0.15 > Math.random() ? this.petEggPlay(petEggSkinShaking) :
                this.petEggPlay(petEggSkinFree)
        },
        isCanClick: function() {
            return !1 == this.parentUI.isCanClick() || !0 == this.isShowEffect ? !1 : !0
        },
        btn_show_ad: function() {
            if (!1 != this.btnbuy1.parent.parent.isCanClick()) {
                if (this.btnbuy1.parent.parent.pageState == petState) return !1;
                if (!this.clickAdBtn) {
                    this.clickAdBtn = !0;
                    var a = this;
                    3 > heroData.gameUserData.dayPet ? (this.btnbuy1 && (this.btnbuy1.type = 1, this.btnbuy1.gold = 0, this.btnbuy1.gem = 0), this.scheduleOnce(function() {
                        a.clickAdBtn = !1
                    }, 4), gameSDK.showRewardVideoAd(rewardedVideoID6,
                        function() {
                            heroData.gameUserData.dayPet++;
                            heroData.watchNum += 1;
                            saveHeroData();
                            a.btnbuyFun.bind(a.btnbuy1)()
                        })) : (this.btnbuy1 && (this.btnbuy1.type = 1, this.btnbuy1.gold = petGold1, this.btnbuy1.gem = 0), this.clickAdBtn = !1, this.btnbuyFun.bind(this.btnbuy1)())
                }
            }
        },
        btnbuyFun: function(a, b) {
            var c = this.parent.parent;
            if (!1 != this.parent.parent.isCanClick()) {
                if (this.parent.parent.pageState == petState) return !1;
                var c = this.parent.parent,
                    d = null;
                if (!1 == heroData.isSendPet()) d = heroData.sendPet();
                else {
                    if (heroData.getGold() <
                        this.gold) {
                        addGoldGemShopUI();
                        return
                    }
                    if (heroData.getGem() < this.gem) {
                        addBuyGemUI();
                        return
                    }
                    d = heroData.buyPetByType(this.type, this.gold, this.gem)
                }
                c.parent.removeNewbieGuideLayer();
                if (null != d) {
                    engine.gameSound.playEffect(soundres.incubationpet);
                    switch (this.type) {
                        case 1:
                            var e = createGameAnimation(res.uieffect_json, "petstar1", 30);
                            e.isRemoveFromComplete = !0;
                            e.playCount = 1;
                            e.x = 80;
                            e.y = 270;
                            c.addChild(e, 100);
                            this.scheduleOnce(function() {
                                var a = createGameAnimation(res.uieffect_json, "petstar2", 30);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.x = 80;
                                a.y = 270;
                                c.addChild(a, 100)
                            }, 0.2);
                            this.scheduleOnce(function() {
                                var a = createGameAnimation(res.uieffect_json, "petstar1", 30);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.x = 80;
                                a.y = 270;
                                c.addChild(a, 100)
                            }, 0.4);
                            break;
                        case 2:
                            e = createGameAnimation(res.uieffect_json, "petstar1", 30);
                            e.isRemoveFromComplete = !0;
                            e.playCount = 1;
                            e.x = 320;
                            e.y = 270;
                            c.addChild(e);
                            this.scheduleOnce(function() {
                                var a = createGameAnimation(res.uieffect_json, "petstar2", 30);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.x = 320;
                                a.y =
                                    270;
                                c.addChild(a)
                            }, 0.2);
                            this.scheduleOnce(function() {
                                var a = createGameAnimation(res.uieffect_json, "petstar1", 30);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.x = 320;
                                a.y = 270;
                                c.addChild(a)
                            }, 0.4);
                            break;
                        case 3:
                            e = createGameAnimation(res.uieffect_json, "petstar3", 30), e.isRemoveFromComplete = !0, e.playCount = 1, e.x = 540, e.y = 270, c.addChild(e), this.scheduleOnce(function() {
                                var a = createGameAnimation(res.uieffect_json, "petstar3", 30);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.x = 540;
                                a.y = 270;
                                c.addChild(a)
                            }, 0.2), this.scheduleOnce(function() {
                                var a =
                                    createGameAnimation(res.uieffect_json, "petstar3", 30);
                                a.isRemoveFromComplete = !0;
                                a.playCount = 1;
                                a.x = 540;
                                a.y = 270;
                                c.addChild(a)
                            }, 0.4)
                    }
                    this.parent.parent.isShowEffect = !0;
                    this.parent.parent.pageState = petState;
                    c.scheduleOnce(function() {
                        c.petInSceneAddMC(c, d)
                    }, 0.9)
                }
                null != currentScene && null != currentScene.refresh && currentScene.refresh()
            }
        },
        petInSceneRemoveMC: function() {
            removeUIByTag(this, this.petbackgroundlightTag);
            removeUIByTag(this, this.petSkinSpriteTag);
            removeUIByTag(this, this.petStart1Tag);
            removeUIByTag(this,
                this.petStart2Tag);
            removeUIByTag(this, this.petStart3Tag)
        },
        petInSceneAddMC: function(a, b) {
            a.petInSceneRemoveMC();
            a.petEggPlay(petOutEggSkin);
            a.parentUI.uiBgLayer.pillowPlay(pillowPetOutSkin);
            var c = createGameAnimation(res.uieffect_json, "brokenshellegg", 25);
            c.playCount = 1;
            c.isRemoveFromComplete = !0;
            c.x = 320;
            c.y = 480;
            c.isCreatePet = !1;
            c.frameFun = function(c) {
                15 >= c ? 0 == c % 2 ? this.setRotation(-5) : this.setRotation(5) : (!1 == this.isCreatePet && (a.parent.addNewbieGuideLayer(newbieIncubationPetLayerCloseType), c = createGameAnimation(res.uieffect_json,
                    "petbackgroundlight", 25), c.x = 320, c.y = 650, c.tag = a.petbackgroundlightTag, a.addChild(c), c = new PetSkin, c.x = 320, c.y = 500, c.petObj = b, c.setPetSkin(petskinfree2), c.tag = a.petSkinSpriteTag, a.addChild(c), a.mainUI.petinfo.txtAddgold_df.setString("+" + b.getPetAddGold() + "%"), a.mainUI.petinfo.txtAddScore_df.setString("+" + b.getPetAddScore() + "%"), c = cc.moveTo(0.2, cc.p(a.mainUI.petok.x, a.mainUI.petok.y + 300)), a.mainUI.petok.runAction(c), engine.gameSound.playEffect(soundres.getincubationpet), createPetStart(b.getPetStart(),
                    75, cc.p(320, 490), a, a.petStart1Tag, 0), showUIFadeIn(a.mainUI.petinfo), c = cc.callFunc(function() {
                    a.isShowEffect = !1
                }), showStart(a, c, a.petStart1Tag), null != a.incubationpetbtn.parent && (a.incubationpetbtn.removeFromParent(), a.incubationpetbtn = null), this.isCreatePet = !0), this.setRotation(0))
            };
            a.addChild(c);
            c = createGameAnimation(res.uieffect_json, "brokenshelleggeffect", 25);
            c.playCount = 1;
            c.isRemoveFromComplete = !0;
            c.x = 320;
            c.y = 650;
            a.addChild(c)
        }
    });
var GoldGemLayer = cc.Layer.extend({
        parentUI: null,
        mainUI: null,
        onEnter: function() {
            this._super();
            this.mainUI = engine.gameCocosStudio.loadCSS(res.goldgemlayer, !1);
            this.addChild(this.mainUI);
            !1 == isExistStrength && (this.mainUI.goldsprite.x = 190, this.mainUI.gemsprite.x = 460, this.mainUI.strengthsprite.setVisible(!1));
            !1 == isShowBuyRefillAllLivesShop() && !1 == isShowBuyUnlimiteLivesShop() ? this.mainUI.strengthsprite.btnAddStrength.setVisible(!1) : engine.gameEvent.createMouseUp(this.mainUI.strengthsprite.btnAddStrength,
                this.addStrengthFun, buttonScalingType, cc.rect(-10, -10, 60, 60));
            this.refresh();
            this.scheduleUpdate();
            //var a = new MainSceneFriendInviteLayer;
            //a.init(this.mainUI);
            //this.addChild(a)
        },
        isCanClick: function() {
            return !1 == this.parentUI.isCanClick() ? !1 : !0
        },
        addStrengthFun: function(a, b) {
            !1 != this.parent.parent.parent.isCanClick() && addCNStrengthShopLayer()
        },
        addGemFun: function(a, b) {
            !1 != this.parent.parent.parent.isCanClick() && null == currentScene.cnStrengthShopLayer && (currentScene.cnStrengthShopLayer = new ADaddDiamondLayer,
                currentScene.cnStrengthShopLayer.parentUI = currentScene, createMaskLayer(currentScene.cnStrengthShopLayer), currentScene.addChild(currentScene.cnStrengthShopLayer, maxZindex - 1E4))
        },
        setStrengthTime: function() {
            var a = (new Date).getTime(),
                b = heroData.getUesStrengthTime();
            if (!0 == isShowUnlimitedLives && !0 == isExistStrength)
                if (b > a) {
                    this.mainUI.txtstrengthtime_df.setVisible(!0);
                    var b = b - a,
                        c = Math.floor(b % 6E4 / 1E3),
                        d = "",
                        d = 10 > c ? "0" + c.toString() : c.toString();
                    this.mainUI.txtstrengthtime_df.setString(((b - b % 6E4) / 6E4).toString() +
                        ":" + d);
                    this.mainUI.strengthsprite.txtStrength_df.setVisible(!1);
                    this.mainUI.strengthsprite.wqicon.setVisible(!0);
                    this.mainUI.strengthsprite.txtStrengthcount_df.setVisible(!1);
                    this.mainUI.strengthsprite.btnAddStrength.closeBottonSound = !0;
                    !0 != this.mainUI.strengthsprite.btnAddStrength.closeEvent && (engine.gameEvent.createMouseUp(this.mainUI.strengthsprite.btnAddStrength, null, buttonScalingType), this.mainUI.strengthsprite.btnAddStrength.closeEvent = !0, this.mainUI.strengthsprite.btnAddStrength.openEvent = !1)
                } else this.mainUI.strengthsprite.btnAddStrength.closeBottonSound = !1, !0 != this.mainUI.strengthsprite.btnAddStrength.openEvent && (engine.gameEvent.createMouseUp(this.mainUI.strengthsprite.btnAddStrength, this.addStrengthFun, buttonScalingType), this.mainUI.strengthsprite.btnAddStrength.closeEvent = !1, this.mainUI.strengthsprite.btnAddStrength.openEvent = !0), this.mainUI.strengthsprite.txtStrengthcount_df.setVisible(!0), this.mainUI.strengthsprite.txtStrength_df.setVisible(!0), this.mainUI.txtstrengthtime_df.setVisible(!1),
                    this.mainUI.strengthsprite.wqicon.setVisible(!1);
            else this.mainUI.strengthsprite.btnAddStrength.closeBottonSound = !1, !0 != this.mainUI.strengthsprite.btnAddStrength.openEvent && (engine.gameEvent.createMouseUp(this.mainUI.strengthsprite.btnAddStrength, this.addStrengthFun, buttonScalingType), this.mainUI.strengthsprite.btnAddStrength.closeEvent = !1, this.mainUI.strengthsprite.btnAddStrength.openEvent = !0), this.mainUI.strengthsprite.txtStrengthcount_df.setVisible(!0), this.mainUI.strengthsprite.txtStrength_df.setVisible(!0),
                this.mainUI.txtstrengthtime_df.setVisible(!1), this.mainUI.strengthsprite.wqicon.setVisible(!1);
            this.setStrengthCount(a);
            return a
        },
        setStrengthCount: function(a) {
            var b = "";
            if (heroData.getStrength() < iniStrengthCount) {
                if (0 != heroData.getAddStrengthTime()) {
                    a = addStrengthNeedTime - (a - heroData.getAddStrengthTime());
                    var c = Math.floor(a % 6E4 / 1E3),
                        d = "",
                        d = 10 > c ? "0" + c.toString() : c.toString(),
                        b = b + (((a - a % 6E4) / 6E4).toString() + ":" + d)
                }
            } else b = engine.gameData.dataDic.language[120].content;
            this.mainUI.strengthsprite.txtStrengthcount_df.setString(heroData.getStrength().toString());
            this.mainUI.strengthsprite.txtStrength_df.setString(b)
        },
        update: function(a) {
            a = this.setStrengthTime();
            a = heroData.addUpateStrengthByTime(a);
            !1 == isShowBuyRefillAllLivesShop() && !1 == isShowBuyUnlimiteLivesShop() ? this.mainUI.strengthsprite.btnAddStrength.setVisible(!1) : this.mainUI.strengthsprite.btnAddStrength.setVisible(!0);
            a && this.refresh()
        },
        refresh: function() {
            //engine.gameEvent.createMouseUp(this.mainUI.gemsprite.btnAddGem, this.addGemFun, buttonScalingType, cc.rect(-10, -10, 60, 60));
            this.setStrengthTime();
            var a =
                heroData.getLevelStartCount();
            this.mainUI.goldsprite.txtStar_df.setString(a);
            this.mainUI.gemsprite.txtGem_df.setString(heroData.getGem())
        }
    }),
    addGoldGemShopUI = function() {
        cc.error("已经没有金币了")
    },
    addBuyGemUI = function() {
        //null == currentScene.cnStrengthShopLayer && (currentScene.cnStrengthShopLayer = new ADaddDiamondLayer, currentScene.cnStrengthShopLayer.parentUI = currentScene, createMaskLayer(currentScene.cnStrengthShopLayer), currentScene.addChild(currentScene.cnStrengthShopLayer,maxZindex - 1E4))
    };
var GamePlayBuyItemLayer = cc.Layer.extend({
        mainUI: null,
        itemid: null,
        itemCount: null,
        type: null,
        selectUseItemLayer: null,
        initialize: function(a, b) {
            this.type = b;
            this.itemid = a;
            this.isLockUseItem = !1;
            this.mainUI = engine.gameCocosStudio.loadCSS(res.gamebuyitemlayer);
            this.addChild(this.mainUI);
            var c = engine.gameData.dataDic.itemdata[this.itemid],
                d = new cc.Sprite;
            d.setSpriteFrame("item/" + c.id.toString() + ".png");
            d.x = 320;
            d.y = 380;
            this.mainUI.iteminfoui.addChild(d);
            var e = c.itemname,
                e = e.replace("\n", "");
            this.mainUI.iteminfoui.itemname_df.setString(e);
            this.mainUI.iteminfoui.itemexplain_df.setString(c.explain);
            engine.gameEvent.createMouseUp(this.mainUI.iteminfoui.closebtn, this.closeFun, buttonScalingType);
            this.mainUI.iteminfoui.buyitembtn.itemid = a;
            engine.gameEvent.createMouseUp(this.mainUI.iteminfoui.buyitembtn, this.buyitem, buttonScalingType);
            2 == this.type && (c = new cc.Sprite, c.x = 110, c.y = 120, c.setSpriteFrame("itemlayer/countbg.png"), d.addChild(c), this.itemCount = new cc.LabelTTF("", defaultTxt, 25), this.itemCount.x = 30, this.itemCount.y = 33, this.itemCount.setColor(cc.color(225,
                229, 178)), c.addChild(this.itemCount));
            this.refresh()
        },
        closeFun: function(a, b) {
            this.parent.parent.parent.removeFromParent()
        },
        buyitem: function(a, b) {
            var c = this.parent.parent.parent,
                d = engine.gameData.dataDic.itemdata[this.itemid]["gem" + itemPriceCoefficient.toString()];
            if (heroData.getGem() < d) addBuyGemUI(), showAlterInfo(engine.gameData.dataDic.language[129].content);
            else if (heroData.buyItem(this.itemid)) switch (c.type) {
                case 1:
                    null != currentScene && "GamePlayScene" == currentScene.sceneName && (engine.gameEvent.createMouseUp(this, null, buttonScalingType), d = currentScene.gamePlayFacade.gamePlayLayer.grtBuyItemPointByItemID(this.itemid,
                        "itemaddeffect"), c.flyItemIcon(d.x, d.y));
                    break;
                case 2:
                    currentScene.refresh();
                    break;
                case 3:
                    d = c.selectUseItemLayer.grtBuyItemPointByItemID(this.itemid), c.flyItemIcon(d.x, d.y), engine.gameEvent.createMouseUp(this, null, buttonScalingType), EventMgr.emit(EVENTMGR_ID.BUY_ITEM_REFRESH)
            }
        },
        flyItemIcon: function(a, b) {
            this.mainUI.setVisible(!1);
            this.maskLayer.setVisible(!1);
            var c = this,
                d = cc.callFunc(function() {
                    switch (c.type) {
                        case 1:
                            currentScene.refresh();
                            c.removeFromParent();
                            break;
                        case 3:
                            c.selectUseItemLayer.addBuyItemEffectByItemID(c.itemid),
                                currentScene.refresh(), c.removeFromParent()
                    }
                }),
                e = engine.gameData.dataDic.itemdata[this.itemid],
                f = new cc.Sprite;
            f.setSpriteFrame("item/" + e.id.toString() + ".png");
            f.x = 320;
            f.y = 680;
            this.addChild(f);
            f.runAction(cc.sequence(cc.moveTo(0.2, cc.p(a, b)), d))
        },
        refresh: function() {
            var a = engine.gameData.dataDic.itemdata[this.itemid];
            1 == a.isgoldorgem ? (a = a["gold" + itemPriceCoefficient.toString()], this.mainUI.gemicon.setVisible(!1), this.mainUI.txtgem_df.setString(heroData.getGold()), this.mainUI.iteminfoui.buyitembtn.gem.setVisible(!1)) :
                (a = a["gem" + itemPriceCoefficient.toString()], this.mainUI.goldicon.setVisible(!1), this.mainUI.txtgem_df.setString(heroData.getGem()), this.mainUI.iteminfoui.buyitembtn.gold.setVisible(!1));
            this.mainUI.iteminfoui.buyitembtn.txtitemgem_df.setString(a);
            switch (this.type) {
                case 2:
                    a = heroData.getItemCount(this.itemid), this.itemCount.setString(a)
            }
        }
    }),
    BuyItemLayer = cc.Layer.extend({
        mainUI: null,
        pageUI: null,
        itemsList: null,
        isAddPage: null,
        gamePlayBuyItemLayerTag: 1001,
        ctor: function() {
            this.isAddPage = !1;
            this._super()
        },
        onEnter: function() {
            this._super();
            var a = this;
            this.mainUI = engine.gameCocosStudio.loadCSS(res_open_load.buyitemlayer);
            this.addChild(this.mainUI);
            this.isAddPage = !0;
            this.mainUI.pageinfo.x = 960;
            var b = cc.callFunc(function() {
                a.isAddPage = !1
            });
            inSceneByRight(this.mainUI.pageinfo, 0, b, 320);
            engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.closeFun, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.pageinfo.btnPageUp, this.pageUp, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.pageinfo.btnPageDown,
                this.pageDown, buttonScalingType);
            this.itemsList = []
        },
        isCanClick: function() {
            return !0 == this.pageUI.isPlayPageEffect || !0 == this.isAddPage ? !1 : !0
        },
        refresh: function() {
            for (var a = 0; a < this.itemsList.length; a++) this.itemsList[a].refresh();
            null != this.getChildByTag(this.gamePlayBuyItemLayerTag) && this.getChildByTag(this.gamePlayBuyItemLayerTag).refresh()
        },
        pageUp: function(a, b) {
            !1 != this.parent.parent.parent.isCanClick() && this.parent.parent.parent.pageUI.lastPage()
        },
        pageDown: function(a, b) {
            !1 != this.parent.parent.parent.isCanClick() &&
                this.parent.parent.parent.pageUI.nextPage()
        },
        closeFun: function(a, b) {
            if (!1 != this.parent.parent.isCanClick()) {
                var c = this.parent.parent;
                c.isAddPage = !0;
                var d = cc.callFunc(function() {
                    c.isAddPage = !1;
                    null != c.parentUI && c.parentUI.closeShopLayer()
                });
                outSceneByRight(c.mainUI.pageinfo, 0, d, 960);
                outSceneByLeft(c.mainUI.btnClose, 0, null, -200)
            }
        },
        initialize: function() {
            var a = new cc.Layer,
                b = engine.gameData.dataDic.itemdata,
                c = 0,
                d = [999, 1E3, 1005],
                e;
            for (e in b) - 1 == d.indexOf(~~e) && (b = new BuyItemSprite, b.x = 115 + c % 3 * 200 + 640 *
                Math.floor(c / 6), b.y = 245 + 275 * (1 - Math.floor(c / 3) % 2), b.itemid = e, b.self = this, b.initialize(), this.itemsList.push(b), a.addChild(b), b.bottonSound = !0, engine.gameEvent.createMouseUp(b, this.buyItemFun, buttonScalingType, cc.rect(-99, -135, 198, 270)), c++);
            c = {};
            c.ui = a;
            c.pageMax = 2;
            c.pageWidth = 640;
            c.pageList = this.itemsList;
            c.turnPageState = landscapePage;
            c.pageItemCount = 6;
            c.pageEffect = 2;
            c.clickRect = null;
            c.pageIconList = [this.mainUI.pageinfo.pageicon0, this.mainUI.pageinfo.pageicon1];
            c.pageEffectFun = function(b) {
                a.parent.isPlayPageEffect = !1
            };
            this.pageUI = createPageLayer(c);
            this.mainUI.pageinfo.addChild(this.pageUI);
            this.refresh()
        },
        showGameBuyItemLayer: function(a) {
            var b = new GamePlayBuyItemLayer;
            createMaskLayer(b);
            b.tag = this.gamePlayBuyItemLayerTag;
            this.addChild(b);
            b.initialize(a, 2)
        },
        buyItemFun: function(a, b) {
            !0 == this.self.pageUI.isMove ? (printLog("不能购买"), engine.gameSound.playEffect(defaultBottonSound)) : this.self.showGameBuyItemLayer(this.itemid)
        }
    });
var PetUpLayer = cc.Layer.extend({
        petSkinTag: 100,
        layerType: null,
        mainUI: null,
        petSkinSprite: null,
        petUpListLayer: null,
        petStart1Tag: 104,
        petStart2Tag: 105,
        petStart3Tag: 106,
        parentUI: null,
        isUpPetEffect: null,
        levelSprite: null,
        clonePet: null,
        ctor: function() {
            this.isUpPetEffect = !1;
            this.layerType = petUpType;
            this._super()
        },
        onEnter: function() {
            this._super();
            var a = heroData.getSelectePet();
            this.mainUI = engine.gameCocosStudio.loadCSS(res.petuplayer);
            this.addChild(this.mainUI);
            engine.gameEvent.createMouseUp(this.mainUI.btnClose,
                this.closeFun, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.petUp, this.petUpFun, buttonScalingType);
            null == this.levelSprite && (this.levelSprite = new LevelSprite, this.levelSprite.ui = this, this.levelSprite.createUI());
            this.levelSprite.setLevelProgress(a);
            this.levelSprite.setPetName(a);
            this.scheduleUpdate()
        },
        closeFun: function(a, b) {
            var c = this.parent.parent;
            !1 != c.isCanClick() && (4 == heroData.getNewbieGuide() && 1 == heroData.newbieUIGuideStep && transitionGameLevelScene(), c.parentUI.switchoverPage(petLayerType))
        },
        petUpFun: function(a, b) {
            var c = this.parent.parent;
            !1 != c.isCanClick() && c.petUpListLayer.petUp()
        },
        update: function(a) {
            !0 == this.isUpPetEffect && (a = heroData.getSelectePet(), this.levelSprite.upatePetData(a, this.clonePet) ? (this.clonePet = null, this.isUpPetEffect = !1, this.levelSprite.setLevelProgress(a), this.mainUI.petinfo.txtAddgold_df.setString("+" + a.getPetAddGold() + "%"), this.mainUI.petinfo.txtAddScore_df.setString("+" + a.getPetAddScore() + "%")) : null != this.clonePet && (this.mainUI.petinfo.txtAddgold_df.setString("+" +
                this.clonePet.getPetAddGold() + "%"), this.mainUI.petinfo.txtAddScore_df.setString("+" + this.clonePet.getPetAddScore() + "%")))
        },
        isCanClick: function() {
            return !1 == this.parentUI.isCanClick() || !1 == this.petUpListLayer.isCanClick() ? !1 : !0
        },
        refresh: function() {},
        outScene: function(a) {
            var b = this;
            showUIFadeOut(this.mainUI.petinfo, 0, null);
            outSceneByBottom(this.mainUI.petUp, 0, null, -200);
            a = this.petUpListLayer.outScene();
            0.7 > a && (a = 0.7);
            this.scheduleOnce(function() {
                null != b.parent && (b.parentUI.nowSelectLayer.setVisible(!0),
                    b.parentUI.nowSelectLayer.inScene(b.layerType), b.removeFromParent(), currentScene.switchoverCompletePage())
            }, a)
        },
        inScene: function(a) {
            var b = this;
            this.setVisible(!0);
            a = heroData.getSelectePet();
            this.mainUI.petinfo.setScale(0.1);
            this.mainUI.petinfo.opacity = 0;
            this.mainUI.petinfo.x = 320;
            this.mainUI.petinfo.y = 440;
            this.mainUI.petinfo.txtAddgold_df.setString("+" + a.getPetAddGold() + "%");
            this.mainUI.petinfo.txtAddScore_df.setString("+" + a.getPetAddScore() + "%");
            showUIFadeIn(this.mainUI.petinfo);
            inSceneByBottom(this.mainUI.petUp,
                0, null, this.mainUI.petUp.y + 195);
            null != this.getChildByTag(this.petSkinTag) && this.removeChildByTag(this.petSkinTag);
            var c = new PetSkin;
            c.x = 320;
            c.y = 500;
            c.petObj = a;
            c.setPetSkin(petskinfree2);
            this.addChild(c);
            c.tag = this.petSkinTag;
            createPetStart(a.getPetStart(), 75, cc.p(320, 490), this, this.petStart1Tag, 1);
            null != this.getChildByTag(this.petStart1Tag) && (a = this.getChildByTag(this.petStart1Tag), a.setScale(0));
            null != this.getChildByTag(this.petStart2Tag) && (a = this.getChildByTag(this.petStart2Tag), a.setScale(0));
            null != this.getChildByTag(this.petStart3Tag) && (a = this.getChildByTag(this.petStart3Tag), a.setScale(0));
            a = cc.callFunc(function() {
                null != b.parent && (currentScene.addNewbieGuideLayer(newbieSelectePetCardLayerType), currentScene.switchoverCompletePage())
            }, this);
            this.petUpListLayer = new PetUpListLayer;
            this.addChild(this.petUpListLayer);
            this.petUpListLayer.y = 260;
            this.petUpListLayer.addPet();
            showStart(b, a, b.petStart1Tag)
        }
    }),
    PetUpListLayer = cc.Layer.extend({
        isPlayEffect: null,
        isAlignmentPoint: null,
        petSpriteList: null,
        initX: null,
        ctor: function() {
            this.petSpriteList = [];
            this.isAlignmentPoint = this.isPlayEffect = !1;
            this._super()
        },
        outScene: function() {
            for (var a = 0, b = this.petSpriteList.length - 1; 0 <= b; b--) {
                var c = this.convertToWorldSpace(this.petSpriteList[b].getPosition());
                0 < c.x && 640 > c.x && (outSceneByRight(this.petSpriteList[b], a, null, this.petSpriteList[b].x + 700), a += 0.05)
            }
            return a + 0.4
        },
        addPet: function() {
            var a = heroData.petDic,
                b = 0,
                c = 0,
                d = heroData.getSelectePet().id,
                e;
            for (e in a) e != d && (c++, a = new PetUpSprite, a.petData = heroData.petDic[e],
                a.toX = b, a.self = this, a.isSwallowTouches = !1, this.addChild(a), this.petSpriteList.push(a), engine.gameEvent.createMouseUp(a, this.selectPetFun, null, cc.rect(-75, -103, 150, 206)), 4 >= c ? (a.x = b + 640, inSceneByRight(a, 0.01 + 0.1 * c, null, a.toX)) : a.x = b, b += 160);
            this.setInitX();
            this.setX(this.initX);
            engine.gameEvent.createMouseDown(this, this.mouseDown, null, cc.rect(0, -100, 160 * c, 200));
            engine.gameEvent.createMouseMove(this, this.mouseMove, null);
            engine.gameEvent.createMouseUp(this, this.mouseUp, null)
        },
        setInitX: function() {
            4 <=
                this.petSpriteList.length && (this.initX = 80);
            3 == this.petSpriteList.length && (this.initX = 160);
            2 == this.petSpriteList.length && (this.initX = 240);
            1 == this.petSpriteList.length && (this.initX = 320)
        },
        setX: function(a) {
            this.x = a;
            this.showPetSprite()
        },
        isCanClick: function() {
            return !0 == this.isPlayEffect || !0 == this.isAlignmentPoint ? !1 : !0
        },
        mouseDown: function(a, b) {
            if (!1 != this.isCanClick()) {
                this.isMove = !1;
                var c = b.getCurrentTarget();
                c.getClickRect();
                this.mouseDownPoint = c.convertToNodeSpace(a.getLocation())
            }
        },
        mouseUp: function(a,
            b) {
            !1 != this.isCanClick() && (this.isMove = !1, this.mouseDownPoint = null, this.alignmentPoint())
        },
        mouseMove: function(a, b) {
            if (!1 != this.isCanClick()) {
                var c = b.getCurrentTarget();
                c.getClickRect();
                c = c.convertToNodeSpace(a.getLocation());
                null != this.mouseDownPoint && 30 <= cc.pDistance(this.mouseDownPoint, c) && (this.setX(this.x + c.x - this.mouseDownPoint.x), this.isMove = !0)
            }
        },
        selectPetFun: function(a, b) {
            !0 != this.self.isMove && (currentScene.removeNewbieGuideLayer(), currentScene.addNewbieGuideLayer(newbieUseSelectePetCardLayerType),
                this.selectItem())
        },
        petUp: function() {
            currentScene.removeNewbieGuideLayer();
            currentScene.addNewbieGuideLayer(newbiePetUpTOMainUIType);
            heroData.runUINewbieGuide(newbiePetUpTOMainUIType);
            this.isPlayEffect = !0;
            for (var a = [], b = [], c = !0, d = this.petSpriteList.length - 1; 0 <= d; d--)
                if (!0 == this.petSpriteList[d].isSelectPet) {
                    var e = this.petSpriteList[d];
                    a.push(e.petData.id);
                    b.push(e);
                    this.petSpriteList.splice(d, 1)
                } 0 >= a.length && (this.isPlayEffect = !1);
            if (0 < a.length) {
                d = heroData.getSelectePet();
                this.parent.clonePet = d.clone();
                for (e = 0; e < a.length; e++) d.upLevelByPetID(d.id, a[e]);
                engine.gameSound.playEffect(soundres.petup);
                saveHeroData()
            }
            for (e = 0; e < b.length; e++) this.addPetUpEffect(b[e], c), c && (c = !1)
        },
        alignmentPoint: function() {
            var a = this,
                b = this.x;
            this.x > this.initX && (b = this.initX);
            this.x < 160 * (4 - this.petSpriteList.length) + this.initX && (b = 160 * (4 - this.petSpriteList.length) + this.initX);
            4 >= this.petSpriteList.length && (b = this.initX);
            var b = 160 * Math.round((b - this.initX) / 160) + this.initX,
                c = cc.callFunc(function() {
                    a.showPetSprite();
                    a.isAlignmentPoint = !1
                }),
                b = cc.moveTo(0.2, cc.p(b, this.y)),
                c = cc.sequence(b, c);
            this.runAction(c)
        },
        showPetSprite: function() {
            for (var a = 0; a < this.petSpriteList.length; a++) this.petSpriteList[a].x < -this.x + 1500 && this.petSpriteList[a].initialize()
        },
        alignmentSprite: function() {
            var a = 0,
                b = !1,
                c = this;
            this.setInitX();
            for (var d = 0; d < this.petSpriteList.length; d++) {
                var e = this.petSpriteList[d];
                e.stopAllActions();
                e.x = e.toX;
                e.toX = a;
                if (e.x != e.toX)
                    if (!1 == b) {
                        var b = !0,
                            f = cc.callFunc(function() {
                                c.alignmentPoint();
                                c.isPlayEffect = !1
                            });
                        inSceneByRight(e,
                            0, f, e.toX)
                    } else inSceneByRight(e, 0, null, e.toX);
                a += 160
            }!1 == b && (this.alignmentPoint(), this.isPlayEffect = !1)
        },
        addPetUpEffect: function(a, b) {
            var c = createGameAnimation(res.uieffect_json, "petupeffect1", 55);
            c.playCount = 1;
            c.x = a.x + this.x;
            c.y = a.y + this.y;
            this.parent.addChild(c);
            c.frameFun = function(b) {
                5 == b && a.removeFromParent()
            };
            c.frameCompleteFun = function() {
                var a = cc.moveTo(0.3, cc.p(320, 640)),
                    e = cc.callFunc(function() {
                        b && (c.parent.isUpPetEffect = !0, c.parent.petUpListLayer.alignmentSprite());
                        c.removeFromParent()
                    });
                c.runAction(cc.sequence(a, e))
            }
        }
    });
var giftIconWidth = 90,
    GiftLayer = cc.Layer.extend({
        mainUI: null,
        gamePlayFacade: null,
        btnClose: null,
        parentUI: null,
        isPlayEffect: null,
        giftOb: null,
        maskBg: null,
        initialize: function() {
            var a = this,
                b = new cc.DrawNode;
            b.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
            this.addChild(b, -1);
            this.maskBg = b;
            engine.gameEvent.createMouseDown(this, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
            this.isPlayEffect = !1;
            this.mainUI = engine.gameCocosStudio.loadCSS(res_open_load.giftlayer);
            this.mainUI.x = 320;
            this.mainUI.y = 528;
            this.mainUI.setAnchorPoint(cc.p(0.5, 0.5));
            this.addChild(this.mainUI);
            this.mainUI.setScale(0.5);
            this.mainUI.setOpacity(0.5);
            var c = cc.callFunc(function() {
                    a.addGameEvent.bind(a)()
                }),
                d = cc.scaleTo(0.1, 1.1),
                e = cc.scaleTo(0.1, 1),
                b = cc.fadeIn(0.2),
                c = cc.sequence(d, e, c),
                b = cc.spawn(c, b);
            this.mainUI.runAction(b)
        },
        addGameEvent: function() {
            engine.gameEvent.createMouseUp(this.mainUI.btn_ad, this.seeAD.bind(this), buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.uiInfo.closebtn,
                this.closBuyGift.bind(this), buttonScalingType)
        },
        seeAD: function(a, b) {
            if (1 > heroData.gameUserData.dayGift) {
                var c = this;
                gameSDK.showRewardVideoAd(rewardedVideoID2, function() {
                    heroData.watchNum += 1;
                    heroData.gameUserData.dayGift++;
                    c.isPlayEffect = !0;
                    var a = {
                        gold: 0,
                        diamond: 50,
                        pet: "",
                        item: "1008|2|1006|2|1009|2|1004|2",
                        randompet: ""
                    };
                    addGiftShowUIWithOb(a, function() {
                        c.isPlayEffect = !1;
                        heroData.buyGift(a);
                        currentScene.refresh()
                    });
                    currentScene.refresh();
                    saveHeroData();
                    currentScene.closeGiftLayer()
                })
            } else cc.log("今日广告已看完"),
                currentScene.addChild(new PlayADFailLayer(228), 999999)
        },
        closBuyGift: function(a, b) {
            var c = this.mainUI,
                d = this,
                e = cc.callFunc(function() {
                    d.parentUI ? d.parentUI.closeGiftLayer() : d.removeFromParent()
                });
            c.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.2, 0.1), cc.fadeOut(0.2)), e))
        }
    });

function addGiftShowUIWithOb(a, b) {
    var c = this.creatGifUI(a),
        d = new cc.Sprite,
        e = createGameAnimation(res.uieffect_json, "gifteffectend", 30);
    e.playCount = 1;
    e.x = 320;
    e.y = 568;
    var f = createGameAnimation(res.uieffect_json, "gifteffectop", 30);
    f.playCount = 1;
    f.isRemoveFromComplete = !0;
    f.x = 320;
    f.y = 568;
    c.giftUI.x = 320 - (c.iconCount - 1) * giftIconWidth / 2;
    c.giftUI.y = 503;
    d.addChild(e);
    d.addChild(c.giftUI);
    d.addChild(f);
    createMaskLayer(d);
    currentScene.addChild(d, maxLevel);
    currentScene.scheduleOnce(function() {
        d.removeFromParent();
        b && b()
    }, 2)
}

function creatGifUI(a) {
    function b(a) {
        a = new cc.LabelTTF("x" + a.toString(), defaultTxt, 20);
        a.setColor(cc.color(246, 237, 213));
        a.setAnchorPoint(1, 0.5);
        a.enableStroke(cc.color(127, 70, 61, 255), 3);
        a.setPosition(65, 10);
        return a
    }
    var c = new cc.Sprite,
        d = {
            gold: [],
            diamond: 0,
            pet: [],
            itemID: [],
            itemCount: [],
            randompet: ""
        },
        e = 0,
        f = 0;
    if (a.diamond && 0 < a.diamond.toString().length) {
        var g = a.diamond;
        d.diamond = ~~g;
        var h = new cc.Sprite;
        h.setSpriteFrame("gift/gift_diamond.png");
        h.x = f;
        h.y = 70;
        h.addChild(b(g));
        h.scale = 1.3;
        c.addChild(h);
        e++;
        f += giftIconWidth
    }
    if (a.item && 0 < a.item.toString().length)
        for (g = a.item.toString().split("|"), h = 0; h < g.length; h += 2) {
            var k = g[h],
                m = g[h + 1];
            d.itemID.push(parseInt(k));
            d.itemCount.push(parseInt(m));
            var n = new cc.Sprite;
            n.setSpriteFrame("gift/" + k.toString() + ".png");
            n.x = f;
            n.y = 70;
            n.addChild(b(m));
            n.scale = 1.3;
            c.addChild(n);
            e++;
            f += giftIconWidth
        }
    a.randompet && 0 < a.randompet.length && (d.randompet = a.randompet, a = new cc.Sprite, a.setSpriteFrame("gift/randompet.png"), a.x = f, a.y = 70, c.addChild(a), e++);
    this.giftOb = d;
    f = {};
    f.giftInfo =
        d;
    f.giftUI = c;
    f.iconCount = e;
    return f
}

function showAlterInfo(a) {
    if (!currentScene.gemreproduction) {
        currentScene.gemreproduction = new cc.Sprite;
        currentScene.gemreproduction.x = 320;
        currentScene.gemreproduction.y = 200;
        a = new cc.LabelTTF(a, defaultTxt, 25);
        currentScene.gemreproduction.addChild(a);
        a = new cc.Sprite("#gameplaylayer/gemreproduction.png");
        a.scaleX = 1.2;
        currentScene.gemreproduction.addChild(a, -1);
        currentScene.addChild(currentScene.gemreproduction, maxZindex);
        a = cc.fadeOut(1);
        var b = cc.callFunc(function() {
            currentScene.gemreproduction.removeFromParent();
            currentScene.gemreproduction =
                null
        });
        a = cc.sequence(cc.delayTime(1), a, b);
        currentScene.gemreproduction.runAction(a)
    }
};
var GamePlayLayer = cc.Layer.extend({
    gameMapLayer: null,
    gameGridLayer: null,
    bottomGridLayer: null,
    gameEffectLayer: null,
    gameWaterLayer: null,
    gamePlayBottomLayer: null,
    gameMainUILayer: null,
    gamePlayPetLayer: null,
    gameOtherUILayer: null,
    gameDogpenLayer: null,
    gameCollectionLayer: null,
    petFighting: null,
    showGasCount: null,
    promptEffect: null,
    gamePlayFacade: null,
    topzIndex: 100,
    curScore: 0,
    gamePlayBuyItemLayerTag: 1001,
    currentLevelMaxStep: 0,
    parachuteAppear: !1,
    showEffectBlack: !1,
    showShake: !1,
    initialize: function() {
        this.gameMapLayer =
            new cc.Layer;
        this.gameGridLayer = new cc.Layer;
        this.bottomGridLayer = new cc.Layer;
        this.gameEffectLayer = new cc.Layer;
        this.gameDogpenLayer = new cc.Layer;
        this.gameCollectionLayer = new cc.Layer;
        this.gamePlayPetLayer = new GamePlayPetLayer(this.gamePlayFacade);
        this.gamePlayBottomLayer = new GamePlayBottomLayer;
        this.gamePlayBottomLayer.initialize();
        switch (selectType) {
            case 1:
                this.gameMainUILayer = engine.gameCocosStudio.loadCSS(res.gameplaylayer);
                break;
            case 2:
                this.gameMainUILayer = engine.gameCocosStudio.loadCSS(res.gameplaytimelayer)
        }
        this.gameOtherUILayer =
            new cc.Layer;
        this.gameWaterLayer = new GameWaterLayer;
        this.addChild(this.gamePlayBottomLayer);
        this.addChild(this.gameMapLayer);
        this.addChild(this.gameWaterLayer);
        this.addChild(this.bottomGridLayer);
        this.addChild(this.gameGridLayer);
        this.addChild(this.gameDogpenLayer);
        this.addChild(this.gameMainUILayer);
        this.addChild(this.gamePlayPetLayer);
        this.addChild(this.gameEffectLayer);
        this.addChild(this.gameOtherUILayer);
        this.addChild(this.gameCollectionLayer);
        this.showGasCount = 0;
        this.addChild(new ParachuteLayer);
        if (2 == selectType) {
            this.gameMainUILayer.self_name.setString(myGameTool.cutName(gameSDK.sdkPlayInfo.name));
            this.gameMainUILayer.enemy_name.setString(myGameTool.cutName(""));
            this.gameMainUILayer.enemy_score.setString("0");
            this.gameMainUILayer.personbest_icon.visible = !1;
            var a = this,
                b = new MyLoadHeadSprite;
            b.willPos = cc.p(62, 1069);
            b.loadComplete = function(b) {
                b.setPosition(this.willPos);
                a.gameMainUILayer.headcontainer.addChild(b, 98)
            };
            b.setPNGUrl(gameSDK.sdkPlayInfo.photo, 96, "#timemodel/timemodelheadrect.png");
            this.showFightPersonInfo()
        }
    },
    showPerson: null,
    enemyInfoNode: null,
    showFightPersonInfo: function() {
        var a = this;
        if (this.showPerson) this.gamePlayFacade.gameLevelData.score >= this.showPerson.score && (this.gameMainUILayer.enemy_score.setString(""), this.gameMainUILayer.enemy_name.setString(""), this.gameMainUILayer.personbest_icon.visible = !1, this.showPerson = null, this.gameMainUILayer.headcontainer_self.runAction(cc.sequence(cc.moveBy(0.3, 150, 0), cc.callFunc(function() {
            a.showFightPersonInfo()
        }))));
        else if (!(0 >= heroData.fightPerson.length)) {
            this.showPerson =
                heroData.fightPerson.shift();
            if (this.enemyInfoNode) this.enemyInfoNode.removeChildByTag(9527);
            else {
                var b = new cc.Sprite("#timemodel/otherheadrect.png");
                b.setPosition(cc.pAdd(cc.p(724, 1069), cc.p(0, -1)));
                this.gameMainUILayer.headcontainer_self.addChild(b, 99);
                this.enemyInfoNode = this.gameMainUILayer.headcontainer_self
            }
            b = new MyLoadHeadSprite;
            b.willPos = cc.p(724, 1069);
            b.loadComplete = function(b) {
                b.setPosition(this.willPos);
                b.tag = 9527;
                a.gameMainUILayer.headcontainer_self.addChild(b, 98)
            };
            b.setPNGUrl(this.showPerson.photo,
                96, "#timemodel/timemodelheadrect.png");
            this.gameMainUILayer.headcontainer_self.runAction(cc.sequence(cc.moveBy(0.3, -150, 0), cc.callFunc(function() {
                a.showPerson && (a.gameMainUILayer.enemy_score.setString("" + a.showPerson.score), a.gameMainUILayer.enemy_name.setString(a.showPerson.name), a.gameMainUILayer.personbest_icon.visible = !0);
                a.showFightPersonInfo()
            })))
        }
    },
    onExit: function() {
        this._super();
        this.gameMainUILayer.victoryConditionUI && this.gameMainUILayer.victoryConditionUI.destroyNode()
    },
    grtBuyItemPointByItemID: function(a) {
        var b =
            cc.p(0, 0),
            c = this.gamePlayFacade.gamePlayLayer.gameMainUILayer,
            d = null;
        switch (a) {
            case 1006:
                d = c.btnItem1;
                break;
            case 1007:
                d = c.btnItem2;
                break;
            case 1008:
                d = c.btnItem3;
                break;
            case 1009:
                d = c.btnItem4;
                break;
            case 1010:
                d = c.btnItem5
        }
        b.x = d.x;
        b.y = d.y;
        return b
    },
    update: function(a) {
        this.gamePlayFacade.gameLevelData.updateTime();
        this.setTimeProgress();
        a = this.gamePlayFacade.gameLevelData.getGameTimeBySecond();
        this.gameMainUILayer.gameTimeTxt.setString(a.toString())
    },
    addGridList: function(a) {
        for (var b = 0; b < a.length; b++)
            for (var c =
                    0; c < a[b].length; c++) null != a[b][c] && this.addGrid(a[b][c])
    },
    addDogPen: function(a, b) {
        var c = this.gamePlayFacade.gridData.getGridPointByScenePoint(a, b),
            c = cc.pAdd(c, cc.p(0, -30)),
            d = new cc.Sprite("#gameplaylayer/dogpen.png");
        d.setPosition(c);
        this.gameDogpenLayer.addChild(d);
        Global.dogPenStr += "g" + a + "|" + b
    },
    addGrass: function(a, b) {
        return this.gamePlayBottomLayer.addGrass(a, b)
    },
    addIntoPet: function(a, b, c) {
        this.gamePlayBottomLayer.addIntoPet(a, b, c)
    },
    getGrass: function(a, b) {
        return this.gamePlayBottomLayer.getGrass(a,
            b)
    },
    noGrass: function(a, b) {
        this.gamePlayBottomLayer.noGrass(a, b)
    },
    addTransfer: function(a, b, c, d, e, f) {
        this.gamePlayBottomLayer.addTransfer(a, b, c, d, e, f)
    },
    getTransferInfoByGridInfo: function(a, b) {
        return this.gamePlayBottomLayer.getTransferInfoByGridInfo(a, b)
    },
    runTransfer: function(a) {
        this.gamePlayBottomLayer.runTransfer(a)
    },
    addPortal: function(a, b, c) {
        this.gamePlayBottomLayer.addPortal(a, b, c)
    },
    addBottomGridList: function(a) {
        for (var b = 0; b < a.length; b++)
            for (var c = 0; c < a[b].length; c++) null != a[b][c] && this.addBottomGrid(a[b][c])
    },
    addBottomGrid: function(a) {
        this.bottomGridLayer.addChild(a)
    },
    addGrid: function(a) {
        this.gameGridLayer.addChild(a)
    },
    addlinecolumneffect: function(a, b) {
        var c = this.gamePlayFacade.gridData.getGridPointByScenePoint(a, b),
            d = createGameAnimation(res.gameplayeffect_json, "rainbow", 30);
        d.setPosition(c);
        d.isRemoveFromComplete = !0;
        d.playCount = 1;
        0 == this.gamePlayFacade.gameLevelData.waterLayerNum && cc._renderType == cc.game.RENDER_TYPE_WEBGL && d.setBlendFunc(cc.ONE, cc.ONE);
        this.gameEffectLayer.addChild(d);
        return d
    },
    showEffectBg: function() {
        if (!this.showEffectBlack) {
            this.showEffectBlack = !0;
            var a = new cc.DrawNode;
            a.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 170), 0, cc.color(0, 0, 0, 170));
            this.gameEffectLayer.addChild(a, -1);
            var b = this;
            a.runAction(cc.sequence(cc.delayTime(0.4), cc.fadeOut(0.4), cc.removeSelf(), cc.callFunc(function() {
                b.showEffectBlack = !1
            })))
        }
    },
    showShakeFun: function() {
        if (!this.showShake) {
            this.showShake = !0;
            var a = this;
            currentScene.runAction(cc.sequence(cc.delayTime(0.02), cc.scaleTo(0.04, 1.025, 1.025), cc.scaleTo(0.05, 1, 1), cc.scaleTo(0.06, 1.015, 1.015), cc.scaleTo(0.07,
                1, 1), cc.callFunc(function() {
                a.showShake = !1
            })))
        }
    },
    addEffectByGridPoint: function(a, b, c, d, e, f) {
        a = this.gamePlayFacade.gridData.getGridPointByScenePoint(a, b);
        return this.addEffectByScenePoint(a.x, a.y, c, d, e, f)
    },
    addEffectByScenePoint: function(a, b, c, d, e, f, g) {
        if ("linecolumneffect" == d) return c = skeletalAnimation["gridskin|linecolumneffect"], c.folderName = "pngdata/playeffect", d = new GameAnimation, d.initialize(c), d.setFrameIntervalTime(24), d.playCount = 1, d.x = a, d.y = b, d.isRemoveFromComplete = !0, this.gameEffectLayer.addChild(d),
            d;
        c = createGameAnimation(c, d, e);
        c.isRemoveFromComplete = !0;
        c.playCount = 1;
        c.x = a;
        c.y = b;
        this.gameEffectLayer.addChild(c);
        return c
    },
    createFlyStart: function(a, b, c) {
        if (!0 != this.gamePlayFacade.isDespose) {
            var d = this,
                e = this.gamePlayFacade.gridData.getGridPointByScenePoint(a, b),
                f = new cc.Sprite;
            f.x = e.x;
            f.y = e.y;
            f.setScale(1.4 - 0.2 * c);
            f.setOpacity(parseInt(306 - 51 * c));
            f.setSpriteFrame("gameplaylayer/start.png");
            1 == c && (f.isRefresh = !0);
            var e = cc.callFunc(function() {
                    f.removeFromParent();
                    if (!0 == f.isRefresh) {
                        var a = createGameAnimation(res.gameplayeffect_json,
                            "refreshvictoryconditioneffect", 30);
                        a.playCount = 1;
                        a.x = 275;
                        a.y = 880;
                        d.gameMainUILayer.addChild(a);
                        d.gamePlayFacade.refreshVictoryCondition()
                    }
                }),
                g = cc.moveTo(0.5, cc.p(275, 880));
            f.runAction(cc.sequence(g, e));
            this.gameMainUILayer.addChild(f);
            c += 1;
            4 >= c && engineSetTimeOut(function() {
                d.createFlyStart(a, b, c)
            }, 0.05, null, 1)
        }
    },
    addStartEffect: function(a) {
        var b = createGameAnimation(res.gameplayeffect_json, "gameplaystart", 30);
        b.isRemoveFromComplete = !0;
        b.playCount = 1;
        b.x = 30;
        b.y = 10;
        this.gameMainUILayer["start" + a.toString()].addChild(b)
    },
    showPromptEffect: function(a, b, c, d) {
        this.promptEffect.setVisible(!0);
        b == d ? this.promptEffect.setRotation(90) : this.promptEffect.setRotation(0);
        a = this.gamePlayFacade.gridData.getGridPointByScenePoint(a, b);
        c = this.gamePlayFacade.gridData.getGridPointByScenePoint(c, d);
        this.promptEffect.x = (a.x + c.x) / 2;
        this.promptEffect.y = (a.y + c.y) / 2
    },
    addCustomEffectByPoint: function(a, b, c, d, e) {
        d = skeletalAnimation[d];
        d.folderName = c;
        c = new GameAnimation;
        c.playCount = 1;
        c.isRemoveFromComplete = !0;
        c.x = a;
        c.y = b;
        c.initialize(d);
        c.setFrameIntervalTime(e);
        this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(c);
        return c
    },
    createPlayLayer: function(a, b) {
        this.addGridList(a.gridArr);
        this.addBottomGridList(a.specialGridArr);
        this.gamePlayBottomLayer.creatGridBottom(a);
        this.gameWaterLayer.initWaterLayerByCount(b.waterLayerNum, a, b);
        this.promptEffect = createGameAnimation(res.gameplayeffect_json, "prompteffect", 30);
        this.promptEffect.setVisible(!1);
        this.gameEffectLayer.addChild(this.promptEffect);
        switch (selectType) {
            case 1:
                this.gameMainUILayer.stepTxt = creatPlayStepSprite(25);
                this.gameMainUILayer.stepTxt.alignmentType = artWordMiddle;
                this.gameMainUILayer.stepTxt.x = 33;
                this.gameMainUILayer.stepTxt.y = 345;
                this.gameMainUILayer.uiinfo.addChild(this.gameMainUILayer.stepTxt);
                this.setStepNum(b.step.toString());
                this.currentLevelMaxStep = b.step;
                this.parachuteAppear = !1;
                this.gameMainUILayer.levelTxt = new GameArtWord("rankscorefnt", 21, 28);
                this.gameMainUILayer.levelTxt.alignmentType = artWordMiddle;
                this.gameMainUILayer.levelTxt.x = 567;
                this.gameMainUILayer.levelTxt.y = 170;
                this.gameMainUILayer.levelTxt.setString(b.selectLevel.toString());
                this.gameMainUILayer.uiinfo.addChild(this.gameMainUILayer.levelTxt);
                for (var c = 1; 4 > c; ++c) this.gameMainUILayer["start" + c].setPosition(this.getStarPosByScore(this.gamePlayFacade.gameLevelData["score" + c] / this.gamePlayFacade.gameLevelData.maxScore));
                b.setInitGrassCount(this.gamePlayBottomLayer.grassLayer.grassCount);
                this.gameMainUILayer.victoryConditionUI = new VictoryConditionUI;
                this.gameMainUILayer.victoryConditionUI.initialize(b.victoryCondition, this.gameMainUILayer.bubble_1);
                this.setScoreNum(b.score.toString());
                this.gameMainUILayer.uiinfo.scorebg.txtScore_df.setString("0");
                break;
            case 2:
                for (this.setScoreNum(b.score.toString()), this.gameMainUILayer.gameTimeTxt = new GameArtWord("rankscorefnt", 20, 20), this.gameMainUILayer.gameTimeTxt.alignmentType = artWordMiddle, this.gameMainUILayer.gameTimeTxt.x = 318, this.gameMainUILayer.gameTimeTxt.y = 907, this.gameMainUILayer.gameTimeTxt.setString(""), this.gameMainUILayer.addChild(this.gameMainUILayer.gameTimeTxt), this.setTimeProgress(), c = 1; 5 >= c; c++) {
                    var d = skeletalAnimation["gridskin|gasboxeffect"];
                    d.folderName = "pngdata/gridskin";
                    var e = new GameAnimation;
                    e.initialize(d);
                    e.setFrameIntervalTime(14);
                    e.x = 43;
                    e.y = 44;
                    this.gameMainUILayer["gas" + c.toString()].gaseffect = e;
                    this.gameMainUILayer["gas" + c.toString()].addChild(e)
                }
        }
        this.refresh()
    },
    getStarPosByScore: function(a) {
        var b = cc.p(23, 1110),
            c = a * (scoreRotateB - scoreRotateA) + scoreRotateA - 0 + 180;
        85 >= c && (c = 85);
        183 <= c && (c = 183);
        a = b.x + 115 * Math.sin(3.14 * c / 180);
        b = b.y + 115 * Math.cos(3.14 * c / 180);
        return cc.p(a, b)
    },
    refresh: function() {
        switch (selectType) {
            case 1:
                this.refreshItem()
        }
        null !=
            this.getChildByTag(this.gamePlayBuyItemLayerTag) && this.getChildByTag(this.gamePlayBuyItemLayerTag).refresh();
        null != this.addStepLayer && this.addStepLayer.refresh()
    },
    refreshItem: function() {
        0 >= heroData.getItemCount(1006) ? (this.gameMainUILayer.btnItem1.additem.setVisible(!0), this.gameMainUILayer.btnItem1.itemCount_df.setVisible(!1)) : (this.gameMainUILayer.btnItem1.additem.setVisible(!1), this.gameMainUILayer.btnItem1.itemCount_df.setVisible(!0));
        0 >= heroData.getItemCount(1007) ? (this.gameMainUILayer.btnItem2.additem.setVisible(!0),
            this.gameMainUILayer.btnItem2.itemCount_df.setVisible(!1)) : (this.gameMainUILayer.btnItem2.additem.setVisible(!1), this.gameMainUILayer.btnItem2.itemCount_df.setVisible(!0));
        0 >= heroData.getItemCount(1008) ? (this.gameMainUILayer.btnItem3.additem.setVisible(!0), this.gameMainUILayer.btnItem3.itemCount_df.setVisible(!1)) : (this.gameMainUILayer.btnItem3.additem.setVisible(!1), this.gameMainUILayer.btnItem3.itemCount_df.setVisible(!0));
        0 >= heroData.getItemCount(1009) ? (this.gameMainUILayer.btnItem4.additem.setVisible(!0),
            this.gameMainUILayer.btnItem4.itemCount_df.setVisible(!1)) : (this.gameMainUILayer.btnItem4.additem.setVisible(!1), this.gameMainUILayer.btnItem4.itemCount_df.setVisible(!0));
        0 >= heroData.getItemCount(1010) ? (this.gameMainUILayer.btnItem5.additem.setVisible(!0), this.gameMainUILayer.btnItem5.itemCount_df.setVisible(!1)) : (this.gameMainUILayer.btnItem5.additem.setVisible(!1), this.gameMainUILayer.btnItem5.itemCount_df.setVisible(!0));
        this.gameMainUILayer.btnItem1.itemCount_df.setString(heroData.getItemCount(1006).toString());
        this.gameMainUILayer.btnItem2.itemCount_df.setString(heroData.getItemCount(1007).toString());
        this.gameMainUILayer.btnItem3.itemCount_df.setString(heroData.getItemCount(1008).toString());
        this.gameMainUILayer.btnItem4.itemCount_df.setString(heroData.getItemCount(1009).toString());
        this.gameMainUILayer.btnItem5.itemCount_df.setString(heroData.getItemCount(1010).toString())
    },
    showGameBuyItemLayer: function(a) {
        var b = new GamePlayBuyItemLayer;
        createMaskLayer(b);
        b.tag = this.gamePlayBuyItemLayerTag;
        this.addChild(b,
            this.topzIndex);
        b.initialize(a, 1)
    },
    showCommonLevelWinLayer: function(a) {
        var b = new CommonLevelWinLayer;
        b.gamePlayFacade = this.gamePlayFacade;
        createMaskLayer(b);
        this.gameOtherUILayer.addChild(b);
        b.initialize(a)
    },
    showGameTimeEndLayer: function(a) {
        var b = new GameTimeEndLayer;
        createMaskLayer(b);
        this.gameOtherUILayer.addChild(b);
        b.gamePlayFacade = this.gamePlayFacade;
        b.initialize(a)
    },
    showCommonLevelLoseLayer: function(a) {
        var b = new CommonLevelLoseLayer;
        createMaskLayer(b);
        this.gameOtherUILayer.addChild(b);
        b.initialize(a)
    },
    showCommonAddStepLayer: function() {
        if (null == this.addStepLayer) {
            var a = new AddStepLayer;
            a.gamePlayFacade = this.gamePlayFacade;
            createMaskLayer(a);
            this.gameOtherUILayer.addChild(a);
            a.initialize();
            this.addStepLayer = a
        }
    },
    closeAddStepLayer: function() {
        null != this.addStepLayer && (this.addStepLayer.removeFromParent(), this.addStepLayer = null)
    },
    addScoreEffect: function(a, b, c) {
        var d = 1E6 * a + b,
            e = this.gameEffectLayer.getChildByTag(d);
        if (!(null != e && e.num > c)) {
            var f = new cc.LabelTTF(c.toString(), defaultTxt, 25, cc.size(200, 52));
            f.setColor(cc.color(255, 255, 255));
            f.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            f.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            e = this.gamePlayFacade.gridData.getGridPointByScenePoint(a, b);
            f.x = e.x;
            f.y = e.y;
            f.setScale(0.5);
            f.opacity = 0;
            a = cc.moveTo(0.2, cc.p(e.x, e.y + 50));
            b = cc.fadeIn(0.2);
            var g = cc.scaleTo(0.2, 1);
            a = cc.spawn(a, b, g);
            b = cc.delayTime(0.3);
            e = cc.moveTo(0.2, cc.p(e.x, e.y + 60));
            g = cc.fadeOut(0.2);
            e = cc.spawn(e, g);
            g = cc.callFunc(function() {
                f.removeFromParent()
            });
            f.num = c;
            f.tag = d;
            this.gameEffectLayer.addChild(f);
            f.runAction(cc.sequence(a, b, e, g))
        }
    },
    setStepNum: function(a) {
        //debugtest.testParachute && heroData.showParachute(1);
        switch (selectType) {
            case 1:
                if (this.gameMainUILayer.stepTxt.setString(a.toString()), 0 < this.currentLevelMaxStep) {
                    if (this.gamePlayFacade.gamePlayControl.isFallEffect || this.gamePlayFacade.gamePlayControl.isGameEnd) break;
                    /*if (!this.parachuteAppear && 5 <= heroData.gameUserData.powerUsed) {
                        if (0.3 > a / this.currentLevelMaxStep && Math.random() > 0.5 - (heroData.gameUserData.powerUsed - 5) / 10) {
                            heroData.gameUserData.powerUsed =
                                0;
                            heroData.showParachute(1);
                            this.parachuteAppear = !0;
                            saveHeroData();
                            break
                        }
                        4 >= a && (heroData.showParachute(2), this.parachuteAppear = !0)
                    }*/
                }
        }
    },
    setScoreNum: function(a) {
        this.curScore = a;
        switch (selectType) {
            case 1:
                this.refreshScoreProgress(a);
                this.refreshStarState(a);
                this.gameMainUILayer.uiinfo.scorebg.txtScore_df.setString(a.toString());
                break;
            case 2:
                this.gameMainUILayer.self_score.setString(a.toString()), this.showFightPersonInfo()
        }
    },
    refreshScoreProgress: function(a) {
        var b = this.gamePlayFacade.gameLevelData.maxScore;
        this.gameMainUILayer.numprogress.rotation = (a < b ? a / b : 1) * (scoreRotateB - scoreRotateA) + scoreRotateA
    },
    refreshStarState: function(a) {
        for (var b = 1; 4 > b; b++) this.gamePlayFacade.gameLevelData["score" + b] <= a && this.gameMainUILayer["start" + b].setSpriteFrame(cc.spriteFrameCache.getSpriteFrame("gameplaylayer/start1.png"))
    },
    setTimeProgress: function() {
        this.gameMainUILayer.timeProgress.width = 282 * (this.gamePlayFacade.gameLevelData.maxTime - this.gamePlayFacade.gameLevelData.nowTime) / this.gamePlayFacade.gameLevelData.maxTime
    },
    playGasEffect: function(a, b) {
        0 == a && 1 == a;
        7 == a && (a = 6);
        var c = this.gamePlayFacade.gameLevelData.gasCount;
        2 <= c && this.addEffectByGridPoint(a, b, res.gameplayeffect_json, "combox" + c.toString(), 30, 2)
    },
    refreshGasIcon: function() {
        switch (this.gamePlayFacade.gameLevelData.gasCount) {
            case 0:
                this.gameMainUILayer.gas1.setVisible(!1);
                this.gameMainUILayer.gas2.setVisible(!1);
                this.gameMainUILayer.gas3.setVisible(!1);
                this.gameMainUILayer.gas4.setVisible(!1);
                this.gameMainUILayer.gas5.setVisible(!1);
                break;
            case 1:
                this.gameMainUILayer.gas1.setScale(0.1);
                this.gameMainUILayer.gas1.runAction(cc.scaleTo(0.2, 1));
                this.gameMainUILayer.gas1.setVisible(!0);
                break;
            case 2:
                this.gameMainUILayer.gas2.setScale(0.1);
                this.gameMainUILayer.gas2.runAction(cc.scaleTo(0.2, 1));
                this.gameMainUILayer.gas2.setVisible(!0);
                break;
            case 3:
                this.gameMainUILayer.gas3.setScale(0.1);
                this.gameMainUILayer.gas3.runAction(cc.scaleTo(0.2, 1));
                this.gameMainUILayer.gas3.setVisible(!0);
                break;
            case 4:
                this.gameMainUILayer.gas4.setScale(0.1);
                this.gameMainUILayer.gas4.runAction(cc.scaleTo(0.2, 1));
                this.gameMainUILayer.gas4.setVisible(!0);
                break;
            case 5:
                this.gameMainUILayer.gas5.setScale(0.1), this.gameMainUILayer.gas5.runAction(cc.scaleTo(0.2, 1)), this.gameMainUILayer.gas5.setVisible(!0)
        }
    }
});
var SetLayer = cc.Layer.extend({
    mainUI: null,
    onEnter: function() {
        this._super();
        this.mainUI = engine.gameCocosStudio.loadCSS(res.setlayer);
        engine.gameEvent.createMouseUp(this.mainUI.closegamebtn, this.closegameFun, buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.closeFun, buttonScalingType);
        this.mainUI.btn_sound.setUIState();
        this.addChild(this.mainUI);
        cc.director.pause()
    },
    closeFun: function(a, b) {
        cc.director.resume();
        this.parent.parent.removeFromParent()
    },
    closegameFun: function(a, b) {
        cc.director.resume();
        cc.sys.isNative ? cc.director.end() : transitionGameLevelScene()
    }
});
var PauseLayer = cc.Layer.extend({
    mainUILayer: null,
    isPlayScene: null,
    ctor: function() {
        this.isPlayScene = !1;
        this._super()
    },
    onEnter: function() {
        this._super();
        this.mainUILayer = engine.gameCocosStudio.loadCSS(res.pauselayer);
        engine.gameEvent.createMouseUp(this.mainUILayer.btnClose, this.closeFun, buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUILayer.btnReplay, this.replayFun, buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUILayer.btnMenu, this.menuFun, buttonScalingType);
        this.addChild(this.mainUILayer);
        this.mainUILayer.btn_sound.setUIState();
        cc.director.pause()
    },
    closeFun: function(a, b) {
        cc.director.resume();
        this.parent.parent.removeFromParent()
    },
    replayFun: function(a, b) {
        null != currentScene && null != currentScene.despose && currentScene.despose();
        cc.director.resume();
        switch (selectType) {
            case 1:
                !0 == this.parent.parent.isPlayScene && !0 == isGameOverUSEStrength && heroData.useStrength();
                isOpenCommonLevel = !0;
                transitionGameLevelScene();
                break;
            case 2:
                isOpenStandardLevel = !0, transitionGameLevelScene()
        }
    },
    menuFun: function(a,
        b) {
        null != currentScene && null != currentScene.despose && currentScene.despose();
        switch (selectType) {
            case 1:
                !0 == this.parent.parent.isPlayScene && !0 == isGameOverUSEStrength && heroData.useStrength()
        }
        cc.director.resume();
        transitionGameLevelScene()
    }
});
var GamePetLayer = cc.Layer.extend({
        layerType: null,
        petNameSkillTag: 101,
        petSkinLayerTag: 103,
        petLvevelTag: 107,
        petStart1Tag: 104,
        petStart2Tag: 105,
        petStart3Tag: 106,
        petPagezIndex: 101,
        petlevelzIndex: 100,
        levelSprite: null,
        mainUI: null,
        petPageLayer: null,
        parentUI: null,
        pageLeaveOrder: null,
        btnIncubationPet: null,
        btnBackpackPet: null,
        btnUpPet: null,
        ctor: function() {
            this._super();
            this.layerType = petLayerType;
            this.pageLeaveOrder = ["btnIncubationPet", "btnUpPet", "btnBackpackPet"]
        },
        onEnter: function() {
            this._super();
            this.createMainUI();
            this.petPageLayer = new PetPageLayer;
            this.petPageLayer.initialize();
            this.addChild(this.petPageLayer, this.petPagezIndex);
            this.refresh();
            3 == heroData.getNewbieGuide() && 2 == heroData.newbieUIGuideStep && this.parent.addNewbieGuideLayer(newbieGamePetLayerType)
        },
        createMainUI: function() {
            this.mainUI = new cc.Layer;
            this.addChild(this.mainUI);
            var a = new cc.Sprite;
            a.setSpriteFrame("publicimg/4.png");
            a.x = 71;
            a.y = 928;
            this.mainUI.btnClose = a;
            this.mainUI.addChild(a);
            a = new cc.Sprite;
            a.x = 320;
            a.y = 350;
            a.setSpriteFrame("pet/pinfo.png");
            a.setCascadeOpacityEnabled(!0);
            this.mainUI.ppetinfo = a;
            this.mainUI.addChild(a);
            var b = new cc.LabelTTF("", defaultTxt, 25, cc.size(400, 65), cc.TEXT_ALIGNMENT_CENTER);
            b.x = 308;
            b.y = 204;
            b.setColor(cc.color(137, 118, 110));
            a.addChild(b);
            this.mainUI.ppetinfo.txtPetPower_df = b;
            b = new cc.Sprite;
            b.setSpriteFrame("publicimg/gold.png");
            b.x = 150;
            b.y = 170;
            a.addChild(b);
            b = new cc.LabelTTF("", defaultTxt, 25, cc.size(400, 65));
            b.x = 390;
            b.y = 155;
            b.setColor(cc.color(101, 85, 78));
            a.addChild(b);
            this.mainUI.ppetinfo.txtAddgold_df = b;
            b = new cc.Sprite;
            b.setSpriteFrame("publicimg/score.png");
            b.x = 350;
            b.y = 170;
            a.addChild(b);
            b = new cc.LabelTTF("", defaultTxt, 25, cc.size(400, 65));
            b.setColor(cc.color(101, 85, 78));
            a.addChild(b);
            b.x = 590;
            b.y = 155;
            this.mainUI.ppetinfo.txtAddScore_df = b;
            b = new cc.LabelTTF("", defaultTxt, 25, cc.size(400, 65), cc.TEXT_ALIGNMENT_CENTER);
            b.setColor(cc.color(137, 118, 110));
            b.x = 308;
            b.y = 105;
            a.addChild(b);
            this.mainUI.ppetinfo.txtSkillName_df = b;
            b = new cc.LabelTTF("", defaultTxt, 25, cc.size(450, 65));
            b.setColor(cc.color(101, 85, 78));
            b.x = 376;
            b.y = 65;
            a.addChild(b);
            this.mainUI.ppetinfo.txtSkillExplain_df = b;
            engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.closeFun, buttonScalingType)
        },
        closeFun: function(a, b) {
            var c = this.parent.parent;
            !1 != c.isCanClick() && c.parentUI.switchoverPage(gameselectlayerType)
        },
        isCanClick: function() {
            return !1 == this.parentUI.isCanClick() ? !1 : !0
        },
        incubationPetFun: function(a, b) {
            !1 != this.parent.parent.isCanClick() && (currentScene.removeNewbieGuideLayer(), this.parent.pageLeaveOrder = ["btnIncubationPet", "btnUpPet", "btnBackpackPet"],
                this.parent.parentUI.switchoverPage(incubationPetLayerType))
        },
        upPetFun: function(a, b) {
            !1 != this.parent.parent.isCanClick() && (currentScene.removeNewbieGuideLayer(), this.parent.pageLeaveOrder = ["btnUpPet", "btnBackpackPet", "btnIncubationPet"], this.parent.parentUI.switchoverPage(petUpType))
        },
        backpackPetFun: function(a, b) {
            !1 != this.parent.parent.isCanClick() && (this.parent.pageLeaveOrder = ["btnBackpackPet", "btnUpPet", "btnIncubationPet"], this.parent.parentUI.switchoverPage(petBackpackLayerType))
        },
        outScene: function(a) {
            var b =
                this,
                c;
            switch (a) {
                case incubationPetLayerType:
                    c = cc.callFunc(function() {
                        b.parentUI.uiBgLayer.pillowPlay(petSkinLeave);
                        null != b.mainUI.getChildByTag(b.petSkinLayerTag) && b.mainUI.getChildByTag(b.petSkinLayerTag).setPetSkin(petskinjumpout);
                        b.scheduleOnce(function() {
                            b.parentUI.nowSelectLayer.inScene(b.layerType);
                            b.removeFromParent();
                            currentScene.switchoverCompletePage()
                        }, 0.4)
                    });
                    break;
                case gameselectlayerType:
                    null != b.mainUI.getChildByTag(b.petSkinLayerTag) && b.mainUI.getChildByTag(b.petSkinLayerTag).setVisible(!1);
                    outSceneByLeft(this.mainUI.btnClose, 0, null, -100);
                    c = cc.callFunc(function() {
                        b.scheduleOnce(function() {
                            b.removeFromParent();
                            currentScene.switchoverCompletePage()
                        }, 0.4)
                    });
                    break;
                case petBackpackLayerType:
                    c = cc.callFunc(function() {
                        b.parentUI.nowSelectLayer.inScene(b.layerType);
                        b.scheduleOnce(function() {
                            b.removeFromParent();
                            currentScene.switchoverCompletePage()
                        }, 0.4)
                    });
                    break;
                case petUpType:
                    c = cc.callFunc(function() {
                        null != b.mainUI.getChildByTag(b.petSkinLayerTag) && b.mainUI.getChildByTag(b.petSkinLayerTag).setVisible(!1);
                        b.parentUI.nowSelectLayer.inScene(b.layerType);
                        b.scheduleOnce(function() {
                            b.removeFromParent();
                            currentScene.switchoverCompletePage()
                        }, 1)
                    })
            }
            for (var d = 0; d < b.pageLeaveOrder.length; d++) {
                var e = b[b.pageLeaveOrder[d]],
                    f = cc.delayTime(0.15 * d + 0.2),
                    g = cc.moveTo(0.15, cc.p(e.x, e.y - 200));
                e.runAction(cc.sequence(f, g))
            }
            petUpType != a && this.levelSprite.plevel.runAction(cc.moveTo(0.3, cc.p(this.levelSprite.plevel.x, 1400)));
            showUIFadeOut(this.mainUI.ppetinfo, 0, null);
            showUIFadeOut(this.mainUI.getChildByTag(this.petStart1Tag));
            showUIFadeOut(this.mainUI.getChildByTag(this.petStart2Tag));
            showUIFadeOut(this.mainUI.getChildByTag(this.petStart3Tag));
            outSceneByRight(this.petPageLayer, 0, c, this.petPageLayer.x + 200)
        },
        inScene: function(a) {
            var b = this;
            this.petPageLayer.x = 120;
            currentScene.hiddenNewbieGuideLayer();
            a != petUpType && this.levelSprite.plevel.gotoAndPlay(0);
            inSceneByRight(this.petPageLayer, 0.8, null, 0);
            this.mainUI.ppetinfo.setScale(0.1);
            this.mainUI.ppetinfo.opacity = 0;
            if (null != this.mainUI.getChildByTag(this.petStart1Tag)) {
                var c =
                    this.mainUI.getChildByTag(this.petStart1Tag);
                c.setScale(0)
            }
            null != this.mainUI.getChildByTag(this.petStart2Tag) && (c = this.mainUI.getChildByTag(this.petStart2Tag), c.setScale(0));
            null != this.mainUI.getChildByTag(this.petStart3Tag) && (c = this.mainUI.getChildByTag(this.petStart3Tag), c.setScale(0));
            c = cc.callFunc(function() {
                var a = cc.callFunc(function() {
                    null != b.parent && (3 == heroData.getNewbieGuide() && 6 == heroData.newbieUIGuideStep && currentScene.addNewbieGuideLayer(newbiePetLayerOpenSelectPetType), currentScene.showNewbieGuideLayer(),
                        currentScene.switchoverCompletePage())
                });
                showStart(b.mainUI, a, this.petStart1Tag)
            }, this);
            showUIFadeIn(this.mainUI.ppetinfo, 0.8, c);
            a == incubationPetLayerType && null != b.mainUI.getChildByTag(b.petSkinLayerTag) && b.mainUI.getChildByTag(b.petSkinLayerTag).setPetSkin(petskinjumpin);
            if (a != petBackpackLayerType && a != incubationPetLayerType && a != petUpType) {
                this.mainUI.btnClose.x = -200;
                a = cc.delayTime(0.8);
                var c = cc.moveTo(0.3, cc.p(68, this.mainUI.btnClose.y)),
                    d = cc.moveTo(0.3, cc.p(68, this.mainUI.btnClose.y));
                a = cc.sequence(a,
                    c, d);
                this.mainUI.btnClose.runAction(a)
            }
            this.scheduleOnce(function() {
                b.btnIncubationPet = new cc.Sprite;
                b.btnIncubationPet.setSpriteFrame("pngdata/uieffect/incubationpet8.png");
                this.addChild(b.btnIncubationPet);
                b.btnUpPet = new cc.Sprite;
                b.btnUpPet.setSpriteFrame("pngdata/uieffect/uppet8.png");
                this.addChild(b.btnUpPet);
                b.btnBackpackPet = new cc.Sprite;
                b.btnBackpackPet.setSpriteFrame("pngdata/uieffect/backpackpet8.png");
                this.addChild(b.btnBackpackPet);
                b.btnUpPet.x = 320;
                b.btnBackpackPet.x = 520;
                b.btnIncubationPet.x =
                    120;
                b.btnUpPet.y = -300;
                b.btnBackpackPet.y = -300;
                b.btnIncubationPet.y = -300;
                var a = new cc.Sprite;
                a.setSpriteFrame("achievement/redpoint.png");
                this.btnIncubationPet.redpoint = a;
                this.btnIncubationPet.redpoint.x = 170;
                this.btnIncubationPet.redpoint.y = 170;
                this.btnIncubationPet.addChild(a);
                a = cc.callFunc(function() {
                    engine.gameEvent.createMouseUp(b.btnIncubationPet, b.incubationPetFun, buttonScalingType);
                    engine.gameEvent.createMouseUp(b.btnUpPet, b.upPetFun, buttonScalingType);
                    engine.gameEvent.createMouseUp(b.btnBackpackPet,
                        b.backpackPetFun, buttonScalingType)
                });
                outSceneByBottom(b.btnUpPet, 0, null, 100);
                outSceneByBottom(b.btnBackpackPet, 0, null, 100);
                outSceneByBottom(b.btnIncubationPet, 0, a, 100);
                b.refresh()
            }, 0.2)
        },
        refresh: function() {
            this.btnIncubationPet && (this.btnIncubationPet.redpoint.visible = 3 > heroData.gameUserData.dayPet);
            var a = heroData.getSelectePet();
            null == this.levelSprite && (this.levelSprite = new LevelSprite, this.levelSprite.ui = this, this.levelSprite.createUI());
            this.levelSprite.setLevelProgress(a);
            this.levelSprite.setPetName(a);
            null != this.mainUI.getChildByTag(this.petSkinLayerTag) && this.mainUI.removeChildByTag(this.petSkinLayerTag);
            var b = new PetSkin;
            b.x = 320;
            b.y = 500;
            b.petObj = a;
            b.setPetSkin(petskinfree2);
            this.mainUI.addChild(b);
            b.tag = this.petSkinLayerTag;
            null != this.mainUI.getChildByTag(this.petStart1Tag) && this.mainUI.removeChildByTag(this.petStart1Tag);
            null != this.mainUI.getChildByTag(this.petStart2Tag) && this.mainUI.removeChildByTag(this.petStart2Tag);
            null != this.mainUI.getChildByTag(this.petStart3Tag) && this.mainUI.removeChildByTag(this.petStart3Tag);
            createPetStart(a.getPetStart(), 75, cc.p(320, 490), this.mainUI, this.petStart1Tag, 1);
            this.mainUI.ppetinfo.txtPetPower_df.setString(engine.gameData.dataDic.language[105].content);
            this.mainUI.ppetinfo.txtAddgold_df.setString("+" + a.getPetAddGold().toString() + "%");
            this.mainUI.ppetinfo.txtAddScore_df.setString("+" + a.getPetAddScore().toString() + "%");
            a = engine.gameData.dataDic.petskilldata[a.getSkillID()];
            this.mainUI.ppetinfo.txtSkillName_df.setString(a.skillname);
            this.mainUI.ppetinfo.txtSkillExplain_df.setString(a.explain.toString());
            null != this.mainUI.ppetinfo.getChildByTag(this.petNameSkillTag) && this.mainUI.ppetinfo.removeChildByTag(this.petNameSkillTag);
            b = new cc.Sprite;
            b.setSpriteFrame("pet/s" + a.skillicon.toString() + ".png");
            b.x = 95;
            b.y = 60;
            b.setCascadeOpacityEnabled(!0);
            this.mainUI.ppetinfo.addChild(b);
            var c = new cc.Sprite;
            c.setSpriteFrame("pet/l" + a.skilllevel.toString() + ".png");
            c.x = 68;
            c.y = 28;
            b.addChild(c)
        }
    }),
    LevelSprite = cc.Class.extend({
        petNameSpriteTag: 100,
        plevel: null,
        plevelInfo: null,
        levelProgress: null,
        petLevel: null,
        ui: null,
        toLevel: null,
        toExp: null,
        addExp: null,
        upatePetData: function(a, b) {
            var c = parseInt(this.petLevel.text);
            a.getPetMaxLevel();
            var d = parseInt(this.levelProgress.progresstxt.getString());
            this.toLevel != a.petlevel && this.toExp != a.petlevelnum && (this.toLevel = a.petlevel, this.toExp = a.petlevelnum, this.addExp = Math.ceil(a.getNeedUpPetExp(c, d) / 80), 1 > this.addExp && (this.addExp = 1));
            if (null != this.addExp && null != b) {
                b.upLevelByExperience(this.addExp);
                if (b.petlevel > a.petlevel || b.petlevel == a.petlevel && b.petlevelnum > a.petlevelnum) return this.setLevelProgress(a),
                    !0;
                this.setLevelProgress(b)
            }
            return !1
        },
        createUI: function() {
            this.plevel = createGameAnimation(res.uieffect_json, "plevel", 55);
            this.plevelInfo = this.plevel.getBitmapByUrlName("levelpng3.png");
            this.plevel.playCount = 1;
            this.plevel.x = 328;
            this.plevel.y = 1E3;
            this.plevel.gotoAndStop(this.plevel.frameMaxIndex - 1);
            this.ui.addChild(this.plevel);
            this.levelPng = new cc.Sprite;
            this.levelPng.setSpriteFrame("pet/lv.png");
            this.levelPng.y = 38;
            this.plevelInfo.addChild(this.levelPng);
            this.petLevel = new GameArtWord("fontA", 24, 35);
            this.petLevel.alignmentType = artWordLeft;
            this.petLevel.y = 42;
            this.plevelInfo.addChild(this.petLevel);
            var a = this.plevel.getBitmapByUrlName("levelpng4.png");
            this.levelProgress = new LevelProgress;
            this.levelProgress.initialize();
            this.levelProgress.x = 180;
            this.levelProgress.y = 40;
            a.addChild(this.levelProgress)
        },
        setLevelProgress: function(a) {
            a.petlevel >= a.getPetMaxLevel() ? (this.levelProgress.setProgress(1), this.levelProgress.progresstxt.y = cc.sys.browserType == cc.sys.BROWSER_TYPE_FIREFOX ? -16 : -7, this.levelProgress.setProgressTxt(engine.gameData.dataDic.language[117].content)) :
                (this.levelProgress.setProgress(a.petlevelnum / a.getPetNextLevelNum()), this.levelProgress.progresstxt.y = cc.sys.browserType == cc.sys.BROWSER_TYPE_FIREFOX ? -18 : -9, this.levelProgress.setProgressTxt(a.petlevelnum.toString() + "/" + a.getPetNextLevelNum().toString()));
            10 <= a.petlevel ? (this.levelPng.x = 33, this.petLevel.x = 55) : (this.levelPng.x = 57, this.petLevel.x = 79);
            this.petLevel.setString(a.petlevel.toString())
        },
        setPetName: function(a) {
            null != this.plevelInfo.getChildByTag(this.petNameSpriteTag) && this.plevelInfo.removeChildByTag(this.petNameSpriteTag);
            var b = new cc.Sprite;
            b.setSpriteFrame("pet/n" + a.getPetNameIcon() + ".png");
            b.x = 140;
            b.y = 100;
            this.plevelInfo.addChild(b);
            b.tag = this.petNameSpriteTag
        }
    }),
    LevelProgress = cc.Sprite.extend({
        progressbody: null,
        progresstop: null,
        progresstxt: null,
        percent: null,
        initialize: function() {
            var a = new cc.Sprite;
            a.setSpriteFrame("pet/progressend.png");
            this.addChild(a);
            this.progressbody = new cc.Sprite;
            this.progressbody.setAnchorPoint(cc.p(0, 0.5));
            this.progressbody.x = -83;
            this.progressbody.y = -9;
            this.progressbody.setSpriteFrame("pet/progressbody.png");
            this.addChild(this.progressbody);
            this.progresstop = new cc.Sprite;
            this.progresstop.x = -94;
            this.progresstop.y = -9;
            this.progresstop.setSpriteFrame("pet/progresstop.png");
            this.addChild(this.progresstop);
            this.progresstxt = new cc.LabelTTF("", "Microsoft YaHei", 25);
            this.progresstxt.x = -7;
            this.progresstxt.y = -7;
            this.addChild(this.progresstxt)
        },
        setProgress: function(a) {
            1 < a && (a = 1);
            this.percent = a;
            0.158 > a ? this.progressbody.setVisible(!1) : (this.progressbody.setVisible(!0), this.progressbody.setScaleX(151 / 13 * (a - 0.1)));
            this.progresstop.x = -94 + 151 * a
        },
        setProgressTxt: function(a) {
            this.progresstxt.setString(a)
        }
    });
var PetBackpackLayer = cc.Layer.extend({
        mainUI: null,
        parentUI: null,
        isShowEffect: null,
        pageUI: null,
        ctor: function() {
            this.layerType = petBackpackLayerType;
            this.isShowEffect = !1;
            this._super()
        },
        onEnter: function() {
            this._super();
            this.mainUI = engine.gameCocosStudio.loadCSS(res.petbackpacklayer);
            this.addChild(this.mainUI);
            this.mainUI.backpackUI.btnPageUp.setVisible(!1);
            this.mainUI.backpackUI.btnPageDown.setVisible(!1);
            engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.closeFun, buttonScalingType)
        },
        addPageInfo: function() {
            var a =
                new cc.Layer,
                b = this,
                c = heroData.petDic;
            heroData.getSelectePet();
            var d = [],
                e = 0,
                f;
            for (f in c) {
                var g = {};
                g.index = e;
                g.petData = c[f];
                d.push(g);
                e++
            }
            c = {};
            c.ui = a;
            c.pageMax = Math.ceil(e / 6);
            c.pageWidth = 640;
            c.pageList = [];
            c.turnPageState = landscapePage;
            c.pageItemCount = 6;
            c.pageEffect = 2;
            c.clickRect = null;
            c.pageIconList = [];
            e = [];
            f = [];
            for (g = 0; g < c.pageMax; g++) {
                var h = new cc.Sprite;
                h.setSpriteFrame("itemlayer/pageicon2.png");
                f.push(h);
                this.mainUI.backpackUI.addChild(h, 1);
                h = new cc.Sprite;
                h.setSpriteFrame("itemlayer/pageicon1.png");
                e.push(h);
                this.mainUI.backpackUI.addChild(h, 2)
            }
            g = {};
            g.spArr = f;
            g.spWidth = 50;
            g.p = cc.p(320, 75);
            g.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(g);
            f = {};
            f.spArr = e;
            f.spWidth = 50;
            f.p = cc.p(320, 75);
            f.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(f);
            e = e.sort(function(a, b) {
                return a.x >= b.x ? 1 : -1
            });
            for (f = 0; f < e.length; f++) c.pageIconList.push(e[f]);
            this.mainUI.backpackUI.btnPageUp.setVisible(!0);
            this.mainUI.backpackUI.btnPageDown.setVisible(!0);
            this.mainUI.backpackUI.btnPageUp.x = e[0].x - 60;
            60 > this.mainUI.backpackUI.btnPageUp.x && (this.mainUI.backpackUI.btnPageUp.x = 60);
            1 < e.length ? (this.mainUI.backpackUI.btnPageDown.x = e[e.length - 1].x + 60, 580 < this.mainUI.backpackUI.btnPageDown.x && (this.mainUI.backpackUI.btnPageDown.x = 580)) : this.mainUI.backpackUI.btnPageDown.x = e[0].x + 60;
            engine.gameEvent.createMouseUp(this.mainUI.backpackUI.btnPageUp, this.pageUp, buttonScalingType);
            engine.gameEvent.createMouseUp(this.mainUI.backpackUI.btnPageDown, this.pageDown, buttonScalingType);
            c.pageEffectFun = function(b) {
                for (var c,
                        d = 0; 3 > d; d++) {
                    var e = cc.scaleTo(0.1, 1.05),
                        f = cc.scaleTo(0.2, 1);
                    c = cc.delayTime(0.1 * d + 0.01);
                    d < b.length && (b[d].setScale(0), b[d].runAction(cc.sequence(c.clone(), e.clone(), f.clone())));
                    d + 3 < b.length && (b[d + 3].setScale(0), b[d + 3].runAction(cc.sequence(c.clone(), e.clone(), f.clone())))
                }
                null != c ? (b = cc.callFunc(function() {
                    null != a.parent && (a.parent.isPlayPageEffect = !1)
                }), null != a.parent && a.parent.runAction(cc.sequence(c.clone(), cc.delayTime(0.3), b))) : null != a.parent && (a.parent.isPlayPageEffect = !1)
            };
            c.setPageInfo = function(c) {
                var e = [];
                a.removeAllChildren();
                for (var f = 6 * c; f < 6 * (c + 1); f++) f <= d.length - 1 && e.push(petBackpackSprite(f, d[f].petData, b, a));
                if (0 <= c - 1)
                    for (f = 6 * (c - 1); f < 6 * (c - 1 + 1); f++) f <= d.length - 1 && petBackpackSprite(f, d[f].petData, b, a);
                if (c + 1 <= this.pageMax - 1)
                    for (f = 6 * (c + 1); f < 6 * (c + 1 + 1); f++) f <= d.length - 1 && petBackpackSprite(f, d[f].petData, b, a);
                0 < e.length && a.parent.pageEffectFun(e)
            };
            this.pageUI = createPageLayer(c);
            this.pageUI.hiddenNoCheckedPage = function() {
                a.removeAllChildren();
                for (var c = 6 * this.pageIndex; c < 6 * (this.pageIndex + 1); c++) c <=
                    d.length - 1 && petBackpackSprite(c, d[c].petData, b, a)
            };
            this.addChild(this.pageUI)
        },
        refresh: function() {},
        pageUp: function(a, b) {
            this.parent.parent.parent.pageUI.lastPage()
        },
        pageDown: function(a, b) {
            this.parent.parent.parent.pageUI.nextPage()
        },
        closeFun: function(a, b) {
            var c = this.parent.parent;
            !1 != c.isCanClick() && (c.pageUI.hiddenNoCheckedPage(), c.parentUI.switchoverPage(petLayerType))
        },
        isCanClick: function() {
            return !1 == this.parentUI.isCanClick() || !0 == this.isShowEffect ? !1 : !0
        },
        inScene: function(a) {
            this.setVisible(!0);
            var b = this;
            a = cc.callFunc(function() {
                b.addPageInfo();
                currentScene.switchoverCompletePage()
            });
            this.mainUI.backpackUI.x += 640;
            inSceneByRight(this.mainUI.backpackUI, 0, a, 320)
        },
        outScene: function(a) {
            var b = this;
            a = cc.callFunc(function() {
                null != b.parent && (b.parentUI.nowSelectLayer.setVisible(!0), b.parentUI.nowSelectLayer.inScene(b.layerType), b.removeFromParent(), currentScene.switchoverCompletePage())
            });
            outSceneByRight(this.mainUI.backpackUI, 0, a, 640);
            outSceneByRight(this.pageUI, 0, a, 640)
        }
    }),
    petBackpackSprite = function(a,
        b, c, d) {
        var e = heroData.getSelectePet(),
            f = new PetBackpackSprite;
        f.x = 115 + a % 3 * 200 + 640 * Math.floor(a / 6);
        f.y = 385 + 275 * (1 - Math.floor(a / 3) % 2);
        f.petData = b;
        f.self = c;
        f.initialize();
        d.addChild(f);
        null != e && e.id == f.petData.id && f.selectItem();
        return f
    };
var BuyPetShopLayer = cc.Layer.extend({
        mainUI: null,
        isOpen: null,
        isClose: null,
        pageUI: null,
        pageUITag: 100,
        initialize: function() {
            this.mainUI = engine.gameCocosStudio.loadCSS(res.buypetshoplayer);
            this.addChild(this.mainUI);
            this.mainUI.bgpn.setVisible(!1);
            this.isClose = this.isOpen = !1;
            this.mainUI.petbg.btnopenpage.self = this;
            engine.gameEvent.createMouseUp(this.mainUI.petbg.btnopenpage, this.openPageFun);
            this.mainUI.btnclosepage.self = this;
            engine.gameEvent.createMouseUp(this.mainUI.btnclosepage, this.closePageFun)
        },
        openPageFun: function(a, b) {
            if (!0 != this.self.isOpen && !0 != this.self.isClose) {
                this.self.isOpen = !0;
                currentScene.removeNewbieGuideLayer();
                currentScene.addNewbieGuideLayer(newbieSelectPetType);
                this.self.refresh();
                var c = cc.pDistance(cc.p(this.self.x, this.self.y), cc.p(-700, this.self.y)),
                    c = cc.moveTo(c / 1500, cc.p(-700, this.self.y)),
                    d = cc.moveTo(0.2, cc.p(-680, this.self.y)),
                    e = cc.callFunc(function() {
                        this.isOpen = !1
                    }, this.self),
                    c = cc.sequence(c, d, e);
                this.self.runAction(c);
                this.self.mainUI.bgpn.setVisible(!0)
            }
        },
        closePageFun: function(a,
            b) {
            this.self.closePage()
        },
        closePage: function() {
            if (!0 != this.isOpen && !0 != this.isClose) {
                this.isClose = !0;
                this.stopAllActions();
                var a = cc.pDistance(cc.p(this.x, this.y), cc.p(0, this.y)),
                    a = cc.moveTo(a / 1500, cc.p(0, this.y)),
                    b = cc.callFunc(function() {
                        this.isClose = !1;
                        null != this.getChildByTag(this.pageUITag) && this.removeChildByTag(this.pageUITag)
                    }, this),
                    a = cc.sequence(a, b);
                this.runAction(a);
                this.pageUI.hiddenNoCheckedPage();
                this.mainUI.bgpn.setVisible(!1)
            }
        },
        refresh: function() {
            null != this.getChildByTag(this.pageUITag) &&
                this.removeChildByTag(this.pageUITag);
            for (var a = [], b = new cc.Layer, c = this, d = getPetListShop(), e = getPetGemListShop(), f = getPetGoldListShop(), g = 0; g < d.length; g++) {
                var h = {};
                h.petData = new PetData;
                h.petData.petlevel = 1;
                h.petIndex = g;
                h.petData.petid = d[g];
                h.buygem = e[g];
                h.buygold = f[g];
                a.push(h)
            }
            d = {};
            d.ui = b;
            d.pageMax = 6;
            d.pageWidth = 640;
            d.turnPageState = landscapePage;
            d.clickRect = cc.rect(640, 0, 40 + 640 * d.pageMax, 895);
            d.pageIconList = [];
            d.pageEffect = 1;
            d.pageList = [];
            d.pageItemCount = 6;
            d.setPageInfo = function(d) {
                b.removeAllChildren();
                0 < a.length && createShopPetSprite(d, a[d], c, b);
                0 <= d - 1 && createShopPetSprite(d - 1, a[d - 1], c, b);
                d + 1 <= a.length - 1 && createShopPetSprite(d + 1, a[d + 1], c, b)
            };
            this.pageUI = createPageLayer(d);
            this.pageUI.tag = this.pageUITag;
            this.addChild(this.pageUI);
            this.pageUI.hiddenNoCheckedPage = function() {
                b.removeAllChildren();
                0 < a.length && createShopPetSprite(this.pageIndex, a[this.pageIndex], c, b)
            }
        },
        selectPetByID: function(a) {
            heroData.selectPetByID(a);
            currentScene.removeNewbieGuideLayer();
            null != currentScene && null != currentScene.refresh &&
                currentScene.refresh();
            this.closePage()
        }
    }),
    createShopPetSprite = function(a, b, c, d) {
        var e = new PetShopSprite;
        e.x = 680 + 640 * a;
        e.petObj = b;
        e.isSwallowTouches = !1;
        e.self = c;
        d.addChild(e);
        e.initialize()
    };
var VictoryConditionLayer = cc.Layer.extend({
    mainUI: null,
    onEnter: function() {
        this._super();
        this.mainUI = engine.gameCocosStudio.loadCSS(res.victoryconditionlayer);
        this.mainUI.y = 600;
        this.addChild(this.mainUI);
        var a = new GameArtWord("victory1", 42, 55);
        a.setScale(0.9);
        a.alignmentType = artWordMiddle;
        a.x = 111;
        a.y = 120;
        a.setString(selectLevel.toString());
        this.mainUI.uiinfo.levelicon.addChild(a);
        this.initialize()
    },
    initialize: function() {
        var a = getVictoryConditionData(selectLevel, selectType);
        if (null != a.allCondition &&
            0 < a.allCondition.length) {
            var b = new VictoryConditionItemSprite;
            this.mainUI.uiinfo.addChild(b);
            b.setGeneralCondition(a.allCondition);
            b.x = 300;
            b.y = 155
        }
        0 < a.minscore && (b = new VictoryConditionItemSprite, this.mainUI.uiinfo.addChild(b), b.setScore(a.minscore), b.x = 300, b.y = 122);
        var c = this,
            a = cc.callFunc(function() {
                c.scheduleOnce(c.beginGameFun, 1)
            });
        inSceneByTop(this.mainUI, 0, a, 0)
    },
    beginGameFun: function() {
        currentScene.beginGame();
        this.removeFromParent()
    }
});
var SelectUseItemLayer = cc.Layer.extend({
    mainUI: null,
    useItemSpriteList: null,
    selectLevelType: null,
    strengthSpecialLayer: null,
    gamePlayBuyItemLayerTag: 100,
    level: null,
    onEnter: function() {
        this._super();
        this.strengthSpecialLayer = null;
        this.useItemSpriteList = [];
        this.mainUI = engine.gameCocosStudio.loadCSS(res.selectuseitemlayer);
        this.addChild(this.mainUI);
        this.mainUI.searchPersonNode.self_name.setString(myGameTool.cutName(gameSDK.sdkPlayInfo.name));
        var a = new MyLoadHeadSprite;
        a.willPos = cc.p(157, 756);
        var b = this;
        a.loadComplete = function(a) {
            a.setPosition(this.willPos);
            b.mainUI.searchPersonNode.addChild(a, 98)
        };
        a.setPNGUrl(gameSDK.sdkPlayInfo.photo, 140, "#timemodel/suijiwanjia.png");
        var c = new cc.Sprite("#timemodel/TXK1.png");
        c.setPosition(cc.pAdd(a.willPos, cc.p(0, -1)));
        this.mainUI.searchPersonNode.addChild(c, 99);
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.closeFun, buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnStart, this.startFun, buttonScalingType);
        gameSDK.setEntriesLeaderboardData(RANK_TIME,
            null)
    },
    initialize: function(a, b) {
        this.level = b;
        this.selectLevelType = a;
        for (var c = [1001, 1002, 1003, 1004], d = 0; d < c.length; d++) {
            var e = c[d],
                f = 102 + 145 * d;
            if (!(1 == a && 999 == e || 2 == a && 1E3 == e)) {
                var g = new UseItemSprite;
                g.x = f;
                g.y = 420;
                g.itemid = e;
                g.scale = 0.7;
                this.addChild(g);
                this.useItemSpriteList.push(g);
                engine.gameEvent.createMouseUp(g, this.selectItemFun, null, cc.rect(-99, -135, 198, 270))
            }
        }
    },
    refresh: function() {
        for (var a = 0; a < this.useItemSpriteList.length; a++) this.useItemSpriteList[a].refresh(this.useItemSpriteList[a].itemid);
        null != this.getChildByTag(this.gamePlayBuyItemLayerTag) && this.getChildByTag(this.gamePlayBuyItemLayerTag).refresh();
        null != this.strengthSpecialLayer && this.strengthSpecialLayer.refresh()
    },
    selectItemFun: function(a, b) {
        for (var c = 0, d = 0; d < this.parent.useItemSpriteList.length; d++) !0 == this.parent.useItemSpriteList[d].isSelectItem && c++;
        4 <= c && !1 == this.isSelectItem ? this.parent.setItemExplain(null) : 0 < heroData.getItemCount(this.itemid) ? (this.selectItem(), this.isSelectItem ? this.parent.setItemExplain(this.itemid) :
            this.parent.setItemExplain(null)) : this.parent.showGameBuyItemLayer(this.itemid)
    },
    showGameBuyItemLayer: function(a) {
        var b = new GamePlayBuyItemLayer;
        createMaskLayer(b);
        b.selectUseItemLayer = this;
        b.tag = this.gamePlayBuyItemLayerTag;
        this.addChild(b);
        b.initialize(a, 3)
    },
    grtBuyItemPointByItemID: function(a) {
        for (var b = cc.p(0, 0), c = 0; c < this.useItemSpriteList.length; c++) this.useItemSpriteList[c].itemid == a && (b.x = this.useItemSpriteList[c].x, b.y = this.useItemSpriteList[c].y);
        return b
    },
    addBuyItemEffectByItemID: function(a) {},
    setItemExplain: function(a) {},
    startClickAlready: !1,
    startFun: function(a, b) {
        heroData.runUINewbieGuide(newbieCommonLevelPlayGameType);
        var c = this.parent.parent;
        if (!c.startClickAlready) {
            var d = heroData.getStrength();
            if (!0 == isExistStrength && !0 == showAddStrengthEmpty && !1 == heroData.isUnlimiteLives()) {
                if (1 == d && !1 == isGameFree && !0 != this.openShowAddStrengthEmpty) {
                    this.openShowAddStrengthEmpty = this.openShowAddStrengthHalf = !0;
                    return
                }
                if (0 == d && !endlessStrengthGet) {
                    addCNStrengthShopLayer();
                    return
                }
            }!0 == isShowUnlimitedLives &&
                !0 == isExistStrength && !0 == showAddStrengthHalf && !1 == heroData.isUnlimiteLives() && d == Math.ceil(iniStrengthCount / 2) && !0 != this.openShowAddStrengthHalf ? this.openShowAddStrengthHalf = !0 : (selectLevel = c.level, selectType = c.selectLevelType, c.startClickAlready = !0, c.showFindPerson.bind(c)())
        }
    },
    showFindPerson: function() {
        for (var a = [
                [3E3, 3E3],
                [8E3, 4E3],
                [15E3, 3E3],
                [2E4, 4E3],
                [28E3, 4E3],
                [36E3, 6E3],
                [5E4, 2E4]
            ], b = [], c = 0; c < heroData.gameUserData.robot.length; c++) {
            var d = a[c];
            b.push({
                id: 777,
                photo: heroData.gameUserData.robot[c].image,
                name: heroData.gameUserData.robot[c].nickname,
                score: d[0] + ~~(Math.random() * d[1])
            })
        }
        heroData.fightPerson = b.slice();
        this.afterFindPerson()
    },
    afterFindPerson: function() {
        heroData.useStrength();
        currentScene.refresh();
        heroData.gameBeginUseItem = [];
        for (var a = 0, b = 0; b < this.useItemSpriteList.length; b++) {
            var c = this.useItemSpriteList[b];
            !0 == c.isSelectItem && (heroData.userItem(c.itemid), 1005 == c.itemid ? (a = parseInt(100 * Math.random()) % 5 + 1E3, 2 == this.selectLevelType && 1E3 == a && (a = 999), heroData.gameBeginUseItem.push(a)) : heroData.gameBeginUseItem.push(c.itemid))
        }!0 ==
            isExistStrength ? this.playUseLiveEffect(a, this) : this.useItem(a, this)
    },
    playUseLiveEffect: function(a, b) {
        var c = new cc.Sprite("#gameselectlayer/t2.png");
        c.setPosition(453, 1103);
        c.runAction(cc.sequence(cc.moveTo(0.5, cc.p(320, 260)), cc.spawn(cc.scaleTo(0.3, 3, 3), cc.fadeOut(0.3)), cc.callFunc(function() {
            b.useItem(a, b)
        })));
        var d = new cc.DrawNode;
        d.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
        var e = new cc.Sprite;
        e.addChild(d);
        this.addChild(e, 99);
        engine.gameEvent.createMouseDown(e,
            function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
        this.addChild(c, 100)
    },
    useItem: function(a, b) {
        heroData.missionData.recordData(12, 1);
        if (0 == a) transitionGamePlayScene();
        else {
            engine.gameSound.playEffect(soundres.dice);
            var c = new cc.Layer,
                d = new cc.DrawNode;
            d.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            b.addChild(c);
            c.addChild(d, 2);
            engine.gameEvent.createMouseDown(c, function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
            var e = createGameAnimation(res.uieffect_json,
                "dice", 25);
            e.x = 320;
            e.y = 650;
            b.addChild(e, 2);
            this.scheduleOnce(function() {
                e.removeFromParent();
                var c = cc.callFunc(function() {
                        transitionGamePlayScene()
                    }),
                    d = new cc.Sprite;
                d.setSpriteFrame("item/" + a.toString() + ".png");
                d.x = 320;
                d.y = 650;
                d.setScale(0.5);
                d.runAction(cc.sequence(cc.scaleTo(0.2, 1.8), cc.scaleTo(0.4, 1), cc.delayTime(2), c));
                var h = createGameAnimation(res.uieffect_json, "diceeffect", 25);
                h.x = 320;
                h.y = 650;
                h.setOpacity(0);
                h.setVisible(!1);
                h.runAction(cc.sequence(cc.delayTime(0.3), cc.callFunc(function() {
                    h.gotoAndPlay(0);
                    h.setVisible(!0)
                }), cc.fadeIn(0.5)));
                b.addChild(h, 1);
                b.addChild(d, 2)
            }, 0.7)
        }
    },
    closeFun: function(a, b) {
        this.parent.parent.parent.selectUseItemLayer = null;
        this.parent.parent.removeFromParent()
    }
});
var SelectUseItemPanel = cc.Layer.extend({
    mainUI: null,
    useItemSpriteList: null,
    selectLevelType: null,
    gamePlayBuyItemLayerTag: 100,
    level: null,
    onEnter: function() {
        this._super();
        this.useItemSpriteList = []
    },
    initialize: function(a, b) {
        this.level = b;
        this.selectLevelType = a;
        for (var c = 1001; 1004 >= c; c++) {
            var d = 102 + 145 * (c - 1001),
                e = new UseItemSprite;
            e.x = d;
            e.y = 530;
            e.itemid = c;
            e.scale = 0.7;
            this.addChild(e);
            this.useItemSpriteList.push(e);
            engine.gameEvent.createMouseUp(e, this.selectItemFun, null, cc.rect(-99, -135, 198, 270))
        }
        EventMgr.register(EVENTMGR_ID.BUY_ITEM_REFRESH,
            this.refresh.bind(this), this)
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.BUY_ITEM_REFRESH, this)
    },
    refresh: function() {
        for (var a = 0; a < this.useItemSpriteList.length; a++) this.useItemSpriteList[a].refresh(this.useItemSpriteList[a].itemid);
        null != this.getChildByTag(this.gamePlayBuyItemLayerTag) && this.getChildByTag(this.gamePlayBuyItemLayerTag).refresh()
    },
    selectItemFun: function(a, b) {
        for (var c = 0, d = 0; d < this.parent.useItemSpriteList.length; d++) !0 == this.parent.useItemSpriteList[d].isSelectItem &&
            c++;
        4 <= c && !1 == this.isSelectItem ? this.parent.setItemExplain(null) : 0 < heroData.getItemCount(this.itemid) ? this.selectItem() : this.parent.showGameBuyItemLayer(this.itemid)
    },
    showGameBuyItemLayer: function(a) {
        var b = new GamePlayBuyItemLayer;
        createMaskLayer(b);
        b.selectUseItemLayer = this;
        b.tag = this.gamePlayBuyItemLayerTag;
        this.addChild(b);
        b.initialize(a, 3)
    },
    grtBuyItemPointByItemID: function(a) {
        for (var b = cc.p(0, 0), c = 0; c < this.useItemSpriteList.length; c++) this.useItemSpriteList[c].itemid == a && (b.x = this.useItemSpriteList[c].x,
            b.y = this.useItemSpriteList[c].y);
        return b
    },
    addBuyItemEffectByItemID: function(a) {},
    startFun: function(a, b) {
        heroData.runUINewbieGuide(newbieCommonLevelPlayGameType);
        var c = heroData.getStrength();
        if (!0 == isExistStrength && !0 == showAddStrengthEmpty && !1 == heroData.isUnlimiteLives()) {
            if (1 == c && !1 == isGameFree && !0 != this.openShowAddStrengthEmpty) {
                this.openShowAddStrengthEmpty = this.openShowAddStrengthHalf = !0;
                return
            }
            if (0 == c && !endlessStrengthGet) {
                addCNStrengthShopLayer();
                return
            }
        }
        if (!0 == isShowUnlimitedLives && !0 == isExistStrength &&
            !0 == showAddStrengthHalf && !1 == heroData.isUnlimiteLives() && c == Math.ceil(iniStrengthCount / 2) && !0 != this.openShowAddStrengthHalf) this.openShowAddStrengthHalf = !0;
        else {
            selectLevel = this.level;
            selectType = this.selectLevelType;
            switch (selectType) {
                case 1:
                    this.parent.parent.parent.removeNewbieGuideLayer();
                    !0 == isPlayGameUSEStrength && (heroData.useStrength(), currentScene.refresh());
                    break;
                case 2:
                    heroData.useStrength(), currentScene.refresh()
            }
            heroData.gameBeginUseItem = [];
            for (var d = 0, c = 0; c < this.useItemSpriteList.length; c++) {
                var e =
                    this.useItemSpriteList[c];
                !0 == e.isSelectItem && (heroData.userItem(e.itemid), 1005 == e.itemid ? (d = parseInt(100 * Math.random()) % 5 + 1E3, 2 == this.selectLevelType && 1E3 == d && (d = 999), heroData.gameBeginUseItem.push(d)) : heroData.gameBeginUseItem.push(e.itemid))
            }!0 == isExistStrength ? this.playUseLiveEffect(d, this) : this.useItem(d, this)
        }
    },
    playUseLiveEffect: function(a, b) {
        var c = new cc.Sprite("#gameselectlayer/t2.png");
        c.setPosition(453, 1103);
        c.runAction(cc.sequence(cc.moveTo(0.5, cc.p(320, 360)), cc.spawn(cc.scaleTo(0.3, 3,
            3), cc.fadeOut(0.3)), cc.callFunc(function() {
            b.useItem(a, b)
        })));
        var d = new cc.DrawNode;
        d.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
        var e = new cc.Sprite;
        e.addChild(d);
        this.addChild(e, 99);
        engine.gameEvent.createMouseDown(e, function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
        this.addChild(c, 100)
    },
    useItem: function(a, b) {
        heroData.missionData.recordData(12, 1);
        //sendServerLevelInfo(1001, selectLevel);
        if (0 == a) transitionGamePlayScene();
        else {
            engine.gameSound.playEffect(soundres.dice);
            var c = new cc.Layer,
                d = new cc.DrawNode;
            d.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            b.addChild(c);
            c.addChild(d, 2);
            engine.gameEvent.createMouseDown(c, function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
            var e = createGameAnimation(res.uieffect_json, "dice", 25);
            e.x = 320;
            e.y = 650;
            b.addChild(e, 2);
            this.scheduleOnce(function() {
                e.removeFromParent();
                var c = cc.callFunc(function() {
                        transitionGamePlayScene()
                    }),
                    d = new cc.Sprite;
                d.setSpriteFrame("item/" + a.toString() + ".png");
                d.x =
                    320;
                d.y = 650;
                d.setScale(0.5);
                d.runAction(cc.sequence(cc.scaleTo(0.2, 1.8), cc.scaleTo(0.4, 1), cc.delayTime(2), c));
                var h = createGameAnimation(res.uieffect_json, "diceeffect", 25);
                h.x = 320;
                h.y = 650;
                h.setOpacity(0);
                h.setVisible(!1);
                h.runAction(cc.sequence(cc.delayTime(0.3), cc.callFunc(function() {
                    h.gotoAndPlay(0);
                    h.setVisible(!0)
                }), cc.fadeIn(0.5)));
                b.addChild(h, 1);
                b.addChild(d, 2)
            }, 0.7)
        }
    }
});
var LevelDetailsLayer = cc.Layer.extend({
    mainUILayer: null,
    level: null,
    selectUseItemPanel: null,
    targetPanel: null,
    onEnter: function() {
        this._super();
        this.mainUILayer = engine.gameCocosStudio.loadCSS(res.leveldetailslayer);
        this.addChild(this.mainUILayer);
        //this.mainUILayer.txtTarget1_df.setString("");
        //this.mainUILayer.txtTarget2_df.setString("");
        //this.mainUILayer.txtTarget3_df.setString("");
        this.mainUILayer.levelTxt = new GameArtWord("leveldetails", 42, 50);
        this.mainUILayer.levelTxt.alignmentType = artWordMiddle;
        this.mainUILayer.levelTxt.setString("");
        this.mainUILayer.levelTxt.x = 440;
        this.mainUILayer.levelTxt.y = 963;
        this.mainUILayer.addChild(this.mainUILayer.levelTxt);
        engine.gameEvent.createMouseUp(this.mainUILayer.btnClose, this.closeFun, buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUILayer.btnStart, this.startFun.bind(this), buttonScalingType);
        //engine.gameEvent.createMouseUp(this.mainUILayer.invitebtn, this.inviteFun.bind(this), buttonScalingType);
        this.mainUILayer.x = 640;
        this.targetPanel = new cc.Node;
        this.mainUILayer.addChild(this.targetPanel);
        inSceneByRight(this.mainUILayer, 0, null, 0)
    },
    onInviteClickTime: 0,
    inviteFun: function() {
        var a = new Date;
        2E3 > a.getTime() - this.onInviteClickTime || (this.onInviteClickTime = a.getTime(), myGameTool.logEvent("readyInvite"), gameSDK.sendFaceBookFriend())
    },
    closeFun: function(a, b) {
        var c = this.parent.parent.parent,
            d = cc.callFunc(function() {
                c.removeLevelDetailsLayer()
            });
        outSceneByRight(this.parent.parent.mainUILayer, 0, d, 640)
    },
    startFun: function(a, b) {
        this.selectUseItemPanel.startFun();

        if (typeof gdsdk !== 'undefined' && gdsdk.showBanner !== 'undefined') {
            gdsdk.showBanner();
        }
    },
    initialize: function(a) {
        switch (selectType) {
            case 1:
                this.parent.removeNewbieGuideLayer(),
                    this.parent.addNewbieGuideLayer(newbieLevelDetailsLayer1Type)
        }
        this.level = a;
        a = heroData.getMaxLevelStart(this.level);
        this.mainUILayer.levelTxt.setString(this.level.toString());
        a = getVictoryConditionData(this.level);
        generalList = a.allCondition;
        for (var b = [], c = 0; c < generalList.length; c++) {
            var d = new cc.Sprite,
                e = new cc.Sprite;
            e.setSpriteFrame(winIconUrlByID(generalList[c].winType));
            d.addChild(e);
            e = new cc.LabelTTF("X" + generalList[c].count.toString(), defaultTxt, 32);
            e.setAnchorPoint(cc.p(0, 0.5));
            e.x = 35;
            e.setColor(cc.color(106,
                43, 42));
            d.addChild(e);
            this.targetPanel.addChild(d);
            b.push(d)
        }
        c = {};
        c.spArr = b;
        c.spWidth = 173;
        c.p = cc.p(280, 710);
        c.settingType = centerSetting;
        engine.gameTool.gameSpSettingFun(c);
        0 < a.minscore && (b = this.getSetTxt(), c = engine.gameData.dataDic.language[21].content, c = c.replace("&", +a.minscore.toString()), b.setString(b.getString() + c));
        a = heroData.getMaxLevelStart(this.level);
        2 >= a && this.mainUILayer.start3.setVisible(!1);
        1 >= a && this.mainUILayer.start2.setVisible(!1);
        0 >= a && this.mainUILayer.start1.setVisible(!1);
        a = engine.gameData.dataDic.leveldata[this.level];
        b = heroData.getMaxLevelScore(this.level);
        //this.setAchievementScore(a, b);
        //this.setSetPoint();
        "GameLevelScene" == currentScene.sceneName && (this.selectUseItemPanel = new SelectUseItemPanel, this.mainUILayer.addChild(this.selectUseItemPanel), this.selectUseItemPanel.initialize(1, this.level))
    },
    setAchievementScore: function(a, b) {
        var c = heroData.gameUserData.robot.slice();
        (function(a) {
            for (var b = a.length, c, d; b;) d = Math.floor(Math.random() * b--), c = a[b], a[b] = a[d], a[d] = c;
            return a
        })(c);
        for (var c = c.slice(0, 3), d = -1, e = 0; 3 > e; e++) c[e].score = a["achievementscore" + (3 - e).toString()] + ~~(800 * Math.random()), -1 == d && heroData.getMaxLevelScore(this.level) > a["achievementscore" + (3 - e).toString()] && (d = e);
        var f = this;
        c.push({
            isself: 1,
            score: heroData.getMaxLevelScore(f.level),
            nickname: heroData.pname,
            image: heroData.image
        });
        c[d] = c[3];
        c.length = 3;
        for (e = 1; e <= c.length; e++) {
            d = c[e - 1].nickname;
            11 < d.length && (d = d.slice(0, 8) + "...");
            this.mainUILayer["txtScore" + e + "_df"].setString(d);
            this.mainUILayer["txtScoreNum" + e +
                "_df"].setString(c[e - 1].score.toString());
            c[e - 1].isself && (this.mainUILayer["txtScore" + e + "_df"].setColor(cc.color(255, 252, 0)), this.mainUILayer["txtScoreNum" + e + "_df"].setColor(cc.color(255, 252, 0)));
            d = new MyLoadHeadSprite;
            d.willPos = cc.p(130 + 127 * (e - 1), 170);
            f = this;
            d.loadComplete = function(a) {
                a.setPosition(this.willPos);
                f.mainUILayer.headcontainer.addChild(a, 98)
            };
            d.setPNGUrl(c[e - 1].image, 60, "#rank/rankheadclip.png");
            var g = new cc.Sprite("#rank/headRect.png");
            g.setPosition(cc.pAdd(d.willPos, cc.p(0, -1)));
            this.mainUILayer.headcontainer.addChild(g,
                99)
        }
    },
    getSetTxt: function() {
        if (0 == this.mainUILayer.txtTarget1_df.getString().length) return this.mainUILayer.txtTarget1_df.setString("1."), this.mainUILayer.txtTarget1_df;
        if (0 == this.mainUILayer.txtTarget2_df.getString().length) return this.mainUILayer.txtTarget2_df.setString("2."), this.mainUILayer.txtTarget2_df;
        if (0 == this.mainUILayer.txtTarget3_df.getString().length) return this.mainUILayer.txtTarget3_df.setString("3."), this.mainUILayer.txtTarget3_df
    },
    setSetPoint: function() {
        0 == this.mainUILayer.txtTarget3_df.getString().length &&
            (this.mainUILayer.txtTarget1_df.y = 735, this.mainUILayer.txtTarget2_df.y = 680);
        0 == this.mainUILayer.txtTarget2_df.getString().length && (this.mainUILayer.txtTarget1_df.y = 703)
    }
});
var pillowSkinStatic = 1,
    pillowPetEggSkinFree = 2,
    pillowPetEggSkinShaking = 3,
    petSkinLeave = 4,
    pillowPetEggSkinDown = 5,
    pillowPetOutSkin = 6;
var GameTimeEndLayer = cc.Layer.extend({
        mainUI: null,
        data: null,
        gamePlayFacade: null,
        initialize: function(a) {
            this.data = a;
            this.setVisible(!1);
            heroData.missionData.recordData(11, 1);
            this.scheduleOnce(this.beginCreateFlyStart, 0.5)
        },
        beginCreateFlyStart: function() {
            this.createFlyStart(0)
        },
        createFlyStart: function(a) {
            if (!0 != this.gamePlayFacade.isDespose) {
                var b = cc.p();
                b.x = 400;
                b.y = 680;
                var c = this,
                    d = new cc.Sprite;
                d.x = 320;
                d.y = 1E3;
                d.setScale(1.4 - 0.2 * a);
                d.setOpacity(parseInt(306 - 51 * a));
                d.setSpriteFrame("gameplaylayer/start.png");
                1 == a && (d.isRefresh = !0);
                cc.callFunc(function() {
                    d.removeFromParent();
                    if (!0 == d.isRefresh) {
                        var a = c.gamePlayFacade.gameLevelData.score - parseInt(c.gamePlayFacade.gamePlayLayer.gameMainUILayer.scoreTxt.getString());
                        0 < a ? c.addScoreEffect(450, 850, a) : c.initializeUI();
                        c.gamePlayFacade.gamePlayLayer.setScoreNum(c.gamePlayFacade.gameLevelData.score);
                        a = createGameAnimation(res.gameplayeffect_json, "refreshvictoryconditioneffect", 30);
                        a.playCount = 1;
                        a.x = b.x;
                        a.y = b.y;
                        c.gamePlayFacade.gamePlayLayer.gameMainUILayer.addChild(a)
                    }
                });
                if (!0 == d.isRefresh) {
                    var e = c.gamePlayFacade.gameLevelData.score - parseInt(c.gamePlayFacade.gamePlayLayer.gameMainUILayer.self_score.getString());
                    0 < e ? c.addScoreEffect(450, 850, e) : c.initializeUI();
                    c.gamePlayFacade.gamePlayLayer.setScoreNum(c.gamePlayFacade.gameLevelData.score)
                }
                a += 1;
                4 >= a && engineSetTimeOut(function() {
                    c.createFlyStart(a)
                }, 0.05, null, 1)
            }
        },
        addScoreEffect: function(a, b, c) {
            var d = this,
                e = new cc.LabelTTF(c.toString(), defaultTxt, 30, cc.size(200, 52));
            e.setColor(cc.color(255, 255, 255));
            e.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            e.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            e.x = a;
            e.y = b;
            e.setScale(0.5);
            e.opacity = 0;
            var f = cc.moveTo(0.2, cc.p(a, b + 50)),
                g = cc.fadeIn(0.2),
                h = cc.scaleTo(0.2, 1),
                f = cc.spawn(f, g, h),
                g = cc.delayTime(0.3);
            a = cc.moveTo(0.2, cc.p(a, b + 60));
            b = cc.fadeOut(0.2);
            a = cc.spawn(a, b);
            b = cc.callFunc(function() {
                e.removeFromParent();
                d.initializeUI()
            });
            e.num = c;
            this.gamePlayFacade.gamePlayLayer.gameMainUILayer.addChild(e);
            e.runAction(cc.sequence(f, g, a, b))
        },
        initializeUI: function() {
            var a = this.data;
            this.setVisible(!0);
            var b = this;
            this.mainUI = engine.gameCocosStudio.loadCSS(res.gametimeendlayer);
            this.addChild(this.mainUI);
            this.mainUI.endui.y = 1400;
            this.mainUI.btnRplay.y = -100;
            this.mainUI.backbtn.y = -100;
            this.mainUI.endui.txtscore_df.setString("0");
            gameSDK.setScoreAsync(RANK_TIME, a.score);
            this.mainUI.endui.txtbestscore_df.setString(heroData.getGameTimeBestScore());
            var c = cc.callFunc(function() {
                engine.gameEvent.createMouseDown(b.mainUI.btnRplay, b.replayFun, buttonScalingType);
                engine.gameEvent.createMouseDown(b.mainUI.backbtn, b.backbtnFun,
                    buttonScalingType);
                growthTextNum(b.mainUI.endui.txtscore_df, 0, a.score, 30, null)
            });
            inSceneByTop(this.mainUI.endui, 0, cc.callFunc(function() {
                EventMgr.emit(EVENTMGR_ID.MONSTER_SHOW_ON_UI, {
                    ui: b.mainUI,
                    action: EVENTMGR_ID.MONSTER_WIN,
                    pos: cc.p(320, 670)
                })
            }), 600);
            inSceneByBottom(this.mainUI.btnRplay, 0, c, 260);
            inSceneByBottom(this.mainUI.backbtn, 0, null, 260)
        },
        replayFun: function(a, b) {
            isOpenStandardLevel = !0;
            this.removeFromParent();
            transitionGameLevelScene()
        },
        backbtnFun: function(a, b) {
            this.removeFromParent();
            transitionGameLevelScene()
        },
        onExit: function() {
            this._super();
            EventMgr.emit(EVENTMGR_ID.MONSTER_CLEAR_ON_UI);
            Global.RandomPersonForTimeModel = heroData.targetData.getRandomForTimeUpRank(this.data.score)
        }
    }),
    gamekeytest = "jiulongyuntian",
    CommonLevelLoseLayer = cc.Layer.extend({
        mainUI: null,
        data: null,
        gamePlayFacade: null,
        ctor: function() {
            this._super();
            this.gamePlayFacade = null
        },
        initialize: function(a) {
            this.data = a;
            this.setVisible(!1);
            this.scheduleOnce(this.initializeUI, 0.5);
            !0 == isGameOverUSEStrength && heroData.useStrength()
        },
        initializeUI: function() {
            Global.FailLevelArr.push(selectLevel);
            //sendServerLevelInfo(1002, selectLevel);
            var a = this.data;
            this.setVisible(!0);
            var b = this;
            this.mainUI = engine.gameCocosStudio.loadCSS(res.commonlevelloselayer);
            this.addChild(this.mainUI);
            this.mainUI.loseui.y = 1500;
            this.mainUI.btnRplay.y = -100;
            this.mainUI.backbtn.y = -100;
            this.mainUI.loseui.trophy1.setVisible(!1);
            this.mainUI.loseui.trophy2.setVisible(!1);
            this.mainUI.loseui.trophy3.setVisible(!1);
            var c = cc.callFunc(function() {
                b.showUI(a)
            });
            inSceneByTop(this.mainUI.loseui, 0, c, 560);
            c = new GameArtWord("win", 37, 32);
            c.alignmentType = artWordMiddle;
            c.x = 320;
            c.y = 725;
            c.setString(a.selectLevel.toString());
            this.mainUI.loseui.addChild(c);
            c = heroData.getAchievementCount();
            3 <= c && this.mainUI.loseui.trophy3.setVisible(!0);
            2 <= c && this.mainUI.loseui.trophy2.setVisible(!0);
            1 <= c && this.mainUI.loseui.trophy1.setVisible(!0);
            engine.gameSound.playEffect(soundres.gamelose)
        },
        showUI: function(a) {
            var b = this;
            a = cc.callFunc(function() {
                engine.gameEvent.createMouseDown(b.mainUI.btnRplay, b.replayFun, buttonScalingType);
                engine.gameEvent.createMouseDown(b.mainUI.backbtn,
                    b.backbtnFun, buttonScalingType)
            });
            EventMgr.emit(EVENTMGR_ID.MONSTER_SHOW_ON_UI, {
                ui: b.mainUI,
                action: EVENTMGR_ID.MONSTER_FAIL,
                pos: cc.p(320, 530)
            });
            inSceneByBottom(this.mainUI.btnRplay, 0, a, 100);
            inSceneByBottom(this.mainUI.backbtn, 0, null, 100);
            a = createGameAnimation(res.uieffect_json, "loseeffect", 30);
            a.playCount = 1;
            a.x = 317;
            a.y = 751;
            this.mainUI.loseui.peffect.addChild(a)
        },
        replayFun: function(a, b) {
            isOpenCommonLevel = !0;
            this.removeFromParent();
            transitionGameLevelScene()
        },
        backbtnFun: function(a, b) {
            this.removeFromParent();
            transitionGameLevelScene()
        },
        onExit: function() {
            this._super();
            EventMgr.emit(EVENTMGR_ID.MONSTER_CLEAR_ON_UI)
        }
    }),
    CommonLevelWinLayer = cc.Layer.extend({
        mainUI: null,
        data: null,
        gamePlayFacade: null,
        winuiY: 566,
        ctor: function() {
            this._super();
            this.gamePlayFacade = null
        },
        initialize: function(a) {
            this.data = a;
            this.setVisible(!1);
            this.scheduleOnce(this.beginCreateFlyStart, 0.5);
            heroData.gameUserData.reachMaxLevel = selectLevel;
            gameSDK.logEvent("level", 0, {
                level: selectLevel
            });
            Global.FailLevelArr = []
        },
        beginCreateFlyStart: function() {
            this.createFlyStart(0)
        },
        createFlyStart: function(a) {
            if (!0 != this.gamePlayFacade.isDespose) {
                var b = cc.p();
                b.x = 320;
                b.y = 821;
                var c = this,
                    b = new cc.Sprite;
                b.x = 320;
                b.y = 1E3;
                b.setScale(1.4 - 0.2 * a);
                b.setOpacity(parseInt(306 - 51 * a));
                b.setSpriteFrame("gameplaylayer/start.png");
                1 == a && (b.isRefresh = !0);
                !0 == b.isRefresh && (c.addScoreEffect(550, 850, 0), c.gamePlayFacade.gamePlayLayer.setScoreNum(c.gamePlayFacade.gameLevelData.score));
                a += 1;
                4 >= a && engineSetTimeOut(function() {
                    c.createFlyStart(a)
                }, 0.05, null, 1)
            }
        },
        addScoreEffect: function(a, b, c) {
            this.initializeUI()
        },
        initializeUI: function() {
            var a = this.data;
            this.setVisible(!0);
            var b = this;
            this.mainUI = engine.gameCocosStudio.loadCSS(res.commonlevelwinlayer);
            this.addChild(this.mainUI);
            this.mainUI.winui.newanimalicon.visible = !1;
            //this.mainUI.winui.rank_node.visible = !1;
            //this.mainUI.winui.inviteBtn.visible = !1;
            engine.gameSound.playEffect(soundres.gamewin);
            this.mainUI.winui.y = 1500;
            this.mainUI.btnRplay.y = -100;
            this.mainUI.btnNextLevel.y = -100;
            this.mainUI.winui.txtscore_df.setString(0);
            var c = this,
                d = cc.callFunc(function() {
                    EventMgr.emit(EVENTMGR_ID.MONSTER_SHOW_ON_UI, {
                        ui: c.mainUI,
                        action: EVENTMGR_ID.MONSTER_WIN,
                        pos: cc.p(320, 430)
                    });
                    b.showUI(a);
                    //b.mainUI.winui.rank_node.visible = !0;
                    b.mainUI.winui.newanimalicon.visible = selectLevel == e - 1 && -1 != f.indexOf(selectLevel);
                    //b.mainUI.winui.inviteBtn.visible = !0;
                    //var d = myGameTool.createCatPet();
                    //d.setPosition(75, 85);
                    //b.mainUI.winui.inviteBtn.addChild(d)
                });
            inSceneByTop(this.mainUI.winui, 0, d, this.winuiY);
            d = new GameArtWord("win", 37, 32);
            d.alignmentType = artWordMiddle;
            d.x = 320;
            d.y = 705;
            d.setString(a.selectLevel.toString());
            this.mainUI.winui.addChild(d);
            var e = heroData.getMaxOpenLevel(),
                f = [1, 3, 5, 9, 13, 21]
        },
        showUI: function(a) {
            var b = this,
                c = cc.callFunc(function() {
                    engine.gameEvent.createMouseDown(b.mainUI.btnRplay, b.replayFun, buttonScalingType);
                    engine.gameEvent.createMouseDown(b.mainUI.btnNextLevel, b.nextLevelFun, buttonScalingType);
                    //ngine.gameEvent.createMouseDown(b.mainUI.winui.inviteBtn, b.inviteFun, buttonScalingType)
                });
            inSceneByBottom(this.mainUI.btnRplay, 0, c, 100);
            inSceneByBottom(this.mainUI.btnNextLevel, 0, null, 100);
            1 <= a.startCount && (b.ceateStart(170,
                600).frameFun = function(c) {
                b.vibration(c);
                9 == c && (2 <= a.startCount ? b.ceateStart(317, 600).frameFun = function(c) {
                    b.vibration(c);
                    9 == c && (3 <= a.startCount ? b.ceateStart(468, 600).frameFun = function(c) {
                        b.vibration(c);
                        9 == c && b.showPet(a)
                    } : b.showPet(a))
                } : b.showPet(a))
            });
            //this.mainUI.winui.rank_node.visible = !0;
            //this.showRank3()
        },
        onInviteClickTime: 0,
        inviteFun: function() {
            var a = new Date;
            2E3 > a.getTime() - this.onInviteClickTime || (this.onInviteClickTime = a.getTime(), myGameTool.logEvent("winResultInvite"), gameSDK.sendFaceBookFriend())
        },
        showRank3: function() {
            var a = heroData.gameUserData.robot.slice();
            (function(a) {
                for (var b = a.length, c, d; b;) d = Math.floor(Math.random() * b--), c = a[b], a[b] = a[d], a[d] = c;
                return a
            })(a);
            for (var a = a.slice(0, 3), b = engine.gameData.dataDic.leveldata[selectLevel], c = 0; 3 > c; c++) a[c].score = b["achievementscore" + (3 - c).toString()] + ~~(800 * Math.random());
            var d = this;
            a.push({
                isself: 1,
                score: heroData.getMaxLevelScore(selectLevel),
                nickname: heroData.pname,
                image: heroData.image
            });
            a.sort(function(a, b) {
                return b.score - a.score
            });
            for (c = 1; 3 >=
                c; c++) {
                b = a[c - 1].nickname;
                11 < b.length && (b = b.slice(0, 8) + "...");
                this.mainUI.winui.rank_node["txtScore" + c + "_df"].setString(b);
                this.mainUI.winui.rank_node["txtScoreNum" + c + "_df"].setString(a[c - 1].score.toString());
                a[c - 1].isself && (this.mainUI.winui.rank_node["txtScore" + c + "_df"].setColor(cc.color(255, 252, 0)), this.mainUI.winui.rank_node["txtScoreNum" + c + "_df"].setColor(cc.color(255, 252, 0)));
                b = new MyLoadHeadSprite;
                b.willPos = cc.p(95 + 160 * (c - 1), 150);
                d = this;
                b.loadComplete = function(a) {
                    a.setPosition(this.willPos);
                    d.mainUI.winui.rank_node.headcontainer.addChild(a, 98)
                };
                b.setPNGUrl(a[c - 1].image, 60, "#rank/rankheadclip.png");
                var e = new cc.Sprite("#rank/headRect.png");
                e.setPosition(cc.pAdd(b.willPos, cc.p(0, -1)));
                this.mainUI.winui.rank_node.headcontainer.addChild(e, 99)
            }
        },
        showPet: function(a) {
            growthTextNum(this.mainUI.winui.txtscore_df, 0, a.score, 30, null)
        },
        ceateStart: function(a, b) {
            var c = createGameAnimation(res.uieffect_json, "winstart", 27);
            c.playCount = 1;
            c.x = a;
            c.y = b;
            this.mainUI.winui.addChild(c);
            return c
        },
        vibration: function(a) {
            4 ==
                a && (this.mainUI.winui.y = this.winuiY - 15);
            5 == a && (this.mainUI.winui.y = this.winuiY - 7);
            6 == a && (this.mainUI.winui.y = this.winuiY + 1);
            7 == a && (this.mainUI.winui.y = this.winuiY + 9);
            8 == a && (this.mainUI.winui.y = this.winuiY + 5);
            9 == a && (this.mainUI.winui.y = this.winuiY)
        },
        onExit: function() {
            this._super();
            var a = heroData.getLevelStartCount();
            gameSDK.setScoreAsync(RANK_STAR, a);
            EventMgr.emit(EVENTMGR_ID.MONSTER_CLEAR_ON_UI)
        },
        nextLevelFun: function(a, b) {
            !0 != this.isClickNextLevel && (this.isClickNextLevel = !0, selectLevel += 1, selectLevel >
                maxLevel ? selectLevel = maxLevel : selectLevel >= heroData.getMaxOpenLevel() && (isNextLevel = !0), isOpenCommonLevel = !0, this.removeFromParent(), transitionGameLevelScene())
        },
        replayFun: function(a, b) {
            isOpenCommonLevel = !0;
            this.removeFromParent();
            transitionGameLevelScene()
        }
    }),
    AddStepLayer = cc.Layer.extend({
        mainUI: null,
        gamePlayFacade: null,
        clickSeeAd: !1,
        initialize: function() {
            this.mainUI = engine.gameCocosStudio.loadCSS(res.addsteplayer_plist);
            this.mainUI.y = 600;
            this.addChild(this.mainUI);
            var a = this;
            this.schedule(function() {
                    a.mainUI.txtgem_df.setString(heroData.getGem())
                },
                0.1);
            this.mainUI.relifebydiamondbtn.diamond_num.string = "100";
            var b = cc.callFunc(function() {
                engine.gameEvent.createMouseUp(a.mainUI.uiInfo.closebtn, a.closeFun.bind(a), buttonScalingType);
                //engine.gameEvent.createMouseUp(a.mainUI.btn_ad, a.seeAdToGetStep.bind(a), buttonScalingType);
                engine.gameEvent.createMouseUp(a.mainUI.relifebydiamondbtn, a.relifeByDiamond.bind(a), buttonScalingType)
            });
            inSceneByTop(this.mainUI, 0, b, 0)
        },
        closeFun: function(a, b) {
            this.unscheduleAllCallbacks();
            this.gamePlayFacade.addLoseUI();
            this.parent.parent.closeAddStepLayer()
        },
        relifeByDiamond: function() {
            heroData.useGem(100) && (myGameTool.logEvent("addStepByGem"), this.setVisible(!1), currentScene.refresh(), this.createFlyStart(0), this.gamePlayFacade.gamePlayControl.isGameEnd = !1, this.gamePlayFacade.isCheckGameEnd = !1, EventMgr.emit(EVENTMGR_ID.MONSTER_RESET_WORRY))
        },
        seeAdToGetStep: function() {
            if (!this.clickSeeAd) {
                this.clickSeeAd = !0;
                var a = this;
                this.scheduleOnce(function() {
                    a.clickSeeAd = !1
                }, 0.5);
                gameSDK.showRewardVideoAd(rewardedVideoID1, function() {
                    myGameTool.logEvent("addStepByAD");
                    //sendServerLevelInfo(1003, selectLevel);
                    heroData.watchNum += 1;
                    a.setVisible(!1);
                    currentScene.refresh();
                    a.createFlyStart(0);
                    a.gamePlayFacade.gamePlayControl.isGameEnd = !1;
                    a.gamePlayFacade.isCheckGameEnd = !1;
                    EventMgr.emit(EVENTMGR_ID.MONSTER_RESET_WORRY);
                    saveHeroData()
                })
            }
        },
        invite: function(a, b) {
            if (!this.clickSeeAd) {
                this.clickSeeAd = !0;
                var c = this;
                this.scheduleOnce(function() {
                    c.clickSeeAd = !1
                }, 0.5);
                gameSDK.sendFaceBookFriend(function() {
                    myGameTool.logEvent("addStepByInvite");
                    //sendServerLevelInfo(1003, selectLevel);
                    gameSDK.logEvent("add5invite", 1, {
                        add5invite: "add5invite"
                    });
                    heroData.watchNum += 1;
                    c.setVisible(!1);
                    currentScene.refresh();
                    c.createFlyStart(0);
                    c.gamePlayFacade.gamePlayControl.isGameEnd = !1;
                    c.gamePlayFacade.isCheckGameEnd = !1;
                    EventMgr.emit(EVENTMGR_ID.MONSTER_RESET_WORRY);
                    saveHeroData()
                })
            }
        },
        refresh: function() {},
        createFlyStart: function(a) {
            if (!0 != this.gamePlayFacade.isDespose) {
                var b = this,
                    c = new cc.Sprite;
                c.x = 320;
                c.y = 600;
                c.setScale(1.4 - 0.2 * a);
                c.setOpacity(parseInt(306 - 51 * a));
                c.setSpriteFrame("gameplaylayer/start.png");
                1 == a && (c.isRefresh = !0);
                var d = cc.callFunc(function() {
                        c.removeFromParent();
                        if (!0 == c.isRefresh) {
                            var a = createGameAnimation(res.gameplayeffect_json, "refreshvictoryconditioneffect", 30);
                            a.playCount = 1;
                            a.x = 60;
                            a.y = 870;
                            b.gamePlayFacade.gamePlayLayer.gameMainUILayer.addChild(a);
                            b.gamePlayFacade.addStep(5);
                            b.parent.parent.closeAddStepLayer()
                        }
                    }),
                    e = cc.moveTo(0.5, addStepActionEndPo);
                c.runAction(cc.sequence(e, d));
                this.gamePlayFacade.gamePlayLayer.gameMainUILayer.addChild(c);
                a += 1;
                4 >= a && engineSetTimeOut(function() {
                        b.createFlyStart(a)
                    },
                    0.05, null, 1)
            }
        }
    });
var NewBieExplainLayer = cc.Layer.extend({
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super()
    },
    initialize: function(a) {
        createMaskLayer(this);
        var b = new ccui.ImageView("publicimg/scalesprite3.png", ccui.Widget.PLIST_TEXTURE);
        b.setScale9Enabled(!0);
        b.setContentSize(cc.size(484, 504));
        this.addChild(b);
        b.x = 320;
        b.y = 590;
        b = new ccui.ImageView("publicimg/scalesprite2.png", ccui.Widget.PLIST_TEXTURE);
        b.setScale9Enabled(!0);
        b.setContentSize(cc.size(400, 248));
        this.addChild(b);
        b.x = 320;
        b.y = 675;
        b = new cc.LabelTTF(a.desStr,
            defaultTxt, 24);
        this.addChild(b);
        b.setColor(cc.color(109, 41, 41));
        b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        b.x = 320;
        b.y = 515;
        b = new cc.Sprite("#publicimg/okbtnimg.png");
        this.addChild(b);
        b.x = 320;
        b.y = 430;
        engine.gameEvent.createMouseUp(b, this.clickOkBtnFun.bind(this), buttonScalingType);
        for (b = 0; 15 > b; b++) {
            var c = new cc.Sprite("#publicimg/gezi_" + ((b + 1) % 2 + 1) + ".png");
            c.x = 172 + b % 5 * 74;
            c.y = 750 - 74 * parseInt(b / 5);
            this.addChild(c)
        }
        b = new NoviceLayer;
        b.init(a.id);
        this.addChild(b, 999999)
    },
    clickOkBtnFun: function() {
        currentScene.showVictoryConditionLayer();
        this.removeFromParent()
    }
});
var UpRankLayer = cc.Layer.extend({
    callFun: null,
    isCanTouch: !1,
    isTimeModelScoreUp: !1,
    selfInfo: null,
    enemyInfo: null,
    ctor: function(a, b) {
        this._super();
        this.callFun = a;
        for (var c = 0, d = 0, e = 0; e < heroData.gameUserData.maxLevelStart.length && 0 != heroData.gameUserData.maxLevelStart[e]; e++) c += heroData.gameUserData.maxLevelStart[e], d++;
        this.selfInfo = {
            nickname: gameSDK.sdkPlayInfo.name,
            image: gameSDK.sdkPlayInfo.photo,
            allStarNum: c,
            maxLevelNum: d
        };
        c -= ~~(1 + 4 * Math.random());
        b.allStarNum = c;
        this.enemyInfo = b;
        void 0 != b.baseScore &&
            (this.isTimeModelScoreUp = !0, this.selfInfo.score = b.baseScore, this.enemyInfo.score = b.enemyScore)
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        var a = new cc.DrawNode;
        a.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
        var b = new cc.Sprite;
        b.addChild(a);
        this.addChild(b, -1);
        engine.gameEvent.createMouseDown(b, function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
        this.mainUI = engine.gameCocosStudio.loadCSS(res.upRankLayer,
            !1);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.continuebtn, this.onContinue.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.shareBtn, this.onShare.bind(this), buttonScalingType);
        this.flushInfo(this.mainUI.self_node, this.selfInfo);
        this.flushInfo(this.mainUI.other_node, this.enemyInfo);
        this.showAction()
    },
    flushInfo: function(a, b) {
        var c = new MyLoadHeadSprite;
        c.loadComplete = function(b) {
            b.setPosition(130, 142);
            a.addChild(b)
        };
        c.setPNGUrl(b.image, 74, "#publicimg/scalesprite2.png");
        c = new cc.LabelTTF(b.nickname, defaultTxt, 22);
        c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        c.setColor(cc.color(255, 245, 150));
        c.setPosition(130, 70);
        a.addChild(c);
        c = this.isTimeModelScoreUp ? new cc.LabelTTF("Score : " + b.score, defaultTxt, 22) : new cc.LabelTTF("Level : " + b.maxLevelNum, defaultTxt, 22);
        c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        c.setColor(cc.color(255, 245, 150));
        c.setPosition(350, 70);
        a.addChild(c);
        c = new GameArtWord("win", 35, 55);
        c.alignmentType = artWordMiddle;
        c.setString(b.allStarNum +
            "");
        c.setPosition(400, 140);
        a.addChild(c)
    },
    onContinue: function() {
        this.removeFromParent();
        this.callFun && this.callFun()
    },
    onInviteClickTime: 0,
    onShare: function() {
        var a = new Date;
        2E3 > a.getTime() - this.onInviteClickTime || (this.onInviteClickTime = a.getTime(), myGameTool.logEvent("rankUpInvite"), gameSDK.sendFaceBookFriend())
    },
    showAction: function() {
        var a = this.mainUI.flash_light;
        a.setAnchorPoint(0.5, 0.6);
        a.setScale(0);
        a.runAction(cc.sequence(cc.scaleTo(7 / 24, 2.2), cc.scaleTo(7 / 24, 2), cc.rotateBy(800, 36E3)));
        var b =
            this.mainUI.other_node.getPosition(),
            a = this.mainUI.self_node.getPosition(),
            b = cc.sequence(cc.delayTime(0.5), cc.scaleTo(0.125, 1.3), cc.scaleTo(0.125, 1), cc.delayTime(0.125), cc.moveTo(4 / 24, b), cc.scaleTo(0.125, 1.03, 0.95), cc.scaleTo(0.125, 1, 1), cc.callFunc(function() {
                this.isCanTouch = !0
            }.bind(this)));
        this.mainUI.self_node.runAction(b);
        a = cc.sequence(cc.delayTime(0.5), cc.scaleTo(0.125, 1.09, 0.86), cc.scaleTo(2 / 24, 1, 1), cc.moveTo(0.25, a));
        this.mainUI.other_node.runAction(a)
    }
});
var TurnToOtherGameLayer = cc.Layer.extend({
    JellyCrush: {
        name: "Jelly Crush",
        id: "1219338561447280",
        icon: "#jctg/jctg_1.png"
    },
    JellyBoom: {
        name: "Jelly Boom",
        id: "319647368564919",
        icon: "#jctg/jctg_3.png"
    },
    PopStone: {
        name: "Pop Stone",
        id: "1394792680649041",
        icon: "#jctg/jctg_2.png"
    },
    StoneDash: {
        name: "Stone Dash",
        id: "1943850945671989",
        icon: "#jctg/jctg_4.png"
    },
    PetsCrush: {
        name: "Pets Crush",
        id: "147579912728683",
        icon: "#jctg/jctg_5.png"
    },
    IdleFish: {
        name: "Idle Fish",
        id: "2246661838950056",
        icon: "#jctg/jctg_6.png"
    },
    MergeBirds: {
        name: "Merge Birds",
        id: "1296780957130469",
        icon: "#jctg/jctg_7.png"
    },
    showIcon: [],
    ctor: function() {
        this._super();
        gameSDK.goToOtherGame = function(a) {
            switch (sdkName) {
                case "FaceBookTest":
                    cc.log("跳转成功。", a);
                    break;
                case "FaceBook":
                    FBInstant.switchGameAsync(a).then(function() {
                        cc.log("跳转其他游戏成功")
                    }).catch(function(a) {
                        null != a && (gameSDK.logEvent("gameTurnOtherFail", 1, {
                                gameTurnOtherFail: "gameTurnOtherFail"
                            }), cc.log("跳转其他游戏失败，失败编码为:"),
                            cc.warn(a))
                    })
            }
        };
        this.showIcon = [this.PopStone, this.JellyCrush, this.JellyBoom, this.StoneDash];
        this.initUI()
    },
    onExit: function() {
        this._super();
        this.showIcon = [];
        gameSDK.goToOtherGame = null
    },
    initUI: function() {
        var a = cc.winSize.width,
            b = cc.winSize.height,
            c = new cc.DrawNode;
        c.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(255, 255, 255, 255), 0, cc.color(255, 255, 255, 255));
        this.addChild(c);
        engine.gameEvent.createMouseUp(c, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
        var d =
            new cc.LabelTTF("More Games", "Arial", 32);
        d.setColor(cc.color(47, 46, 47, 255));
        d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        d.setPosition(a >> 1, b - 70);
        this.addChild(d);
        for (c = 0; c < this.showIcon.length; c++) {
            var e = this.showIcon[c],
                f = b - 230 - 150 * c,
                d = new cc.LabelTTF(e.name, "Arial", 28);
            d.setColor(cc.color(47, 46, 47, 255));
            d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            d.setPosition(250, f);
            this.addChild(d);
            d = new cc.Sprite(e.icon);
            d.setPosition(100, f);
            this.addChild(d);
            d = new cc.Sprite("#jctg/jctg_play.png");
            d.gamedata = e;
            d.setPosition(a - 100, f);
            this.addChild(d);
            engine.gameEvent.createMouseUp(d, this.openGame.bind(this, d), buttonScalingType)
        }
        d = new cc.LabelTTF("Cancel", "Arial", 28);
        d.setColor(cc.color(41, 148, 255, 255));
        d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        d.setPosition(70, b - 70);
        this.addChild(d);
        engine.gameEvent.createMouseUp(d, this.closeLayer.bind(this), buttonScalingType, cc.rect(-20, -20, 140, 80))
    },
    clickCDTime: 0,
    openGame: function(a) {
        var b = (new Date).getTime();
        if (!(2E3 > b - this.clickCDTime)) {
            this.clickCDTime =
                b;
            var b = a.gamedata.name,
                b = b.replace(" ", "_"),
                b = "goOther_" + b,
                c = {};
            c[b] = b;
            gameSDK.logEvent(b, 1, c);
            gameSDK.goToOtherGame(a.gamedata.id)
        }
    },
    closeLayer: function() {
        this.removeFromParent()
    }
});
TurnToOtherButtonEffect = cc.sequence(cc.rotateTo(0.08, -10), cc.rotateTo(0.16, 20), cc.rotateTo(0.16, -20), cc.rotateTo(0.16, 20), cc.rotateTo(0.08, 0), cc.delayTime(0.7)).repeatForever();
var BtnLevelSprite = cc.Sprite.extend({
    level: null,
    ketSp: null,
    initialize: function(a, b, c) {
        null == a && (a = engine.gameData.dataDic.leveldata[1]);
        this.level = a.level;
        var d = "levels1";
        if (0 < b) {
            var e = new cc.Sprite;
            e.setSpriteFrame("level/win_1.png");
            this.addChild(e);
            e = new cc.Sprite;
            e.setSpriteFrame("level/start" + b.toString() + ".png");
            e.y = -40;
            this.addChild(e, 20);
            this.isSwallowTouches = !1;
            engine.gameEvent.createMouseUp(this, this.openLevelDetailsLayer, buttonScalingType, cc.rect(-78, -70, 156, 140))
        } else d = "levels2", e = new cc.Sprite,
            e.setSpriteFrame("level/win_0.png"), c == a.level ? (this.isSwallowTouches = !1, engine.gameEvent.createMouseUp(this, this.openLevelDetailsLayer, buttonScalingType, cc.rect(-78, -70, 156, 140))) : (this.isSwallowTouches = !1, engine.gameEvent.createMouseUp(this, function() {}, buttonScalingType, cc.rect(-78, -70, 156, 140))), this.addChild(e);
        d = new GameArtWord(d, 18, 24);
        d.alignmentType = artWordMiddle;
        d.x = -2;
        d.y = 0;
        d.setString(a.level.toString());
        this.addChild(d);
        1 == a.isnewelement && 0 == b && (a = new cc.Sprite("#publicimg/newimg.png"),
            a.y = -20, a.x = 20, this.addChild(a));
        a = heroData.targetData.targetArr;
        if (this.level == c) {
            c = new cc.Sprite("#gamelevelscene/selfheadrect.png");
            c.setPosition(0, 140);
            this.addChild(c);
            c = new MyLoadHeadSprite;
            var f = this;
            c.loadComplete = function(a) {
                a.setPosition(0, 147);
                f.addChild(a, -1)
            };
            c.setPNGUrl(heroData.image, 84, "#gamelevelscene/headmask.png")
        } else a[this.level] && (c = new cc.Sprite("#gamelevelscene/txk_2.png"), c.setPosition(0, 140), this.addChild(c), c = new MyLoadHeadSprite, f = this, c.loadComplete = function(a) {
            a.setPosition(0,
                147);
            f.addChild(a, -1)
        }, c.setPNGUrl(a[this.level].image, 84, "#gamelevelscene/headmask.png"));
        0 == heroData.gameUserData.boxget && this.level == heroData.gameUserData.targetBoxLev && (c = new cc.Sprite("#gamelevelscene/yaoshi.png"), this.addChild(c), c.setPosition(50, 80), engine.gameEvent.createMouseUp(c, this.clickKey.bind(this), buttonScalingType), this.ketSp = c, f = this, EventMgr.register(EVENTMGR_ID.FLUSH_TARGET_KEY, function() {
            f.ketSp.runAction(cc.sequence(cc.delayTime(0.2), cc.fadeOut(0.1), cc.fadeIn(0.1), cc.fadeOut(0.1),
                cc.fadeIn(0.1), cc.fadeOut(0.1), cc.fadeIn(0.1)))
        }, null))
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.FLUSH_TARGET_KEY, null)
    },
    clickKey: function() {
        if (heroData.gameUserData.maxLevelStart[heroData.gameUserData.targetBoxLev - 1] && 0 != heroData.gameUserData.maxLevelStart[heroData.gameUserData.targetBoxLev - 1]) {
            currentScene.playlevelEffect = !0;
            var a = this.ketSp.getPosition();
            this.ketSp.removeFromParent();
            var a = this.convertToWorldSpaceAR(a),
                b = new cc.Sprite("#gamelevelscene/yaoshi.png");
            b.setPosition(a);
            currentScene.addChild(b);
            b.runAction(cc.sequence(cc.moveTo(0.5, cc.p(68, 720)), cc.callFunc(function() {
                b.removeFromParent();
                currentScene.showTargetBoxOpen()
            })))
        } else showAlterInfo(engine.gameData.dataDic.language[222].content)
    },
    openLevelDetailsLayer: function() {
        !1 != this.parent.parent.isCanClick() && !1 == this.parent.parent.isMove && null != currentScene && "GameLevelScene" == currentScene.sceneName && this.parent.parent.addLevelDetailsLayer(this.level)
    }
});
var doubleClickFirst = null,
    nullGrid = -1,
    emptyGrid = -2,
    suctionType = 7,
    pigType = 9,
    wood2 = 10,
    wood1 = 11,
    grass = 12,
    iceType1 = 13,
    iceType2 = 14,
    changeGrid = 15,
    timingbone = 16,
    laserGrid = 17,
    wallGrid = 18,
    walnutType = 20,
    cherryBlossomsGrid = 21,
    violet = 25,
    colorEgg = 26,
    superColorEgg = 27,
    gridRuleArrayOb = {
        noUseGridskinArr: [nullGrid, emptyGrid, wallGrid, walnutType, cherryBlossomsGrid, colorEgg, superColorEgg],
        endCheckNoPushSpecial: [laserGrid, colorEgg, superColorEgg, cherryBlossomsGrid],
        noChange: [pigType, emptyGrid, nullGrid, wood2, wood1, colorEgg,
            superColorEgg, laserGrid, wallGrid, walnutType, cherryBlossomsGrid
        ],
        selectCanMove: [wood2, wood1, colorEgg, superColorEgg, laserGrid, wallGrid, cherryBlossomsGrid],
        noDestroyByItem: [pigType, emptyGrid, nullGrid, wood2, wood1, colorEgg, superColorEgg, laserGrid, wallGrid, walnutType, cherryBlossomsGrid],
        noBeReset: [pigType, wood2, wood1, nullGrid, emptyGrid, colorEgg, superColorEgg, laserGrid, wallGrid, walnutType, cherryBlossomsGrid],
        noBeDelete: [suctionType, pigType, wood2, wood1, nullGrid, emptyGrid, timingbone, colorEgg, superColorEgg,
            laserGrid, wallGrid, walnutType, cherryBlossomsGrid
        ],
        noFallDown: [wood2, wood1, nullGrid, emptyGrid, colorEgg, superColorEgg, laserGrid, wallGrid, cherryBlossomsGrid],
        noPromt: [wood2, wood1, emptyGrid, nullGrid, colorEgg, superColorEgg, laserGrid, wallGrid, cherryBlossomsGrid],
        guodongGrid: [31, 32, 33, 34, 35, 36, 37],
        doubleClickDestroy: [1, 2, 3, 4]
    },
    createGrid = function(a, b, c, d, e, f, g) {
        var h;
        if (-1 == gridRuleArrayOb.noUseGridskinArr.indexOf(a)) {
            var k = skeletalAnimation["gridskin|grid" + a.toString()];
            if (!k) {
                cc.error("地图数据错误",
                    a, b, c, d);
                return
            }
            k.folderName = "pngdata/gridskin";
            h = new GameAnimation;
            h.initialize(k);
            h.setFrameIntervalTime(20)
        } else h = new cc.Sprite;
        h.gridID = createGridID();
        h.gridType = a;
        h.specialType = b;
        h.lastGridX = c;
        h.lastGridY = d;
        h.gridX = c;
        h.gridY = d;
        h.isMove = !1;
        h.isDelete = !1;
        h.isDown = !1;
        h.gamePlayFacade = e;
        h.isDespose = !1;
        h.isGem = !1;
        h.iceSprite = null;
        h.isRemove = !1;
        h.removeFrame = 13;
        h.blisters = null;
        h.isGold = !1;
        h.timeCount = 0;
        h.isPlayElastic = !1;
        h.desposeURL = "grideffect1";
        h.isLaserDelete = !1;
        h.isYinghuaDestroyByOther = !1;
        h.isRunScale = !1;
        h.hasCloud = f;
        g && h.gamePlayFacade.gamePlayLayer.addDogPen(c, d);
        h.addCloud = function() {
            var a = skeletalAnimation["gridskin|cloud0"];
            if (a) {
                a.folderName = "pngdata/gridcloud";
                var b = new GameAnimation;
                b.initialize(a);
                b.setFrameIntervalTime(17);
                b.fromFrameIndexToPlayFrameIndex(0, 19);
                h.cloudAni = b;
                h.addChild(b);
                h.hasCloud = !0
            } else cc.error("数据不存在", "gridskin|cloud0")
        };
        f && h.addCloud();
        if (a == wood2 || a == wood1) h.wordCount = wood1 - a;
        a == colorEgg && (h.eggPower = 0, h.setSpriteFrame("pngdata/gridskin/egg1effect001.png"));
        a == superColorEgg && (h.eggPower = 0, h.setSpriteFrame("pngdata/gridskin/egg2effect001.png"));
        a == cherryBlossomsGrid && (h.cherryBlossomsGridCount = 0, h.cherryBlossomsType = b, h.setSpriteFrame("pngdata/gridskin/cherryblossomsupeffect001.png"));
        a == wallGrid && h.setSpriteFrame("pngdata/gridskin/grid" + a.toString() + "png0001.png");
        a == walnutType && h.setSpriteFrame("pngdata/gridskin/grid" + a.toString() + "png0001.png");
        a == suctionType && (k = skeletalAnimation["gridskin|grid7effect"], k.folderName = "pngdata/gridskin", c = new GameAnimation,
            c.initialize(k), c.fromFrameIndexToPlayFrameIndex(0, 9), c.x = 0, c.y = 0, c.setFrameIntervalTime(17), h.suctionEffect = c, h.addChild(c, -1), h.zIndex = 9999, k = skeletalAnimation["gridskin|grid7upeffect"], k.folderName = "pngdata/gridskin", c = new GameAnimation, c.x = 0, c.y = 0, c.initialize(k), c.setFrameIntervalTime(17), h.addChild(c, 999));
        h.setzIndex = function() {
            if (1 == this.specialType || 2 == this.specialType) h.zIndex = 100 * d + 20
        };
        h.playSuctionEffect = function() {
            h.suctionEffect.fromFrameIndexToPlayFrameIndex(10, 19);
            h.suctionEffect.scale =
                2;
            h.setFrameIntervalTime(30);
            h.runAction(cc.scaleTo(0.3, 1.3));
            h.fromFrameIndexToPlayFrameIndex(27, 34);
            h.playCount = 1
        };
        h.playEndSuctionEffect = function() {
            var a = cc.scaleTo(0.2, 0.2),
                b = cc.fadeOut(0.2);
            h.suctionEffect.runAction(b.clone());
            h.runAction(cc.spawn(a, b.clone()))
        };
        h.copyPNG = function() {
            if (checkIdIsAnimal(this.gridType)) {
                var a = new cc.Sprite;
                a.setSpriteFrame("pngdata/gridskin/grid" + this.gridType.toString() + "png0001.png");
                return a
            }
            return this.gridType == pigType ? (a = new cc.Sprite, a.setSpriteFrame("pngdata/gridskin/grid9png0001.png"),
                a) : a = new cc.Sprite
        };
        h.gotoAndStopSurprised = function() {
            checkIdIsAnimal(a) && 0 == this.specialType && !this.isRunScale && (this.isRunScale = !0, h.runAction(cc.scaleBy(0.2, 0.001, 0.01)))
        };
        h.playLaser = function() {
            if (0 == this.powerNum) this.gotoAndStop(0);
            else {
                var a = [
                    [],
                    [0, 3],
                    [4, 6],
                    [7, 14]
                ][this.powerNum];
                this.setFrameIntervalTime(13);
                this.playCount = 1;
                this.fromFrameIndexToPlayFrameIndex(a[0], a[1])
            }
        };
        a == laserGrid && (h.powerNum = 0, h.direction = b, h.setRotation({
            12: 0,
            14: 90,
            16: 270,
            18: 180
        } [h.direction]), h.playLaser());
        h.playEggMC =
            function(a, b) {
                if (this.eggPower != this.oldEggPower || b) {
                    this.oldEggPower = this.eggPower;
                    h.visible = !1;
                    var c = this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x, this.y, "pngdata/gridskin", a ? "gridskin|egg2effect" : "gridskin|egg1effect", 43),
                        d = [
                            [1, 7],
                            [8, 18],
                            [19, 21],
                            [21, 29],
                            [30, 42]
                        ],
                        e;
                    e = b ? d[b + 1] : d[this.eggPower - 1];
                    c.playCount = 1;
                    c.setFrameIntervalTime(14);
                    c.fromFrameIndexToPlayFrameIndex(e[0], e[1]);
                    var f = this;
                    c.frameCompleteFun = function() {
                        c.removeFromParent();
                        var b = ("00" + e[1]).slice(-3);
                        "043" == b &&
                            (b = "001");
                        a ? f.setSpriteFrame("pngdata/gridskin/egg2effect" + b + ".png") : f.setSpriteFrame("pngdata/gridskin/egg1effect" + b + ".png");
                        h.visible = !0
                    }
                }
            };
        h.playSkin = function() {
            if (1 <= a && 14 >= a || checkIdIsAnimal(a)) switch (this.specialType) {
                case 0:
                    if (30 < a && 38 > a) {
                        this.setFrameIntervalTime(16);
                        this.fromFrameIndexToPlayFrameIndex(0, 18);
                        var b = this;
                        this.frameFun = function(a) {
                            18 == a && (this.isStop = !0, b.scheduleOnce(function() {
                                b.fromFrameIndexToPlayFrameIndex(0, 18)
                            }, 3 + 3 * Math.random()))
                        }
                    } else this.gotoAndStop(0), this.setFrameIntervalTime(20);
                    break;
                case 1:
                    this.setFrameIntervalTime(20);
                    this.fromFrameIndexToPlayFrameIndex(47, 62);
                    break;
                case 2:
                    this.setFrameIntervalTime(20);
                    this.fromFrameIndexToPlayFrameIndex(31, 46);
                    break;
                case 3:
                    this.setFrameIntervalTime(20);
                    this.fromFrameIndexToPlayFrameIndex(63, 78);
                    break;
                case 4:
                    this.gotoAndStop(0), this.setFrameIntervalTime(20)
            }
            15 == a && this.setFrameIntervalTime(13)
        };
        h.elastic = function() {
            this.isPlayElastic && (checkIdIsAnimal(a) && 0 == this.specialType && 31 > a && (this.playCount = 1, this.setFrameIntervalTime(18), this.fromFrameIndexToPlayFrameIndex(20,
                29)), 7 == a && (this.playCount = 1, this.setFrameIntervalTime(18), this.fromFrameIndexToPlayFrameIndex(37, 44)), this.isPlayElastic = !1)
        };
        h.surprised = function() {
            checkIdIsAnimal() && (this.playCount = 1, this.setFrameIntervalTime(20), this.fromFrameIndexToPlayFrameIndex(0, 19))
        };
        h.clickGrid = function() {
            if (!this.gamePlayFacade.gamePlayControl.isRunTransferAction && !this.gamePlayFacade.gamePlayControl.isGameEnd)
                if (doubleClickFirst && doubleClickFirst == this && -1 != gridRuleArrayOb.doubleClickDestroy.indexOf(h.specialType) && !this.gamePlayFacade.isCheckGameEnd) {
                    var b =
                        new GridElementItemByDoubleClickAction;
                    b.gamePlayFacade = this.gamePlayFacade;
                    b.doItem();
                    b.run(this);
                    currentScene.removeNewbieGuideLayer()
                } else doubleClickFirst = this, !(this.gridType == violet || 1 <= a && 7 >= a) || 0 != this.specialType && 4 != this.specialType || null != this.iceSprite || (this.playCount = 1, this.setFrameIntervalTime(20), this.fromFrameIndexToPlayFrameIndex(0, 19)), 5 == this.specialType && (this.frameIndex > this.playFrameIndex && (this.frameIndex = this.playFrameIndex), this.gotoAndStop(this.frameIndex), this.scheduleOnce(function() {
                    if (!1 ==
                        this.isDespose) {
                        var a = new DeleteChangeGrid;
                        a.gamePlayFacade = this.gamePlayFacade;
                        a.runDeleteChangeGrid(this, this.specialType)
                    }
                }, 0.3))
        };
        h.playSkin();
        h.setzIndex();
        h.isReset = function() {
            return this.hasCloud ? !1 : null == this.iceSprite && -1 == gridRuleArrayOb.noBeReset.indexOf(this.gridType) ? !0 : !1
        };
        h.addGem = function() {
            if (!1 == h.isGem) {
                h.isGem = !0;
                var a = skeletalAnimation["gridskin|gem"];
                a.folderName = "pngdata/gridskin";
                var b = new GameAnimation;
                b.initialize(a);
                b.setFrameIntervalTime(17);
                b.x = 0;
                b.y = 25;
                this.addChild(b)
            }
        };
        h.addTime = function(a) {};
        h.addGold = function() {
            if (!1 == h.isGold) {
                h.isGold = !0;
                var a = new cc.Sprite;
                a.setSpriteFrame("pngdata/gridskin/gold.png");
                a.x = 25;
                a.y = -25;
                h.addChild(a)
            }
        };
        h.addBlisters = function() {
            if (null == h.blisters) {
                var a = new cc.Sprite;
                a.x = 0;
                a.y = 0;
                a.setSpriteFrame("pngdata/gridskin/blisters.png");
                h.blisters = a;
                this.addChild(a)
            }
        };
        h.update = function() {
            this.playFrame();
            !0 == this.isRemove && (this.gotoAndStopSurprised(), this.removeFrame--, 0 >= this.removeFrame && this.removeFromParent())
        };
        h.isFree = function() {
            return !0 ==
                this.isMove || !0 == this.isDelete || !0 == this.isDown ? !1 : !0
        };
        h.isRunMove = function() {
            return !0 == this.isMove || !0 == this.isDown ? !0 : !1
        };
        h.setGridPointByScene = function() {
            var a = this.gamePlayFacade.gridData.getScenePointByGridPoint(this.x, this.y);
            this.gridX = a.x;
            this.gridY = a.y
        };
        h.setScenePointByGrid = function() {
            var a = this.gamePlayFacade.gridData.getGridPointByScenePoint(this.gridX, this.gridY);
            this.x = a.x;
            this.y = a.y
        };
        h.getLastScenePoint = function() {
            return this.gamePlayFacade.gridData.getGridPointByScenePoint(this.lastGridX,
                this.lastGridY)
        };
        h.addIce = function() {
            this.iceSprite = new cc.Sprite;
            this.addChild(this.iceSprite);
            this.iceSprite.setSpriteFrame("pngdata/gridskin/iceaddgrid.png")
        };
        h.removeIce = function() {
            null != this.iceSprite && this.removeChild(this.iceSprite);
            this.iceSprite = null
        };
        h.isCanDelete = function() {
            return h.hasCloud ? !1 : -1 == gridRuleArrayOb.noBeDelete.indexOf(h.gridType) ? !0 : !1
        };
        h.isCanDown = function() {
            return null == h.iceSprite && -1 == gridRuleArrayOb.noFallDown.indexOf(h.gridType) ? !0 : !1
        };
        h.aroundDispose = h.gridType != wood2 &&
            h.gridType != wood1 && h.gridType != emptyGrid && this.gridType != walnutType ? function() {
                var a = this;
                [cc.p(0, -1), cc.p(0, 1), cc.p(-1, 0), cc.p(1, 0)].forEach(function(b) {
                    b = cc.pAdd(b, cc.p(a.gridX, a.gridY));
                    b = a.gamePlayFacade.gridData.getGridByGridPoint(b.x, b.y);
                    null != b && null != b.desposeWord && b.desposeWord(h)
                })
            } : function() {};
        h.desposeWord = function(b) {
            if (this.hasCloud) this.despose();
            else switch (a) {
                case wood1:
                case wood2:
                    0 == this.wordCount ? (this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x, this.y, "pngdata/gridskin",
                        "gridskin|wood1effect", 17), this.despose(!0)) : (this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x, this.y, "pngdata/gridskin", "gridskin|wood2effect", 17), this.gamePlayFacade.gridData.createSpecialGrid(this, 0, this.gamePlayFacade, wood1, !0));
                    engine.gameSound.playEffect(soundres.gridword);
                    break;
                case laserGrid:
                    3 > this.powerNum && !1 == b.isLaserDelete && (this.powerNum++, this.playLaser());
                    break;
                case colorEgg:
                case superColorEgg:
                    3 > this.eggPower && -1 != this.eggPower && (this.eggPower++, this.playEggMC(this.gridType ==
                        superColorEgg));
                    break;
                case cherryBlossomsGrid:
                    if (h.isYinghuaDestroyByOther) break;
                    this.cherryBlossomsGridCount++;
                    this.upLevelcherryBlossoms(this.cherryBlossomsGridCount)
            }
        };
        h.desposecherryBlossoms = function() {
            var a = new CherryBlossomsGrid;
            a.gamePlayFacade = this.gamePlayFacade;
            a.runDeleteGrid(this, this.specialType)
        };
        h.upLevelcherryBlossoms = function(a) {
            4 <= a && (a = 3);
            if (h.isYinghuaDestroyByOther) h.yinghuaEffect && (h.yinghuaEffect.onExit(), h.yinghuaEffect.dispose()), h.setVisible(!1), h.despose();
            else {
                var b = this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x,
                    this.y, "pngdata/gridskin", "gridskin|cherryblossomsupeffect", 17);
                h.yinghuaEffect = b;
                h.setVisible(!1);
                switch (a) {
                    case 1:
                        h.setSpriteFrame("pngdata/gridskin/cherryblossomsupeffect014.png");
                        b.fromFrameIndexToPlayFrameIndex(1, 14);
                        b.frameCompleteFun = function() {
                            h.isYinghuaDestroyByOther || h.setVisible(!0)
                        };
                        break;
                    case 2:
                        h.setSpriteFrame("pngdata/gridskin/cherryblossomsupeffect030.png");
                        b.fromFrameIndexToPlayFrameIndex(15, 30);
                        b.frameCompleteFun = function() {
                            h.isYinghuaDestroyByOther || h.setVisible(!0)
                        };
                        break;
                    case 3:
                        h.setSpriteFrame("pngdata/gridskin/cherryblossomsupeffect040.png"),
                            b.fromFrameIndexToPlayFrameIndex(31, 39), b.frameCompleteFun = function() {
                                h.isYinghuaDestroyByOther || h.desposecherryBlossoms()
                            }
                }
            }
        };
        h.desposeWalnut = function() {
            a == walnutType && (this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x, this.y, "pngdata/gridskin", "gridskin|walnuteffect", 17), this.despose(!0))
        };
        h.moveCloud = function(a, b) {
            this.cloudAni ? (h.setLocalZOrder(h.parent.childrenCount), this.cloudAni.fromFrameIndexToPlayFrameIndex(20, 33), this.cloudAni.playCount = 1, this.cloudAni.setFrameIntervalTime(17),
                this.cloudAni.frameFun = function() {}, this.cloudAni.runAction(cc.sequence(cc.spawn(cc.moveBy(0.3, cc.p(75 * a.x, 80 * -a.y + 25)), cc.scaleTo(0.3, 1.17, 1.17)), cc.delayTime(0.05), cc.spawn(cc.moveBy(0.1, cc.p(5 * a.x, -25)), cc.scaleTo(0.1, 1, 1)), cc.callFunc(function() {
                    h.setLocalZOrder(h.parent.childrenCount - 1);
                    h.clearCloud(!1, !0);
                    b && b()
                })))) : cc.error("严重错误，没有云却要移动")
        };
        h.clearCloud = function(a, b) {
            h.hasCloud = !1;
            if (b) h.cloudAni.dispose();
            else {
                this.cloudAni.fromFrameIndexToPlayFrameIndex(34,
                    47);
                var c = this;
                this.cloudAni.frameFun = function(b) {
                    40 <= b && a && c.gamePlayFacade.gamePlayControl.createGrid();
                    46 <= b && c.cloudAni.dispose()
                };
                this.cloudAni.playCount = 1;
                this.cloudAni.setFrameIntervalTime(17)
            }
        };
        h.despose = function() {
            if (!1 == this.isDespose)
                if (this.gamePlayFacade.gamePlayControl.refreshPromptTime(), this.gamePlayFacade.gamePlayControl.refreshResetGridTime(), this.hasCloud) this.clearCloud(!0);
                else if (a == iceType1 || a == iceType2) a == iceType1 && (this.isDespose = !0, this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x,
                this.y - 20, "pngdata/gridskin", "gridskin|ice1effect", 25), this.removeFromParent(), this.gamePlayFacade.updateVictoryCondition(this.specialType, this.gridType, this.isGem, !1, this.gridX, this.gridY), engine.gameSound.playEffect(soundres.gridice)), a == iceType2 && (this.isDespose = !0, this.gamePlayFacade.gridData.setSpecialGridInfo(this.gridX, this.gridY, null), this.gamePlayFacade.gridData.createBottomGrid(h, b, this.gamePlayFacade, iceType1), this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x, this.y - 20, "pngdata/gridskin",
                "gridskin|ice2effect", 25), this.removeFromParent(), engine.gameSound.playEffect(soundres.gridice));
            else if (null != this.iceSprite) this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x, this.y, "pngdata/gridskin", "gridskin|addiceeffect", 17), this.removeIce(), engine.gameSound.playEffect(soundres.gridice);
            else if (null != this.blisters ? this.gamePlayFacade.updateVictoryCondition(this.specialType, this.gridType, this.isGem, !0, this.gridX, this.gridY) : this.gamePlayFacade.updateVictoryCondition(this.specialType,
                    this.gridType, this.isGem, !1, this.gridX, this.gridY), this.gridType == pigType && this.gamePlayFacade.addScore(pigscore), !0 == this.isGold && this.gamePlayFacade.addGameGold(10), 0 < this.timeCount && this.gamePlayFacade.addTime(this.timeCount), this.gridType == timingbone && this.gamePlayFacade.gameLevelData.createChangeGrid++, this.isDespose = !0, this.aroundDispose(), this.gamePlayFacade.gridData.setGridInfo(this.gridX, this.gridY, null), a != wood2 && a != wood1 && a != emptyGrid && a != suctionType && a != walnutType && a != wallGrid && a != cherryBlossomsGrid) {
                if (null !=
                    this.blisters) this.gamePlayFacade.gamePlayLayer.addCustomEffectByPoint(this.x, this.y - 20, "pngdata/gridskin", "gridskin|blisters", 30), this.gamePlayFacade.wavesUp(), engine.gameSound.playEffect(soundres.gridwaterup);
                else if (cc.pool.hasObject(GridBrokenAni)) {
                    var c = cc.pool.getFromPool(GridBrokenAni);
                    c.setPosition(this.x, this.y);
                    this.gamePlayFacade.gamePlayLayer.gameEffectLayer.addChild(c)
                } else
                    for (c = 0; 5 > c; c++) cc.pool.putInPool(new GridBrokenAni);
                this.isRemove = !0;
                engine.gameSound.playEffect(soundres.griddespose)
            } else a ==
                wallGrid && e.gamePlayLayer.addCustomEffectByPoint(this.x, this.y, "pngdata/gridskin", "gridskin|walleffect", 17), this.removeFromParent()
        };
        h.skillGrid = function() {
            !1 == this.isDespose && (this.isDespose = !0, e.gridData.setGridInfo(this.gridX, this.gridY, null), this.removeFromParent())
        };
        return h
    },
    winIconUrlByID = function(a) {
        return "gameplaylayer/win" + a.toString() + ".png"
    };

function checkIdIsAnimal(a) {
    return -1 != [1, 2, 3, 4, 5, 6, 25, 31, 32, 33, 34, 35, 36, 37].indexOf(a)
}

function checkIsSameType(a, b) {
    if (a.hasCloud) return !1;
    var c = a.gridType;
    return c == b || 30 == Math.abs(c - b)
};
var AchievementSprite = cc.Sprite.extend({
    achievementType: null,
    achievementLevel: null,
    selectImg: null,
    selectImg2x: null,
    achievementInfo: null,
    initialize: function(a, b) {
        this.achievementType = a.type;
        this.achievementLevel = a.level;
        var c = new ccui.ImageView("publicimg/scalesprite4.png", ccui.Widget.PLIST_TEXTURE);
        c.setScale9Enabled(!0);
        c.setContentSize(cc.size(579, 107));
        this.addChild(c);
        c = new cc.Sprite;
        c.x = -230;
        c.setSpriteFrame("achievement/icontype" + this.achievementType.toString() + ".png");
        this.addChild(c);
        this.achievementInfo =
            getAchievementData(this.achievementType, this.achievementLevel);
        var d;
        switch (gamelanguage) {
            case french:
                d = new cc.LabelTTF(this.achievementInfo.content, defaultTxt, 20, cc.size(325, 200));
                break;
            case spanish:
                d = new cc.LabelTTF(this.achievementInfo.content, defaultTxt, 20, cc.size(325, 200));
                break;
            case portuguese:
                d = new cc.LabelTTF(this.achievementInfo.content, defaultTxt, 20, cc.size(300, 200));
                break;
            case english:
                d = new cc.LabelTTF(this.achievementInfo.content, defaultTxt, 20, cc.size(325, 200))
        }
        d.x = -5;
        d.y = -15;
        d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        d.setColor(cc.color(106, 43, 42));
        this.addChild(d);
        var e = Object.getOwnPropertyNames(achievementData[this.achievementType]).length,
            f = getAchievementPro(this.achievementType) - 1,
            c = new cc.Sprite("#achievement/probg.png");
        this.addChild(c);
        c.x = d.x - 65;
        c.y = 30;
        d = new ccui.LoadingBar;
        d.loadTexture("achievement/proimg.png", ccui.Widget.PLIST_TEXTURE);
        d.x = c.x;
        d.y = c.y + 3;
        d.setPercent(f / e * 100);
        this.addChild(d);
        d = new cc.LabelTTF(f + "/" + e, defaultTxt, 18);
        this.addChild(d);
        d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        d.enableStroke(cc.color(14, 14, 54), 2);
        d.x = c.x;
        d.y = c.y + 2;
        d = new cc.Sprite;
        d.setSpriteFrame("achievement/round.png");
        d.x = 200;
        this.addChild(d);
        d = new cc.Sprite;
        d.setSpriteFrame("achievement/round.png");
        d.x = 100;
        this.addChild(d);
        this.selectImg = new cc.Sprite;
        this.selectImg.setSpriteFrame("publicimg/select.png");
        this.selectImg.x = 115;
        this.selectImg.y = 8;
        this.addChild(this.selectImg);
        this.selectImg2x = new cc.Sprite;
        this.selectImg2x.setSpriteFrame("publicimg/select.png");
        this.selectImg2x.x = 215;
        this.selectImg2x.y = 8;
        this.addChild(this.selectImg2x);
        d = heroData.getIsOKAchievementByInfo(this.achievementType, this.achievementLevel, b);
        this.createAchievementBtn(d, this.achievementInfo)
    },
    createAchievementBtn: function(a, b) {
        var c = new cc.Sprite("#achievement/btnreceive1.png");
        c.x = 100;
        var d = new cc.LabelTTF("", defaultTxt, 30, cc.size(300, 60));
        d.x = 210;
        d.y = 46;
        d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        d.setColor(cc.color(106, 43, 42));
        d.setString(b.gem.toString());
        c.addChild(d);
        d = new cc.Sprite;
        d.setPosition(40, 38);
        d.setSpriteFrame("achievement/gem" + (a ? "1" : "2") + ".png");
        c.addChild(d);
        0 >= b.gem ? cc.error("成就奖励错误，没有钻石奖励") : (a ? recoverySprite(c) : setSpriteGray(c), this.addChild(c), a && engine.gameEvent.createMouseDown(c, this.receiveFun.bind(this, c, null, !1), buttonScalingType), c = new cc.Sprite("#achievement/btnreceive2.png"), c.x = 225, d = new cc.Sprite("#achievement/achivementx2.png"),
            d.setPosition(58, 42), c.addChild(d), a ? recoverySprite(c) : setSpriteGray(c), /*this.addChild(c),*/ a && engine.gameEvent.createMouseDown(c, this.receiveFun.bind(this, c, null, !0), buttonScalingType))
    },
    isShowEffect: !1,
    receiveFun: function(a, b, c) {
        if (!this.isShowEffect) {
            this.isShowEffect = !0;
            var d = this.parent.parent.parent;
            if (d.isCanClick()) {
                var e = this;
                b = function() {
                    d.isReceiveEffect = !0;
                    a.setVisible(!1);
                    var b = currentScene,
                        g = a.parent.achievementType,
                        h = cc.callFunc(function() {
                            var a = createGameAnimation(res.uieffect_json, "achievementgem",
                                55);
                            a.playCount = 1;
                            a.setPosition(330, 520);
                            b.addChild(a, b.topzIndex);
                            a.frameCompleteFun = function() {
                                e.isShowEffect = !1;
                                d.addRemoveAchievementSprite(c, g, function() {
                                    d.isReceiveEffect = !1
                                });
                                null == currentScene || "GameMainScene" != currentScene.sceneName && "GameLevelScene" != currentScene.sceneName || currentScene.refresh()
                            }
                        }),
                        k = cc.scaleTo(0.1, 0.95),
                        m = cc.scaleTo(0.1, 1.1),
                        n = cc.scaleTo(0.1, 1),
                        h = cc.sequence(k, m, n, h);
                    a.parent.selectImg.runAction(h);
                    a.parent.selectImg2x.runAction(h.clone())
                };
                c ? gameSDK.sendFaceBookFriend(b,
                    function() {
                        e.isShowEffect = !1
                    }) : b()
            } else this.isShowEffect = !1
        }
    }
});
var BuyItemSprite = cc.Sprite.extend({
        itemid: null,
        itembg: null,
        itemCount: null,
        itemName: null,
        countbg: null,
        goldIcon: null,
        gemIcon: null,
        itemvalue: null,
        initialize: function() {
            this.itembg = new cc.Sprite;
            this.itembg.setSpriteFrame("itemlayer/itembg.png");
            this.addChild(this.itembg);
            this.countbg = new cc.Sprite;
            this.countbg.x = 80;
            this.countbg.y = 120;
            this.countbg.setSpriteFrame("itemlayer/countbg.png");
            this.addChild(this.countbg);
            this.itemCount = new cc.LabelTTF("", defaultTxt, 25);
            this.itemCount.x = 30;
            this.itemCount.y =
                35;
            this.itemCount.setColor(cc.color(255, 229, 178));
            this.countbg.addChild(this.itemCount);
            this.itemName = new cc.LabelTTF("", defaultTxt, 25, cc.size(200, 65));
            this.itemName.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            this.itemName.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            this.itemName.x = 0;
            this.itemName.y = 93;
            this.itemName.setColor(cc.color(106, 43, 42));
            this.addChild(this.itemName);
            this.goldIcon = new cc.Sprite;
            this.goldIcon.setSpriteFrame("publicimg/gold.png");
            this.goldIcon.x = -38;
            this.goldIcon.y = -85;
            this.addChild(this.goldIcon);
            this.gemIcon = new cc.Sprite;
            this.gemIcon.x = -25;
            this.gemIcon.y = -93;
            this.gemIcon.setSpriteFrame("publicimg/gem.png");
            this.addChild(this.gemIcon);
            this.itemvalue = new cc.LabelTTF("", defaultTxt, 30);
            this.itemvalue.x = 20;
            this.itemvalue.y = -85;
            this.itemvalue.setColor(cc.color(106, 43, 42));
            this.addChild(this.itemvalue);
            var a = new cc.Sprite;
            a.setSpriteFrame("item/" + this.itemid.toString() + ".png");
            a.x = 0;
            a.y = 0;
            this.addChild(a);
            this.refresh()
        },
        refresh: function() {
            var a = engine.gameData.dataDic.itemdata[this.itemid];
            this.itemName.setString(a.itemname);
            var b = heroData.getItemCount(this.itemid);
            this.itemCount.setString(b);
            1 == a.isgoldorgem ? (a = a["gold" + itemPriceCoefficient.toString()], this.gemIcon.setVisible(!1)) : (a = a["gem" + itemPriceCoefficient.toString()], this.itemvalue.x = 20, this.goldIcon.setVisible(!1));
            this.itemvalue.setString(a);
            0 >= b ? this.countbg.setVisible(!1) : this.countbg.setVisible(!0)
        }
    }),
    UseItemSprite = cc.Sprite.extend({
        itemid: null,
        itembg: null,
        selectitembg: null,
        select: null,
        itemCount: null,
        itemName: null,
        countbg: null,
        free: null,
        goldIcon: null,
        gemIcon: null,
        itemvalue: null,
        isSelectItem: null,
        selectbg: null,
        onEnter: function() {
            this._super();
            this.isSelectItem = !1;
            this.itembg = new cc.Sprite;
            this.itembg.setSpriteFrame("itemlayer/itembg.png");
            this.addChild(this.itembg);
            this.selectitembg = new cc.Sprite;
            this.selectitembg.setSpriteFrame("itemlayer/selectitembg.png");
            this.selectitembg.setVisible(!1);
            this.addChild(this.selectitembg);
            this.selectbg = new cc.Sprite;
            this.selectbg.x = 0;
            this.selectbg.y = -90;
            this.selectbg.setSpriteFrame("itemlayer/selectbg.png");
            this.addChild(this.selectbg);
            this.select = new cc.Sprite;
            this.select.x = 0;
            this.select.y = -84;
            this.select.setSpriteFrame("publicimg/select.png");
            this.select.setVisible(!1);
            this.addChild(this.select);
            this.countbg = new cc.Sprite;
            this.countbg.x = 80;
            this.countbg.y = 120;
            this.countbg.setSpriteFrame("itemlayer/countbg.png");
            this.addChild(this.countbg);
            this.itemCount = new cc.LabelTTF("", defaultTxt, 25);
            this.itemCount.x = 30;
            this.itemCount.y = 35;
            this.itemCount.setColor(cc.color(225, 229, 178));
            this.countbg.addChild(this.itemCount);
            this.itemName = new cc.LabelTTF("", defaultTxt, 25, cc.size(200, 60));
            this.itemName.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            this.itemName.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            this.itemName.x = 0;
            this.itemName.y = 88;
            this.itemName.setColor(cc.color(106, 43, 42));
            this.addChild(this.itemName);
            this.goldIcon = new cc.Sprite;
            this.goldIcon.setSpriteFrame("publicimg/gold.png");
            this.goldIcon.x = -36;
            this.goldIcon.y = -85;
            this.addChild(this.goldIcon);
            this.gemIcon = new cc.Sprite;
            this.gemIcon.x = -33;
            this.gemIcon.y = -90;
            this.gemIcon.setSpriteFrame("publicimg/gem.png");
            this.addChild(this.gemIcon);
            this.itemvalue = new cc.LabelTTF("", defaultTxt, 28);
            this.itemvalue.x = 20;
            this.itemvalue.y = -85;
            this.itemvalue.setColor(cc.color(106, 43, 42));
            this.addChild(this.itemvalue);
            var a = new cc.Sprite;
            a.setSpriteFrame("item/" + this.itemid.toString() + ".png");
            a.x = 0;
            a.y = 0;
            this.addChild(a);
            this.refresh(this.itemid)
        },
        selectItem: function() {
            this.isSelectItem = !this.isSelectItem;
            !0 == this.isSelectItem ? (this.select.setVisible(!0),
                this.selectitembg.setVisible(!0), this.itembg.setVisible(!1)) : (this.select.setVisible(!1), this.selectitembg.setVisible(!1), this.itembg.setVisible(!0))
        },
        refresh: function(a) {
            var b = engine.gameData.dataDic.itemdata[a];
            this.itemName.setString(b.itemname);
            a = heroData.getItemCount(a);
            var c = !1;
            "0" == this.itemCount.getString() && 0 < a && (c = !0);
            this.itemCount.setString(a);
            0 < a ? (this.goldIcon.setVisible(!1), this.gemIcon.setVisible(!1), this.countbg.setVisible(!0), this.itemvalue.setVisible(!1), this.selectbg.setVisible(!0),
                c && this.selectItem()) : (this.countbg.setVisible(!1), this.selectbg.setVisible(!1), 1 == b.isgoldorgem ? (b = b["gold" + itemPriceCoefficient.toString()], this.gemIcon.setVisible(!1)) : (b = b["gem" + itemPriceCoefficient.toString()], this.itemvalue.x = 18, this.goldIcon.setVisible(!1)), this.itemvalue.setString(b))
        }
    });
var GOODGAESEREWEPRETERT = "QWE123123123213123123[TRTRT[RE",
    VictoryConditionItemSprite = cc.Sprite.extend({
        bg: null,
        onEnter: function() {
            this._super()
        },
        setGeneralCondition: function(a) {
            for (var b = [], c = 0; c < a.length; c++) {
                var d = new cc.Sprite,
                    e = new cc.Sprite;
                e.setSpriteFrame(winIconUrlByID(a[c].winType));
                d.addChild(e);
                e = new cc.LabelTTF("X" + a[c].count.toString(), defaultTxt, 32);
                e.setAnchorPoint(cc.p(0, 0.5));
                e.x = 35;
                e.setColor(cc.color(106, 43, 42));
                d.addChild(e);
                this.addChild(d);
                b.push(d)
            }
            a = {};
            a.spArr = b;
            a.spWidth =
                173;
            a.p = cc.p(-30, 0);
            a.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(a)
        },
        setSpecialCondition: function(a) {
            for (var b = [], c = 0; c < a.length; c++) {
                var d = new cc.Sprite,
                    e = new cc.Sprite;
                e.setSpriteFrame(winIconUrlByID(a[c].gridType));
                d.addChild(e);
                e = new cc.LabelTTF("X" + a[c].count.toString(), defaultTxt, 35);
                e.setAnchorPoint(cc.p(0, 0.5));
                e.x = 35;
                e.setColor(cc.color(106, 43, 42));
                d.addChild(e);
                this.addChild(d);
                b.push(d)
            }
            a = {};
            a.spArr = b;
            a.spWidth = 173;
            a.p = cc.p(-30, 0);
            a.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(a)
        },
        setCondition: function(a) {
            generalItemList = [];
            for (var b = 0; b < a.length; b++) {
                var c = new cc.Sprite,
                    d = new cc.Sprite;
                d.setSpriteFrame(winIconUrlByID(a[b].winType));
                c.addChild(d);
                d = new GameArtWord("victory", 18, 32);
                d.alignmentType = artWordLeft;
                d.x = 38;
                7 == a[b].winType ? d.setString((a[b].maxcount - a[b].count).toString() + "/" + a[b].maxcount.toString()) : d.setString("X" + a[b].count.toString());
                c.itemCount = d;
                c.addChild(d);
                this.addChild(c);
                generalItemList.push(c)
            }
            a = {};
            a.spArr = generalItemList;
            a.spWidth = 118;
            a.p = cc.p(0, 0);
            a.settingType =
                centerSetting;
            engine.gameTool.gameSpSettingFun(a)
        },
        setScore: function(a) {
            var b = new cc.Sprite,
                c = new cc.Sprite;
            c.x = -30;
            c.setSpriteFrame("publicimg/score.png");
            b.addChild(c);
            a = new cc.LabelTTF("X" + a.toString(), defaultTxt, 35);
            a.setAnchorPoint(cc.p(0, 0.5));
            a.x = 0;
            a.setColor(cc.color(106, 43, 42));
            b.addChild(a);
            b.getContentSize();
            b.x = b.x - a.getString().length / 2 * 19 + 25;
            this.addChild(b)
        }
    }),
    VictoryConditionUI = cc.Sprite.extend({
        generalItemList: null,
        paopao: null,
        destroyNode: function() {
            this.paopao.stopAllActions();
            this.paopao.removeAllChildren();
            EventMgr.remove(EVENTMGR_ID.COLLECTION_HIT, null)
        },
        initialize: function(a, b) {
            var c = this;
            EventMgr.register(EVENTMGR_ID.COLLECTION_HIT, function(a) {
                null == a ? c.shake(1) : c.shake(2)
            }, null);
            this.paopao = b;
            1 != a.length && b.setSpriteFrame("gameplaylayer/bubble" + a.length + ".png");
            this.generalItemList = [];
            for (var d = 0; d < a.length; d++) {
                var e = new cc.Sprite,
                    f = new cc.Sprite;
                f.setSpriteFrame(winIconUrlByID(a[d].winType));
                f.setPosition(0, 40);
                f.scale = 0.8;
                e.addChild(f);
                f = new GameArtWord("rankstarfnt", 16, 21);
                f.alignmentType = artWordLeft;
                f.x = 0;
                f.y = 20;
                7 == a[d].winType ? (f.setString((a[d].maxcount - a[d].count).toString() + "/" + a[d].maxcount.toString()), f.x = -40) : f.setString(a[d].count.toString());
                e.itemCount = f;
                e.addChild(f);
                this.generalItemList.push(e);
                b.addChild(e);
                f.setCascadeColorEnabled(!0);
                f.setCascadeOpacityEnabled(!0);
                e.setCascadeColorEnabled(!0);
                e.setCascadeOpacityEnabled(!0)
            }
            d = {};
            d.spArr = this.generalItemList;
            d.spWidth = 80;
            d.p = 1 == a.length ? cc.p(60, 45) : cc.p(95, 45);
            d.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(d);
            b.setCascadeColorEnabled(!0);
            b.setCascadeOpacityEnabled(!0);
            c = this;
            b.visible = !1;
            b.scale = 0.3;
            b.runAction(cc.sequence(cc.delayTime(2.2), cc.callFunc(function() {
                b.visible = !0
            }), cc.scaleTo(0.3, 1, 1), cc.sequence(cc.moveBy(0.7, 0, 4), cc.moveBy(1.4, 0, -8), cc.moveBy(0.7, 0, 4)).repeatForever()))
        },
        setVictoryConditionCount: function(a) {
            for (var b = 0; b < this.generalItemList.length; b++)
                if (7 == a[b].winType ? this.generalItemList[b].itemCount.setString((a[b].maxcount - a[b].count).toString() + "/" + a[b].maxcount.toString()) : this.generalItemList[b].itemCount.setString(a[b].count.toString()),
                    0 == a[b].count && this.generalItemList[b].itemCount.visible) {
                    this.generalItemList[b].itemCount.visible = !1;
                    var c = new cc.Sprite("#gameplaylayer/gou.png");
                    c.setPosition(0, 30);
                    this.generalItemList[b].addChild(c)
                }
        },
        shake: function(a) {
            this.generalItemList[a - 1].runAction(cc.sequence(cc.scaleTo(0.1, 1.3, 1.3), cc.scaleTo(0.12, 1, 1), cc.scaleTo(0.14, 1.1, 1.1), cc.scaleTo(0.16, 1, 1)));
            this.paopao.runAction(cc.sequence(cc.delayTime(0.1), cc.scaleTo(0.1, 1.1, 1.1), cc.scaleTo(0.12, 1, 1), cc.scaleTo(0.14, 1.03, 1.03), cc.scaleTo(0.16,
                1, 1)))
        }
    });
var petskinjumpin = "jumpin",
    petskinjumpout = "jumpout",
    petskinfree1 = "free1",
    petskinfree2 = "free2",
    petfightingskinfree = "free",
    petfightingskinattack = "attack",
    PetFightingSkin = cc.Sprite.extend({
        petObj: null,
        skinType: null,
        skin: null,
        initialize: function() {
            var a = createGameAnimation(res.petskin_json, "pet" + this.petObj.getPetSkinID() + "fighting", 30),
                b = this;
            this.skin = a;
            this.setPetSkin(petfightingskinfree, null);
            a.frameCompleteFun = function() {
                b.skinType == petfightingskinattack && b.setPetSkin(petfightingskinfree, null)
            };
            this.addChild(a)
        },
        setPetSkin: function(a, b) {
            this.skinType = a;
            switch (a) {
                case petfightingskinfree:
                    this.skin.fromFrameIndexToPlayFrameIndex(32, 52);
                    this.skin.playCount = -1;
                    break;
                case petfightingskinattack:
                    this.skin.fromFrameIndexToPlayFrameIndex(0, 31), this.skin.playCount = 1, this.skin.frameFun = function(a) {
                        22 == a && (a = createGameAnimation(res.uieffect_json, "petbackgroundlight", 25), a.y = 63, a.playCount = 1, a.isRemoveFromComplete = !0, a.setScale(0.35), this.addChild(a, -1), b(), this.frameFun = null)
                    }
            }
        }
    }),
    PetSkin = cc.Sprite.extend({
        petObj: null,
        skinType: null,
        skinTag: 100,
        skin: null,
        isCascadeOpacityEnabled: null,
        ctor: function() {
            this.isCascadeOpacityEnabled = !1;
            this._super()
        },
        setPetSkin: function(a) {
            this.removeAllChildren();
            var b = this;
            this.skinType = a;
            var c = createGameAnimation(res.petskin_json, "pet" + this.petObj.getPetSkinID() + a, 30);
            !0 == this.isCascadeOpacityEnabled && c.setCascadeOpacityEnabled(!0);
            switch (a) {
                case petskinjumpin:
                    c.playCount = 1;
                    c.steFrameComplete(function() {
                        b.setPetSkin(petskinfree2)
                    });
                    break;
                case petskinjumpout:
                    c.playCount = 1;
                    break;
                case petskinfree1:
                    c.playCount =
                        1;
                    c.steFrameComplete(function() {
                        b.changeSkin()
                    });
                    break;
                case petskinfree2:
                    c.playCount = 1, c.steFrameComplete(function() {
                        b.changeSkin()
                    })
            }
            c.tag = this.skinTag;
            this.skin = c;
            this.addChild(c)
        },
        changeSkin: function() {
            this.skinType == petskinfree1 ? this.setPetSkin(petskinfree2) : 0.15 > Math.random() && (this.skinType == petskinfree1 ? this.setPetSkin(petskinfree2) : this.setPetSkin(petskinfree1));
            null != this.getChildByTag(this.skinTag) && this.getChildByTag(this.skinTag).gotoAndPlay(0)
        }
    }),
    PetShopSprite = cc.Sprite.extend({
        petObj: null,
        initialize: function() {
            var a = new cc.Sprite;
            a.setSpriteFrame("pet/sn" + this.petObj.petData.getPetNameIcon() + ".png");
            a.x = 320;
            a.y = 940;
            this.addChild(a);
            a = new cc.Sprite;
            a.setSpriteFrame("pet/7.png");
            a.x = 320;
            a.y = 880;
            this.addChild(a);
            for (var a = [], b = 0; b < this.petObj.petData.getPetStart(); b++) {
                var c = new cc.Sprite;
                c.setSpriteFrame("pet/petshopstart.png");
                this.addChild(c);
                a.push(c)
            }
            b = {};
            b.spArr = a;
            b.spWidth = 46;
            b.p = cc.p(322, 880);
            b.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(b);
            a = new PetSkin;
            a.x = 320;
            a.y = 490;
            a.petObj = this.petObj.petData;
            a.setPetSkin(petskinfree2);
            this.addChild(a);
            a = new cc.Sprite;
            a.setAnchorPoint(cc.p(0, 0.5));
            a.setSpriteFrame("pet/petshopline2.png");
            a.x = 87;
            a.y = 440;
            this.addChild(a);
            a = new cc.Sprite;
            a.setAnchorPoint(cc.p(1, 0.5));
            a.setSpriteFrame("pet/petshopline2.png");
            a.x = 555;
            a.y = 440;
            this.addChild(a);
            a = new cc.LabelTTF("", defaultTxt, 25, cc.size(640, 52));
            a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            a.setString(engine.gameData.dataDic.language[105].content);
            a.x = 320;
            a.y = 440;
            a.setColor(cc.color(134, 46, 61));
            this.addChild(a);
            a = new cc.Sprite;
            a.setSpriteFrame("publicimg/score.png");
            a.x = 380;
            a.y = 400;
            this.addChild(a);
            a = new cc.LabelTTF("", defaultTxt, 25, cc.size(180, 52));
            a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            a.x = 450;
            a.y = 400;
            a.setColor(cc.color(153, 74, 76));
            a.setString("+" + this.petObj.petData.getPetAddScore().toString() + "%");
            this.addChild(a);
            a = new cc.Sprite;
            a.setSpriteFrame("publicimg/gold.png");
            a.x = 180;
            a.y = 400;
            this.addChild(a);
            a = new cc.LabelTTF("", defaultTxt, 25, cc.size(180, 52));
            a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            a.setString(engine.gameData.dataDic.language[105].content);
            a.x = 250;
            a.y = 400;
            a.setColor(cc.color(153, 74, 76));
            a.setString("+" + this.petObj.petData.getPetAddGold().toString() + "%");
            this.addChild(a);
            a = new cc.Sprite;
            a.setSpriteFrame("pet/petshopline1.png");
            a.x = 132;
            a.y = 360;
            this.addChild(a);
            a = new cc.Sprite;
            a.setSpriteFrame("pet/petshopline1.png");
            a.x = 508;
            a.y = 360;
            this.addChild(a);
            b = new cc.LabelTTF("", defaultTxt, 25, cc.size(500, 52));
            b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            b.x = 320;
            b.y = 360;
            a = engine.gameData.dataDic.petskilldata[this.petObj.petData.getSkillID()];
            b.setString(a.skillname);
            b.setColor(cc.color(134, 46, 61));
            this.addChild(b);
            b = new cc.LabelTTF("", defaultTxt, 25, cc.size(500, 100));
            b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_TOP);
            b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            b.x = 320;
            b.y = 300;
            b.setString(a.explain);
            b.setColor(cc.color(153, 74, 76));
            this.addChild(b);
            a = new cc.Sprite;
            a.setSpriteFrame("publicimg/buybtn.png");
            a.x = 320;
            a.y = 230;
            this.addChild(a);
            a.petIndex = this.petObj.petIndex;
            0 < this.petObj.buygem ? (b = new cc.Sprite, b.setSpriteFrame("publicimg/gem.png"), b.x = 100, b.y = 60, a.addChild(b), b = new cc.LabelTTF("", defaultTxt, 34, cc.size(180, 52)), b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER), b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT), b.setString(this.petObj.buygem.toString()),
                b.x = 225) : (b = new cc.Sprite, b.setSpriteFrame("publicimg/gold.png"), b.x = 80, b.y = 65, a.addChild(b), b = new cc.LabelTTF("", defaultTxt, 34, cc.size(180, 52)), b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER), b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT), b.setString(this.petObj.buygold.toString()), b.x = 200);
            b.y = 65;
            b.setColor(cc.color(134, 46, 61));
            a.addChild(b);
            engine.gameEvent.createMouseUp(a, this.buyPet, buttonScalingType);
            this.y = 20
        },
        buyPet: function() {
            var a = getPetListShop(),
                b = getPetGemListShop(),
                c = getPetGoldListShop(),
                d = a[this.petIndex],
                a = b[this.petIndex],
                c = c[this.petIndex],
                b = !1;
            if (0 < a) {
                if (heroData.getGem() < a) {
                    addBuyGemUI();
                    return
                }
                heroData.getGem() >= a && (heroData.updateGem(-a), heroData.addNewPetByID(d), currentScene.refresh(), b = !0, saveHeroData())
            } else {
                if (heroData.getGold() < c) {
                    addGoldGemShopUI();
                    return
                }
                heroData.getGold() >= c && (heroData.updateGold(-c), heroData.addNewPetByID(d), currentScene.refresh(), b = !0, saveHeroData())
            }
            if (b) {
                var e = new cc.Sprite;
                createMaskLayer(e);
                currentScene.addChild(e, 101);
                c = createGameAnimation(res.uieffect_json,
                    "brokenshellegg", 25);
                e.addChild(c, 1);
                c.playCount = 1;
                c.isRemoveFromComplete = !0;
                c.x = 320;
                c.y = 440;
                c.isCreatePet = !1;
                a = createGameAnimation(res.uieffect_json, "brokenshelleggeffect", 25);
                a.playCount = 1;
                a.isRemoveFromComplete = !0;
                a.x = 320;
                a.y = 440;
                e.addChild(a, 1);
                c.frameFun = function(a) {
                    if (16 >= a) 0 == a % 2 ? this.setRotation(-5) : this.setRotation(5);
                    else if (!1 == this.isCreatePet) {
                        this.isCreatePet = !0;
                        var b = createGameAnimation(res.uieffect_json, "petbackgroundlight", 30);
                        b.x = 320;
                        b.y = 550;
                        b.setCascadeOpacityEnabled(!0);
                        e.addChild(b);
                        a = new PetData;
                        a.petid = d;
                        var c = new PetSkin;
                        c.isCascadeOpacityEnabled = !0;
                        c.x = 320;
                        c.y = 450;
                        c.petObj = a;
                        c.setPetSkin(petskinfree2);
                        c.setCascadeOpacityEnabled(!0);
                        e.addChild(c);
                        e.scheduleOnce(function() {
                            c.runAction(cc.spawn(cc.scaleTo(0.2, 0.01), cc.fadeOut(0.2)));
                            b.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.2, 0.01), cc.fadeOut(0.2)), cc.callFunc(function() {
                                e.removeFromParent()
                            })))
                        }, 1)
                    }
                }
            }
        }
    }),
    SelectPetSprite = cc.Sprite.extend({
        petObj: null,
        initialize: function() {
            var a = new cc.Sprite;
            a.setSpriteFrame("pet/n" + this.petObj.getPetNameIcon() +
                ".png");
            a.x = 320;
            a.y = 920;
            this.addChild(a);
            a = new cc.Sprite;
            a.setSpriteFrame("pet/7.png");
            a.x = 320;
            a.y = 860;
            this.addChild(a);
            a = new cc.LabelTTF(engine.gameData.dataDic.language[107].content + this.petObj.petlevel.toString(), defaultTxt, 35);
            a.x = 320;
            a.y = 863;
            a.setColor(cc.color(255, 205, 106));
            this.addChild(a);
            a = new PetSkin;
            a.x = 320;
            a.y = 470;
            a.petObj = this.petObj;
            a.setPetSkin(petskinfree2);
            this.addChild(a);
            for (var a = [], b = 0; b < this.petObj.getPetStart(); b++) {
                var c = new cc.Sprite;
                c.setSpriteFrame("pet/petstart.png");
                this.addChild(c);
                a.push(c)
            }
            b = {};
            b.spArr = a;
            b.spWidth = 74;
            b.p = cc.p(320, 400);
            b.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(b)
        }
    }),
    PetBackpackSprite = cc.Sprite.extend({
        petData: null,
        isSelectPet: null,
        petbg: null,
        selectpetbg: null,
        petLevel: null,
        petIcon: null,
        select: null,
        initialize: function() {
            this.isSelectPet = !1;
            this.petbg = new cc.Sprite;
            this.petbg.setSpriteFrame("itemlayer/itembg.png");
            this.addChild(this.petbg);
            this.selectpetbg = new cc.Sprite;
            this.selectpetbg.setSpriteFrame("itemlayer/selectitembg.png");
            this.selectpetbg.setVisible(!1);
            this.addChild(this.selectpetbg);
            this.petLevel = new cc.LabelTTF(engine.gameData.dataDic.language[107].content + this.petData.petlevel.toString(), defaultTxt, 25);
            this.petLevel.y = 80;
            this.petLevel.setColor(cc.color(106, 43, 42));
            this.addChild(this.petLevel);
            for (var a = [], b = 0; b < this.petData.getPetStart(); b++) {
                var c = new cc.Sprite;
                c.setSpriteFrame("pet/smallstart.png");
                this.addChild(c);
                a.push(c)
            }
            b = {};
            b.spArr = a;
            b.spWidth = 40;
            b.p = cc.p(0, -80);
            b.settingType = centerSetting;
            engine.gameTool.gameSpSettingFun(b);
            this.peticon =
                new cc.Sprite;
            this.peticon.setSpriteFrame("pet/icon" + this.petData.getPetIcon() + ".png");
            this.addChild(this.peticon);
            this.select = new cc.Sprite;
            this.select.x = 60;
            this.select.y = -80;
            this.select.setSpriteFrame("publicimg/select.png");
            this.select.setVisible(!1);
            this.addChild(this.select)
        },
        selectItem: function() {
            this.isSelectPet = !this.isSelectPet;
            !0 == this.isSelectPet ? (this.select.setVisible(!0), this.selectpetbg.setVisible(!0), this.petbg.setVisible(!1)) : (this.select.setVisible(!1), this.selectpetbg.setVisible(!1),
                this.petbg.setVisible(!0))
        }
    }),
    PetUpSprite = cc.Node.extend({
        petData: null,
        isSelectPet: null,
        petbg: null,
        selectpetbg: null,
        petLevel: null,
        petIcon: null,
        select: null,
        toX: null,
        isInit: null,
        ctor: function() {
            this.isInit = !1;
            this._super()
        },
        initialize: function() {
            if (!0 != this.isInit) {
                this.isInit = !0;
                this.isSelectPet = !1;
                this.petbg = new cc.Sprite;
                this.petbg.setSpriteFrame("itemlayer/itembg.png");
                this.petbg.setScale(0.75);
                this.addChild(this.petbg);
                this.petLevel = new cc.LabelTTF(engine.gameData.dataDic.language[107].content +
                    this.petData.petlevel.toString(), defaultTxt, 25);
                this.petLevel.y = 80;
                this.petLevel.setColor(cc.color(106, 43, 42));
                this.addChild(this.petLevel, 1);
                var a = new cc.Sprite;
                a.setSpriteFrame("pet/petstart" + this.petData.getPetStart().toString() + ".png");
                a.x = 2;
                a.y = -67;
                this.addChild(a, 1);
                this.peticon = new cc.Sprite;
                this.peticon.y = 8;
                this.peticon.setSpriteFrame("pet/icon" + this.petData.getPetIcon() + ".png");
                this.addChild(this.peticon, 1)
            }
        },
        selectItem: function() {
            !1 == this.isInit && this.initialize();
            var a = heroData.getSelectePet();
            a.petlevel >= a.getPetMaxLevel() || (null == this.select && (this.select = new cc.Sprite, this.select.x = 40, this.select.y = -70, this.select.setSpriteFrame("publicimg/select.png"), this.select.setVisible(!1), this.addChild(this.select, 1)), null == this.selectpetbg && (this.selectpetbg = new cc.Sprite, this.selectpetbg.setSpriteFrame("itemlayer/selectitembg.png"), this.selectpetbg.setScale(0.75), this.selectpetbg.setVisible(!1), this.addChild(this.selectpetbg)), this.isSelectPet = !this.isSelectPet, !0 == this.isSelectPet ? (this.select.setVisible(!0),
                this.selectpetbg.setVisible(!0), this.petbg.setVisible(!1)) : (this.select.setVisible(!1), this.selectpetbg.setVisible(!1), this.petbg.setVisible(!0)))
        }
    });
var GamePlayStepSprite = cc.Sprite.extend({
        step: null,
        stepTxtList: null,
        txtWidth: null,
        contentSprite: null,
        ctor: function() {
            this.step = 0;
            this.stepTxtList = "";
            this.contentSprite = null;
            this._super()
        },
        setString: function(a) {
            this.step != a && (this.step = a);
            null == this.contentSprite ? (this.contentSprite = new cc.Sprite, this.addChild(this.contentSprite)) : this.contentSprite.removeAllChildren();
            for (var b = this.step.toString(), c = 0, d = 0; d <= b.length - 1; d++) {
                var e = createGameAnimation(res.gameplayeffect_json, "step" + b[d].toString(),
                        15),
                    c = c + this.txtWidth;
                e.x = c;
                this.contentSprite.addChild(e);
                b[d] != this.stepTxtList[d] ? 0 == a ? (e.playCount = 1, e.gotoAndStop(9)) : 5 >= a && 0 < a ? e.fromFrameIndexToPlayFrameIndex(10, 19) : (e.playCount = 1, e.fromFrameIndexToPlayFrameIndex(0, 9)) : e.gotoAndStop(9)
            }
            this.stepTxtList = b;
            this.contentSprite.x = -c / 2
        }
    }),
    creatPlayStepSprite = function(a) {
        var b = new GamePlayStepSprite;
        b.txtWidth = a;
        return b
    };
var MissionListSprite = cc.Sprite.extend({
    data: null,
    finishIcon: null,
    selectImg: null,
    btn: null,
    progress: null,
    proTxt: null,
    btnTxt: null,
    ctor: function(a) {
        this._super();
        this.data = heroData.missionData.getDataById(a);
        var b = new ccui.ImageView("publicimg/scalesprite1.png", ccui.Widget.PLIST_TEXTURE);
        b.setScale9Enabled(!0);
        b.setContentSize(cc.size(636, 161));
        this.addChild(b);
        b = new cc.Sprite("#daymission/dm_icon" + this.data.missionicon + ".png");
        b.setPosition(-250, 0);
        this.addChild(b);
        b = new cc.LabelTTF(this.data.missonname,
            defaultTxt, 20, cc.size(325, 200));
        b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        b.setPosition(-20, -40);
        b.enableStroke(cc.color(106, 43, 42), 2);
        b.setColor(cc.color(255, 255, 255));
        this.addChild(b);
        b = new cc.Sprite("#daymission/dm_jindudi.png");
        this.addChild(b);
        b.setPosition(-60, 10);
        var c = new ccui.LoadingBar;
        c.loadTexture("daymission/dm_jindu.png", ccui.Widget.PLIST_TEXTURE);
        c.x = b.x;
        c.y = b.y + 3;
        this.addChild(c);
        this.progress = c;
        c = new cc.LabelTTF("", defaultTxt, 18);
        c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        c.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        c.enableStroke(cc.color(14, 14, 54), 2);
        c.x = b.x;
        c.y = b.y + 2;
        this.addChild(c);
        this.proTxt = c;
        b = new cc.Sprite("#daymission/dm_icon.png");
        b.setPosition(60, 10);
        this.addChild(b);
        this.finishIcon = b;
        c = new cc.Sprite(1 == this.data.rewardtype ? "#gameselectlayer/t2.png" : "#gameselectlayer/15.png");
        c.setPosition(-160, -25);
        this.addChild(c);
        c = new cc.LabelTTF("" + this.data.rewardnum, defaultTxt, 30, cc.size(325, 200));
        c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        c.setPosition(40,
            -105);
        c.setColor(cc.color(106, 43, 42));
        this.addChild(c);
        this.selectImg = new cc.Sprite;
        this.selectImg.setSpriteFrame("daymission/dm_gou.png");
        this.selectImg.x = 215;
        this.selectImg.y = 8;
        this.addChild(this.selectImg);
        this.selectImg.visible = !1;
        c = new cc.Sprite("#daymission/dm_anniu_b.png");
        c.setPosition(200, 8);
        this.addChild(c);
        this.btn = c;
        var d = new cc.Sprite("#daymission/dm_Play.png #daymission/dm_Send.png #daymission/dm_Invite.png #daymission/dm_request.png #daymission/dm_share.png #daymission/dm_collect.png".split(" ")[this.data.openicon -
            1]);
        d.setPosition(100, 55);
        c.addChild(d);
        this.btnTxt = d; - 1 != heroData.missionData.finishMissionArr.indexOf(this.data.id) && (b.visible = !1, c.visible = !1, this.selectImg.visible = !0);
        engine.gameEvent.createMouseDown(c, this.quickOpen.bind(this, this.data.openid), buttonScalingType);
        EventMgr.register(EVENTMGR_ID.MISSION_CHECK_NEED_MOVE_UP, this.checkSelfNeedUp.bind(this), this);
        EventMgr.register(EVENTMGR_ID.MISSION_UPDATE_VALUE, this.reflushValue.bind(this), this);
        this.reflushValue();
        13 == a && c.runAction(cc.sequence(cc.scaleTo(0.2,
            1.05), cc.scaleTo(0.15, 0.95), cc.scaleTo(0.1, 1), cc.delayTime(0.5)).repeatForever())
    },
    onEnter: function() {
        this._super();
        this.endY = this.y
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.MISSION_CHECK_NEED_MOVE_UP, this);
        EventMgr.remove(EVENTMGR_ID.MISSION_UPDATE_VALUE, this);
        this.btnTxt = this.proTxt = this.progress = this.btn = this.finishIcon = this.selectImg = this.finishIcon = this.data = null
    },
    endY: 0,
    moveAction: null,
    checkSelfNeedUp: function(a) {
        this.moveAction && this.moveAction.stop();
        this.y < a && (this.endY +=
            160, this.moveAction = this.runAction(cc.moveTo(0.4, cc.p(this.x, this.endY))))
    },
    missionFinish: !1,
    reflushValue: function() {
        var a = heroData.missionData.getFinishNumByMissionId(this.data.id),
            b = this.data.neednum,
            a = Math.min(a, b);
        this.progress.setPercent(a / b * 100);
        this.proTxt.setString(a + "/" + b);
        a == b && (this.btn.stopAllActions(), this.btn.setSpriteFrame("daymission/dm_anniu_r.png"), this.btnTxt.setSpriteFrame("daymission/dm_GET_g.png"), this.missionFinish = !0)
    },
    getAward: function() {
        this.btn.visible = !1;
        this.selectImg.visible = !0;
        heroData.missionData.finishMissionArr.push(this.data.id);
        var a = heroData.missionData.todayMissionArr;
        a.splice(a.indexOf(this.data.id), 1);
        a.push(this.data.id);
        a = this.finishIcon.getPosition();
        a = this.convertToWorldSpaceAR(a);
        EventMgr.emit(EVENTMGR_ID.MISSION_FINISH_FLY, {
            pos: a,
            sp: this
        });
        this.finishIcon.removeFromParent();
        var b = this.data.rewardtype,
            c = this.data.rewardnum;
        a.x += 130;
        1 == b ? myGameTool.createInviteFlyEffect(a, 2) : (heroData.updateGem(c), myGameTool.createInviteFlyEffect(a, 1))
    },
    quickOpen: function(a) {
        if (this.missionFinish) this.getAward();
        else switch (a) {
            case 1:
                this.closeFun(function() {
                    selectLevel = heroData.getMaxOpenLevel();
                    currentScene.addLevelDetailsLayer(selectLevel)
                });
                break;
            case 2:
                gameSDK.sendFaceBookFriend(function() {
                    heroData.missionData.recordData(9, 1)
                });
                break;
            case 4:
                this.closeFun(function() {
                    heroData.missionData.detailOpenHandle(1)
                });
                break;
            case 3:
                this.closeFun(function() {
                    heroData.missionData.detailOpenHandle(2)
                });
                break;
            case 5:
                this.closeFun(function() {
                    currentScene.playTimeModel()
                });
                break;
            case 6:
                gameSDK.shareGame(function() {
                    heroData.missionData.recordData(13,
                        1)
                }, {
                    pngData: [{
                        url: "res/sharebg.jpg",
                        posX: 0,
                        posY: 0,
                        imgWidth: 1364,
                        imgHeight: 682
                    }],
                    width: 1364,
                    height: 682,
                    text: "play with me"
                })
        }
    },
    closeFun: function(a) {
        this.btn.stopAllActions();
        this.parent.parent.parent.closeUI(a)
    }
});
var gameselectlayerType = 1,
    petLayerType = 2,
    incubationPetLayerType = 3,
    petBackpackLayerType = 4,
    petUpType = 5,
    isFirstPlayGame = !1,
    GamePlayScene = GameScene.extend({
        gamePlayFacade: null,
        newbieGuideLayer: null,
        ctor: function() {
            this.sceneName = "GamePlayScene";
            this._super()
        },
        onEnter: function() {
            this._super();
            this.initialize();
            engine.gameSound.playMusic(soundres.gameplaybg);
            cc.pool.drainAllPools();
            if (1 > heroData.gameUserData.dayGift && 3 <= Global.FailLevelArr.length && (Global.FailLevelArr = Global.FailLevelArr.slice(-3), Global.FailLevelArr[0] ==
                    Global.FailLevelArr[1] && Global.FailLevelArr[1] == Global.FailLevelArr[2])) {
                Global.FailLevelArr = [];
                var a = this;
                MyTool_stepLoadCheckTool.autoCheckLoaded("gift", function() {
                    var b = new GiftLayer;
                    createMaskLayer(b);
                    a.addChild(b, 99999);
                    b.initialize()
                })
            }
        },
        update: function(a) {
            this._super(a);
            this.gamePlayFacade.update(a)
        },
        initialize: function() {
            var a = this,
                b = {
                    scene: this
                };
            this.gamePlayFacade = new GamePlayFacade;
            this.gamePlayFacade.initialize(b);
            heroData.resetNewbieGamePlayGuideStep();
            if (1 == selectType && 0 == heroData.getMaxLevelStart(selectLevel) ||
                debugtest.mustShowGuide) {
                this.addNewbieGuideLayer = function() {
                    var b = new NewbieGuideLayer;
                    a.newbieGuideLayer = b.createGamePlayerNewbieGuideLayer(selectLevel, heroData.newbieGamePlayGuideStep);
                    null != a.newbieGuideLayer && a.addChild(a.newbieGuideLayer, 999999)
                };
                this.removeNewbieGuideLayer = function() {
                    null != a.newbieGuideLayer && (heroData.runGamePlayNewbieGuide(), a.removeChild(a.newbieGuideLayer), a.newbieGuideLayer = null)
                };
                var c = engine.gameData.dataDic.leveldata[selectLevel];
                if (c && 0 != c.havenewbie) {
                    var d = 200 + c.havenewbie;
                    c.havenewbie && (b = {
                        desStr: engine.gameData.dataDic.language[d].content,
                        id: c.havenewbie
                    });
                    c = new NewBieExplainLayer;
                    c.initialize(b);
                    a.addChild(c, 999999)
                } else this.showVictoryConditionLayer()
            } else this.addNewbieGuideLayer = function() {}, this.removeNewbieGuideLayer = function() {}, this.showVictoryConditionLayer();
            this._super()
        },
        showVictoryConditionLayer: function() {
            switch (selectType) {
                case 1:
                    var a = new VictoryConditionLayer;
                    createMaskLayer(a);
                    this.addChild(a);
                    break;
                case 2:
                    a = createGameAnimation(res.gameplayeffect_json,
                        "countdown", 19);
                    a.isRemoveFromComplete = !0;
                    a.playCount = 1;
                    a.x = 340;
                    a.y = 950;
                    engine.gameSound.playEffect(soundres.begingame);
                    var b = this;
                    a.frameCompleteFun = function() {
                        b.beginGame()
                    };
                    this.gamePlayFacade.gamePlayLayer.addChild(a)
            }
        },
        createPool: function() {},
        despose: function(a) {
            this.unscheduleUpdate();
            this.gamePlayFacade.despose()
        },
        beginGame: function() {
            var a = this.gamePlayFacade.gamePlayLayer.gameMainUILayer;
            engine.gameEvent.createMouseDown(this, this.sceneMouseDown, null, cc.rect(0, 0, gameWidth, gameHeigh));
            engine.gameEvent.createMouseMove(this,
                this.sceneMouseMove);
            engine.gameEvent.createMouseUp(this, this.sceneMouseUp);
            if (null == this.gamePlayFacade.gridData.promptFindDelete()) {
                var b = new ResetGrid;
                b.gamePlayFacade = this.gamePlayFacade;
                b.reset()
            }
            this.addNewbieGuideLayer();
            switch (selectType) {
                case 1:
                    EventMgr.emit(EVENTMGR_ID.MONSTER_ENTER);
                    engine.gameEvent.createMouseDown(a.btnItem1, this.useItem, null);
                    a.btnItem1.itemID = 1006;
                    engine.gameEvent.createMouseDown(a.btnItem2, this.useItem, null);
                    a.btnItem2.itemID = 1007;
                    engine.gameEvent.createMouseDown(a.btnItem3,
                        this.useItem, null);
                    a.btnItem3.itemID = 1008;
                    engine.gameEvent.createMouseDown(a.btnItem4, this.useItem, null);
                    a.btnItem4.itemID = 1009;
                    engine.gameEvent.createMouseDown(a.btnItem5, this.useItem, null);
                    a.btnItem5.itemID = 1010;
                    engine.gameEvent.createMouseDown(a.btnSet, this.setFun.bind(this), null);
                    this.gamePlayFacade.gamePlayControl.refreshPromptTime();
                    break;
                case 2:
                    this.gamePlayFacade.beginGameTiming(), this.gamePlayFacade.gamePlayControl.refreshPromptTime()
            }
        },
        setFun: function(a, b) {
            if (!this.gamePlayFacade.gamePlayControl.isGameEnd) {
                var c =
                    new PauseLayer;
                c.isPlayScene = !0;
                createMaskLayer(c);
                currentScene.addChild(c)
            }
        },
        refresh: function() {
            this.gamePlayFacade.refresh()
        },
        useItem: function() {
            var a = this.parent.parent.parent;
            !1 != a.gamePlayFacade.gamePlayControl.isGameFree() && (0 < heroData.getItemCount(this.itemID) ? a.gamePlayFacade.gamePlayControl.useItemControl.selectItem(this.itemID) : a.gamePlayFacade.showGameBuyItemLayer(this.itemID))
        },
        sceneMouseDown: function(a, b) {
            if (!this.gamePlayFacade.isCheckGameEnd) {
                var c = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
                this.gamePlayFacade.gamePlayControl.selectGridByPoint(c)
            }
        },
        sceneMouseMove: function(a, b) {
            if (!this.gamePlayFacade.isCheckGameEnd) {
                var c = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
                this.gamePlayFacade.gamePlayControl.changeGridByPoint(c)
            }
        },
        sceneMouseUp: function(a, b) {
            if (!this.gamePlayFacade.isCheckGameEnd) {
                var c = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
                this.gamePlayFacade.gamePlayControl.sceneMouseUp(c)
            }
        }
    });
var isOpenStandardLevel = !1,
    bgHight = 283,
    levelbarHight = 377,
    isOpenCommonLevel = !1,
    isNextLevel = !1,
    isShowedGameEndUI = !1,
    GameLevelScene = GameScene.extend({
        mouseDownPoint: null,
        mouseMovePoint: null,
        isShowLock: !1,
        isMove: null,
        levelbg: null,
        maxMoveY: null,
        goldGemLayer: null,
        achievementLayer: null,
        maxOpenLevel: null,
        selectUseItemLayer: null,
        levelDetailsLayer: null,
        achievementbtn: null,
        newbieGuideLayer: null,
        playlevelEffect: null,
        rankbtn: null,
        starBoxBtn: null,
        starBoxTxt: null,
        targetBoxBtn: null,
        targetBoxTxt: null,
        endlessBtn: null,
        timeCount: 0,
        endlessCountTxt: null,
        giftLayer: null,
        topzIndex: 101,
        middlezIndex: 100,
        moveDic: null,
        isBufferMove: null,
        rankLayer: null,
        sendheartLayer: null,
        mailLayer: null,
        shopBtn: null,
        petBtn: null,
        shopLayer: null,
        petLayer: null,
        autoMoveTarget: null,
        missionBtn: null,
        timeModelRedPoint: null,
        missionRedPoint: null,
        ctor: function() {
            this.sceneName = "GameLevelScene";
            this.isBufferMove = this.playlevelEffect = !1;
            this.moveDic = 0;
            this._super()
        },
        onEnter: function() {
            this._super();
            var a = this;
             (this.initialize.bind(this)(), engine.gameSound.playMusic(soundres.mainbg));
            this.maxOpenLevel = heroData.getMaxOpenLevel();
            2 <= this.maxOpenLevel && gameSDK.createShortcut();
            isShowedGameEndUI = !1
        },
        addNewbieGuideLayer: function(a) {
            if (!debugtest.setOpenLevel) {
                var b = new NewbieGuideLayer,
                    c = {};
                c.uiType = a;
                this.newbieGuideLayer = b.createNewbieGuideLayer(c);
                null != this.newbieGuideLayer && (this.newbieGuideLayer.newbieGuideLayerType = a, this.addChild(this.newbieGuideLayer, 999999))
            }
        },
        removeNewbieGuideLayer: function() {
            null != this.newbieGuideLayer && (heroData.runUINewbieGuide(this.newbieGuideLayer.newbieGuideLayerType), this.removeChild(this.newbieGuideLayer), this.newbieGuideLayer = null)
        },
        refresh: function() {
            this.missionRedPoint.visible = 10 < this.maxOpenLevel && !heroData.gameUserData.getMissionLastAward;
            this.goldGemLayer.refresh();
            null != this.shopLayer && this.shopLayer.refresh();
            null != this.selectUseItemLayer && this.selectUseItemLayer.refresh();
            debugtest.showMailNum && (heroData.gameMailData.mailList.length = debugtest.showMailNum);
            !0 == isExistgetAchievement() ? this.achievementbtn.redpoint.setVisible(!0) : this.achievementbtn.redpoint.setVisible(!1)
        },
        showTodayTarget: function(a) {
            heroData.gameUserData.showTargetDate = (new Date).getDate();
            var b = new cc.Sprite,
                c = new cc.DrawNode;
            c.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            c.setPosition(-320,
                -600);
            b.addChild(c, -1);
            engine.gameEvent.createMouseDown(c, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
            c = new cc.Sprite("#gameplaylayer/bgscale1.png");
            c.scaleX = 68;
            b.addChild(c);
            c = engine.gameData.dataDic.language[223].content;
            c = c.replace("%num", heroData.gameUserData.targetBoxLev);
            c = new cc.LabelTTF(c, defaultTxt, 30);
            c.setColor(cc.color(255, 235, 84));
            c.setPosition(60, 20);
            b.addChild(c);
            c = createGameAnimation(res.awardbox_json, "box2_normal", 30);
            c.setPosition(-220, 20);
            b.addChild(c);
            this.addChild(b,
                maxLevel);
            b.setPosition(320, 600);
            b.scheduleOnce(function() {
                a && a();
                b.removeFromParent(!0)
            }, 2)
        },
        initialize: function() {
            this._super();
            heroData.missionData.readyMissionData();
            readGameUserData();
            this.isMove = !1;
            this.maxOpenLevel = heroData.getMaxOpenLevel();
            this.levelbg = new LevelBgLayer;
            this.addChild(this.levelbg);
            var a = cc.p(0, -60),
                b = new cc.Sprite("#daymission/dm_missionBtn.png");
            b.x = 68;
            b.y = 980;
            this.addChild(b);
            this.missionBtn = b;
            this.missionBtn.schedule(this.changeMissionBtnShowIcon.bind(this), 2);
            var c = new cc.Sprite("#daymission/dm_libao.png");
            c.setPosition(70, 55);
            b.addChild(c, 1, 9527);
            var d = new cc.Sprite;
            d.setSpriteFrame("achievement/redpoint.png");
            d.setPosition(20, 115);
            b.addChild(d);
            this.missionRedPoint = d;
            d.visible = 10 < this.maxOpenLevel && !heroData.gameUserData.getMissionLastAward;
            c = new cc.LabelTTF("", defaultTxt, 20);
            c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            c.setColor(cc.color(106, 43, 42));
            c.setPosition(70, 35);
            b.addChild(c, 2, 9528);
            c = new cc.Sprite;
            c.setSpriteFrame("gift/gifticon.png");
            c.x = 68;
            c.y = 850;
            this.giftbtn = c;
            //this.addChild(c);
            var e = new cc.Sprite;
            e.setPosition(68, 850);
            var f = 0 == heroData.gameUserData.boxget && heroData.gameUserData.maxLevelStart[heroData.gameUserData.targetBoxLev - 1] && 0 != heroData.gameUserData.maxLevelStart[heroData.gameUserData.targetBoxLev - 1];
            this.targetBoxBtn = e;
            var g = createGameAnimation(res.awardbox_json, "box2_normal", 30);
            g.tag = 777;
            e.addChild(g);
            var h = new cc.Sprite("#gamelevelscene/di_xiao.png");
            h.setPosition(a);
            e.addChild(h);
            d = createGameAnimation(res.awardbox_json, "box2_active", 30);
            d.tag = 888;
            e.addChild(d);
            d.visible = f;
            g.visible = !f;
            f = new cc.LabelTTF("--", defaultTxt, 22);
            f.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            f.setColor(cc.color(255, 245, 150));
            this.targetBoxTxt = f;
            f.setPosition(cc.pAdd(a, cc.p(0, 4)));
            e.addChild(f);
            0 == heroData.gameUserData.boxget && this.addChild(e);
            f = new cc.Sprite("#publicimg/timefighticon.png");
            f.x = 570;
            f.y = 980;
            //this.addChild(f);
            d = new cc.Sprite;
            d.setSpriteFrame("achievement/redpoint.png");
            d.setPosition(95, 85);
            f.addChild(d);
            d.visible = 16 == heroData.getMaxOpenLevel();
            this.timeModelRedPoint =
                d;
            g = new cc.Sprite;
            g.setSpriteFrame("gameselectlayer/achievementicon.png");
            g.setPosition(570, 980);
            this.achievementbtn = g;
            this.addChild(g);
            d = new cc.Sprite;
            d.setSpriteFrame("achievement/redpoint.png");
            g.redpoint = d;
            g.redpoint.x = 30;
            g.redpoint.y = 86;
            g.addChild(d);
            d = new cc.Sprite("#gamelevelscene/love.png");
            d.x = 570;
            d.y = 840;
            this.endlessBtn = d;
            h = new cc.Sprite("#gamelevelscene/di_xiao.png");
            a = cc.pAdd(cc.p(51, 55), a);
            h.setPosition(a);
            h.tag = 777;
            d.addChild(h);
            h = new cc.LabelTTF("--", defaultTxt, 22);
            h.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            h.setColor(cc.color(255, 245, 150));
            this.endlessCountTxt = h;
            h.setPosition(a);
            d.addChild(h);
            h.tag = 888;
            h = new Date;
            a = h.getTime();
            h.setTime(1E3 * heroData.gameUserData.createtime);
            h.setDate(h.getDate() + 1);
            h.setHours(0);
            h.setMinutes(0);
            h.setSeconds(0);
            h = h.getTime();
            if (a < h || debugtest.showWuxianHeart) {
                var k = !0;
                0 != heroData.gameUserData.vitgettime && (h = new Date, a = h.getTime(), 0 >= heroData.gameUserData.vitgettime - a / 1E3 || !endlessStrengthGet ? heroData.gameUserData.vitgettime = 0 : k = !1);
                k && (endlessStrengthGet = !1, a = new cc.Sprite("#gamelevelscene/suo.png"),
                    a.setPosition(80, 30), d.addChild(a), a.tag = 999, this.endlessBtn.getChildByTag(777).visible = !1, this.endlessBtn.getChildByTag(888).visible = !1)
            } else a >= h && a <= h + 864E5 ? endlessStrengthGet || (0 != heroData.gameUserData.vitgettime ? this.endlessBtn.x += 1E3 : (this.endlessBtn.getChildByTag(777).visible = !1, this.endlessBtn.getChildByTag(888).visible = !1)) : this.endlessBtn.x += 1E3;
            this.addChild(d);
            a = new cc.Sprite;
            a.setSpriteFrame("jctg/jctg_icon.png");
            a.x = 68;
            a.y = 350;
            //this.addChild(a);
            this.goldGemLayer = new GoldGemLayer;
            this.goldGemLayer.parentUI = this;
            this.addChild(this.goldGemLayer);
            var m = this;
            //engine.gameEvent.createMouseUp(a, function() { m.addChild(new TurnToOtherGameLayer)}, buttonScalingType);
            //a.runAction(TurnToOtherButtonEffect);
            engine.gameEvent.createMouseUp(g, this.addAchievementLayer.bind(this), buttonScalingType);
            engine.gameEvent.createMouseUp(c, this.giftFun, buttonScalingType);
            engine.gameEvent.createMouseUp(e, this.targetBoxFun.bind(this), buttonScalingType, cc.rect(-50, -50, 100, 100));
            engine.gameEvent.createMouseUp(d, this.endlessBtnFun.bind(this),
                buttonScalingType);
            engine.gameEvent.createMouseUp(f, this.playTimeModel.bind(this), buttonScalingType);
            engine.gameEvent.createMouseUp(b, this.showMisson.bind(this), buttonScalingType);
            b = Math.ceil((maxLevel - 3) / 4);
            null == this.newbieGuideLayer && (engine.gameEvent.createMouseDown(this, this.mouseDown, null, cc.rect(0, 0, 1E3, 1E6)), engine.gameEvent.createMouseMove(this, this.mouseMove, null, cc.rect(0, 0, 1E3, 1E6)), engine.gameEvent.createMouseUp(this, this.mouseUp, null, cc.rect(0, 0, 1E3, 1E6)), this.isUpCheck = !1);
            this.initLevelBtn();
            this.maxMoveY = this.levelbg.initBg(b);
            this.setLevelbgPoint(this.autoMoveTarget);
            this.refresh();
            null == selectLevel && (selectLevel = this.maxOpenLevel);
            if (null != Global.RandomPersonForTimeModel){ 
            	/*m = this, currentScene.addChild(new UpRankLayer(function() {
                isOpenStandardLevel && (isOpenStandardLevel = !1, m.playTimeModel.bind(m)())
            }, Global.RandomPersonForTimeModel)), Global.RandomPersonForTimeModel = null;*/
        	}
            else {
                debugtest.autoOpenLevel && (selectLevel = debugtest.autoOpenLevel, transitionGamePlayScene());
                cc.log("邀请信息：",
                    gameSDK.sdkPlayInfo.entryPointData);
                /*if ((debugtest.showInviteAddHeartInfo || gameSDK.sdkPlayInfo.entryPointData) && (b = gameSDK.sdkPlayInfo.entryPointData.id) && b != gameSDK.sdkPlayInfo.id && -1 == heroData.gameUserData.getInvitedArr.indexOf(b)) {
                    heroData.gameUserData.getInvitedArr.push(b);
                    b = new OtherSendHeartLayer(this.checkNeedShowUpRank.bind(this));
                    this.addChild(b, 9999);
                    return
                }*/
                this.checkNeedShowUpRank()
            }
        },
        checkNeedShowUpRank: function() {
            this.addNewbieGuideLayer(newbieGuideLayerGameLevelSceneType);
            if (!0 == isNextLevel) {
                var a = heroData.targetData.checkPassLevelNeedShowUp();
                if (debugtest.showUpRank || a) {
                    /*!a && debugtest.showUpRank && (a = {
                        nickname: "test",
                        image: gameSDK.sdkPlayInfo.photo,
                        allStarNum: 999,
                        maxLevelNum: 9
                    });
                    currentScene.addChild(new UpRankLayer(this.showSignPanel.bind(this), a));
                    return*/
                }
            } else null != this["btnLevelSprite" + selectLevel] && (this["btnLevelSprite" + selectLevel].addChild(myGameTool.createCatPet()), !0 == isOpenCommonLevel && (isOpenCommonLevel = !1, this.addLevelDetailsLayer(selectLevel)), this.setLevelbgPoint(-this["btnLevelSprite" +
                selectLevel].y + 600));
            this.showSignPanel()
        },
        showSignPanel: function() {
            debugtest.showUpRank || 8 <= this.maxOpenLevel && (new Date).getDate() != heroData.gameUserData.signDate ? currentScene.addChild(new SignLayer(this.showTargetEffect.bind(this))) : this.showTargetEffect.bind(this)()
        },
        showTargetEffect: function() {
            var a = new Date;
            debugtest.showTarget || 1 != this.maxOpenLevel && heroData.gameUserData.showTargetDate != a.getDate() ? this.showTodayTarget(this.moveToNextOpenDetail.bind(this)) : this.moveToNextOpenDetail.bind(this)()
        },
        showTargetBoxOpen: function() {
            this.targetBoxBtn.visible = !1;
            var a = createGameAnimation(res.awardbox_json, "box2_open", 60);
            a.setPosition(this.targetBoxBtn.getPosition());
            a.playCount = 1;
            this.addChild(a);
            var b = this;
            a.steFrameComplete(function() {
                a.removeFromParent();
                heroData.gameUserData.boxget = 1;
                var c = {
                    diamond: 30,
                    item: "1008|2",
                    randompet: ""
                };
                addGiftShowUIWithOb(c, function() {
                    heroData.buyGift(c);
                    b.targetBoxBtn.x += 1E3;
                    currentScene.refresh();
                    b.playlevelEffect = !1;
                    saveHeroData()
                })
            })
        },
        showEndLessHeartOpen: function() {
            this.endlessBtn.getChildByTag(777).visible = !0;
            this.endlessBtn.getChildByTag(888).visible = !0;
            this.endlessBtn.getChildByTag(999).visible = !1;
            heroData.gameUserData.vitgettime = ~~((new Date).getTime() / 1E3 + 600);
            cc.log("heroData.gameUserData.vitgettime", heroData.gameUserData.vitgettime);
            endlessStrengthGet = !0;
            this.moveToNextOpenDetail()
        },
        moveToNextOpenDetail: function() {
            if (isNextLevel) {
                debugtest.showHeartFlyResetCreateTime && (heroData.gameUserData.createtime = ~~((new Date).getTime() / 1E3));
                if (!heartFlyShowed && 6 == this.maxOpenLevel && 6 == selectLevel) {
                    var a =
                        new Date,
                        b = a.getTime();
                    a.setTime(1E3 * heroData.gameUserData.createtime);
                    a.setDate(a.getDate() + 1);
                    a.setHours(0);
                    a.setMinutes(0);
                    a.setSeconds(0);
                    a = a.getTime();
                    if (b < a) {
                        heartFlyShowed = !0;
                        this.levelbg.showHeartFly();
                        return
                    }
                }
                isNextLevel = !1;
                var c = this;
                if (null != this["btnLevelSprite" + selectLevel] && null != this["btnLevelSprite" + (selectLevel - 1).toString()]) {
                    var d = myGameTool.createCatPet();
                    this.playlevelEffect = !0;
                    this["btnLevelSprite" + (selectLevel - 1).toString()].addChild(d);
                    this.scheduleOnce(function() {
                        var a = createGameAnimation(res.gameplayeffect_json,
                            "addleveleffect", 35);
                        this["btnLevelSprite" + (selectLevel - 1).toString()].addChild(a);
                        a.playCount = 1;
                        a.frameFun = function(a) {
                            5 == a && d.removeFromParent()
                        };
                        a.frameCompleteFun = function() {
                            var a = createGameAnimation(res.gameplayeffect_json, "addleveleffect", 35);
                            a.playCount = 1;
                            c["btnLevelSprite" + selectLevel].addChild(a, 1);
                            a.frameFun = function(a) {
                                5 == a && (a = myGameTool.createCatPet(), c["btnLevelSprite" + selectLevel].addChild(a))
                            };
                            c.scheduleOnce(function() {
                                    isOpenCommonLevel = !1;
                                    c.playlevelEffect = !1;
                                    c.addLevelDetailsLayer(selectLevel)
                                },
                                1)
                        }
                    }, 0.5)
                }
            }
        },
        update: function(a) {
            this.timeCount += a;
            if (0.5 <= this.timeCount) {
                var b = new Date,
                    c = b.getTime();
                b.setDate(b.getDate() + 1);
                b.setHours(0);
                b.setMinutes(0);
                b.setSeconds(0);
                b = ~~((b.getTime() - c) / 1E3);
                this.targetBoxTxt.string = this.computeTime(b);
                0 != heroData.gameUserData.vitgettime && (0 < heroData.gameUserData.vitgettime - c / 1E3 ? this.endlessCountTxt.string = this.computeTime(~~(heroData.gameUserData.vitgettime - c / 1E3)) : (this.endlessBtn.x += 1E3, endlessStrengthGet = !1));
                this.timeCount -= 0.5
            }
            this._super(a);
            !0 == this.isBufferMove &&
                (this.setLevelbgPoint(this.levelbg.y - this.moveDic), this.moveDic = this.moveDic / 20 * 19)
        },
        addGiftLayer: function() {
            null == this.giftLayer && (this.giftLayer = new GiftLayer, this.giftLayer.parentUI = this, createMaskLayer(this.giftLayer), this.addChild(this.giftLayer, this.middlezIndex), this.giftLayer.initialize())
        },
        closeGiftLayer: function() {
            null != this.giftLayer && (this.giftLayer.removeFromParent(), this.giftLayer = null)
        },
        rankFun: function(a, b) {
            if (!1 != this.parent.isCanClick()) {
                var c = this;
                MyTool_stepLoadCheckTool.autoCheckLoaded("rank",
                    function() {
                        null != c.parent && c.parent.addRankLayer()
                    })
            }
        },
        closeShopLayer: function() {
            null != this.shopLayer && (this.shopLayer.removeFromParent(), this.shopLayer = null)
        },
        targetBoxFun: function() {
            if (!1 != this.isCanClick())
                if (0 == heroData.gameUserData.boxget) {
                    var a = heroData.gameUserData.targetBoxLev;
                    this["btnLevelSprite" + a] ? (this.setLevelbgPoint(-this["btnLevelSprite" + a].y + 500), EventMgr.emit(EVENTMGR_ID.FLUSH_TARGET_KEY)) : this.setLevelbgPoint(-99999999);
                    showAlterInfo(engine.gameData.dataDic.language[219].content)
                } else showAlterInfo(engine.gameData.dataDic.language[220].content)
        },
        endlessBtnFun: function() {
            if (!endlessStrengthGet) {
                var a = new Date,
                    b = a.getTime();
                a.setTime(1E3 * heroData.gameUserData.createtime);
                a.setDate(a.getDate() + 1);
                a.setHours(0);
                a.setMinutes(0);
                a.setSeconds(0);
                a = a.getTime();
                b < a ? showAlterInfo(engine.gameData.dataDic.language[221].content) : b >= a && b <= a + 864E5 && (this.endlessBtn.getChildByTag(777).visible = !0, this.endlessBtn.getChildByTag(888).visible = !0, this.endlessBtn.getChildByTag(999) && (this.endlessBtn.getChildByTag(999).visible = !1), a = new Date, heroData.gameUserData.vitgettime = ~~(a.getTime() / 1E3 + 300), cc.log("heroData.gameUserData.vitgettime", heroData.gameUserData.vitgettime), endlessStrengthGet = !0, saveHeroData())
            }
        },
        showMisson: function() {
            if (10 > this.maxOpenLevel - 1) showAlterInfo(engine.gameData.dataDic.language[231].content);
            else {
                var a = new MissonLayer;
                this.addChild(a, this.topzIndex + 1)
            }
        },
        playTimeModel: function() {
            15 > this.maxOpenLevel - 1 ? showAlterInfo(engine.gameData.dataDic.language[225].content) : (this.timeModelRedPoint.visible = !1, null == this.selectUseItemLayer && (this.selectUseItemLayer =
                new SelectUseItemLayer, createMaskLayer(this.selectUseItemLayer), this.addChild(this.selectUseItemLayer, this.topzIndex + 1), this.selectUseItemLayer.initialize(2, null)))
        },
        addRankLayer: function() {
            null == this.rankLayer && (this.rankLayer = new GameRankLayer, this.rankLayer.parentUI = this, createMaskLayer(this.rankLayer), this.addChild(this.rankLayer, this.topzIndex))
        },
        closeRankLayer: function() {
            null != this.rankLayer && (this.rankLayer.removeFromParent(), this.rankLayer = null)
        },
        closeMailLayer: function() {
            null != this.mailLayer &&
                (this.mailLayer.removeFromParent(), this.mailLayer = null)
        },
        initLevelBtn: function() {
            var a = heroData.getLevelStart(),
                b = engine.gameData.dataDic.leveldata,
                c = [0, 25, 100],
                d = [
                    [0, 0, 70],
                    [-30, 0, 40],
                    [0, -20, 50],
                    [15, 0, 70],
                    [0, 0, 40],
                    [-10, 0, 55]
                ],
                e;
            e = 12 <= this.maxOpenLevel - 1 ? 12 + 9 * ~~((this.maxOpenLevel - 13) / 9 + 1) : 12;
            e > maxLevel && (e = maxLevel);
            for (var f = 0; f < e; f++) {
                var g = ~~((f - 3) / 3) % 3,
                    h = d[g];
                void 0 == d[g] && (h = [0, 0, 0]);
                3 > f && (h = c.slice());
                var g = Math.ceil((f - 2) / 3),
                    g = 30 + (g + 1) * levelbarHight,
                    k = new BtnLevelSprite;
                this["btnLevelSprite" +
                    (f + 1).toString()] = k;
                switch (f % 3) {
                    case 0:
                        k.x = 178;
                        k.y = g + h[0];
                        break;
                    case 1:
                        k.x = 323;
                        k.y = g + h[1];
                        break;
                    case 2:
                        k.x = 468, k.y = g + h[2]
                }
                k.initialize(b[f + 1], a[f], this.maxOpenLevel);
                this.maxOpenLevel == f + 1 && (this.autoMoveTarget = -k.y + 600);
                this.levelbg.addLevelBtn(k, f + 1);
                this.levelbg.setMaxOpenLevel(this.maxOpenLevel)
            }
        },
        giftFun: function(a, b) {
            if (!1 != this.parent.isCanClick()) {
                var c = this;
                MyTool_stepLoadCheckTool.autoCheckLoaded("gift", function() {
                    null != c.parent && c.parent.addGiftLayer()
                })
            }
        },
        addAchievementLayer: function() {
            if (!1 !=
                this.isCanClick())
                if (4 > this.maxOpenLevel - 1) showAlterInfo(engine.gameData.dataDic.language[229].content);
                else {
                    var a = this;
                    MyTool_stepLoadCheckTool.autoCheckLoaded("achievement", function() {
                        null == a.achievementLayer && (a.achievementLayer = new AchievementLayer, a.achievementLayer.parentUI = a, createMaskLayer(a.achievementLayer), a.addChild(a.achievementLayer), a.achievementLayer.initialize())
                    })
                }
        },
        removeAchievementLayer: function() {
            null != this.achievementLayer && (this.removeChild(this.achievementLayer), this.achievementLayer =
                null)
        },
        addLevelDetailsLayer: function(a) {
            if (null == this.levelDetailsLayer) {
                var b = new LevelDetailsLayer,
                    c = new cc.DrawNode;
                c.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
                var d = new cc.Sprite;
                d.addChild(c);
                createMaskLayer(b, d);
                this.addChild(b);
                b.initialize(a);
                this.levelDetailsLayer = b
            }
        },
        removeLevelDetailsLayer: function() {
            null != this.levelDetailsLayer && (this.removeChild(this.levelDetailsLayer), this.levelDetailsLayer = null)
        },
        isCanClick: function() {
            return !0 == this.playlevelEffect ?
                !1 : !0
        },
        mouseDown: function(a, b) {
            if (!this.newbieGuideLayer || debugtest.setOpenLevel) {
                this.isMove = !1;
                this.moveDic = 0;
                this.isBufferMove = !1;
                var c = b.getCurrentTarget();
                c.getClickRect();
                this.mouseDownPoint = this.mouseMovePoint = c = c.convertToNodeSpace(a.getLocation())
            }
        },
        mouseMove: function(a, b) {
            var c = b.getCurrentTarget();
            c.getClickRect();
            c = c.convertToNodeSpace(a.getLocation());
            null != this.mouseDownPoint && 30 <= cc.pDistance(this.mouseDownPoint, c) && (this.isMove = !0, this.setLevelbgPoint(this.levelbg.y - (this.mouseMovePoint.y -
                c.y)), this.moveDic = this.mouseMovePoint.y - c.y, this.mouseMovePoint = c)
        },
        mouseUp: function(a, b) {
            0 != this.moveDic && (this.isBufferMove = !0)
        },
        oldY: 999,
        setLevelbgPoint: function(a) {
            0.4 > Math.abs(a - this.oldY) || (0 < a && (a = 0), a < this.maxMoveY && (a = this.maxMoveY), this.oldY = a, this.levelbg.setY(a))
        },
        computeTime: function(a) {
            var b = Math.floor(a / 3600);
            0 == b ? b = "00" : 10 > b && (b = "0" + b);
            var c = Math.floor(a % 3600 / 60);
            0 == c ? c = "00" : 10 > c && (c = "0" + c);
            a = Math.floor(a % 3600 % 60);
            0 == a ? a = "00" : 10 > a && (a = "0" + a);
            return b + ":" + c + ":" + a
        },
        showMissionArr: [],
        showMissionIndex: 0,
        changeMissionBtnShowIcon: function() {
            if (!(10 > this.maxOpenLevel - 1)) {
                for (var a = heroData.missionData.todayMissionArr.slice(), b = 0; b < heroData.missionData.finishMissionArr.length; b++) a.splice(a.indexOf(heroData.missionData.finishMissionArr[b]), 1);
                a.length != this.showMissionArr.length && (this.showMissionArr = a);
                a = this.missionBtn.getChildByTag(9527);
                b = this.missionBtn.getChildByTag(9528);
                if (0 == this.showMissionArr.length) a.setSpriteFrame("daymission/dm_libao.png"), a.scale = 1, a.y = 55, b.setString("");
                else {
                    this.showMissionIndex >= this.showMissionArr.length && (this.showMissionIndex = 0);
                    var c = heroData.missionData.getDataById(this.showMissionArr[this.showMissionIndex]);
                    a.setSpriteFrame("daymission/dm_icon" + c.missionicon + ".png");
                    a.scale = 0.5;
                    a.y = 65;
                    b.setString(c.iconString);
                    this.showMissionIndex++
                }
            }
        }
    }),
    MyLoadHeadSprite = cc.Sprite.extend({
        defaultSp: null,
        loadComplete: null,
        maskHead: null,
        setPNGUrl: function(a, b, c) {
            void 0 == a && cc.error("错误的头像地址");
            this.loadComplete && (this.defaultSp =
                new cc.Sprite, this.defaultSp.setSpriteFrame("rank/heroimage.png"), this.defaultSp.setScale(b / 75), this.loadComplete(this.defaultSp));
            var d = this,
                e = new Image;
            if (-1 != a.indexOf("#rank/robothead")) {
                e = a;
                a = new cc.Sprite(e);
                a.setScale(b / a.getContentSize().width);
                if (c) {
                    d.addChild(a);
                    var f = new cc.Sprite(c);
                    clipper = new cc.ClippingNode;
                    clipper.stencil = f;
                    clipper.setAlphaThreshold(0.05);
                    clipper.addChild(d)
                }
                d && null != d.loadComplete && (d.defaultSp && d.defaultSp.removeFromParent(), d.setPosition(0, 0), d.loadComplete(c ? clipper :
                    a))
            } else "FaceBookTest" != sdkName && (e.crossOrigin = "anonymous", e.src = a, e.onload = function() {
                var a;
                if (d) {
                    var f = new cc.Sprite(e);
                    f.setScale(b / f.getContentSize().width);
                    if (c) {
                        d.addChild(f);
                        var k = new cc.Sprite(c);
                        a = new cc.ClippingNode;
                        a.stencil = k;
                        a.setAlphaThreshold(0.05);
                        a.addChild(d)
                    }
                }
                d && null != d.loadComplete && (d.defaultSp && d.defaultSp.removeFromParent(), d.setPosition(0, 0), d.loadComplete(c ? a : f))
            })
        }
    });


function GetRequest() {
    var a = location.search,
        b = {};
    if (-1 != a.indexOf("?"))
        for (var a = a.substr(1).split("&"), c = 0; c < a.length; c++) b[a[c].split("=")[0]] = decodeURI(a[c].split("=")[1]);
    return b
}
var checkAdOrInvite = function() {
        var a = serverUrl + "opcode=" + seeADOrInivte,
            b = JSON.stringify({
                playerid: "0",
                version: "20181019"
            }),
            c = {};
        c.htttpType = seeADOrInivte;
        sendHttp(a, b, c)
    },
    createPlayer = function() {
        var a = {};
        a.playerid = heroData.playerid + "";
        a.nickname = heroData.pname;
        a.image = "123456";
        var b = serverUrl + "opcode=10001",
            a = JSON.stringify(a),
            c = {};
        c.htttpType = createPlayrID;
        sendHttp(b, a, c)
    },
    getPlayerInfoByPlayerID = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        var c = serverUrl + "opcode=10003",
            b = JSON.stringify(b),
            d = {};
        d.htttpType = getPlayerInfoID;
        d.callFun = a;
        sendHttp(c, b, d)
    },
    getFriendInfoByPlayerID = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        var c = gameSDK.sdkPlayInfo.friendsList,
            d = [],
            e;
        for (e in c) d.push(e + "");
        b.OpenKeyList = d;
        c = serverUrl + "opcode=10004";
        b = JSON.stringify(b);
        d = {};
        d.htttpType = getFrienInfoID;
        d.callFun = a;
        sendHttp(c, b, d)
    },
    getWorldRankFun = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        var c = serverUrl + "opcode=10010",
            b = JSON.stringify(b),
            d = {};
        d.htttpType = getWorldRank;
        d.callFun = a;
        sendHttp(c,
            b, d)
    },
    getRankDataFun = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        var c = serverUrl + "opcode=" + getRankData,
            b = JSON.stringify(b),
            d = {};
        d.htttpType = getRankData;
        d.callFun = a;
        sendHttp(c, b, d)
    },
    sendStrength = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        b.List = a.strengthList;
        a = serverUrl + "opcode=10005";
        var b = JSON.stringify(b),
            c = {};
        c.htttpType = sendStrengthID;
        sendHttp(a, b, c)
    },
    askStrength = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        b.List = a.strengthList;
        a = serverUrl + "opcode=10008";
        var b = JSON.stringify(b),
            c = {};
        c.htttpType = askStrengthID;
        sendHttp(a, b, c)
    },
    receiveStrength = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        b.List = a.strengthList;
        a = serverUrl + "opcode=10007";
        var b = JSON.stringify(b),
            c = {};
        c.htttpType = receiveStrengthID;
        sendHttp(a, b, c)
    },
    getMailList = function(a) {
        var b = {};
        b.playerid = heroData.playerid + "";
        a = serverUrl + "opcode=10006";
        var b = JSON.stringify(b),
            c = {};
        c.htttpType = getMailListID;
        sendHttp(a, b, c)
    },
    saveHeroNameAndPhoto = function() {
        var a = {};
        a.playerid = heroData.playerid +
            "";
        a.nickname = heroData.pname;
        a.image = heroData.image;
        var b = serverUrl + "opcode=10009",
            a = JSON.stringify(a),
            c = {};
        c.htttpType = savePlayerNameAndPhotoID;
        sendHttp(b, a, c)
    };
var GamePlayFacade = cc.Class.extend({
    gridData: null,
    gameLevelData: null,
    gamePlayControl: null,
    gamePlayLayer: null,
    isDespose: null,
    isCheckGameEnd: !1,
    dir: 1,
    initialize: function(a) {
        this.isDespose = !1;
        this.gameLevelDataInit();
        this.gamePlayLayerInit(a.scene);
        this.gamePlayControlInit();
        this.gridDataInit();
        this.gamePlayLayer.createPlayLayer(this.gridData, this.gameLevelData);
        this.gamePlayControl.modifyDataByItem(this)
    },
    despose: function(a) {
        this.isDespose = !0
    },
    refresh: function() {
        this.gamePlayLayer.refresh()
    },
    gamePlayControlInit: function() {
        this.gamePlayControl =
            new GamePlayControl;
        this.gamePlayControl.gamePlayFacade = this;
        this.gamePlayControl.initialize()
    },
    gridDataInit: function() {
        Global.dogPenStr = "";
        this.targetArr = [];
        this.gridData = createGridData();
        this.gridData.gamePlayFacade = this;
        switch (selectType) {
            case 1:
                this.gridData.createGridList(levelData[selectLevel - 1]);
                break;
            case 2:
                var a = createlevelTimeData(),
                    b = parseInt(100 * Math.random()) % tileMapGridMaxX,
                    c = parseInt(100 * Math.random()) % (tileMapGridMaxY - 1);
                a[c][b] = "16";
                this.gridData.createGridList(a)
        }
        this.gridData.settingGridByAStar();
        this.gridData.setPortalAccepterList()
    },
    gameLevelDataInit: function() {
        this.gameLevelData = new GameLevelData;
        this.gameLevelData.gamePlayFacade = this;
        this.gameLevelData.initialize()
    },
    gamePlayLayerInit: function(a) {
        this.gamePlayLayer = new GamePlayLayer;
        this.gamePlayLayer.gamePlayFacade = this;
        this.gamePlayLayer.initialize();
        a.addChild(this.gamePlayLayer)
    },
    addIntoPet: function(a, b, c) {
        this.gamePlayLayer.addIntoPet(a, b, c)
    },
    addTime: function(a) {
        !1 == this.gamePlayControl.isGameEnd && (this.gameLevelData.maxTime += 1E3 *
            a)
    },
    addStep: function(a) {
        this.gameLevelData.step += a;
        this.gamePlayLayer.setStepNum(this.gameLevelData.step)
    },
    useStep: function() {
        this.gamePlayControl.isUseStep = !0;
        if (1 == this.gameLevelData.isCheckEnd) {
            this.gameLevelData.beginRecordDeleteContinuousCount();
            this.gameLevelData.step--;
            debugtest.oneStep && this.gameLevelData.step > debugtest.oneStep && (this.gameLevelData.step = debugtest.oneStep);
            5 == this.gameLevelData.step && EventMgr.emit(EVENTMGR_ID.MONSTER_WORRY);
            if (5 == this.gameLevelData.step && !1 == this.gameLevelData.step5Effect &&
                (this.gameLevelData.step5Effect = !0, HideLoad.treeLoadOver)) {
                var a = this.gamePlayLayer.addEffectByScenePoint(0, 300, HideLoad.step_over_json, "gamestep5", 30, 2, "pngdata/petskin");
                a.zIndex = 1E3;
                a.frameFun = function(b) {
                    20 == b && (engine.gameSound.playEffect(soundres.step10), a.frameFun = null)
                }
            }
            10 == this.gameLevelData.step && !1 == this.gameLevelData.step10Effect && (this.gameLevelData.step10Effect = !0, HideLoad.treeLoadOver && (a = this.gamePlayLayer.addEffectByScenePoint(0, 300, HideLoad.step_over_json, "gamestep10", 30, 2, "pngdata/petskin"),
                a.zIndex = 1E3, a.frameFun = function(b) {
                    20 == b && (engine.gameSound.playEffect(soundres.step10), a.frameFun = null)
                }));
            this.gamePlayLayer.setStepNum(this.gameLevelData.step);
            this.gridData.deleteEmptyGrid();
            this.gameLevelData.isCheckAddPig()
        }
    },
    fallUseStep: function() {
        return 1 <= this.gameLevelData.step ? (this.gameLevelData.step--, this.gamePlayLayer.setStepNum(this.gameLevelData.step), !0) : !1
    },
    addScore: function(a) {
        this.gameLevelData.addScore(a);
        this.gamePlayLayer.setScoreNum(this.gameLevelData.score)
    },
    addScoreEffect: function(a,
        b, c) {
        this.gamePlayLayer.addScoreEffect(a, b, c)
    },
    addGameGold: function(a) {
        this.gameLevelData.addGameGold(a);
        this.gamePlayLayer.seGameGoldNum(this.gameLevelData.gameGold)
    },
    checkWinFun: function() {
        var a = this.gameLevelData.checkWin();
        (this.isCheckGameEnd = 0 != a) && heroData.hideParachute();
        return a
    },
    addWinUI: function() {
        if (!isShowedGameEndUI) switch (isShowedGameEndUI = !0, selectType) {
            case 1:
                this.gameLevelData.saveData();
                this.gamePlayLayer.showCommonLevelWinLayer(this.gameLevelData);
                break;
            case 2:
                this.gameLevelData.score >
                    heroData.gameUserData.daymaxscore && (heroData.gameUserData.daymaxscore = this.gameLevelData.score, this.gameLevelData.saveData()), this.gamePlayLayer.showGameTimeEndLayer(this.gameLevelData)
        }
    },
    addLoseUI: function() {
        !1 == this.gameLevelData.isShowCommonAddStepLayer ? (this.gameLevelData.isShowCommonAddStepLayer = !0, this.gamePlayLayer.showCommonAddStepLayer()) : this.gamePlayLayer.showCommonLevelLoseLayer(this.gameLevelData)
    },
    addGrass: function(a, b, c) {
        null == c && (c = !1);
        !0 == this.gamePlayLayer.addGrass(a, b) && !1 == c &&
            this.updateVictoryCondition(0, grass, !1, !1, a, b)
    },
    getGrass: function(a, b) {
        return this.gamePlayLayer.getGrass(a, b)
    },
    noGrass: function(a, b) {
        this.gamePlayLayer.noGrass(a, b)
    },
    addTransfer: function(a, b, c, d, e, f) {
        this.gameLevelData.isTransfer = !0;
        this.gamePlayLayer.addTransfer(a, b, c, d, e, f)
    },
    runTransfer: function() {
        this.gamePlayLayer.runTransfer(this)
    },
    addPortal: function(a, b, c) {
        this.gamePlayLayer.addPortal(a, b, c)
    },
    getTransferInfoByGridInfo: function(a, b) {
        return this.gamePlayLayer.getTransferInfoByGridInfo(a, b)
    },
    targetFlyArr: [],
    updateVictoryCondition: function(a, b, c, d, e, f) {
        1 <= b && 6 >= b && heroData.missionData.recordData(b, 1);
        switch (selectType) {
            case 1:
                if (this.gameLevelData.updateVictoryCondition(a, b, c, d) && !this.gamePlayControl.isPlayEndEffect) {
                    if (0 == this.targetArr.length) {
                        this.targetArr = [];
                        var g = this;
                        this.gameLevelData.victoryCondition.every(function(a) {
                            (0 < a.count || 7 == a.winType) && g.targetArr.push(a.winType);
                            return !0
                        })
                    }
                    if (!debugtest.hideFlyEffect) {
                        a = b;
                        11 == a && (a = 8);
                        9 == a && (a = 10);
                        13 == a && (a = 9);
                        d && (a = 12);
                        c && (a = 11);
                        if (-1 !=
                            this.targetArr.indexOf(7)) {
                            b == grass && this.refreshVictoryCondition();
                            break
                        }
                        EventMgr.emit(EVENTMGR_ID.MONSTER_COLLECT);
                        b = new cc.Sprite("#gameplaylayer/win" + a + ".png");
                        f = this.gridData.getGridPointByScenePoint(e, f);
                        b.setPosition(f);
                        c = [cc.p(0, 0), cc.p(-45, 5), cc.p(35, 5)];
                        d = c[0];
                        var h = 0;
                        if (1 < this.targetArr.length) {
                            h = this.targetArr.indexOf(a);
                            if (-1 == h) break;
                            d = c[h + 1]
                        }
                        b.ind = h;
                        a = cc.pAdd(d, cc.p(375, 1060));
                        e = cc.p([30, 70, 130, 200, 300, 390, 490, 630][e], 1345);
                        e = [f, e, a];
                        g = this;
                        b.opacity = 0;
                        b.runAction(cc.sequence(cc.delayTime(0.25),
                            cc.spawn(cc.fadeIn(0.1), cc.moveBy(0.12, 0, 60)), cc.spawn(cc.bezierTo(0.7, e).easing(cc.easeOut(2)), cc.sequence(cc.delayTime(0.4), cc.scaleTo(0.4, 0.6, 0.6))), cc.removeSelf(), cc.callFunc(function(a) {
                                EventMgr.emit(EVENTMGR_ID.COLLECTION_HIT, a.ind);
                                g.refreshVictoryCondition()
                            })));
                        this.gamePlayLayer.gameCollectionLayer.addChild(b)
                    }
                }
        }
    },
    refreshVictoryCondition: function() {
        this.gamePlayLayer.gameMainUILayer.victoryConditionUI.setVictoryConditionCount(this.gameLevelData.victoryCondition)
    },
    showGameBuyItemLayer: function(a) {
        this.gamePlayLayer.showGameBuyItemLayer(a)
    },
    wavesUp: function() {
        var a = this.gameLevelData.waterLayerNum + 1;
        0 <= this.gameLevelData.noWaterLine.indexOf(a.toString()) && (a = this.gameLevelData.waterLayerNum + 1);
        8 <= a && (a = 8);
        this.gameLevelData.waterLayerNum = a;
        this.gamePlayLayer.gameWaterLayer.wavesUp(this.gameLevelData.waterLayerNum)
    },
    update: function() {
        this.gamePlayControl.update();
        switch (selectType) {
            case 2:
                this.checkCleanGas()
        }
    },
    beginGameTiming: function() {
        this.gameLevelData.beginGameTiming();
        this.gamePlayLayer.scheduleUpdate()
    },
    addGas: function(a, b) {
        switch (selectType) {
            case 2:
                if (!1 ==
                    this.gamePlayControl.isGameEnd) {
                    var c = this.gameLevelData.addGas();
                    this.gamePlayLayer.refreshGasIcon();
                    !0 == c && this.gamePlayLayer.playGasEffect(a, b)
                }
        }
    },
    resetGas: function() {
        switch (selectType) {
            case 2:
                !1 == this.isDespose && (this.gameLevelData.resetGas(), this.gamePlayLayer.refreshGasIcon())
        }
    },
    checkCleanGas: function() {
        !1 == this.isDespose && this.gameLevelData.checkCleanGas()
    },
    gameTimeEnd: function() {
        this.gamePlayLayer.unscheduleUpdate();
        !1 == this.gamePlayControl.isGameEnd && (engine.gameSound.playEffect(soundres.gametimeout),
            this.gamePlayControl.isGameEnd = !0, this.gamePlayControl.createGrid())
    }
});
var ParachuteLayer = cc.Layer.extend({
        parachute: null,
        type: 0,
        ctor: function() {
            this._super()
        },
        onEnter: function() {
            this._super();
            heroData.showParachute = this.showParachute.bind(this);
            heroData.hideParachute = this.onExit.bind(this)
        },
        onExit: function() {
            this._super();
            this.parachute && (this.parachute.stopAllActions(), this.parachute.removeFromParent())
        },
        showParachute: function(a) {
            this.type = a;
            var b = new cc.Sprite("#facebook_ad/jiangluosan.png");
            this.addChild(b);
            b.setPosition(-100, 900);
            b.runAction(cc.sequence(cc.moveBy(10,
                cc.p(cc.winSize.width + 200, 0)), cc.callFunc(function() {
                b.removeFromParent()
            })).repeatForever());
            this.parachute = b;
            engine.gameEvent.createMouseUp(b, this.openAward.bind(this), buttonScalingType)
        },
        openAward: function() {
            this.parachute.stopAllActions();
            this.parachute.removeFromParent();
            var a = new ParachuteAwardLayer(this.type);
            currentScene.gamePlayFacade.gamePlayLayer.addChild(a)
        }
    }),
    ParachuteAwardLayer = cc.Layer.extend({
        showItem: "",
        type: 0,
        ctor: function(a) {
            this._super();
            this.type = a;
            var b = [
                ["diamond.png", 100, {
                    diamond: 100
                }],
                ["1006.png", 2, {
                    itemID: 1006,
                    itemCount: 2
                }],
                ["1007.png", 2, {
                    itemID: 1007,
                    itemCount: 2
                }],
                ["1008.png", 2, {
                    itemID: 1008,
                    itemCount: 2
                }],
                ["1009.png", 1, {
                    itemID: 1009,
                    itemCount: 1
                }],
                ["1010.png", 2, {
                    itemID: 1010,
                    itemCount: 2
                }]
            ];
            1 == a && (this.showItem = b[~~(Math.random() * b.length)])
        },
        onEnter: function() {
            this._super();
            this.mainUILayer = engine.gameCocosStudio.loadCSS(res.parachuteawardlayer);
            engine.gameEvent.createMouseUp(this.mainUILayer.uiInfo.closebtn, this.closeFun.bind(this), buttonScalingType);
            this.addChild(this.mainUILayer);
            if (1 == this.type) {
                this.mainUILayer.itemicon.setSpriteFrame("item/" + this.showItem[0]);
                var a = new cc.LabelTTF("x" + this.showItem[1], defaultTxt, 30);
                a.enableStroke(cc.color(106, 43, 42, 255), 2);
                a.setPosition(365, 615);
                this.mainUILayer.addChild(a)
            }
            engine.gameEvent.createMouseUp(this.mainUILayer.btn_ad, this.seeAD.bind(this), buttonScalingType)
        },
        seeAD: function() {
            var a = this;
            gameSDK.showRewardVideoAd(rewardedVideoID4, function() {
                heroData.watchNum += 1;
                if (2 == a.type) {
                    var b = createGameAnimation(res.gameplayeffect_json, "refreshvictoryconditioneffect",
                        30);
                    b.playCount = 1;
                    b.x = 60;
                    b.y = 870;
                    currentScene.gamePlayFacade.gamePlayLayer.gameMainUILayer.addChild(b);
                    currentScene.gamePlayFacade.addStep(5);
                    a.removeFromParent()
                } else b = a.showItem[2], 0 < b.diamond && (heroData.updateGem(b.diamond), a.removeFromParent()), b.itemID && (heroData.addtem(b.itemID, b.itemCount), b = currentScene.gamePlayFacade.gamePlayLayer.grtBuyItemPointByItemID(b.itemID, "itemaddeffect"), a.flyItemIcon.bind(a)(b.x, b.y)), saveHeroData()
            })
        },
        flyItemIcon: function(a, b) {
            var c = this.showItem[2].itemID,
                d =
                this,
                e = cc.callFunc(function(a) {
                    currentScene.refresh();
                    d.removeFromParent();
                    a.removeFromParent()
                }),
                c = engine.gameData.dataDic.itemdata[c],
                f = new cc.Sprite;
            f.setSpriteFrame("item/" + c.id.toString() + ".png");
            f.x = 320;
            f.y = 680;
            this.addChild(f);
            f.runAction(cc.sequence(cc.moveTo(0.2, cc.p(a, b)), e))
        },
        closeFun: function(a, b) {
            this.removeFromParent()
        }
    });
var bgHight = 568,
    baseTreeHeight = 607,
    LevelBgLayer = cc.Layer.extend({
        showElementArr: [],
        showSkyElementArr: [],
        skyIndex: 0,
        treeIndex: 1,
        rankNodeIndex: 3,
        treeeffect: 4,
        starboxIndex: 11,
        btnIndex: 12,
        mainUI: null,
        gamePlayFacade: null,
        skyBg: null,
        maxOpenLevel: 0,
        treeHeadY: 0,
        starBoxNode: null,
        endlessHeart: null,
        heartSp: null,
        onEnter: function() {
            this._super();
            this.skyBg = new cc.Layer;
            this.addChild(this.skyBg)
        },
        onExit: function() {
            this._super();
            this.removeAllChildren(!0);
            this.unscheduleAllCallbacks();
            this.showElementArr = [];
            this.showSkyElementArr = []
        },
        setMaxOpenLevel: function(a) {
            this.maxOpenLevel = a
        },
        initBg: function(a) {
            a = ~~((0 < this.maxOpenLevel - 4 ? this.maxOpenLevel - 4 : 0) / 9 + 1);
            var b = ~~((maxLevel - 3) / 9);
            a > b && (a = b);
            this.maxMoveY = -a * bgHight * 2 + 607 - 1136;
            this.createSkyBg();
            this.createCloud();
            this.createBgByID(1, 0);
            for (b = 0; b < a; b++) this.createBgByID((b + 1) % 2 + 2, baseTreeHeight + 2 * bgHight * b);
            this.treeHeadY = baseTreeHeight + 2 * bgHight * b;
            this.createBgByID(4, this.treeHeadY);
            this.schedule(this.checkGetRankData.bind(this), 0.1);
            HideLoad.treeLoadOver ? this.createTreeMc() :
                HideLoad.loadTree(this.createTreeMc.bind(this));
            this.createTreeHeight();
            return this.maxMoveY
        },
        checkGetRankData: function() {
            gameSDK.getPlayerEntriesboardLeaderboardData(RANK_STAR) && (this.createRankTop3(), cc.log("树高前三排行榜拉到了。"), this.unscheduleAllCallbacks())
        },
        createTreeHeight: function() {
            var a = new cc.Sprite("#level/current_length.png");
            a.setPosition(320, this.treeHeadY + 570);
            this.addChild(a, this.rankNodeIndex);
            var b = new GameArtWord("treeheightfnt", 40,
                24);
            b.alignmentType = artWordMiddle;
            b.setPosition(320, this.treeHeadY + 500);
            b.setString(10 * this.maxOpenLevel + "m");
            this.addChild(b, this.rankNodeIndex);
            this.showElementArr.push(a, b)
        },
        createRankTop3: function() {
            var a = gameSDK.getPlayerEntriesboardLeaderboardData(RANK_STAR);
            if (a) {
                for (var b = 0; b < a.length; b++) TreeHeight3Min > a[b].score && (TreeHeight3Min = a[b].score);
                for (var c = [cc.p(323, this.treeHeadY + 174), cc.p(230, this.treeHeadY + 170), cc.p(420, this.treeHeadY + 170)], d = [cc.p(9, 14), cc.p(6, 18), cc.p(6, 18)], b = 0; b < Math.min(a.length,
                        c.length); b++) {
                    var e = this,
                        f = new MyLoadHeadSprite;
                    f.willPos = cc.p(cc.pAdd(c[b], d[b]));
                    f.loadComplete = function(a) {
                        a.setPosition(this.willPos);
                        e.addChild(a, e.rankNodeIndex - 1);
                        e.showElementArr.push(a)
                    };
                    f.setPNGUrl(a[b].photo, 68);
                    f = new cc.Sprite("#level/rankheadicon_" + (b + 1) + ".png");
                    f.setPosition(cc.pAdd(c[b], cc.p(-1, 28)));
                    this.addChild(f, this.rankNodeIndex);
                    this.showElementArr.push(f)
                }
            }
        },
        createTreeMc: function() {
            function a(a) {
                return 0.5 < Math.random() ? ["treebug", cc.p(200 + 100 * Math.random(), a)] : ["treebutterfly",
                    cc.p(100 + 350 * Math.random(), a)
                ]
            }

            function b(a) {
                var b = null,
                    c = a % 2272,
                    h = ~~((a - 607) / 2272);
                g % 2 ? d.some(function(a) {
                    if (Math.abs(a.y - c) < f) return b = ["treemouse", cc.p(a.x, a.y + 2272 * h)], g++, !0
                }) : e.some(function(a) {
                    if (Math.abs(a.y - c) < f) return b = ["treebird", cc.p(a.x, a.y + 2272 * h)], g++, !0
                });
                return b
            }
            for (var c = [], d = [cc.p(230, 1270), cc.p(340, 1700), cc.p(340, 2055), cc.p(370, 2430), cc.p(340, 2800)], e = [cc.p(120, 1370), cc.p(120, 1800), cc.p(140, 2500)], f = 700, g = 0, h = 0, k = 600; k < this.treeHeadY; k += f)
                if (0.3 < Math.random()) c.push(a(k));
                else {
                    var m =
                        b(k);
                    null != m && Math.abs(m[1].y - h) > f ? (c.push(m), h = m[1].y) : c.push(a(k))
                } var n = this,
                p = {
                    treemouse: 0,
                    treebird: 1,
                    treebug: 6,
                    treebutterfly: 51
                };
            cc.log("特效数量:", c.length);
            c.forEach(function(a) {
                var b = createGameAnimation(HideLoad.tree_effect_json, a[0], 24);
                b.isRemoveFromComplete = !0;
                b.playCount = -1;
                b.gotoAndPlay(~~(Math.random() * b.frameMaxIndex));
                b.setPosition(a[1]);
                b ? (n.addChild(b, n.treeeffect + p[a[0]]), n.showElementArr.push(b)) : cc.error("未获取树的特效", a);
                if ("treebutterfly" ==
                    a[0]) {
                    var c = createGameAnimation(HideLoad.tree_effect_json, "butter", 24);
                    c.isRemoveFromComplete = !0;
                    c.playCount = -1;
                    b.addChild(c);
                    b.updateCheck = function() {
                        c.setPosition(b.frameBitmapList[0].getPosition());
                        c.rotation = b.frameBitmapList[0].rotation
                    }
                }
            })
        },
        createBgByID: function(a, b) {
            switch (a) {
                case 1:
                    var c = new cc.Sprite("res/level/bg_" + a + ".png");
                    c.setAnchorPoint(cc.p(0, 0));
                    c.x = 0;
                    c.y = b;
                    this.addChild(c, this.treeIndex);
                    this.showElementArr.push(c);
                    break;
                case 4:
                case 2:
                case 3:
                    c = 40;
                    3 == a ? c -= 6 : 4 == a && (c = 0);
                    var d = new cc.Sprite("res/level/bg_" +
                        a.toString() + "2.png");
                    d.setAnchorPoint(cc.p(0, 0));
                    d.x = c;
                    d.y = b + bgHight;
                    var e = new cc.Sprite("res/level/bg_" + a.toString() + "1.png");
                    e.setAnchorPoint(cc.p(0, 0));
                    e.x = c;
                    e.y = b;
                    this.addChild(d, this.treeIndex);
                    this.addChild(e, this.treeIndex);
                    this.showElementArr.push(d, e)
            }
        },
        createSkyBg: function() {
            var a = new cc.Sprite("res/level/bg_sky1.png");
            a.setAnchorPoint(cc.p(0, 0));
            a.x = 0;
            a.y = 0;
            var b = new cc.Sprite("res/level/bg_sky2.png");
            b.setAnchorPoint(cc.p(0, 0));
            b.x = 0;
            b.y = bgHight;
            this.skyBg.addChild(a, this.skyIndex);
            this.skyBg.addChild(b,
                this.skyIndex);
            this.showSkyElementArr.push(a, b);
            for (a = 1; 6 >= a; a++) b = new cc.Sprite("res/level/bg_sky.png"), b.setAnchorPoint(cc.p(0, 0)), b.x = 0, b.y = 1134 + 740 * (a - 1), this.skyBg.addChild(b, this.skyIndex), this.showSkyElementArr.push(b)
        },
        createCloud: function() {
            for (var a = 0; 6 > a; a++) {
                var b = ~~(4 * Math.random() + 1),
                    b = new cc.Sprite("res/level/yun" + b + ".png");
                b.x = 0.5 < Math.random() ? 300 * Math.random() : 300 + 200 * Math.random();
                b.y = 1300 + 300 * a + 300 * Math.random();
                this.skyBg.addChild(b, this.skyIndex);
                this.showSkyElementArr.push(b)
            }
        },
        addLevelBtn: function(a, b) {
            a.y += b / 2;
            this.addChild(a, this.btnIndex);
            this.showElementArr.push(a);
            b == [9, 27, 45, 63, 81, 99, 117][heroData.gameUserData.starBoxIndex] && this.createStarBox(a);
            if (5 == b) {
                var c = new Date,
                    d = c.getTime();
                c.setTime(1E3 * heroData.gameUserData.createtime);
                c.setDate(c.getDate() + 1);
                c.setHours(0);
                c.setMinutes(0);
                c.setSeconds(0);
                c = c.getTime();
                (d < c && 6 >= heroData.getMaxOpenLevel() && !heartFlyShowed || debugtest.showWuxianHeart) && this.createEndlessHeart(a)
            }
        },
        createStarBox: function(a) {
            var b = new cc.Node,
                c = new cc.Sprite("#gamelevelscene/tengm2.png");
            c.setAnchorPoint(0.5, 1);
            var d = new cc.Sprite("#gamelevelscene/tengm1.png");
            b.addChild(c, 0);
            c = createGameAnimation(res.awardbox_json, "boxwait", 30);
            c.setPosition(0, -130);
            c.setTag(777);
            b.addChild(c, 1);
            d.setPosition(0, -170);
            b.addChild(d, 2);
            d = new cc.Sprite("#gamelevelscene/starboxdi.png");
            d.setPosition(0, -200);
            b.addChild(d);
            d = new cc.Sprite("#level/start1.png");
            d.setPosition(-50, -200);
            d.scale = 0.8;
            b.addChild(d);
            d = new cc.Sprite("#gamelevelscene/leafeffect5.png");
            d.scaleX = -1;
            d.scaleY = -1;
            d.setPosition(-30, -30);
            b.addChild(d);
            for (var d = heroData.gameUserData.maxLevelStart, e = 0, f = 0, g = d.length; f < g; f++) e += d[f];
            d = new cc.LabelTTF(e + "/" + starBoxGetArr[heroData.gameUserData.starBoxIndex], defaultTxt, 22);
            d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            d.setColor(cc.color(255, 245, 150));
            d.setPosition(10, -200);
            b.addChild(d);
            a = cc.pAdd(a.getPosition(), cc.p(110, 75 + heroData.gameUserData.starBoxIndex));
            b.setPosition(a);
            this.addChild(b, this.starboxIndex);
            this.showElementArr.push(b);
            this.starBoxNode = b;
            b.rotation = 2;
            b.runAction(cc.sequence(cc.rotateBy(2.5, -4).easing(cc.easeCubicActionInOut(0.5)), cc.rotateBy(2.5, 4).easing(cc.easeCubicActionInOut(0.5))).repeatForever());
            engine.gameEvent.createMouseUp(c, this.openStarBox.bind(this), buttonScalingType, cc.rect(-60, -60, 120, 120))
        },
        openStarBox: function() {
            for (var a = heroData.gameUserData.maxLevelStart, b = 0, c = 0, d = a.length; c < d; c++) b += a[c];
            if (b >= starBoxGetArr[heroData.gameUserData.starBoxIndex]) {
                this.starBoxNode.removeChildByTag(777);
                a = createGameAnimation(res.awardbox_json,
                    "boxopen", 30);
                a.setPosition(0, -135);
                a.playCount = 1;
                this.starBoxNode.addChild(a, 1);
                var e = this;
                a.steFrameComplete(function() {
                    e.starBoxNode.removeFromParent();
                    heroData.gameUserData.starBoxIndex++;
                    var a = {
                        diamond: 50,
                        item: "1006|2",
                        randompet: ""
                    };
                    addGiftShowUIWithOb(a, function() {
                        heroData.buyGift(a);
                        currentScene.refresh()
                    })
                })
            } else showAlterInfo(engine.gameData.dataDic.language[230].content)
        },
        oldChangeY: 999,
        setY: function(a) {
            this.y = a;
            this.skyBg.y = ~~(0.8 * -this.y);
            var b = 0;
            if (!(100 > Math.abs(a - this.oldChangeY))) {
                this.oldChangeY =
                    a;
                this.showElementArr.forEach(function(c) {
                    c.visible = -600 < c.y + a && 1150 > c.y + a;
                    c.visible && b++
                });
                var c = 0;
                this.showSkyElementArr.forEach(function(a) {
                    var b = a.parent.convertToWorldSpaceAR(a.getPosition());
                    a.visible = -150 < b.y && 1900 > b.y;
                    a.visible && c++
                })
            }
        },
        createEndlessHeart: function(a) {
            var b = new cc.Node,
                c = new cc.Sprite("#gamelevelscene/tempheartline.png");
            c.setAnchorPoint(0.5, 1);
            c.setPosition(-10, 0);
            var d = new cc.Sprite("#gamelevelscene/tempheartfront.png");
            b.addChild(c, 0);
            c = new cc.Sprite("#gamelevelscene/tempheartshadow.png");
            c.setPosition(15, -110);
            b.addChild(c);
            c = new cc.Sprite("#gamelevelscene/tempheart.png");
            c.setPosition(0, -120);
            c.setTag(777);
            b.addChild(c, 1);
            d.setPosition(0, -145);
            b.addChild(d, 2);
            this.endlessHeart = b;
            this.heartSp = c;
            a = cc.pAdd(a.getPosition(), cc.p(0, -30));
            b.setPosition(a);
            this.addChild(b, this.starboxIndex);
            this.showElementArr.push(b);
            b.rotation = 4;
            b.runAction(cc.sequence(cc.rotateBy(3, -8).easing(cc.easeCubicActionInOut(0.5)), cc.rotateBy(3, 8).easing(cc.easeCubicActionInOut(0.5))).repeatForever());
            engine.gameEvent.createMouseUp(c,
                function() {
                    showAlterInfo(engine.gameData.dataDic.language[226].content)
                }, buttonScalingType, cc.rect(-60, -60, 120, 120))
        },
        showHeartFly: function() {
            var a = this.heartSp.getPosition(),
                a = this.endlessHeart.convertToWorldSpaceAR(a),
                b = new cc.Sprite("#gamelevelscene/tempheart.png");
            b.setPosition(a);
            currentScene.addChild(b);
            this.endlessHeart.removeFromParent();
            b.runAction(cc.sequence(cc.moveTo(0.5, cc.p(555, 700)), cc.callFunc(function() {
                b.removeFromParent();
                currentScene.showEndLessHeartOpen()
            })))
        }
    });
var GamePlayPetLayer = cc.Layer.extend({
    currentPetId: 0,
    pet: null,
    actionArr: [],
    playActionArr: [EVENTMGR_ID.MONSTER_ENTER, EVENTMGR_ID.MONSTER_WAIT, EVENTMGR_ID.MONSTER_COLLECT, EVENTMGR_ID.MONSTER_WORRY, EVENTMGR_ID.MONSTER_WIN, EVENTMGR_ID.MONSTER_FAIL],
    isPlayComplete: !0,
    actionSeqOb: {},
    playWinOrFail: !1,
    playWorry: !1,
    otherUIPet: null,
    resetToWorry: !1,
    worryArr: [],
    winArr: [],
    failArr: [],
    facade: null,
    ctor: function(a) {
        this._super();
        this.facade = a;
        this.worryArr = [
            [16, 72],
            [13, 68],
            [25, 44],
            [17, 58],
            [16, 71],
            [21, 78]
        ];
        this.winArr = [
            [16, 46],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [16, 49]
        ];
        this.failArr = [
            [16, 55],
            [31, 97],
            [29, 60],
            [24, 140],
            [16, 93],
            [21, 56]
        ]
    },
    onEnter: function() {
        this._super();
        var a = this;
        this.playActionArr.forEach(function(b) {
            EventMgr.register(b, function() {
                a.playAction(b)
            }, null)
        });
        EventMgr.register(EVENTMGR_ID.MONSTER_RESET_WORRY, function(b) {
            a.resetToWorry = !0;
            a.playAction(EVENTMGR_ID.MONSTER_WORRY)
        });
        EventMgr.register(EVENTMGR_ID.MONSTER_RESET_WAIT, function() {
            a.isPlayComplete = !0;
            a.playWorry = !1;
            a.playAction(EVENTMGR_ID.MONSTER_WAIT)
        });
        EventMgr.register(EVENTMGR_ID.MONSTER_SHOW_ON_UI, function(b) {
            b.needHideOld && (a.pet.visible = !1);
            a.currentPetId || (a.currentPetId = "time");
            var c = res; - 1 != [2, 3, 4, 5, 6].indexOf(a.currentPetId) && (c = StepRes);
            a.otherUIPet = createGameAnimation(c["pet" + a.currentPetId + "_json"], "pet" + a.currentPetId + "_" + b.action, 24);
            a.otherUIPet.setPosition(b.pos);
            b.ui.addChild(a.otherUIPet);
            a.otherUIPet.playCount = -1;
            b.action == EVENTMGR_ID.MONSTER_FAIL && (a.otherUIPet.scale = 1.5);
            (b = b.action == EVENTMGR_ID.MONSTER_WIN ? a.winArr[a.currentPetId -
                1] : a.failArr[a.currentPetId - 1]) && 0 != b[0] && 0 != b[1] && a.otherUIPet.fromFrameIndexToPlayFrameIndex(b[0] - 1, b[1] - 1)
        }, null);
        EventMgr.register(EVENTMGR_ID.MONSTER_CLEAR_ON_UI, function() {
            null != a.otherUIPet && (a.otherUIPet.removeFromParent(), a.otherUIPet = null)
        }, null)
    },
    onExit: function() {
        this._super();
        this.playActionArr.forEach(function(a) {
            EventMgr.remove(a, null)
        });
        EventMgr.remove(EVENTMGR_ID.MONSTER_RESET_WORRY, null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_RESET_WAIT, null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_SHOW_ON_UI,
            null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_CLEAR_ON_UI, null)
    },
    playAction: function(a) {
        if (this.resetToWorry) this.resetToWorry = !1;
        else if (this.playWinOrFail || a != EVENTMGR_ID.MONSTER_WIN || (this.playWorry = !1), (this.playWinOrFail || !this.isPlayComplete || this.playWorry) && a != EVENTMGR_ID.MONSTER_WIN && a != EVENTMGR_ID.MONSTER_FAIL) return;
        a != EVENTMGR_ID.MONSTER_WAIT && (this.isPlayComplete = !1);
        this.pet && (this.pet.removeFromParent(), this.pet = null);
        var b = this.facade.gameLevelData.petId;
        2 == selectType && (b = "time");
        this.currentPetId =
            b;
        var c = res; - 1 != [2, 3, 4, 5, 6].indexOf(b) && (c = StepRes);
        this.pet = createGameAnimation(c["pet" + b + "_json"], "pet" + b + "_" + a, 24);
        2 == selectType ? this.pet.setPosition(320, 970) : this.pet.setPosition(320, 830);
        this.addChild(this.pet);
        var d = this;
        a == EVENTMGR_ID.MONSTER_ENTER && (this.pet.playCount = 1, this.pet.frameCompleteFun = function() {
            d.isPlayComplete = !0;
            d.playAction(EVENTMGR_ID.MONSTER_WAIT)
        });
        a == EVENTMGR_ID.MONSTER_COLLECT && (this.pet.playCount = 1, this.pet.frameCompleteFun = function() {
            d.isPlayComplete = !0;
            d.checkPlayWaitOrWorry()
        });
        a == EVENTMGR_ID.MONSTER_WORRY && (2 == selectType ? (this.pet.playCount = 1, this.pet.frameCompleteFun = function() {
            d.isPlayComplete = !0;
            d.playAction(EVENTMGR_ID.MONSTER_WAIT)
        }) : (this.playWorry = this.isPlayComplete = !0, this.pet.playCount = -1, b = this.worryArr[this.currentPetId - 1], "time" != this.currentPetId && this.pet.fromFrameIndexToPlayFrameIndex(b[0] - 1, b[1] - 1)));
        if (a == EVENTMGR_ID.MONSTER_WIN || a == EVENTMGR_ID.MONSTER_FAIL) this.playWinOrFail = !0, this.pet.playCount = -1, b = a == EVENTMGR_ID.MONSTER_WIN ? this.winArr[this.currentPetId -
            1] : this.failArr[this.currentPetId - 1], 0 != b[0] && 0 != b[1] && this.pet.fromFrameIndexToPlayFrameIndex(b[0] - 1, b[1] - 1)
    },
    checkPlayWaitOrWorry: function() {
        5 >= this.facade.gameLevelData.step ? this.playAction(EVENTMGR_ID.MONSTER_WORRY) : this.playAction(EVENTMGR_ID.MONSTER_WAIT)
    }
});
var MainSceneFriendInviteLayer = cc.Layer.extend({
    parentUI: null,
    mainUI: null,
    getFriendsData: !1,
    selectIndex: 1,
    onEnter: function() {
        this._super()
    },
    init: function(a) {
        this.parentUI = a;
        this.mainUI = a.invitefriends;
        engine.gameEvent.createMouseUp(this.mainUI.unselect1, this.changeSelectIndex.bind(this, this.mainUI.unselect1), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.unselect2, this.changeSelectIndex.bind(this, this.mainUI.unselect2), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.detailbtn,
            this.openDetailPanel.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.invitebtn, this.inviteFriend.bind(this), buttonScalingType);
        gameSDK.getConnectedPlayerEntriesAsync(RANK_STAR, 100, 0);
        this.schedule(this.checkGetRankData.bind(this), 0.2);
        this.updateSelectBtnStatus();
        heroData.missionData.detailOpenHandle = this.openDetailPanel.bind(this)
    },
    onExit: function() {
        this._super();
        this.unscheduleAllCallbacks()
    },
    onInviteMainClickTime: 0,
    inviteFriend: function() {
        var a = new Date;
        2E3 > a.getTime() -
            this.onInviteMainClickTime || (this.onInviteMainClickTime = a.getTime(), myGameTool.logEvent("rankListInvite"), gameSDK.sendFaceBookFriend())
    },
    checkGetRankData: function() {
        var a = gameSDK.getPlayerEntriesboardLeaderboardData(RANK_STAR);
        if (a) {
            for (var b = 0; b < a.length; b++) a[b].id == gameSDK.sdkPlayInfo.id && (a[b].score = heroData.getLevelStartCount());
            a.sort(function(a, b) {
                return b.score - a.score
            });
            this.getFriendsData = !0;
            this.unscheduleAllCallbacks();
            this.showInviteInfo()
        }
    },
    changeSelectIndex: function(a) {
        a = a._name.slice(-1);
        a != this.selectIndex && (this.selectIndex = a, this.updateSelectBtnStatus())
    },
    updateSelectBtnStatus: function() {
        this.mainUI.unselect2.visible = this.mainUI.select1.visible = 1 == this.selectIndex;
        this.mainUI.select2.visible = this.mainUI.unselect1.visible = 1 != this.selectIndex;
        this.updateInfo()
    },
    showInviteInfo: function() {
        for (var a = gameSDK.getPlayerEntriesboardLeaderboardData(RANK_STAR), b = Math.min(a.length, 4), c = 0; c < b; c++) {
            var d = this.createItem(a[c], c);
            d.setPosition(220 + 115 * c, 50);
            d.setTag(c + 100);
            this.mainUI.showItem.addChild(d)
        }
        this.updateInfo()
    },
    createItem: function(a, b) {
        var c = new cc.Node;
        c.data = a;
        var d = new MyLoadHeadSprite;
        d.willPos = cc.p(0, 39);
        var e = new cc.Sprite("#sooninvite/touxiangkuang_b.png");
        e.setPosition(cc.pAdd(d.willPos, cc.p(0, 0)));
        c.addChild(e);
        d.loadComplete = function(a) {
            a.setPosition(this.willPos);
            c.addChild(a, 98)
        };
        d.setPNGUrl(a.photo, 58);
        e = new cc.Sprite("#sooninvite/sooninvite" + (b + 1) + ".png");
        e.setPosition(-30, 60);
        c.addChild(e, 100);
        e = a.name;
        10 < e.length && (e = e.slice(0, 8) + "..");
        e = new cc.LabelTTF(e, defaultTxt, 16);
        e.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        e.setColor(cc.color(111, 36, 46));
        e.setPosition(0, -5);
        c.addChild(e);
        e = new cc.Sprite("#sooninvite/star_di_s.png");
        e.setAnchorPoint(cc.p(0, 0.5));
        c.addChild(e);
        e.x = -45;
        e.y = -30;
        var f = new cc.Sprite("#rank/star.png");
        e.addChild(f);
        f.x = 12;
        f.y = 17;
        var g = new GameArtWord("rankstarfnt", 17, 28);
        g.alignmentType = artWordLeft;
        e.addChild(g);
        a.allStarNum || (a.allStarNum = 0);
        g.setString(a.score + "");
        g.scale = 0.8;
        g.x = f.x + f.getContentSize().width / 2 + 7;
        g.y = f.y - 4;
        e = new cc.Sprite;
        e.setPosition(24, 13);
        e.setTag(9527);
        c.addChild(e,
            99);
        engine.gameEvent.createMouseUp(c, this.clickInviteItem.bind(this, c), buttonScalingType, cc.rect(d.willPos.x - 50, d.willPos.y - 50, 100, 100));
        return c
    },
    onInviteClickTime: 0,
    clickInviteItem: function(a) {
        if (1 != this.selectIndex || -1 == heroData.gameUserData.inviteGetGemArr.indexOf(a.data.id))
            if (2 != this.selectIndex || myGameTool.getCanInvite(a.data.id, !0)) {
                var b = new Date;
                if (!(2E3 > b.getTime() - this.onInviteClickTime)) {
                    this.onInviteClickTime = b.getTime();
                    var c = a.getChildByTag(9527).getPosition(),
                        c = a.convertToWorldSpaceAR(c),
                        d = this,
                        b = function() {
                            heroData.missionData.recordData(9, 1);
                            1 == d.selectIndex && (myGameTool.logEvent("inviteAddGem"), heroData.gameUserData.inviteGetGemArr.push(a.data.id), heroData.updateGem(15), myGameTool.createInviteFlyEffect(c, d.selectIndex));
                            2 == d.selectIndex && (myGameTool.logEvent("inviteSendStr"), heroData.missionData.recordData(7, 1), heroData.gameUserData.inviteStrOb[a.data.id] = heroData.gameUserData.inviteStrOb[a.data.id] || {}, heroData.gameUserData.inviteStrOb[a.data.id].send = (new Date).getTime());
                            a.getChildByTag(9527).visible = !1;
                            saveHeroData()
                        },
                        e = {
                            pngData: [{
                                url: "res/invitefriends.jpg",
                                posX: 0,
                                posY: 0,
                                imgWidth: 750,
                                imgHeight: 440
                            }],
                            fontData: [],
                            width: 750,
                            height: 440
                        };
                    e.playerid = a.data.id;
                    e.updateAsyncTemplate = "play_turn";
                    e.updateAsyncText = "Your friend is challenging you";
                    e.data = {};
                    e.data.id = gameSDK.sdkPlayInfo.id;
                    e.data.photo = gameSDK.sdkPlayInfo.photo;
                    e.data.name = gameSDK.sdkPlayInfo.name;
                    e.data.score = 0;
                    4832 == a.data.id ? gameSDK.sendFaceBookFriend(b) : gameSDK.appointFaceBookFriend(b, e)
                }
            }
    },
    updateInfo: function() {
        if (this.getFriendsData)
            for (var a =
                    0; 5 > a; a++) {
                var b = this.mainUI.showItem.getChildByTag(a + 100);
                b && this.updateItem(b)
            }
    },
    updateItem: function(a) {
        var b = a.getChildByTag(9527);
        b.setSpriteFrame(1 == this.selectIndex ? "achievement/gem1.png" : "sooninvite/sooninvitelove.png");
        b.scale = 1 == this.selectIndex ? 0.8 : 1;
        b.visible = !0;
        1 == this.selectIndex && -1 != heroData.gameUserData.inviteGetGemArr.indexOf(a.data.id) && (b.visible = !1);
        2 != this.selectIndex || myGameTool.getCanInvite(a.data.id, !0) || (b.visible = !1)
    },
    openDetailPanel: function(a) {
        this.getFriendsData && ("number" ==
            typeof a && (this.selectIndex = a, this.updateSelectBtnStatus()), a = new DetailFriendInvitePanel, a.init(this.selectIndex, this.updateInfo.bind(this)), this.parentUI.addChild(a))
    }
});
var DetailFriendInvitePanel = cc.Layer.extend({
    mainUI: null,
    selectIndex: 1,
    friendSpList: [],
    updateHomeScenePanelFun: null,
    onEnter: function() {
        this._super()
    },
    init: function(a, b) {
        this.selectIndex = a;
        this.updateHomeScenePanelFun = b;
        var c = new cc.DrawNode;
        c.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        this.addChild(c, -1);
        engine.gameEvent.createMouseDown(this, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
        c = engine.gameCocosStudio.loadCSS(res.detailInviteFriendPanel,
            !1);
        this.addChild(c);
        this.mainUI = c.invitefriends;
        this.runAction(cc.moveTo(0.3, cc.p(0, 695)));
        engine.gameEvent.createMouseUp(this.mainUI.selectindexbtn1, this.changeSelectIndex.bind(this, this.mainUI.selectindexbtn1), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.selectindexbtn2, this.changeSelectIndex.bind(this, this.mainUI.selectindexbtn2), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.detailbtn, this.closeDetailPanel.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.invitebtn,
            this.inviteFriend.bind(this), buttonScalingType);
        this.updateSelectBtnStatus();
        this.buildList();
        this.scheduleUpdate()
    },
    buildList: function() {
        this.friendInfoLayer = new cc.Layer;
        var a = new cc.DrawNode;
        a.drawRect(cc.p(0, -125), cc.p(840, 540), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
        a.y = -430;
        a.x = -210;
        a = createClippingNode(0.5, 0.5, 0, 0, 1, !1, a);
        a.addChild(this.friendInfoLayer);
        this.mainUI.showItem.addChild(a, -1);
        a.x = 200;
        a.y = -10;
        engine.gameEvent.createMouseDown(this.friendInfoLayer, this.clickDownFun.bind(this, this.friendInfoLayer),
            null, cc.rect(-210, -22555, 840, 22540));
        engine.gameEvent.createMouseMove(this.friendInfoLayer, this.clickMoveFun.bind(this, this.friendInfoLayer), null, cc.rect(-210, -22555, 840, 22540));
        this.creatRankNode()
    },
    creatRankNode: function() {
        this.friendInfoLayer && this.friendInfoLayer.removeAllChildren();
        this.updateFunArr = [];
        this.dataList = gameSDK.getPlayerEntriesboardLeaderboardData(RANK_STAR);
        for (var a = 0; a < this.dataList.length; a++) {
            var b = this.dataList[a];
            b.index = a + 1;
            var c;
            1 == this.selectIndex ? (c = new InviteFriendGemNode,
                c.initialize(b, a + 1)) : (c = new InviteFriendLifeNode, b = c.initialize(b, a + 1), this.updateFunArr.push(b));
            this.friendInfoLayer.addChild(c);
            c.x = 120;
            c.y = 50 - 105 * a;
            this.friendSpList.push(c)
        }
    },
    onInviteClickTime: 0,
    inviteFriend: function() {
        var a = new Date;
        2E3 > a.getTime() - this.onInviteClickTime || (this.onInviteClickTime = a.getTime(), myGameTool.logEvent("rankListInvite"), gameSDK.sendFaceBookFriend())
    },
    changeSelectIndex: function(a) {
        a = a._name.slice(-1);
        a != this.selectIndex && (this.selectIndex = a, this.updateSelectBtnStatus(),
            this.creatRankNode(), this.moveSetY(0))
    },
    updateSelectBtnStatus: function() {
        this.mainUI.unselect2.visible = this.mainUI.select1.visible = 1 == this.selectIndex;
        this.mainUI.select2.visible = this.mainUI.unselect1.visible = 1 != this.selectIndex
    },
    clickDownFun: function(a, b) {
        a.moveY = b.getLocation().y
    },
    clickMoveFun: function(a, b) {
        var c = b.getLocation(),
            d = a.y - (a.moveY - c.y);
        a.moveY = c.y;
        this.moveSetY(d)
    },
    moveSetY: function(a) {
        0 > a && (a = 0);
        var b = this.friendSpList.length - 3;
        0 > b && (b = 0);
        a > 120 * b && (a = 120 * b);
        this.friendInfoLayer.y =
            a;
        var c = this;
        this.friendSpList.forEach(function(a) {
            var b = c.friendInfoLayer.y + a.y;
            a.visible = 170 > b && -580 < b
        })
    },
    timeCount: 0,
    updateFunArr: [],
    update: function(a) {
        this.timeCount += a;
        if (1 < this.timeCount)
            for (this.timeCount -= 1, a = 0; a < this.updateFunArr.length; a++) this.updateFunArr[a]()
    },
    closeDetailPanel: function() {
        var a = this;
        this.runAction(cc.sequence(cc.moveTo(0.3, cc.p(0, 0)), cc.callFunc(function() {
            a.updateHomeScenePanelFun && a.updateHomeScenePanelFun()
        }), cc.removeSelf()))
    }
});
var InviteFriendGemNode = cc.Sprite.extend({
    data: null,
    onEnter: function() {
        this._super()
    },
    initialize: function(a, b) {
        this.data = a;
        if (0 == a.rank % 2) {
            var c = new ccui.ImageView("sooninvite/tiao_9gg.png", ccui.Widget.PLIST_TEXTURE);
            c.setScale9Enabled(!0);
            c.setContentSize(cc.size(608, 107));
            this.addChild(c)
        }
        rankicon = new GameArtWord("rankscorefnt", 20, 55);
        rankicon.alignmentType = artWordMiddle;
        rankicon.setString(b.toString());
        rankicon.x = -250;
        this.addChild(rankicon);
        var d = this,
            c = new MyLoadHeadSprite;
        c.loadComplete = function(a) {
            a.setPosition(-180,
                1);
            d.addChild(a, 99)
        };
        c.setPNGUrl(a.photo, 58);
        c = new cc.Sprite("#sooninvite/touxiangkuang_b.png");
        c.setPosition(-180, 1);
        this.addChild(c, 98);
        c = a.name;
        12 < c.length && (c = c.slice(0, 10) + "..");
        c = new cc.LabelTTF(myGameTool.cutName(c), defaultTxt, 24);
        this.addChild(c);
        c.setAnchorPoint(0, 0.5);
        c.setColor(cc.color(110, 47, 50));
        c.x = -130;
        c.y = 0;
        c = new cc.Sprite("#rank/starbg.png");
        c.setAnchorPoint(cc.p(0, 0.5));
        this.addChild(c);
        c.x = 130;
        c.y = 0;
        var e = new cc.Sprite("#rank/star.png");
        c.addChild(e);
        e.x = 16;
        e.y = 17;
        var f = new GameArtWord("rankstarfnt",
            17, 28);
        f.alignmentType = artWordLeft;
        c.addChild(f);
        a.allStarNum || (a.allStarNum = 0);
        f.setString(a.score + "");
        f.x = e.x + e.getContentSize().width / 2 + 22;
        f.y = e.y;
        c = new cc.Sprite("#achievement/gem1.png");
        c.setPosition(70, -5);
        this.addChild(c, 99); - 1 != heroData.gameUserData.inviteGetGemArr.indexOf(this.data.id) && (c.visible = !1);
        engine.gameEvent.createMouseUp(c, this.clickInviteItem.bind(this, c), buttonScalingType, cc.rect(c.x - 50, c.y - 50, 100, 100))
    },
    onInviteClickTime: 0,
    clickInviteItem: function(a) {
        if (-1 == heroData.gameUserData.inviteGetGemArr.indexOf(this.data.id)) {
            var b =
                new Date;
            if (!(2E3 > b.getTime() - this.onInviteClickTime)) {
                this.onInviteClickTime = b.getTime();
                var c = a.getPosition();
                c.x -= 70;
                var c = a.convertToWorldSpaceAR(c),
                    d = this,
                    b = function() {
                        myGameTool.logEvent("detailInviteAddGem");
                        heroData.missionData.recordData(9, 1);
                        heroData.gameUserData.inviteGetGemArr.push(d.data.id);
                        heroData.updateGem(15);
                        a.visible = !1;
                        saveHeroData();
                        myGameTool.createInviteFlyEffect(c, 1)
                    },
                    e = {
                        pngData: [{
                            url: "res/invitefriends.jpg",
                            posX: 0,
                            posY: 0,
                            imgWidth: 750,
                            imgHeight: 440
                        }],
                        fontData: [],
                        width: 750,
                        height: 440
                    };
                e.playerid = this.data.id;
                e.updateAsyncTemplate = "play_turn";
                e.updateAsyncText = "Your friend is challenging you";
                e.data = {};
                e.data.id = gameSDK.sdkPlayInfo.id;
                e.data.photo = gameSDK.sdkPlayInfo.photo;
                e.data.name = gameSDK.sdkPlayInfo.name;
                e.data.score = 0;
                4832 == this.data.id ? gameSDK.sendFaceBookFriend(b) : gameSDK.appointFaceBookFriend(b, e)
            }
        }
    }
});
var InviteFriendLifeNode = cc.Sprite.extend({
    data: null,
    sendBtn: null,
    requestBtn: null,
    onEnter: function() {
        this._super()
    },
    initialize: function(a, b) {
        this.data = a;
        if (0 == a.rank % 2) {
            var c = new ccui.ImageView("sooninvite/tiao_9gg.png", ccui.Widget.PLIST_TEXTURE);
            c.setScale9Enabled(!0);
            c.setContentSize(cc.size(608, 107));
            this.addChild(c)
        }
        rankicon = new GameArtWord("rankscorefnt", 20, 55);
        rankicon.alignmentType = artWordMiddle;
        rankicon.setString(b.toString());
        rankicon.x = -250;
        this.addChild(rankicon);
        var d = this,
            c = new MyLoadHeadSprite;
        c.loadComplete = function(a) {
            a.setPosition(-180, 1);
            d.addChild(a, 99)
        };
        c.setPNGUrl(a.photo, 58);
        c = new cc.Sprite("#sooninvite/touxiangkuang_b.png");
        c.setPosition(-180, 1);
        this.addChild(c, 98);
        c = a.name;
        12 < c.length && (c = c.slice(0, 10) + "..");
        c = new cc.LabelTTF(myGameTool.cutName(c), defaultTxt, 24);
        this.addChild(c);
        c.setAnchorPoint(0, 0.5);
        c.setColor(cc.color(110, 47, 50));
        c.x = -130;
        c.y = 0;
        this.sendBtn = new cc.Sprite("#sooninvite/anniu_ph.png");
        this.sendBtn.setPosition(80, 0);
        this.addChild(this.sendBtn);
        c = new cc.Sprite("#sooninvite/sooninvitelove.png");
        c.setPosition(40, 41);
        this.sendBtn.addChild(c, 0, 1);
        c = new cc.Sprite("#sooninvite/Send.png");
        c.setPosition(90, 41);
        this.sendBtn.addChild(c, 0, 2);
        c = new cc.LabelTTF("00:00:00", defaultTxt, 30);
        c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        c.setColor(cc.color(255, 255, 255));
        c.setPosition(75, 45);
        this.sendBtn.addChild(c, 0, 3);
        this.requestBtn = new cc.Sprite("#sooninvite/anniu_ph.png");
        this.requestBtn.setPosition(230, 0);
        this.addChild(this.requestBtn);
        c = new cc.Sprite("#sooninvite/sooninvitelove2.png");
        c.setPosition(25,
            41);
        this.requestBtn.addChild(c, 0, 1);
        c = new cc.Sprite("#sooninvite/Request.png");
        c.setPosition(90, 41);
        this.requestBtn.addChild(c, 0, 2);
        c = new cc.LabelTTF("00:00:00", defaultTxt, 30);
        c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        c.setColor(cc.color(255, 255, 255));
        c.setPosition(75, 45);
        this.requestBtn.addChild(c, 0, 3);
        engine.gameEvent.createMouseUp(this.sendBtn, this.clickInviteItem.bind(this, this.sendBtn), buttonScalingType);
        engine.gameEvent.createMouseUp(this.requestBtn, this.clickInviteItem.bind(this, this.requestBtn),
            buttonScalingType);
        this.updateFun();
        return this.updateFun.bind(this)
    },
    onInviteClickTime: 0,
    clickInviteItem: function(a) {
        if (a != this.sendBtn || myGameTool.getCanInvite(this.data.id, !0))
            if (a != this.requestBtn || myGameTool.getCanInvite(this.data.id, !1)) {
                var b = new Date;
                if (!(1E3 > b.getTime() - this.onInviteClickTime)) {
                    this.onInviteClickTime = b.getTime();
                    var c = a.getChildByTag(1).getPosition();
                    c.x -= 70;
                    c.y -= 20;
                    var c = a.convertToWorldSpaceAR(c),
                        d = this,
                        b = function() {
                            heroData.missionData.recordData(9, 1);
                            heroData.gameUserData.inviteStrOb[d.data.id] =
                                heroData.gameUserData.inviteStrOb[d.data.id] || {};
                            a == d.sendBtn ? (heroData.missionData.recordData(7, 1), myGameTool.logEvent("detailInviteSendStr"), heroData.gameUserData.inviteStrOb[d.data.id].send = (new Date).getTime()) : (heroData.missionData.recordData(8, 1), myGameTool.logEvent("detailInviteRequestStr"), heroData.gameUserData.inviteStrOb[d.data.id].request = (new Date).getTime(), myGameTool.createInviteFlyEffect(c, 2));
                            saveHeroData();
                            d.updateFun()
                        },
                        e = {
                            pngData: [{
                                url: "res/invitefriends.jpg",
                                posX: 0,
                                posY: 0,
                                imgWidth: 750,
                                imgHeight: 440
                            }],
                            fontData: [],
                            width: 750,
                            height: 440
                        };
                    e.playerid = this.data.id;
                    e.updateAsyncTemplate = "play_turn";
                    e.updateAsyncText = "Your friend is challenging you";
                    e.data = {};
                    e.data.id = gameSDK.sdkPlayInfo.id;
                    e.data.photo = gameSDK.sdkPlayInfo.photo;
                    e.data.name = gameSDK.sdkPlayInfo.name;
                    e.data.score = 0;
                    4832 == this.data.id ? gameSDK.sendFaceBookFriend(b) : gameSDK.appointFaceBookFriend(b, e)
                }
            }
    },
    updateFun: function() {
        if (this.data.id == gameSDK.sdkPlayInfo.id) this.requestBtn.visible = this.sendBtn.visible = !1;
        else {
            var a = myGameTool.getInviteTime(this.data.id,
                !0);
            0 < a ? (this.sendBtn.getChildByTag(1).visible = this.sendBtn.getChildByTag(2).visible = !1, this.sendBtn.getChildByTag(3).visible = !0, this.sendBtn.getChildByTag(3).string = this.timeToString(a), this.sendBtn.setSpriteFrame("sooninvite/anniu_ph_h.png")) : (this.sendBtn.getChildByTag(1).visible = this.sendBtn.getChildByTag(2).visible = !0, this.sendBtn.getChildByTag(3).visible = !1, this.sendBtn.setSpriteFrame("sooninvite/anniu_ph.png"));
            a = myGameTool.getInviteTime(this.data.id, !1);
            0 < a ? (this.requestBtn.getChildByTag(1).visible =
                this.requestBtn.getChildByTag(2).visible = !1, this.requestBtn.getChildByTag(3).visible = !0, this.requestBtn.getChildByTag(3).string = this.timeToString(a), this.requestBtn.setSpriteFrame("sooninvite/anniu_ph_h.png")) : (this.requestBtn.getChildByTag(1).visible = this.requestBtn.getChildByTag(2).visible = !0, this.requestBtn.getChildByTag(3).visible = !1, this.requestBtn.setSpriteFrame("sooninvite/anniu_ph.png"))
        }
    },
    timeToString: function(a) {
        var b = ~~((a + 1E3 * sendStrTime - (new Date).getTime()) / 1E3);
        a = ("0" + ~~(b / 3600)).slice(-2);
        var c;
        c = ("0" + ~~(b % 3600 / 60)).slice(-2);
        b = ("0" + b % 3600 % 60).slice(-2);
        return a + ":" + c + ":" + b
    }
});
var SignLayer = cc.Layer.extend({
    awardArr: [{
            diamond: 15
        }, {
            1006: 1
        }, {
            diamond: 30
        }, {
            1007: 2
        }, {
            diamond: 50
        }, {
            1009: 1
        },
        [{
            diamond: 100
        }, {
            1006: 1
        }, {
            1001: 2
        }]
    ],
    nowSignTime: -1,
    closeFun: null,
    ctor: function(a) {
        this._super();
        this.closeFun = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        var a = new cc.DrawNode;
        a.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        var b = new cc.Sprite;
        b.addChild(a);
        this.addChild(b, -1);
        engine.gameEvent.createMouseDown(b,
            function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
        this.mainUI = engine.gameCocosStudio.loadCSS(StepRes.signLayer, !1);
        this.mainUI.setPosition(this.mainUI.width >> 1, this.mainUI.height >> 1);
        this.addChild(this.mainUI);
        this.flushInfo();
        engine.gameEvent.createMouseUp(this.mainUI.signBtn, this.onSign.bind(this), buttonScalingType);
        //engine.gameEvent.createMouseUp(this.mainUI.share_hole, this.onChangeShare.bind(this), buttonScalingType);
        this.mainUI.setAnchorPoint(0.5, 0.5);
        this.mainUI.scale = 0.12;
        this.mainUI.runAction(cc.sequence(cc.scaleTo(5 /
            28, 1.13, 1.13), cc.scaleTo(0.25, 0.95, 0.95), cc.scaleTo(8 / 28, 1, 1)))
    },
    flushInfo: function() {
        var a = heroData.gameUserData.signTime % 7;
        this.nowSignTime = a + 1;
        this.nowSignTime = cc.clampf(this.nowSignTime, 1, 7);
        for (var b = 1; 7 >= b; b++) {
            this.nowSignTime == b ? (this.mainUI["day" + b].todayselect.visible = !0, this.mainUI["day" + b].day1_5.setSpriteFrame("sign/Today.png")) : this.mainUI["day" + b].todayselect.visible = !1;
            var c = this.awardArr[b - 1];
            if (7 != b) {
                for (var d in c) this.mainUI["day" + b].itemicon.setSpriteFrame("item/" + d + ".png"), this.mainUI["day" +
                    b].awardnum.string = "x " + c[d];
                this.mainUI["day" + b].itemget.visible = a >= b
            } else
                for (var e = 0, e = 0; e < c.length; e++)
                    for (d in c[e]) this.mainUI["day" + b]["itemicon" + e].setSpriteFrame("item/" + d + ".png"), this.mainUI["day" + b]["awardnum" + e].string = "x " + c[e][d]
        }
    },
    onSign: function() {
                var a = this;
                a.removeFromParent();
                heroData.gameUserData.signTime++;
                heroData.gameUserData.signDate = (new Date).getDate();
                var b = {
                        diamond: 0,
                        item: "",
                        randompet: ""
                    },
                    d = a.awardArr[a.nowSignTime - 1];
                if (d instanceof Array)
                    for (var e = 0; e < d.length; e++)
                        for (var f in d[e]) "diamond" ==
                            f ? b.diamond = d[e][f] : (0 < b.item.length && (b.item += "|"), b.item += f + "|" + d[e][f]);
                else
                    for (f in d) "diamond" == f ? b.diamond = d[f] : b.item = f + "|" + d[f];
                addGiftShowUIWithOb(b, function() {
                    heroData.buyGift(b);
                    currentScene.refresh();
                    a.closeFun && a.closeFun()
                })

    },
    onChangeShare: function() {
        this.mainUI.share_select.visible = !this.mainUI.share_select.visible
    }
});
var OtherSendHeartLayer = cc.Layer.extend({
    ctor: function(a) {
        this._super();
        this.closeFun = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        var a = new cc.DrawNode;
        a.drawRect(cc.p(0, 0), cc.p(gameWidth, gameHeigh), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        var b = new cc.Sprite;
        b.addChild(a);
        this.addChild(b, -1);
        engine.gameEvent.createMouseDown(b, function() {}, null, cc.rect(0, 0, gameWidth, gameHeigh));
        this.mainUI = engine.gameCocosStudio.loadCSS(res.receive_other_send_str_layer,
            !1);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.getBtn, this.getAndClose.bind(this, this.mainUI.getBtn), buttonScalingType)
    },
    getAndClose: function(a) {
        myGameTool.createInviteFlyEffect(a.getPosition(), 2);
        this.removeFromParent();
        this.closeFun && this.closeFun()
    }
});
var MissonLayer = cc.Layer.extend({
    mainUI: null,
    gamePlayFacade: null,
    giftMc: null,
    completeTxtLabel: null,
    ctor: function() {
        this._super();
        var a = new cc.DrawNode;
        a.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        this.addChild(a, -1);
        engine.gameEvent.createMouseDown(this, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
        this.mainUI = engine.gameCocosStudio.loadCSS(StepRes.daymisson);
        this.addChild(this.mainUI, 8);
        engine.gameEvent.createMouseDown(this.mainUI.btnClose,
            this.closeUI.bind(this), buttonScalingType);
        for (var a = [], b = 0; b < heroData.missionData.todayMissionArr.length; b++) {
            var c = new MissionListSprite(heroData.missionData.todayMissionArr[b]);
            c.x = 320;
            c.y = 730 - 160 * b;
            this.mainUI.lists.addChild(c);
            a.push(c)
        }
        for (b = 0; b < a.length; b++) c = a[b], inSceneByScale(c, 0.06 * b + 0.2, null);
        this.mainUI.x = -640;
        a = cc.callFunc(function() {});
        inSceneByLeft(this.mainUI, 0, a, 0);
        EventMgr.register(EVENTMGR_ID.MISSION_FINISH_FLY, this.showFlyEffect.bind(this), this);
        for (b = 1; b <= heroData.missionData.finishMissionArr.length; b++) this.mainUI.total["dm_icon" +
            b].setSpriteFrame("daymission/dm_icon.png");
        a = new cc.LabelTTF(heroData.missionData.finishMissionArr.length + "/5 Completed", defaultTxt, 24);
        a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        a.enableStroke(cc.color(106, 43, 42), 2);
        a.setColor(cc.color(255, 255, 255));
        a.setPosition(150, 55);
        this.mainUI.total.addChild(a);
        this.completeTxtLabel = a;
        heroData.gameUserData.getMissionLastAward ? (a = new cc.Sprite("#daymission/dm_gift_open.png"), a.setPosition(541, 945), this.mainUI.addChild(a), this.mainUI.total.getBtn.visible = !1) : (a = createGameAnimation(StepRes.mission_gift_json, "gift_normal", 30), a.setPosition(560, 950), this.mainUI.addChild(a), this.giftMc = a);
        EventMgr.register(EVENTMGR_ID.MISSION_REFRESH_TOTAL, this.refreshTotal.bind(this), this);
        engine.gameEvent.createMouseDown(this.mainUI.total.getBtn, this.getAward.bind(this), buttonScalingType);
        this.refreshTotal()
    },
    showEffectForbitClose: !1,
    getAward: function() {
        if (5 == heroData.missionData.finishMissionArr.length) {
            heroData.gameUserData.getMissionLastAward = !0;
            this.mainUI.total.getBtn.visible = !1;
            this.showEffectForbitClose = !0;
            this.giftMc.removeFromParent();
            var a = createGameAnimation(StepRes.mission_gift_json, "gift_open", 30);
            a.isRemoveFromComplete = !0;
            a.setPosition(560, 950);
            a.playCount = 1;
            this.mainUI.addChild(a);
            var b = this;
            myGameTool.logEvent("finishAllMission");
            a.frameFun = function(a) {
                if (45 == a) {
                    var d = {
                        diamond: 100,
                        item: "1006|2"
                    };
                    addGiftShowUIWithOb(d, function() {
                        heroData.buyGift(d);
                        currentScene.refresh()
                    })
                }
                65 == a && (a = new cc.Sprite("#daymission/dm_gift_open.png"), a.setPosition(541, 945), b.mainUI.addChild(a),
                    b.showEffectForbitClose = !1)
            }
        }
    },
    refreshTotal: function() {
        5 == heroData.missionData.finishMissionArr.length && (this.mainUI.total.getBtn.setSpriteFrame("daymission/dm_anniu_r.png"), this.mainUI.total.getBtn.btn_txt.setSpriteFrame("daymission/dm_GET_g.png"))
    },
    showFlyEffect: function(a) {
        var b = new cc.Sprite("#daymission/dm_icon.png");
        b.setPosition(a.pos);
        this.mainUI.effect.addChild(b);
        var c = heroData.missionData.finishMissionArr.length;
        this.completeTxtLabel.setString(c + "/5 Completed");
        var d = this.mainUI.total["dm_icon" +
                c].getPosition(),
            d = this.mainUI.total.convertToWorldSpace(d),
            d = this.mainUI.effect.convertToNodeSpace(d),
            e = this;
        b.runAction(cc.sequence(cc.moveTo(0.4, d), cc.removeSelf(), cc.callFunc(function() {
            e.mainUI.total["dm_icon" + c].setSpriteFrame("daymission/dm_icon.png");
            EventMgr.emit(EVENTMGR_ID.MISSION_REFRESH_TOTAL)
        })));
        outSceneByLeft(a.sp, 0, cc.callFunc(function() {
            EventMgr.emit(EVENTMGR_ID.MISSION_CHECK_NEED_MOVE_UP, a.sp.y);
            a.sp.y = 90;
            a.sp.endY = a.sp.y;
            inSceneByLeft(a.sp, 0, null, a.sp.x + 640)
        }), a.sp.x - 640)
    },
    closeUI: function(a) {
        if (!this.showEffectForbitClose) {
            var b =
                this;
            outSceneByLeft(this.mainUI, 0, cc.callFunc(function() {
                b.removeFromParent();
                EventMgr.remove(EVENTMGR_ID.MISSION_FINISH_FLY, b);
                EventMgr.remove(EVENTMGR_ID.MISSION_REFRESH_TOTAL, b);
                a && a instanceof Function && a()
            }), this.mainUI.x - 640)
        }
    }
});
var debugtest = {};
"FaceBookTest" == sdkName && (debugtest = {
    autoOpenLevel: 0,
    mustAppearShareInvite: 1,
    setMissionAllComplete: 0,
    noRecordMissionFinish: 0,
    skepTomorrow: 1,
    clearInviteInfo: 0,
    clearAchevement: 0,
    clearSignData: 0,
    showUpRank: 0,
    showTarget: 0,
    forceNewPlayer: 0,
    stopHideLoad: 0,
    forceLoadAll: 0,
    setOpenLevel: 0,
    showInviteAddHeartInfo: 0,
    rankSelfOutOf20: 0,
    testParachute: 0,
    targetBoxGetMuch: 0,
    setDayGift: 0,
    muchDiamond: 1,
    veryStrength: 1,
    showMailNum: 0,
    showWuxianHeart: 0,
    hideFlyEffect: 0,
    petSkill: 0,
    mustShowGuide: 0,
    muchItem: 0,
    starbox: 0,
    setTargetLevel: 0,
    timeModelTime: 0,
    showHeartFlyResetCreateTime: 0,
    oneStep: 0
});
cc.game.onStart = function() {
    cc.log("gameServerVersion", gameServerVersion);

    cc.view.resizeWithBrowserSize(true);

    //this property must set false,otherwise the view can't resize with broswer frame;
    cc.view._orientationChanging = false;

    initGameSDK();
    initHeroData();
    gameSDK.runSDK(iniGame)
};
var iniGame = function() {
    heroData.playerid = gameSDK.sdkPlayInfo.id;
    cc.view.enableRetina(!0);
    cc.view.adjustViewPort(!0);
    !1 == cc.sys.isMobile ? cc.view.setDesignResolutionSize(gameWidth, gameHeigh, cc.ResolutionPolicy.SHOW_ALL) : cc.view.setDesignResolutionSize(gameWidth, gameHeigh, cc.ResolutionPolicy.EXACT_FIT);
    cc.view.resizeWithBrowserSize(!0);
    readInitGameValue();
    initEngine();
    initGameLocalData();
    initGameUserData();
    cc.log("开始获取FB存储信息");
    heroData.readyMissionData();
    gameSDK.getUserData([fbSaveDataKey],
        function(a) {
            function b() {
                initGameUserData_last();
                heroData.initialize();
                heroData.targetData.initialize();
                initRes();
                transitionGameLevelScene()
            }
            null == a || debugtest.forceNewPlayer ? (gameSDK.logEvent("newPlayer", 1, {
                newPlayer: "newPlayer"
            }), cc.warn("新号"), b()) : (cc.warn("老号"), initGameUserData(a[fbSaveDataKey]), b(), gameSDK.logEvent("continuePlayer", 1, {
                continuePlayer: "continuePlayer"
            }))
        })
};
cc.game.run();
var MyTool_stepLoadCheckTool = {
    baseRes: ["res/imglist/load_by_open.plist", "res/imglist/load_by_open.png"],
    loadedArr: [],
    autoCheckLoaded: function(a, b) {
        if (-1 != this.loadedArr.indexOf(a)) b();
        else {
            addLoadingCircle();
            this.baseRes.push({
                gift: res_open_load.giftlayer,
                rank: res_open_load.gameranklayer,
                achievement: res_open_load.achievementlayer
            } [a]);
            var c = this;
            cc.loader.load(this.baseRes, function() {}, function() {
                1 < c.baseRes.length && cc.spriteFrameCache.addSpriteFrames("res/imglist/load_by_open.plist");
                c.loadedArr.push(a);
                b();
                c.baseRes = [];
                removeLoadingCircle()
            })
        }
    }
};